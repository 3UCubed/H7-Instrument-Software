
H7-LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fba8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fe40  0800fe40  0001fe40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe98  0800fe98  0001fe98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fea0  0800fea0  0001fea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fea4  0800fea4  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  0800fea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000053c  240000c0  0800ff4c  000200c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005fc  0800ff4c  000205fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a04  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036dd  00000000  00000000  00043ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  000471b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a38  00000000  00000000  00048d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b205  00000000  00000000  0004a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023fd5  00000000  00000000  00085945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001805f1  00000000  00000000  000a991a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00229f0b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007938  00000000  00000000  00229f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe28 	.word	0x0800fe28

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	0800fe28 	.word	0x0800fe28

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 f92e 	bl	8007888 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fa08 	bl	8007a70 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	240002a8 	.word	0x240002a8
 80006a0:	0800fe40 	.word	0x0800fe40
 80006a4:	0800fe4c 	.word	0x0800fe4c

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fa7e 	bl	800fbe0 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (step == 9)
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <do_auto_sweep+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d109      	bne.n	8000730 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <do_auto_sweep+0x84>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		  step--;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <do_auto_sweep+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <do_auto_sweep+0x80>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00c      	b.n	800074a <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <do_auto_sweep+0x80>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <do_auto_sweep+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
	    step++;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <do_auto_sweep+0x80>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <do_auto_sweep+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <do_auto_sweep+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <do_auto_sweep+0x50>
	  {
	    step++;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <do_auto_sweep+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <do_auto_sweep+0x80>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <do_auto_sweep+0x80>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <do_auto_sweep+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <do_auto_sweep+0x88>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <do_auto_sweep+0x8c>)
 800077e:	f003 fe80 	bl	8004482 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <do_auto_sweep+0x8c>)
 8000786:	f003 fe2a 	bl	80043de <HAL_DAC_Start>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	240005c8 	.word	0x240005c8
 8000794:	24000028 	.word	0x24000028
 8000798:	24000000 	.word	0x24000000
 800079c:	24000294 	.word	0x24000294

080007a0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 80007a0:	b084      	sub	sp, #16
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f107 0c18 	add.w	ip, r7, #24
 80007ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	f107 0018 	add.w	r0, r7, #24
 80007ba:	f00b f821 	bl	800b800 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007d0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007d2:	2002      	movs	r0, #2
 80007d4:	f00f fa04 	bl	800fbe0 <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	701a      	strb	r2, [r3, #0]
	return results;
 80007ea:	68bb      	ldr	r3, [r7, #8]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
	...

080007fc <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <set_erpa_sweep+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <set_erpa_sweep+0x2c>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <set_erpa_sweep+0x30>)
 8000812:	f003 fe36 	bl	8004482 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <set_erpa_sweep+0x30>)
 800081a:	f003 fde0 	bl	80043de <HAL_DAC_Start>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240005c8 	.word	0x240005c8
 8000828:	24000000 	.word	0x24000000
 800082c:	24000294 	.word	0x24000294

08000830 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <erpa_adc+0x34>)
 8000838:	885b      	ldrh	r3, [r3, #2]
 800083a:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified doesn't need to change
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <erpa_adc+0x34>)
 800083e:	895b      	ldrh	r3, [r3, #10]
 8000840:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(2 * sizeof(uint16_t));
 8000842:	2004      	movs	r0, #4
 8000844:	f00f f9cc 	bl	800fbe0 <malloc>
 8000848:	4603      	mov	r3, r0
 800084a:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	88fa      	ldrh	r2, [r7, #6]
 8000850:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	88ba      	ldrh	r2, [r7, #4]
 8000858:	801a      	strh	r2, [r3, #0]

	return results;
 800085a:	683b      	ldr	r3, [r7, #0]


}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	240005a0 	.word	0x240005a0

08000868 <hk_adc1>:

uint16_t* hk_adc1() {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];			// BUSVmon -- verified doesn't need to change
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <hk_adc1+0x98>)
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];				// BUSImon -- verified doesn't need to change
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <hk_adc1+0x98>)
 8000876:	8a1b      	ldrh	r3, [r3, #16]
 8000878:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified doesn't need to change
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <hk_adc1+0x98>)
 800087c:	899b      	ldrh	r3, [r3, #12]
 800087e:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <hk_adc1+0x98>)
 8000882:	8a5b      	ldrh	r3, [r3, #18]
 8000884:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];				// n200v -- verified doesn't need to change
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <hk_adc1+0x98>)
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <hk_adc1+0x98>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <hk_adc1+0x98>)
 8000894:	89db      	ldrh	r3, [r3, #14]
 8000896:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified doesn't need to change
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <hk_adc1+0x98>)
 800089a:	891b      	ldrh	r3, [r3, #8]
 800089c:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <hk_adc1+0x98>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 80008a4:	2012      	movs	r0, #18
 80008a6:	f00f f99b 	bl	800fbe0 <malloc>
 80008aa:	4603      	mov	r3, r0
 80008ac:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	8afa      	ldrh	r2, [r7, #22]
 80008b2:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	3302      	adds	r3, #2
 80008b8:	8aba      	ldrh	r2, [r7, #20]
 80008ba:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8a7a      	ldrh	r2, [r7, #18]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3306      	adds	r3, #6
 80008c8:	8a3a      	ldrh	r2, [r7, #16]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3308      	adds	r3, #8
 80008d0:	89fa      	ldrh	r2, [r7, #14]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	330a      	adds	r3, #10
 80008d8:	89ba      	ldrh	r2, [r7, #12]
 80008da:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	330c      	adds	r3, #12
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	330e      	adds	r3, #14
 80008e8:	893a      	ldrh	r2, [r7, #8]
 80008ea:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3310      	adds	r3, #16
 80008f0:	88fa      	ldrh	r2, [r7, #6]
 80008f2:	801a      	strh	r2, [r3, #0]

	return results;
 80008f4:	683b      	ldr	r3, [r7, #0]

}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	240005a0 	.word	0x240005a0

08000904 <hk_adc3>:

uint16_t* hk_adc3() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <hk_adc3+0x50>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <hk_adc3+0x50>)
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <hk_adc3+0x50>)
 8000918:	889b      	ldrh	r3, [r3, #4]
 800091a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <hk_adc3+0x50>)
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000922:	2008      	movs	r0, #8
 8000924:	f00f f95c 	bl	800fbe0 <malloc>
 8000928:	4603      	mov	r3, r0
 800092a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	89fa      	ldrh	r2, [r7, #14]
 8000930:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3302      	adds	r3, #2
 8000936:	89ba      	ldrh	r2, [r7, #12]
 8000938:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3304      	adds	r3, #4
 800093e:	897a      	ldrh	r2, [r7, #10]
 8000940:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3306      	adds	r3, #6
 8000946:	893a      	ldrh	r2, [r7, #8]
 8000948:	801a      	strh	r2, [r3, #0]

	return results;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	240005c0 	.word	0x240005c0

08000958 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 8000962:	23aa      	movs	r3, #170	; 0xaa
 8000964:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 8000966:	23aa      	movs	r3, #170	; 0xaa
 8000968:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <send_erpa_packet+0x90>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <send_erpa_packet+0x90>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  							// ENDmon MSB
 800097e:	2300      	movs	r3, #0
 8000980:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               						// ENDmon LSB
 8000982:	2300      	movs	r3, #0
 8000984:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);               		// SWP Monitored LSB
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3302      	adds	r3, #2
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);               		// TEMPURATURE 1 LSB
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3302      	adds	r3, #2
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009b2:	2300      	movs	r3, #0
 80009b4:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009b6:	2300      	movs	r3, #0
 80009b8:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009c6:	f107 0108 	add.w	r1, r7, #8
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	220e      	movs	r2, #14
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <send_erpa_packet+0x94>)
 80009d0:	f00c fdc4 	bl	800d55c <HAL_UART_Transmit>
	erpa_seq++;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <send_erpa_packet+0x90>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <send_erpa_packet+0x90>)
 80009de:	801a      	strh	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	240005d8 	.word	0x240005d8
 80009ec:	2400049c 	.word	0x2400049c

080009f0 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 80009fc:	23cc      	movs	r3, #204	; 0xcc
 80009fe:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000a00:	23cc      	movs	r3, #204	; 0xcc
 8000a02:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <send_hk_packet+0x20c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000a10:	4b7a      	ldr	r3, [pc, #488]	; (8000bfc <send_hk_packet+0x20c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3302      	adds	r3, #2
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4a:	121b      	asrs	r3, r3, #8
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a62:	121b      	asrs	r3, r3, #8
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3304      	adds	r3, #4
 8000a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7c:	121b      	asrs	r3, r3, #8
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3304      	adds	r3, #4
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3306      	adds	r3, #6
 8000a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3304      	adds	r3, #4
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3306      	adds	r3, #6
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	330c      	adds	r3, #12
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	330c      	adds	r3, #12
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3306      	adds	r3, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	330e      	adds	r3, #14
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	330e      	adds	r3, #14
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3310      	adds	r3, #16
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3310      	adds	r3, #16
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	330a      	adds	r3, #10
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	330a      	adds	r3, #10
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bd8:	f107 0110 	add.w	r1, r7, #16
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	2226      	movs	r2, #38	; 0x26
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <send_hk_packet+0x210>)
 8000be2:	f00c fcbb 	bl	800d55c <HAL_UART_Transmit>
	hk_seq++;
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <send_hk_packet+0x20c>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <send_hk_packet+0x20c>)
 8000bf0:	801a      	strh	r2, [r3, #0]


}
 8000bf2:	bf00      	nop
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240005dc 	.word	0x240005dc
 8000c00:	2400049c 	.word	0x2400049c

08000c04 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000c0c:	23bb      	movs	r3, #187	; 0xbb
 8000c0e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000c10:	23bb      	movs	r3, #187	; 0xbb
 8000c12:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <send_pmt_packet+0x54>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <send_pmt_packet+0x54>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <send_pmt_packet+0x58>)
 8000c3e:	f00c fc8d 	bl	800d55c <HAL_UART_Transmit>
	pmt_seq++;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <send_pmt_packet+0x54>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <send_pmt_packet+0x54>)
 8000c4c:	801a      	strh	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240005da 	.word	0x240005da
 8000c5c:	2400049c 	.word	0x2400049c

08000c60 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b0a7      	sub	sp, #156	; 0x9c
 8000c64:	af1e      	add	r7, sp, #120	; 0x78
 8000c66:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a4a      	ldr	r2, [pc, #296]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d168      	bne.n	8000d42 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
  {
	  FACTOR_COUNTER++;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a48      	ldr	r2, [pc, #288]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000c78:	6013      	str	r3, [r2, #0]
	  SWP_FACTOR_COUNTER++;
 8000c7a:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000c82:	6013      	str	r3, [r2, #0]

	  if (FACTOR_COUNTER == SAMPLING_FACTOR) {
 8000c84:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d17c      	bne.n	8000d8a <HAL_TIM_OC_DelayElapsedCallback+0x12a>
		  FACTOR_COUNTER = 0;
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
		  if (ERPA_ON)
 8000c96:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d035      	beq.n	8000d0a <HAL_TIM_OC_DelayElapsedCallback+0xaa>
		  {

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000c9e:	bf00      	nop
 8000ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca4:	4840      	ldr	r0, [pc, #256]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000ca6:	f006 fd2d 	bl	8007704 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f7      	bne.n	8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x40>

			uint8_t* spi2_results = spi(hspi2);
 8000cb0:	4c3e      	ldr	r4, [pc, #248]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000cb2:	4668      	mov	r0, sp
 8000cb4:	f104 0310 	add.w	r3, r4, #16
 8000cb8:	2278      	movs	r2, #120	; 0x78
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f00e ffa0 	bl	800fc00 <memcpy>
 8000cc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cc4:	f7ff fd6c 	bl	80007a0 <spi>
 8000cc8:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000cca:	f7ff fdb1 	bl	8000830 <erpa_adc>
 8000cce:	6178      	str	r0, [r7, #20]

			if (SWP_FACTOR_COUNTER == (SAMPLING_FACTOR * 2)) {
 8000cd0:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	005a      	lsls	r2, r3, #1
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_TIM_OC_DelayElapsedCallback+0x96>
				if (auto_sweep)
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <HAL_TIM_OC_DelayElapsedCallback+0x8c>
				{
					do_auto_sweep();
 8000ce6:	f7ff fd13 	bl	8000710 <do_auto_sweep>
 8000cea:	e001      	b.n	8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x90>
				} else {
					set_erpa_sweep();
 8000cec:	f7ff fd86 	bl	80007fc <set_erpa_sweep>
				}
				SWP_FACTOR_COUNTER = 0;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
			}


			send_erpa_packet(spi2_results, erpa_adc_results);
 8000cf6:	6979      	ldr	r1, [r7, #20]
 8000cf8:	69b8      	ldr	r0, [r7, #24]
 8000cfa:	f7ff fe2d 	bl	8000958 <send_erpa_packet>

			free(spi2_results);
 8000cfe:	69b8      	ldr	r0, [r7, #24]
 8000d00:	f00e ff76 	bl	800fbf0 <free>
			free(erpa_adc_results);
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f00e ff73 	bl	800fbf0 <free>
		  }
		  if (HK_ON)
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d03b      	beq.n	8000d8a <HAL_TIM_OC_DelayElapsedCallback+0x12a>
		  {
			  int16_t *i2c_values = i2c();
 8000d12:	f7ff fcc9 	bl	80006a8 <i2c>
 8000d16:	6138      	str	r0, [r7, #16]
			  uint16_t* hk_adc1_results = hk_adc1();
 8000d18:	f7ff fda6 	bl	8000868 <hk_adc1>
 8000d1c:	60f8      	str	r0, [r7, #12]
			  uint16_t* hk_adc3_results = hk_adc3();
 8000d1e:	f7ff fdf1 	bl	8000904 <hk_adc3>
 8000d22:	60b8      	str	r0, [r7, #8]


			  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	68f9      	ldr	r1, [r7, #12]
 8000d28:	6938      	ldr	r0, [r7, #16]
 8000d2a:	f7ff fe61 	bl	80009f0 <send_hk_packet>


			  free(i2c_values);
 8000d2e:	6938      	ldr	r0, [r7, #16]
 8000d30:	f00e ff5e 	bl	800fbf0 <free>
			  free(hk_adc1_results);
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f00e ff5b 	bl	800fbf0 <free>
			  free(hk_adc3_results);
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f00e ff58 	bl	800fbf0 <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d40:	e023      	b.n	8000d8a <HAL_TIM_OC_DelayElapsedCallback+0x12a>
  else if (htim == &htim1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d11f      	bne.n	8000d8a <HAL_TIM_OC_DelayElapsedCallback+0x12a>
      if (PMT_ON)
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d01b      	beq.n	8000d8a <HAL_TIM_OC_DelayElapsedCallback+0x12a>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d52:	bf00      	nop
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 8000d5a:	f006 fcd3 	bl	8007704 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f7      	bne.n	8000d54 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
  		uint8_t* spi1_results = spi(hspi1);
 8000d64:	4c17      	ldr	r4, [pc, #92]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000d66:	4668      	mov	r0, sp
 8000d68:	f104 0310 	add.w	r3, r4, #16
 8000d6c:	2278      	movs	r2, #120	; 0x78
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f00e ff46 	bl	800fc00 <memcpy>
 8000d74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d78:	f7ff fd12 	bl	80007a0 <spi>
 8000d7c:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000d7e:	69f8      	ldr	r0, [r7, #28]
 8000d80:	f7ff ff40 	bl	8000c04 <send_pmt_packet>
		free(spi1_results);
 8000d84:	69f8      	ldr	r0, [r7, #28]
 8000d86:	f00e ff33 	bl	800fbf0 <free>
}
 8000d8a:	bf00      	nop
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000450 	.word	0x24000450
 8000d98:	240005d0 	.word	0x240005d0
 8000d9c:	240005d4 	.word	0x240005d4
 8000da0:	2400002c 	.word	0x2400002c
 8000da4:	240005df 	.word	0x240005df
 8000da8:	58020400 	.word	0x58020400
 8000dac:	2400037c 	.word	0x2400037c
 8000db0:	240005cc 	.word	0x240005cc
 8000db4:	240005e0 	.word	0x240005e0
 8000db8:	24000404 	.word	0x24000404
 8000dbc:	240005de 	.word	0x240005de
 8000dc0:	58020000 	.word	0x58020000
 8000dc4:	240002f4 	.word	0x240002f4

08000dc8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	49b6      	ldr	r1, [pc, #728]	; (80010ac <HAL_UART_RxCpltCallback+0x2e4>)
 8000dd4:	48b6      	ldr	r0, [pc, #728]	; (80010b0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000dd6:	f00c fc57 	bl	800d688 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000dda:	4bb4      	ldr	r3, [pc, #720]	; (80010ac <HAL_UART_RxCpltCallback+0x2e4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b25      	cmp	r3, #37	; 0x25
 8000de4:	f200 815d 	bhi.w	80010a2 <HAL_UART_RxCpltCallback+0x2da>
 8000de8:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <HAL_UART_RxCpltCallback+0x28>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000f45 	.word	0x08000f45
 8000df4:	08000f61 	.word	0x08000f61
 8000df8:	08000f7d 	.word	0x08000f7d
 8000dfc:	08000f9d 	.word	0x08000f9d
 8000e00:	08000fbd 	.word	0x08000fbd
 8000e04:	08000fd9 	.word	0x08000fd9
 8000e08:	08000ff9 	.word	0x08000ff9
 8000e0c:	08001019 	.word	0x08001019
 8000e10:	080010a3 	.word	0x080010a3
 8000e14:	080010a3 	.word	0x080010a3
 8000e18:	08000e97 	.word	0x08000e97
 8000e1c:	08000e89 	.word	0x08000e89
 8000e20:	08001035 	.word	0x08001035
 8000e24:	08001045 	.word	0x08001045
 8000e28:	08001065 	.word	0x08001065
 8000e2c:	08001085 	.word	0x08001085
 8000e30:	08001055 	.word	0x08001055
 8000e34:	08001075 	.word	0x08001075
 8000e38:	0800108d 	.word	0x0800108d
 8000e3c:	08000f53 	.word	0x08000f53
 8000e40:	08000f6f 	.word	0x08000f6f
 8000e44:	08000f8d 	.word	0x08000f8d
 8000e48:	08000fad 	.word	0x08000fad
 8000e4c:	08000fcb 	.word	0x08000fcb
 8000e50:	08000fe9 	.word	0x08000fe9
 8000e54:	08001009 	.word	0x08001009
 8000e58:	08001027 	.word	0x08001027
 8000e5c:	08000ea5 	.word	0x08000ea5
 8000e60:	08000ebd 	.word	0x08000ebd
 8000e64:	08000ed5 	.word	0x08000ed5
 8000e68:	080010a3 	.word	0x080010a3
 8000e6c:	080010a3 	.word	0x080010a3
 8000e70:	080010a3 	.word	0x080010a3
 8000e74:	080010a3 	.word	0x080010a3
 8000e78:	080010a3 	.word	0x080010a3
 8000e7c:	080010a3 	.word	0x080010a3
 8000e80:	08000ef9 	.word	0x08000ef9
 8000e84:	08000f1b 	.word	0x08000f1b
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e88:	4b8a      	ldr	r3, [pc, #552]	; (80010b4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f006 fc50 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000e94:	e105      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e96:	4b87      	ldr	r3, [pc, #540]	; (80010b4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e98:	2104      	movs	r1, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fc49 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000ea2:	e0fe      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000ea4:	4b84      	ldr	r3, [pc, #528]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	f200 80f3 	bhi.w	8001094 <HAL_UART_RxCpltCallback+0x2cc>
	  {
		step++;
 8000eae:	4b82      	ldr	r3, [pc, #520]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b80      	ldr	r3, [pc, #512]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eb8:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000eba:	e0eb      	b.n	8001094 <HAL_UART_RxCpltCallback+0x2cc>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ebc:	4b7e      	ldr	r3, [pc, #504]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80e9 	beq.w	8001098 <HAL_UART_RxCpltCallback+0x2d0>
    {
      step--;
 8000ec6:	4b7c      	ldr	r3, [pc, #496]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b7a      	ldr	r3, [pc, #488]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ed0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ed2:	e0e1      	b.n	8001098 <HAL_UART_RxCpltCallback+0x2d0>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ed4:	4b79      	ldr	r3, [pc, #484]	; (80010bc <HAL_UART_RxCpltCallback+0x2f4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <HAL_UART_RxCpltCallback+0x122>
		auto_sweep = 1;
 8000edc:	4b77      	ldr	r3, [pc, #476]	; (80010bc <HAL_UART_RxCpltCallback+0x2f4>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ee2:	4b75      	ldr	r3, [pc, #468]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000ee8:	e0db      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
		auto_sweep = 0;
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_UART_RxCpltCallback+0x2f4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ef0:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
  	break;
 8000ef6:	e0d4      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
   }
  case 0x24:
  {
	  if (SAMPLING_FACTOR < 32)
 8000ef8:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b1f      	cmp	r3, #31
 8000efe:	f300 80cd 	bgt.w	800109c <HAL_UART_RxCpltCallback+0x2d4>
	  {
		  SAMPLING_FACTOR *= 2;
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4a6d      	ldr	r2, [pc, #436]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f0a:	6013      	str	r3, [r2, #0]
		  FACTOR_COUNTER = 0;
 8000f0c:	4b6d      	ldr	r3, [pc, #436]	; (80010c4 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <HAL_UART_RxCpltCallback+0x300>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f18:	e0c0      	b.n	800109c <HAL_UART_RxCpltCallback+0x2d4>
  }
  case 0x25:
  {
	  if (SAMPLING_FACTOR > 1)
 8000f1a:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f340 80be 	ble.w	80010a0 <HAL_UART_RxCpltCallback+0x2d8>
	  {
		  SAMPLING_FACTOR /= 2;
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da00      	bge.n	8000f2e <HAL_UART_RxCpltCallback+0x166>
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	105b      	asrs	r3, r3, #1
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f34:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <HAL_UART_RxCpltCallback+0x300>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f42:	e0ad      	b.n	80010a0 <HAL_UART_RxCpltCallback+0x2d8>
  }
  case 0x00:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f44:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f46:	2120      	movs	r1, #32
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f006 fbf2 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000f50:	e0a7      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f52:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f54:	2120      	movs	r1, #32
 8000f56:	2200      	movs	r2, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fbeb 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000f5e:	e0a0      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x01:
  {

    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f60:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	2201      	movs	r2, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 fbe4 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000f6c:	e099      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f70:	2140      	movs	r1, #64	; 0x40
 8000f72:	2200      	movs	r2, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 fbdd 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000f7a:	e092      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	2201      	movs	r2, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 fbd5 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000f8a:	e08a      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	2200      	movs	r2, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f006 fbcd 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000f9a:	e082      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 fbc5 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000faa:	e07a      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fbbd 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000fba:	e072      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 fbb6 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000fc8:	e06b      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fca:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fbaf 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000fd6:	e064      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 fba7 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000fe6:	e05c      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fb9f 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8000ff6:	e054      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ff8:	4b34      	ldr	r3, [pc, #208]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8000ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffe:	2201      	movs	r2, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fb97 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8001006:	e04c      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	2200      	movs	r2, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f006 fb8f 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8001016:	e044      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	2201      	movs	r2, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f006 fb88 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8001024:	e03d      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_UART_RxCpltCallback+0x304>)
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	2200      	movs	r2, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 fb81 	bl	8007734 <HAL_GPIO_WritePin>
    break;
 8001032:	e036      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001034:	f001 fc74 	bl	8002920 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001038:	2101      	movs	r1, #1
 800103a:	2001      	movs	r0, #1
 800103c:	f007 f91e 	bl	800827c <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8001040:	f7ff facc 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_UART_RxCpltCallback+0x308>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4821      	ldr	r0, [pc, #132]	; (80010d4 <HAL_UART_RxCpltCallback+0x30c>)
 800104e:	f00b f885 	bl	800c15c <HAL_TIM_OC_Start_IT>
    break;
 8001052:	e026      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_UART_RxCpltCallback+0x308>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	481d      	ldr	r0, [pc, #116]	; (80010d4 <HAL_UART_RxCpltCallback+0x30c>)
 800105e:	f00b f9d7 	bl	800c410 <HAL_TIM_OC_Stop_IT>

    break;
 8001062:	e01e      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_UART_RxCpltCallback+0x310>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800106a:	210c      	movs	r1, #12
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <HAL_UART_RxCpltCallback+0x314>)
 800106e:	f00b f875 	bl	800c15c <HAL_TIM_OC_Start_IT>
    break;
 8001072:	e016      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_RxCpltCallback+0x310>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800107a:	210c      	movs	r1, #12
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_UART_RxCpltCallback+0x314>)
 800107e:	f00b f9c7 	bl	800c410 <HAL_TIM_OC_Stop_IT>

    break;
 8001082:	e00e      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_UART_RxCpltCallback+0x318>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
    break;
 800108a:	e00a      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x12:
  {
    HK_ON = 0;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_RxCpltCallback+0x318>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
    break;
 8001092:	e006      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 8001094:	bf00      	nop
 8001096:	e004      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
    break;
 8001098:	bf00      	nop
 800109a:	e002      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 800109c:	bf00      	nop
 800109e:	e000      	b.n	80010a2 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a0:	bf00      	nop
  }
  }
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2400052c 	.word	0x2400052c
 80010b0:	2400049c 	.word	0x2400049c
 80010b4:	58020400 	.word	0x58020400
 80010b8:	240005c8 	.word	0x240005c8
 80010bc:	240005cc 	.word	0x240005cc
 80010c0:	2400002c 	.word	0x2400002c
 80010c4:	240005d0 	.word	0x240005d0
 80010c8:	240005d4 	.word	0x240005d4
 80010cc:	58020800 	.word	0x58020800
 80010d0:	240005de 	.word	0x240005de
 80010d4:	24000404 	.word	0x24000404
 80010d8:	240005df 	.word	0x240005df
 80010dc:	24000450 	.word	0x24000450
 80010e0:	240005e0 	.word	0x240005e0

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f001 fb64 	bl	80027b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f868 	bl	80011c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010f0:	f000 f8ec 	bl	80012cc <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80010f4:	f000 fd50 	bl	8001b98 <MX_GPIO_Init>
  MX_DAC1_Init();
 80010f8:	f000 face 	bl	8001698 <MX_DAC1_Init>
  MX_TIM1_Init();
 80010fc:	f000 fbee 	bl	80018dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001100:	f000 fc7c 	bl	80019fc <MX_TIM2_Init>
  MX_I2C1_Init();
 8001104:	f000 fafa 	bl	80016fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001108:	f000 fb38 	bl	800177c <MX_SPI1_Init>
  MX_DMA_Init();
 800110c:	f000 fd1c 	bl	8001b48 <MX_DMA_Init>
  MX_ADC1_Init();
 8001110:	f000 f90a 	bl	8001328 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001114:	f000 fccc 	bl	8001ab0 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8001118:	f000 fa28 	bl	800156c <MX_ADC3_Init>
  MX_SPI2_Init();
 800111c:	f000 fb86 	bl	800182c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001120:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001128:	481f      	ldr	r0, [pc, #124]	; (80011a8 <main+0xc4>)
 800112a:	f002 fee5 	bl	8003ef8 <HAL_ADCEx_Calibration_Start>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 8001134:	f000 fe16 	bl	8001d64 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 8001138:	220b      	movs	r2, #11
 800113a:	491c      	ldr	r1, [pc, #112]	; (80011ac <main+0xc8>)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <main+0xc4>)
 800113e:	f001 ffd1 	bl	80030e4 <HAL_ADC_Start_DMA>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <main+0x68>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 8001148:	f000 fe0c 	bl	8001d64 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800114c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001154:	4816      	ldr	r0, [pc, #88]	; (80011b0 <main+0xcc>)
 8001156:	f002 fecf 	bl	8003ef8 <HAL_ADCEx_Calibration_Start>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <main+0x80>
  {
	/* Calibration Error */
	Error_Handler();
 8001160:	f000 fe00 	bl	8001d64 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 8001164:	2204      	movs	r2, #4
 8001166:	4913      	ldr	r1, [pc, #76]	; (80011b4 <main+0xd0>)
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0xcc>)
 800116a:	f001 ffbb 	bl	80030e4 <HAL_ADC_Start_DMA>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <main+0x94>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 8001174:	f000 fdf6 	bl	8001d64 <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001178:	bf00      	nop
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <main+0xd4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d0f7      	beq.n	800117a <main+0x96>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800118a:	bf00      	nop
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <main+0xd4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d1f7      	bne.n	800118c <main+0xa8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	4907      	ldr	r1, [pc, #28]	; (80011bc <main+0xd8>)
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <main+0xd4>)
 80011a2:	f00c fa71 	bl	800d688 <HAL_UART_Receive_IT>
 80011a6:	e7f9      	b.n	800119c <main+0xb8>
 80011a8:	240000dc 	.word	0x240000dc
 80011ac:	240005a0 	.word	0x240005a0
 80011b0:	24000140 	.word	0x24000140
 80011b4:	240005c0 	.word	0x240005c0
 80011b8:	2400049c 	.word	0x2400049c
 80011bc:	2400052c 	.word	0x2400052c

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09c      	sub	sp, #112	; 0x70
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	224c      	movs	r2, #76	; 0x4c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00e fd24 	bl	800fc1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2220      	movs	r2, #32
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00e fd1e 	bl	800fc1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011e0:	2002      	movs	r0, #2
 80011e2:	f007 f887 	bl	80082f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <SystemClock_Config+0x100>)
 80011ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ee:	4a34      	ldr	r2, [pc, #208]	; (80012c0 <SystemClock_Config+0x100>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <SystemClock_Config+0x100>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <SystemClock_Config+0x104>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <SystemClock_Config+0x104>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <SystemClock_Config+0x104>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800121c:	bf00      	nop
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <SystemClock_Config+0x104>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800122a:	d1f8      	bne.n	800121e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <SystemClock_Config+0x108>)
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <SystemClock_Config+0x108>)
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800123c:	2301      	movs	r3, #1
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2340      	movs	r3, #64	; 0x40
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001250:	230c      	movs	r3, #12
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001254:	2302      	movs	r3, #2
 8001256:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001258:	2302      	movs	r3, #2
 800125a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001260:	230c      	movs	r3, #12
 8001262:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001264:	2300      	movs	r3, #0
 8001266:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4618      	mov	r0, r3
 8001272:	f007 f879 	bl	8008368 <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800127c:	f000 fd72 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	233f      	movs	r3, #63	; 0x3f
 8001282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001284:	2303      	movs	r3, #3
 8001286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800128c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2101      	movs	r1, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	f007 fc8b 	bl	8008bc4 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012b4:	f000 fd56 	bl	8001d64 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3770      	adds	r7, #112	; 0x70
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58000400 	.word	0x58000400
 80012c4:	58024800 	.word	0x58024800
 80012c8:	58024400 	.word	0x58024400

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	; 0xc0
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	22bc      	movs	r2, #188	; 0xbc
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00e fc9f 	bl	800fc1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012e2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012e8:	2309      	movs	r3, #9
 80012ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012f8:	23c0      	movs	r3, #192	; 0xc0
 80012fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012fc:	2320      	movs	r3, #32
 80012fe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001300:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f007 ffe4 	bl	80092dc <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800131a:	f000 fd23 	bl	8001d64 <Error_Handler>
  }
}
 800131e:	bf00      	nop
 8001320:	37c0      	adds	r7, #192	; 0xc0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800134c:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <MX_ADC1_Init+0x210>)
 800134e:	4a7b      	ldr	r2, [pc, #492]	; (800153c <MX_ADC1_Init+0x214>)
 8001350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001352:	4b79      	ldr	r3, [pc, #484]	; (8001538 <MX_ADC1_Init+0x210>)
 8001354:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001358:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135a:	4b77      	ldr	r3, [pc, #476]	; (8001538 <MX_ADC1_Init+0x210>)
 800135c:	2208      	movs	r2, #8
 800135e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001360:	4b75      	ldr	r3, [pc, #468]	; (8001538 <MX_ADC1_Init+0x210>)
 8001362:	2201      	movs	r2, #1
 8001364:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001366:	4b74      	ldr	r3, [pc, #464]	; (8001538 <MX_ADC1_Init+0x210>)
 8001368:	2204      	movs	r2, #4
 800136a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800136c:	4b72      	ldr	r3, [pc, #456]	; (8001538 <MX_ADC1_Init+0x210>)
 800136e:	2200      	movs	r2, #0
 8001370:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001372:	4b71      	ldr	r3, [pc, #452]	; (8001538 <MX_ADC1_Init+0x210>)
 8001374:	2201      	movs	r2, #1
 8001376:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001378:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <MX_ADC1_Init+0x210>)
 800137a:	220b      	movs	r2, #11
 800137c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137e:	4b6e      	ldr	r3, [pc, #440]	; (8001538 <MX_ADC1_Init+0x210>)
 8001380:	2200      	movs	r2, #0
 8001382:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001384:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <MX_ADC1_Init+0x210>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <MX_ADC1_Init+0x210>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001390:	4b69      	ldr	r3, [pc, #420]	; (8001538 <MX_ADC1_Init+0x210>)
 8001392:	2203      	movs	r2, #3
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001396:	4b68      	ldr	r3, [pc, #416]	; (8001538 <MX_ADC1_Init+0x210>)
 8001398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800139e:	4b66      	ldr	r3, [pc, #408]	; (8001538 <MX_ADC1_Init+0x210>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <MX_ADC1_Init+0x210>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ac:	4862      	ldr	r0, [pc, #392]	; (8001538 <MX_ADC1_Init+0x210>)
 80013ae:	f001 fcf7 	bl	8002da0 <HAL_ADC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013b8:	f000 fcd4 	bl	8001d64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	485c      	ldr	r0, [pc, #368]	; (8001538 <MX_ADC1_Init+0x210>)
 80013c8:	f002 fdfa 	bl	8003fc0 <HAL_ADCEx_MultiModeConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80013d2:	f000 fcc7 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <MX_ADC1_Init+0x218>)
 80013d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013da:	2306      	movs	r3, #6
 80013dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80013de:	2307      	movs	r3, #7
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013e8:	2304      	movs	r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	484f      	ldr	r0, [pc, #316]	; (8001538 <MX_ADC1_Init+0x210>)
 80013fa:	f001 ff4b 	bl	8003294 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001404:	f000 fcae 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <MX_ADC1_Init+0x21c>)
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800140c:	230c      	movs	r3, #12
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4848      	ldr	r0, [pc, #288]	; (8001538 <MX_ADC1_Init+0x210>)
 8001416:	f001 ff3d 	bl	8003294 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001420:	f000 fca0 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <MX_ADC1_Init+0x220>)
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001428:	2312      	movs	r3, #18
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4841      	ldr	r0, [pc, #260]	; (8001538 <MX_ADC1_Init+0x210>)
 8001432:	f001 ff2f 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800143c:	f000 fc92 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <MX_ADC1_Init+0x224>)
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001444:	2318      	movs	r3, #24
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	483a      	ldr	r0, [pc, #232]	; (8001538 <MX_ADC1_Init+0x210>)
 800144e:	f001 ff21 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001458:	f000 fc84 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800145c:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <MX_ADC1_Init+0x228>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001464:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4833      	ldr	r0, [pc, #204]	; (8001538 <MX_ADC1_Init+0x210>)
 800146c:	f001 ff12 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001476:	f000 fc75 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800147a:	4b36      	ldr	r3, [pc, #216]	; (8001554 <MX_ADC1_Init+0x22c>)
 800147c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800147e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001482:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	482b      	ldr	r0, [pc, #172]	; (8001538 <MX_ADC1_Init+0x210>)
 800148a:	f001 ff03 	bl	8003294 <HAL_ADC_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001494:	f000 fc66 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <MX_ADC1_Init+0x230>)
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800149c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4824      	ldr	r0, [pc, #144]	; (8001538 <MX_ADC1_Init+0x210>)
 80014a8:	f001 fef4 	bl	8003294 <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80014b2:	f000 fc57 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <MX_ADC1_Init+0x234>)
 80014b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014ba:	f44f 7389 	mov.w	r3, #274	; 0x112
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	481c      	ldr	r0, [pc, #112]	; (8001538 <MX_ADC1_Init+0x210>)
 80014c6:	f001 fee5 	bl	8003294 <HAL_ADC_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80014d0:	f000 fc48 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_ADC1_Init+0x238>)
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80014d8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80014dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_ADC1_Init+0x210>)
 80014e4:	f001 fed6 	bl	8003294 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80014ee:	f000 fc39 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_ADC1_Init+0x23c>)
 80014f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80014f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_ADC1_Init+0x210>)
 8001502:	f001 fec7 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800150c:	f000 fc2a 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_ADC1_Init+0x240>)
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001514:	f240 2306 	movw	r3, #518	; 0x206
 8001518:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_ADC1_Init+0x210>)
 8001520:	f001 feb8 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800152a:	f000 fc1b 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	240000dc 	.word	0x240000dc
 800153c:	40022000 	.word	0x40022000
 8001540:	0c900008 	.word	0x0c900008
 8001544:	10c00010 	.word	0x10c00010
 8001548:	14f00020 	.word	0x14f00020
 800154c:	1d500080 	.word	0x1d500080
 8001550:	21800100 	.word	0x21800100
 8001554:	25b00200 	.word	0x25b00200
 8001558:	2a000400 	.word	0x2a000400
 800155c:	2e300800 	.word	0x2e300800
 8001560:	3ac04000 	.word	0x3ac04000
 8001564:	3ef08000 	.word	0x3ef08000
 8001568:	47520000 	.word	0x47520000

0800156c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001584:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <MX_ADC3_Init+0x118>)
 8001586:	4a40      	ldr	r2, [pc, #256]	; (8001688 <MX_ADC3_Init+0x11c>)
 8001588:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <MX_ADC3_Init+0x118>)
 800158c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001590:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <MX_ADC3_Init+0x118>)
 8001594:	2208      	movs	r2, #8
 8001596:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <MX_ADC3_Init+0x118>)
 800159a:	2201      	movs	r2, #1
 800159c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <MX_ADC3_Init+0x118>)
 80015a0:	2204      	movs	r2, #4
 80015a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015a4:	4b37      	ldr	r3, [pc, #220]	; (8001684 <MX_ADC3_Init+0x118>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <MX_ADC3_Init+0x118>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <MX_ADC3_Init+0x118>)
 80015b2:	2204      	movs	r2, #4
 80015b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015b6:	4b33      	ldr	r3, [pc, #204]	; (8001684 <MX_ADC3_Init+0x118>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <MX_ADC3_Init+0x118>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <MX_ADC3_Init+0x118>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <MX_ADC3_Init+0x118>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <MX_ADC3_Init+0x118>)
 80015d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <MX_ADC3_Init+0x118>)
 80015d8:	2200      	movs	r2, #0
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <MX_ADC3_Init+0x118>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015e4:	4827      	ldr	r0, [pc, #156]	; (8001684 <MX_ADC3_Init+0x118>)
 80015e6:	f001 fbdb 	bl	8002da0 <HAL_ADC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 80015f0:	f000 fbb8 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <MX_ADC3_Init+0x120>)
 80015f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f8:	2306      	movs	r3, #6
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80015fc:	2307      	movs	r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001600:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001604:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001606:	2304      	movs	r3, #4
 8001608:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	481b      	ldr	r0, [pc, #108]	; (8001684 <MX_ADC3_Init+0x118>)
 8001618:	f001 fe3c 	bl	8003294 <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8001622:	f000 fb9f 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_ADC3_Init+0x124>)
 8001628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800162a:	230c      	movs	r3, #12
 800162c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4814      	ldr	r0, [pc, #80]	; (8001684 <MX_ADC3_Init+0x118>)
 8001634:	f001 fe2e 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 800163e:	f000 fb91 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001642:	2301      	movs	r3, #1
 8001644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001646:	2312      	movs	r3, #18
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_ADC3_Init+0x118>)
 8001650:	f001 fe20 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 800165a:	f000 fb83 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_ADC3_Init+0x128>)
 8001660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001662:	2318      	movs	r3, #24
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_ADC3_Init+0x118>)
 800166c:	f001 fe12 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001676:	f000 fb75 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000140 	.word	0x24000140
 8001688:	58026000 	.word	0x58026000
 800168c:	cb840000 	.word	0xcb840000
 8001690:	cfb80000 	.word	0xcfb80000
 8001694:	04300002 	.word	0x04300002

08001698 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2224      	movs	r2, #36	; 0x24
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00e fab9 	bl	800fc1c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_DAC1_Init+0x5c>)
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_DAC1_Init+0x60>)
 80016ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <MX_DAC1_Init+0x5c>)
 80016b2:	f002 fe72 	bl	800439a <HAL_DAC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016bc:	f000 fb52 	bl	8001d64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_DAC1_Init+0x5c>)
 80016dc:	f002 fef6 	bl	80044cc <HAL_DAC_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016e6:	f000 fb3d 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000294 	.word	0x24000294
 80016f8:	40007400 	.word	0x40007400

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_I2C1_Init+0x74>)
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <MX_I2C1_Init+0x78>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_I2C1_Init+0x74>)
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <MX_I2C1_Init+0x7c>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_I2C1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_I2C1_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_I2C1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_I2C1_Init+0x74>)
 8001738:	f006 f816 	bl	8007768 <HAL_I2C_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001742:	f000 fb0f 	bl	8001d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001746:	2100      	movs	r1, #0
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_I2C1_Init+0x74>)
 800174a:	f006 fcff 	bl	800814c <HAL_I2CEx_ConfigAnalogFilter>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 fb06 	bl	8001d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_I2C1_Init+0x74>)
 800175c:	f006 fd41 	bl	80081e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 fafd 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	240002a8 	.word	0x240002a8
 8001774:	40005400 	.word	0x40005400
 8001778:	00506682 	.word	0x00506682

0800177c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <MX_SPI1_Init+0xa8>)
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <MX_SPI1_Init+0xac>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <MX_SPI1_Init+0xa8>)
 8001788:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800178c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <MX_SPI1_Init+0xa8>)
 8001790:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001794:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <MX_SPI1_Init+0xa8>)
 8001798:	220f      	movs	r2, #15
 800179a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <MX_SPI1_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017b2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_SPI1_Init+0xa8>)
 8001810:	f009 fef0 	bl	800b5f4 <HAL_SPI_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800181a:	f000 faa3 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	240002f4 	.word	0x240002f4
 8001828:	40013000 	.word	0x40013000

0800182c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001832:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <MX_SPI2_Init+0xac>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001838:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800183c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001840:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001844:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001848:	220f      	movs	r2, #15
 800184a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_SPI2_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_SPI2_Init+0xa8>)
 800185a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800185e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001862:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001866:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_SPI2_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_SPI2_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_SPI2_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_SPI2_Init+0xa8>)
 80018c0:	f009 fe98 	bl	800b5f4 <HAL_SPI_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018ca:	f000 fa4b 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2400037c 	.word	0x2400037c
 80018d8:	40003800 	.word	0x40003800

080018dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b096      	sub	sp, #88	; 0x58
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	222c      	movs	r2, #44	; 0x2c
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00e f987 	bl	800fc1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <MX_TIM1_Init+0x118>)
 8001910:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <MX_TIM1_Init+0x11c>)
 8001912:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001914:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <MX_TIM1_Init+0x118>)
 8001916:	2263      	movs	r2, #99	; 0x63
 8001918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <MX_TIM1_Init+0x118>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <MX_TIM1_Init+0x118>)
 8001922:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <MX_TIM1_Init+0x118>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <MX_TIM1_Init+0x118>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <MX_TIM1_Init+0x118>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800193a:	482e      	ldr	r0, [pc, #184]	; (80019f4 <MX_TIM1_Init+0x118>)
 800193c:	f00a fe4c 	bl	800c5d8 <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001946:	f000 fa0d 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195a:	4619      	mov	r1, r3
 800195c:	4825      	ldr	r0, [pc, #148]	; (80019f4 <MX_TIM1_Init+0x118>)
 800195e:	f00b fc83 	bl	800d268 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001968:	f000 f9fc 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196c:	2360      	movs	r3, #96	; 0x60
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 - 1;
 8001970:	f240 13df 	movw	r3, #479	; 0x1df
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4818      	ldr	r0, [pc, #96]	; (80019f4 <MX_TIM1_Init+0x118>)
 8001994:	f00a ff96 	bl	800c8c4 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800199e:	f000 f9e1 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_TIM1_Init+0x118>)
 80019d8:	f00b fcd4 	bl	800d384 <HAL_TIMEx_ConfigBreakDeadTime>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80019e2:	f000 f9bf 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <MX_TIM1_Init+0x118>)
 80019e8:	f000 fcb0 	bl	800234c <HAL_TIM_MspPostInit>

}
 80019ec:	bf00      	nop
 80019ee:	3758      	adds	r7, #88	; 0x58
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000404 	.word	0x24000404
 80019f8:	40010000 	.word	0x40010000

080019fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150 - 1;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a38:	2295      	movs	r2, #149	; 0x95
 8001a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a48:	4818      	ldr	r0, [pc, #96]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a4a:	f00a fdc5 	bl	800c5d8 <HAL_TIM_PWM_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a54:	f000 f986 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4811      	ldr	r0, [pc, #68]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a68:	f00b fbfe 	bl	800d268 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a72:	f000 f977 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a76:	2360      	movs	r3, #96	; 0x60
 8001a78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30 - 1;
 8001a7a:	231d      	movs	r3, #29
 8001a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	220c      	movs	r2, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a8e:	f00a ff19 	bl	800c8c4 <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001a98:	f000 f964 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM2_Init+0xb0>)
 8001a9e:	f000 fc55 	bl	800234c <HAL_TIM_MspPostInit>

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	24000450 	.word	0x24000450

08001ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <MX_USART1_UART_Init+0x94>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001abc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001afa:	f00b fcdf 	bl	800d4bc <HAL_UART_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b04:	f000 f92e 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001b0c:	f00d ff73 	bl	800f9f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b16:	f000 f925 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001b1e:	f00d ffa8 	bl	800fa72 <HAL_UARTEx_SetRxFifoThreshold>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b28:	f000 f91c 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_USART1_UART_Init+0x90>)
 8001b2e:	f00d ff29 	bl	800f984 <HAL_UARTEx_DisableFifoMode>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b38:	f000 f914 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2400049c 	.word	0x2400049c
 8001b44:	40011000 	.word	0x40011000

08001b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_DMA_Init+0x4c>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <MX_DMA_Init+0x4c>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <MX_DMA_Init+0x4c>)
 8001b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	200b      	movs	r0, #11
 8001b72:	f002 fbde 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b76:	200b      	movs	r0, #11
 8001b78:	f002 fbf5 	bl	8004366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	200c      	movs	r0, #12
 8001b82:	f002 fbd6 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b86:	200c      	movs	r0, #12
 8001b88:	f002 fbed 	bl	8004366 <HAL_NVIC_EnableIRQ>

}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c2e:	f005 fd81 	bl	8007734 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2164      	movs	r1, #100	; 0x64
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c38:	f005 fd7c 	bl	8007734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c3c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c56:	f005 fba5 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c5a:	2364      	movs	r3, #100	; 0x64
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c72:	f005 fb97 	bl	80073a4 <HAL_GPIO_Init>

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58020800 	.word	0x58020800
 8001c88:	58020400 	.word	0x58020400

08001c8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b08b      	sub	sp, #44	; 0x2c
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d125      	bne.n	8001ce8 <HAL_ADC_ConvCpltCallback+0x5c>
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	230b      	movs	r3, #11
 8001ca2:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	dd48      	ble.n	8001d3c <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cba:	f3bf 8f4f 	dsb	sy
}
 8001cbe:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	3320      	adds	r3, #32
 8001ccc:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b20      	subs	r3, #32
 8001cd2:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dcf2      	bgt.n	8001cc0 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cda:	f3bf 8f4f 	dsb	sy
}
 8001cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ce0:	f3bf 8f6f 	isb	sy
}
 8001ce4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001ce6:	e029      	b.n	8001d3c <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d128      	bne.n	8001d42 <HAL_ADC_ConvCpltCallback+0xb6>
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dd20      	ble.n	8001d40 <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
}
 8001d12:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3320      	adds	r3, #32
 8001d20:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3b20      	subs	r3, #32
 8001d26:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dcf2      	bgt.n	8001d14 <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
}
 8001d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d34:	f3bf 8f6f 	isb	sy
}
 8001d38:	bf00      	nop
}
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_ConvCpltCallback+0xb4>
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_ConvCpltCallback+0xb6>
 8001d40:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	; 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	240000dc 	.word	0x240000dc
 8001d54:	240005aa 	.word	0x240005aa
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	24000140 	.word	0x24000140
 8001d60:	240005c4 	.word	0x240005c4

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_MspInit+0x30>)
 8001d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d7c:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_MspInit+0x30>)
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_MspInit+0x30>)
 8001d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	58024400 	.word	0x58024400

08001da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	; 0x38
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a7b      	ldr	r2, [pc, #492]	; (8001fb0 <HAL_ADC_MspInit+0x20c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f040 8091 	bne.w	8001eea <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dc8:	4b7a      	ldr	r3, [pc, #488]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dce:	4a79      	ldr	r2, [pc, #484]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dd8:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e14:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a62      	ldr	r2, [pc, #392]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e40:	2333      	movs	r3, #51	; 0x33
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4859      	ldr	r0, [pc, #356]	; (8001fb8 <HAL_ADC_MspInit+0x214>)
 8001e54:	f005 faa6 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001e58:	23ce      	movs	r3, #206	; 0xce
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4854      	ldr	r0, [pc, #336]	; (8001fbc <HAL_ADC_MspInit+0x218>)
 8001e6c:	f005 fa9a 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e70:	2303      	movs	r3, #3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	484f      	ldr	r0, [pc, #316]	; (8001fc0 <HAL_ADC_MspInit+0x21c>)
 8001e84:	f005 fa8e 	bl	80073a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e88:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e8a:	4a4f      	ldr	r2, [pc, #316]	; (8001fc8 <HAL_ADC_MspInit+0x224>)
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e90:	2209      	movs	r2, #9
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ecc:	483d      	ldr	r0, [pc, #244]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ece:	f002 fc2d 	bl	800472c <HAL_DMA_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001ed8:	f7ff ff44 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a39      	ldr	r2, [pc, #228]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee2:	4a38      	ldr	r2, [pc, #224]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ee8:	e05e      	b.n	8001fa8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a37      	ldr	r2, [pc, #220]	; (8001fcc <HAL_ADC_MspInit+0x228>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d159      	bne.n	8001fa8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f30:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f38:	f000 fd0e 	bl	8002958 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f44:	f000 fd08 	bl	8002958 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_ADC_MspInit+0x230>)
 8001f4c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f50:	2273      	movs	r2, #115	; 0x73
 8001f52:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f66:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f6e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f8c:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f8e:	f002 fbcd 	bl	800472c <HAL_DMA_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001f98:	f7ff fee4 	bl	8001d64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001fa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	; 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020800 	.word	0x58020800
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	240001a4 	.word	0x240001a4
 8001fc8:	40020010 	.word	0x40020010
 8001fcc:	58026000 	.word	0x58026000
 8001fd0:	2400021c 	.word	0x2400021c
 8001fd4:	40020028 	.word	0x40020028

08001fd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_DAC_MspInit+0x80>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d129      	bne.n	800204e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_DAC_MspInit+0x84>)
 8001ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_DAC_MspInit+0x84>)
 8002002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_DAC_MspInit+0x84>)
 800200c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_DAC_MspInit+0x84>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <HAL_DAC_MspInit+0x84>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_DAC_MspInit+0x84>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002036:	2310      	movs	r3, #16
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_DAC_MspInit+0x88>)
 800204a:	f005 f9ab 	bl	80073a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	; 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40007400 	.word	0x40007400
 800205c:	58024400 	.word	0x58024400
 8002060:	58020000 	.word	0x58020000

08002064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b8      	sub	sp, #224	; 0xe0
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	22bc      	movs	r2, #188	; 0xbc
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f00d fdc9 	bl	800fc1c <memset>
  if(hi2c->Instance==I2C1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_I2C_MspInit+0xc0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d142      	bne.n	800211a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002094:	2308      	movs	r3, #8
 8002096:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f007 f91a 	bl	80092dc <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020ae:	f7ff fe59 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_I2C_MspInit+0xc4>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_I2C_MspInit+0xc4>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_I2C_MspInit+0xc4>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d8:	2312      	movs	r3, #18
 80020da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ea:	2304      	movs	r3, #4
 80020ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	; (800212c <HAL_I2C_MspInit+0xc8>)
 80020f8:	f005 f954 	bl	80073a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_I2C_MspInit+0xc4>)
 80020fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_I2C_MspInit+0xc4>)
 8002104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002108:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_I2C_MspInit+0xc4>)
 800210e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	37e0      	adds	r7, #224	; 0xe0
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40005400 	.word	0x40005400
 8002128:	58024400 	.word	0x58024400
 800212c:	58020400 	.word	0x58020400

08002130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0ba      	sub	sp, #232	; 0xe8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	22bc      	movs	r2, #188	; 0xbc
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f00d fd63 	bl	800fc1c <memset>
  if(hspi->Instance==SPI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a49      	ldr	r2, [pc, #292]	; (8002280 <HAL_SPI_MspInit+0x150>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d142      	bne.n	80021e6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002164:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002166:	2300      	movs	r3, #0
 8002168:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800216a:	f107 0318 	add.w	r3, r7, #24
 800216e:	4618      	mov	r0, r3
 8002170:	f007 f8b4 	bl	80092dc <HAL_RCCEx_PeriphCLKConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800217a:	f7ff fdf3 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002184:	4a3f      	ldr	r2, [pc, #252]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800218a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_SPI_MspInit+0x154>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	4a38      	ldr	r2, [pc, #224]	; (8002284 <HAL_SPI_MspInit+0x154>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ac:	4b35      	ldr	r3, [pc, #212]	; (8002284 <HAL_SPI_MspInit+0x154>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80021ba:	2318      	movs	r3, #24
 80021bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d2:	2305      	movs	r3, #5
 80021d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021dc:	4619      	mov	r1, r3
 80021de:	482a      	ldr	r0, [pc, #168]	; (8002288 <HAL_SPI_MspInit+0x158>)
 80021e0:	f005 f8e0 	bl	80073a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e4:	e047      	b.n	8002276 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_SPI_MspInit+0x15c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d142      	bne.n	8002276 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	4618      	mov	r0, r3
 8002200:	f007 f86c 	bl	80092dc <HAL_RCCEx_PeriphCLKConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800220a:	f7ff fdab 	bl	8001d64 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_SPI_MspInit+0x154>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002232:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_SPI_MspInit+0x154>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_SPI_MspInit+0x154>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800224a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800224e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002264:	2305      	movs	r3, #5
 8002266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <HAL_SPI_MspInit+0x158>)
 8002272:	f005 f897 	bl	80073a4 <HAL_GPIO_Init>
}
 8002276:	bf00      	nop
 8002278:	37e8      	adds	r7, #232	; 0xe8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40013000 	.word	0x40013000
 8002284:	58024400 	.word	0x58024400
 8002288:	58020400 	.word	0x58020400
 800228c:	40003800 	.word	0x40003800

08002290 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <HAL_TIM_PWM_MspInit+0xb4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12f      	bne.n	8002302 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_TIM_PWM_MspInit+0xb8>)
 80022a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <HAL_TIM_PWM_MspInit+0xb8>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_TIM_PWM_MspInit+0xb8>)
 80022b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2018      	movs	r0, #24
 80022c6:	f002 f834 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022ca:	2018      	movs	r0, #24
 80022cc:	f002 f84b 	bl	8004366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	2019      	movs	r0, #25
 80022d6:	f002 f82c 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022da:	2019      	movs	r0, #25
 80022dc:	f002 f843 	bl	8004366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	201a      	movs	r0, #26
 80022e6:	f002 f824 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022ea:	201a      	movs	r0, #26
 80022ec:	f002 f83b 	bl	8004366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	201b      	movs	r0, #27
 80022f6:	f002 f81c 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022fa:	201b      	movs	r0, #27
 80022fc:	f002 f833 	bl	8004366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002300:	e01b      	b.n	800233a <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d116      	bne.n	800233a <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_TIM_PWM_MspInit+0xb8>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_TIM_PWM_MspInit+0xb8>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_TIM_PWM_MspInit+0xb8>)
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	201c      	movs	r0, #28
 8002330:	f001 ffff 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002334:	201c      	movs	r0, #28
 8002336:	f002 f816 	bl	8004366 <HAL_NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	58024400 	.word	0x58024400

0800234c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <HAL_TIM_MspPostInit+0xb8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d120      	bne.n	80023b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_TIM_MspPostInit+0xbc>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002374:	4a24      	ldr	r2, [pc, #144]	; (8002408 <HAL_TIM_MspPostInit+0xbc>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_TIM_MspPostInit+0xbc>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800239e:	2301      	movs	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4818      	ldr	r0, [pc, #96]	; (800240c <HAL_TIM_MspPostInit+0xc0>)
 80023aa:	f004 fffb 	bl	80073a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023ae:	e024      	b.n	80023fa <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d11f      	bne.n	80023fa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_TIM_MspPostInit+0xbc>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c0:	4a11      	ldr	r2, [pc, #68]	; (8002408 <HAL_TIM_MspPostInit+0xbc>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_TIM_MspPostInit+0xbc>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4806      	ldr	r0, [pc, #24]	; (8002410 <HAL_TIM_MspPostInit+0xc4>)
 80023f6:	f004 ffd5 	bl	80073a4 <HAL_GPIO_Init>
}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	58024400 	.word	0x58024400
 800240c:	58020000 	.word	0x58020000
 8002410:	58020400 	.word	0x58020400

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b8      	sub	sp, #224	; 0xe0
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	22bc      	movs	r2, #188	; 0xbc
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00d fbf1 	bl	800fc1c <memset>
  if(huart->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_UART_MspInit+0xd0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d14a      	bne.n	80024da <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4618      	mov	r0, r3
 8002454:	f006 ff42 	bl	80092dc <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff fc81 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_UART_MspInit+0xd4>)
 8002464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002468:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <HAL_UART_MspInit+0xd4>)
 800246a:	f043 0310 	orr.w	r3, r3, #16
 800246e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_UART_MspInit+0xd4>)
 8002474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0xd4>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_UART_MspInit+0xd4>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_UART_MspInit+0xd4>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800249e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b8:	2307      	movs	r3, #7
 80024ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024c2:	4619      	mov	r1, r3
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_UART_MspInit+0xd8>)
 80024c6:	f004 ff6d 	bl	80073a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2025      	movs	r0, #37	; 0x25
 80024d0:	f001 ff2f 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024d4:	2025      	movs	r0, #37	; 0x25
 80024d6:	f001 ff46 	bl	8004366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	37e0      	adds	r7, #224	; 0xe0
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40011000 	.word	0x40011000
 80024e8:	58024400 	.word	0x58024400
 80024ec:	58020000 	.word	0x58020000

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <NMI_Handler+0x4>

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f000 f9ac 	bl	8002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA1_Stream0_IRQHandler+0x10>)
 800254a:	f003 fc19 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	240001a4 	.word	0x240001a4

08002558 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA1_Stream1_IRQHandler+0x10>)
 800255e:	f003 fc0f 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2400021c 	.word	0x2400021c

0800256c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <TIM1_BRK_IRQHandler+0x10>)
 8002572:	f00a f888 	bl	800c686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000404 	.word	0x24000404

08002580 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <TIM1_UP_IRQHandler+0x10>)
 8002586:	f00a f87e 	bl	800c686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	24000404 	.word	0x24000404

08002594 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800259a:	f00a f874 	bl	800c686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	24000404 	.word	0x24000404

080025a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <TIM1_CC_IRQHandler+0x10>)
 80025ae:	f00a f86a 	bl	800c686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	24000404 	.word	0x24000404

080025bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM2_IRQHandler+0x10>)
 80025c2:	f00a f860 	bl	800c686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	24000450 	.word	0x24000450

080025d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <USART1_IRQHandler+0x10>)
 80025d6:	f00b f8ad 	bl	800d734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2400049c 	.word	0x2400049c

080025e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <_sbrk+0x5c>)
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <_sbrk+0x60>)
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <_sbrk+0x64>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <_sbrk+0x68>)
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	429a      	cmp	r2, r3
 8002612:	d207      	bcs.n	8002624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002614:	f00d faba 	bl	800fb8c <__errno>
 8002618:	4603      	mov	r3, r0
 800261a:	220c      	movs	r2, #12
 800261c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002622:	e009      	b.n	8002638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <_sbrk+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <_sbrk+0x64>)
 8002634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	24080000 	.word	0x24080000
 8002644:	00000400 	.word	0x00000400
 8002648:	240005e4 	.word	0x240005e4
 800264c:	24000600 	.word	0x24000600

08002650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <SystemInit+0xe4>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	4a36      	ldr	r2, [pc, #216]	; (8002734 <SystemInit+0xe4>)
 800265c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <SystemInit+0xe8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2b06      	cmp	r3, #6
 800266e:	d807      	bhi.n	8002680 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <SystemInit+0xe8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 030f 	bic.w	r3, r3, #15
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <SystemInit+0xe8>)
 800267a:	f043 0307 	orr.w	r3, r3, #7
 800267e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <SystemInit+0xec>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2d      	ldr	r2, [pc, #180]	; (800273c <SystemInit+0xec>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <SystemInit+0xec>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <SystemInit+0xec>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4929      	ldr	r1, [pc, #164]	; (800273c <SystemInit+0xec>)
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <SystemInit+0xf0>)
 800269a:	4013      	ands	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <SystemInit+0xe8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <SystemInit+0xe8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 030f 	bic.w	r3, r3, #15
 80026b2:	4a21      	ldr	r2, [pc, #132]	; (8002738 <SystemInit+0xe8>)
 80026b4:	f043 0307 	orr.w	r3, r3, #7
 80026b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <SystemInit+0xec>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <SystemInit+0xec>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <SystemInit+0xec>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <SystemInit+0xec>)
 80026ce:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <SystemInit+0xf4>)
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <SystemInit+0xec>)
 80026d4:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <SystemInit+0xf8>)
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <SystemInit+0xec>)
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <SystemInit+0xfc>)
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <SystemInit+0xec>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <SystemInit+0xec>)
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <SystemInit+0xfc>)
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <SystemInit+0xec>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <SystemInit+0xec>)
 80026f2:	4a16      	ldr	r2, [pc, #88]	; (800274c <SystemInit+0xfc>)
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <SystemInit+0xec>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <SystemInit+0xec>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <SystemInit+0xec>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <SystemInit+0xec>)
 800270a:	2200      	movs	r2, #0
 800270c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <SystemInit+0x100>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <SystemInit+0x104>)
 8002714:	4013      	ands	r3, r2
 8002716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271a:	d202      	bcs.n	8002722 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <SystemInit+0x108>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <SystemInit+0x10c>)
 8002724:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002728:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	52002000 	.word	0x52002000
 800273c:	58024400 	.word	0x58024400
 8002740:	eaf6ed7f 	.word	0xeaf6ed7f
 8002744:	02020200 	.word	0x02020200
 8002748:	01ff0000 	.word	0x01ff0000
 800274c:	01010280 	.word	0x01010280
 8002750:	5c001000 	.word	0x5c001000
 8002754:	ffff0000 	.word	0xffff0000
 8002758:	51008108 	.word	0x51008108
 800275c:	52004000 	.word	0x52004000

08002760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002764:	f7ff ff74 	bl	8002650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	; (80027a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	; (80027ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f00d fa03 	bl	800fb98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002792:	f7fe fca7 	bl	80010e4 <main>
  bx  lr
 8002796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002798:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800279c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027a0:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 80027a4:	0800fea8 	.word	0x0800fea8
  ldr r2, =_sbss
 80027a8:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 80027ac:	240005fc 	.word	0x240005fc

080027b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC3_IRQHandler>
	...

080027b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ba:	2003      	movs	r0, #3
 80027bc:	f001 fdae 	bl	800431c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027c0:	f006 fbb6 	bl	8008f30 <HAL_RCC_GetSysClockFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_Init+0x68>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	4913      	ldr	r1, [pc, #76]	; (8002820 <HAL_Init+0x6c>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_Init+0x68>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_Init+0x6c>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <HAL_Init+0x70>)
 80027f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <HAL_Init+0x74>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027fe:	200f      	movs	r0, #15
 8002800:	f000 f814 	bl	800282c <HAL_InitTick>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e002      	b.n	8002814 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800280e:	f7ff faaf 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	58024400 	.word	0x58024400
 8002820:	0800fe58 	.word	0x0800fe58
 8002824:	24000034 	.word	0x24000034
 8002828:	24000030 	.word	0x24000030

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_InitTick+0x60>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e021      	b.n	8002884 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_InitTick+0x64>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_InitTick+0x60>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fd93 	bl	8004382 <HAL_SYSTICK_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00e      	b.n	8002884 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d80a      	bhi.n	8002882 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002874:	f001 fd5d 	bl	8004332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_InitTick+0x68>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	2400003c 	.word	0x2400003c
 8002890:	24000030 	.word	0x24000030
 8002894:	24000038 	.word	0x24000038

08002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x20>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x24>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_IncTick+0x24>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2400003c 	.word	0x2400003c
 80028bc:	240005e8 	.word	0x240005e8

080028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_GetTick+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	240005e8 	.word	0x240005e8

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff ffee 	bl	80028c0 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffde 	bl	80028c0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2400003c 	.word	0x2400003c

08002920 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_SuspendTick+0x1c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_SuspendTick+0x1c>)
 800292a:	f023 0302 	bic.w	r3, r3, #2
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_GetREVID+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0c1b      	lsrs	r3, r3, #16
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	5c001000 	.word	0x5c001000

08002958 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	4904      	ldr	r1, [pc, #16]	; (8002980 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	58000400 	.word	0x58000400

08002984 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	611a      	str	r2, [r3, #16]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3360      	adds	r3, #96	; 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
  }
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b087      	sub	sp, #28
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3330      	adds	r3, #48	; 0x30
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	4413      	add	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	211f      	movs	r1, #31
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	401a      	ands	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 011f 	and.w	r1, r3, #31
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	431a      	orrs	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f023 0203 	bic.w	r2, r3, #3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3314      	adds	r3, #20
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	0e5b      	lsrs	r3, r3, #25
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	0d1b      	lsrs	r3, r3, #20
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2107      	movs	r1, #7
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0d1b      	lsrs	r3, r3, #20
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0318 	and.w	r3, r3, #24
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bb4:	40d9      	lsrs	r1, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	400b      	ands	r3, r1
 8002bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	000fffff 	.word	0x000fffff

08002bd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 031f 	and.w	r3, r3, #31
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6093      	str	r3, [r2, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	5fffffc0 	.word	0x5fffffc0

08002c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2c:	d101      	bne.n	8002c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	6fffffc0 	.word	0x6fffffc0

08002c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c7c:	d101      	bne.n	8002c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_ADC_Enable+0x24>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	7fffffc0 	.word	0x7fffffc0

08002cb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <LL_ADC_Disable+0x24>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	f043 0202 	orr.w	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	7fffffc0 	.word	0x7fffffc0

08002ce0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <LL_ADC_IsEnabled+0x18>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <LL_ADC_IsEnabled+0x1a>
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d101      	bne.n	8002d1e <LL_ADC_IsDisableOngoing+0x18>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <LL_ADC_IsDisableOngoing+0x1a>
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <LL_ADC_REG_StartConversion+0x24>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	f043 0204 	orr.w	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	7fffffc0 	.word	0x7fffffc0

08002d54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e18f      	b.n	80030da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe ffeb 	bl	8001da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff19 	bl	8002c18 <LL_ADC_IsDeepPowerDownEnabled>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff feff 	bl	8002bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff34 	bl	8002c68 <LL_ADC_IsInternalRegulatorEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d114      	bne.n	8002e30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff18 	bl	8002c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e10:	4b87      	ldr	r3, [pc, #540]	; (8003030 <HAL_ADC_Init+0x290>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	4a87      	ldr	r2, [pc, #540]	; (8003034 <HAL_ADC_Init+0x294>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e22:	e002      	b.n	8002e2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff17 	bl	8002c68 <LL_ADC_IsInternalRegulatorEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10d      	bne.n	8002e5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f043 0210 	orr.w	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff77 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8002e66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 8129 	bne.w	80030c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 8125 	bne.w	80030c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff24 	bl	8002ce0 <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d136      	bne.n	8002f0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a65      	ldr	r2, [pc, #404]	; (8003038 <HAL_ADC_Init+0x298>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_ADC_Init+0x112>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a63      	ldr	r2, [pc, #396]	; (800303c <HAL_ADC_Init+0x29c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_ADC_Init+0x130>
 8002eb2:	4861      	ldr	r0, [pc, #388]	; (8003038 <HAL_ADC_Init+0x298>)
 8002eb4:	f7ff ff14 	bl	8002ce0 <LL_ADC_IsEnabled>
 8002eb8:	4604      	mov	r4, r0
 8002eba:	4860      	ldr	r0, [pc, #384]	; (800303c <HAL_ADC_Init+0x29c>)
 8002ebc:	f7ff ff10 	bl	8002ce0 <LL_ADC_IsEnabled>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4323      	orrs	r3, r4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e008      	b.n	8002ee2 <HAL_ADC_Init+0x142>
 8002ed0:	485b      	ldr	r0, [pc, #364]	; (8003040 <HAL_ADC_Init+0x2a0>)
 8002ed2:	f7ff ff05 	bl	8002ce0 <LL_ADC_IsEnabled>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a53      	ldr	r2, [pc, #332]	; (8003038 <HAL_ADC_Init+0x298>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_ADC_Init+0x15a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_ADC_Init+0x29c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_Init+0x15e>
 8002efa:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_ADC_Init+0x2a4>)
 8002efc:	e000      	b.n	8002f00 <HAL_ADC_Init+0x160>
 8002efe:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_ADC_Init+0x2a8>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7ff fd3c 	bl	8002984 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f0c:	f7ff fd18 	bl	8002940 <HAL_GetREVID>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d914      	bls.n	8002f44 <HAL_ADC_Init+0x1a4>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d110      	bne.n	8002f44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7d5b      	ldrb	r3, [r3, #21]
 8002f26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7f1b      	ldrb	r3, [r3, #28]
 8002f38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f3c:	f043 030c 	orr.w	r3, r3, #12
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e00d      	b.n	8002f60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7d5b      	ldrb	r3, [r3, #21]
 8002f48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7f1b      	ldrb	r3, [r3, #28]
 8002f5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7f1b      	ldrb	r3, [r3, #28]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	045b      	lsls	r3, r3, #17
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_ADC_Init+0x2ac>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	69b9      	ldr	r1, [r7, #24]
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fed2 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8002fb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fedf 	bl	8002d7a <LL_ADC_INJ_IsConversionOngoing>
 8002fbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d15f      	bne.n	8003084 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d15c      	bne.n	8003084 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7d1b      	ldrb	r3, [r3, #20]
 8002fce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_ADC_Init+0x2b0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d130      	bne.n	8003058 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_ADC_Init+0x2b4>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300a:	3a01      	subs	r2, #1
 800300c:	0411      	lsls	r1, r2, #16
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800301e:	430a      	orrs	r2, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	e01c      	b.n	8003068 <HAL_ADC_Init+0x2c8>
 800302e:	bf00      	nop
 8003030:	24000030 	.word	0x24000030
 8003034:	053e2d63 	.word	0x053e2d63
 8003038:	40022000 	.word	0x40022000
 800303c:	40022100 	.word	0x40022100
 8003040:	58026000 	.word	0x58026000
 8003044:	40022300 	.word	0x40022300
 8003048:	58026300 	.word	0x58026300
 800304c:	fff0c003 	.word	0xfff0c003
 8003050:	ffffbffc 	.word	0xffffbffc
 8003054:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fdd6 	bl	8003c30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10c      	bne.n	80030a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f023 010f 	bic.w	r1, r3, #15
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
 80030a4:	e007      	b.n	80030b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 020f 	bic.w	r2, r2, #15
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
 80030c6:	e007      	b.n	80030d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}
 80030e2:	bf00      	nop

080030e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a55      	ldr	r2, [pc, #340]	; (800324c <HAL_ADC_Start_DMA+0x168>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_ADC_Start_DMA+0x20>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a54      	ldr	r2, [pc, #336]	; (8003250 <HAL_ADC_Start_DMA+0x16c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_ADC_Start_DMA+0x24>
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_ADC_Start_DMA+0x170>)
 8003106:	e000      	b.n	800310a <HAL_ADC_Start_DMA+0x26>
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_ADC_Start_DMA+0x174>)
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fd64 	bl	8002bd8 <LL_ADC_GetMultimode>
 8003110:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fe1c 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 808c 	bne.w	800323c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Start_DMA+0x4e>
 800312e:	2302      	movs	r3, #2
 8003130:	e087      	b.n	8003242 <HAL_ADC_Start_DMA+0x15e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d002      	beq.n	800314c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b09      	cmp	r3, #9
 800314a:	d170      	bne.n	800322e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fbf1 	bl	8003934 <ADC_Enable>
 8003152:	4603      	mov	r3, r0
 8003154:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d163      	bne.n	8003224 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003160:	4b3e      	ldr	r3, [pc, #248]	; (800325c <HAL_ADC_Start_DMA+0x178>)
 8003162:	4013      	ands	r3, r2
 8003164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	; (8003250 <HAL_ADC_Start_DMA+0x16c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d002      	beq.n	800317c <HAL_ADC_Start_DMA+0x98>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e000      	b.n	800317e <HAL_ADC_Start_DMA+0x9a>
 800317c:	4b33      	ldr	r3, [pc, #204]	; (800324c <HAL_ADC_Start_DMA+0x168>)
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	4293      	cmp	r3, r2
 8003184:	d002      	beq.n	800318c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f023 0206 	bic.w	r2, r3, #6
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	659a      	str	r2, [r3, #88]	; 0x58
 80031b0:	e002      	b.n	80031b8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	4a28      	ldr	r2, [pc, #160]	; (8003260 <HAL_ADC_Start_DMA+0x17c>)
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_ADC_Start_DMA+0x180>)
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <HAL_ADC_Start_DMA+0x184>)
 80031ce:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	221c      	movs	r2, #28
 80031d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0210 	orr.w	r2, r2, #16
 80031ee:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fc89 	bl	8002b12 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3340      	adds	r3, #64	; 0x40
 800320a:	4619      	mov	r1, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f001 fde8 	bl	8004de4 <HAL_DMA_Start_IT>
 8003214:	4603      	mov	r3, r0
 8003216:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fd85 	bl	8002d2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003222:	e00d      	b.n	8003240 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800322c:	e008      	b.n	8003240 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800323a:	e001      	b.n	8003240 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40022100 	.word	0x40022100
 8003254:	40022300 	.word	0x40022300
 8003258:	58026300 	.word	0x58026300
 800325c:	fffff0fe 	.word	0xfffff0fe
 8003260:	08003b07 	.word	0x08003b07
 8003264:	08003bdf 	.word	0x08003bdf
 8003268:	08003bfb 	.word	0x08003bfb

0800326c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b0a1      	sub	sp, #132	; 0x84
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a9d      	ldr	r2, [pc, #628]	; (8003524 <HAL_ADC_ConfigChannel+0x290>)
 80032ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_ADC_ConfigChannel+0x2a>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e321      	b.n	8003902 <HAL_ADC_ConfigChannel+0x66e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fd42 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8306 	bne.w	80038e4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x62>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2201      	movs	r2, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	e016      	b.n	8003324 <HAL_ADC_ConfigChannel+0x90>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003306:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e003      	b.n	800331a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2201      	movs	r2, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	69d1      	ldr	r1, [r2, #28]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	430b      	orrs	r3, r1
 8003330:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	f7ff fbbb 	bl	8002aba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fd03 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 800334e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fd10 	bl	8002d7a <LL_ADC_INJ_IsConversionOngoing>
 800335a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800335c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 80b3 	bne.w	80034ca <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 80af 	bne.w	80034ca <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	461a      	mov	r2, r3
 800337a:	f7ff fbdd 	bl	8002b38 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800337e:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_ADC_ConfigChannel+0x294>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800338a:	d10b      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x110>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	e01d      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x14c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x136>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	e00a      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x14c>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d027      	beq.n	800343a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f8:	f7ff faf8 	bl	80029ec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6919      	ldr	r1, [r3, #16]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	7e5b      	ldrb	r3, [r3, #25]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x17e>
 800340c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003410:	e000      	b.n	8003414 <HAL_ADC_ConfigChannel+0x180>
 8003412:	2300      	movs	r3, #0
 8003414:	461a      	mov	r2, r3
 8003416:	f7ff fb22 	bl	8002a5e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	7e1b      	ldrb	r3, [r3, #24]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d102      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x19c>
 800342a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800342e:	e000      	b.n	8003432 <HAL_ADC_ConfigChannel+0x19e>
 8003430:	2300      	movs	r3, #0
 8003432:	461a      	mov	r2, r3
 8003434:	f7ff fafa 	bl	8002a2c <LL_ADC_SetDataRightShift>
 8003438:	e047      	b.n	80034ca <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	069b      	lsls	r3, r3, #26
 800344a:	429a      	cmp	r2, r3
 800344c:	d107      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003464:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	069b      	lsls	r3, r3, #26
 800346e:	429a      	cmp	r2, r3
 8003470:	d107      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003480:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	069b      	lsls	r3, r3, #26
 8003492:	429a      	cmp	r2, r3
 8003494:	d107      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034a4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	069b      	lsls	r3, r3, #26
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d107      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034c8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fc06 	bl	8002ce0 <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 820d 	bne.w	80038f6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	461a      	mov	r2, r3
 80034ea:	f7ff fb51 	bl	8002b90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <HAL_ADC_ConfigChannel+0x290>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	f040 8133 	bne.w	8003760 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003506:	2b00      	cmp	r3, #0
 8003508:	d110      	bne.n	800352c <HAL_ADC_ConfigChannel+0x298>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	3301      	adds	r3, #1
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2b09      	cmp	r3, #9
 8003518:	bf94      	ite	ls
 800351a:	2301      	movls	r3, #1
 800351c:	2300      	movhi	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e01e      	b.n	8003560 <HAL_ADC_ConfigChannel+0x2cc>
 8003522:	bf00      	nop
 8003524:	47ff0000 	.word	0x47ff0000
 8003528:	5c001000 	.word	0x5c001000
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800353a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800353e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e003      	b.n	8003550 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2b09      	cmp	r3, #9
 8003558:	bf94      	ite	ls
 800355a:	2301      	movls	r3, #1
 800355c:	2300      	movhi	r3, #0
 800355e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003560:	2b00      	cmp	r3, #0
 8003562:	d079      	beq.n	8003658 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x2ec>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357e:	e015      	b.n	80035ac <HAL_ADC_ConfigChannel+0x318>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800358e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e003      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	069b      	lsls	r3, r3, #26
 80035a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x338>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	e017      	b.n	80035fc <HAL_ADC_ConfigChannel+0x368>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80035de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80035e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x38e>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	051b      	lsls	r3, r3, #20
 8003620:	e018      	b.n	8003654 <HAL_ADC_ConfigChannel+0x3c0>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800363a:	2320      	movs	r3, #32
 800363c:	e003      	b.n	8003646 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003654:	430b      	orrs	r3, r1
 8003656:	e07e      	b.n	8003756 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x3e0>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	3301      	adds	r3, #1
 800366c:	069b      	lsls	r3, r3, #26
 800366e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003672:	e015      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x40c>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e003      	b.n	8003698 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	069b      	lsls	r3, r3, #26
 800369c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x42c>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	3301      	adds	r3, #1
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	e017      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x45c>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	61bb      	str	r3, [r7, #24]
  return result;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	ea42 0103 	orr.w	r1, r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <HAL_ADC_ConfigChannel+0x488>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	3301      	adds	r3, #1
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	3b1e      	subs	r3, #30
 8003714:	051b      	lsls	r3, r3, #20
 8003716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371a:	e01b      	b.n	8003754 <HAL_ADC_ConfigChannel+0x4c0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	60fb      	str	r3, [r7, #12]
  return result;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f003 021f 	and.w	r2, r3, #31
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	3b1e      	subs	r3, #30
 800374e:	051b      	lsls	r3, r3, #20
 8003750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003754:	430b      	orrs	r3, r1
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	4619      	mov	r1, r3
 800375c:	f7ff f9ec 	bl	8002b38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f280 80c6 	bge.w	80038f6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a67      	ldr	r2, [pc, #412]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_ADC_ConfigChannel+0x4ea>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a65      	ldr	r2, [pc, #404]	; (8003910 <HAL_ADC_ConfigChannel+0x67c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x4ee>
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <HAL_ADC_ConfigChannel+0x680>)
 8003780:	e000      	b.n	8003784 <HAL_ADC_ConfigChannel+0x4f0>
 8003782:	4b65      	ldr	r3, [pc, #404]	; (8003918 <HAL_ADC_ConfigChannel+0x684>)
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f923 	bl	80029d0 <LL_ADC_GetCommonPathInternalCh>
 800378a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5e      	ldr	r2, [pc, #376]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x50c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5d      	ldr	r2, [pc, #372]	; (8003910 <HAL_ADC_ConfigChannel+0x67c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10e      	bne.n	80037be <HAL_ADC_ConfigChannel+0x52a>
 80037a0:	485a      	ldr	r0, [pc, #360]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 80037a2:	f7ff fa9d 	bl	8002ce0 <LL_ADC_IsEnabled>
 80037a6:	4604      	mov	r4, r0
 80037a8:	4859      	ldr	r0, [pc, #356]	; (8003910 <HAL_ADC_ConfigChannel+0x67c>)
 80037aa:	f7ff fa99 	bl	8002ce0 <LL_ADC_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4323      	orrs	r3, r4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e008      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x53c>
 80037be:	4857      	ldr	r0, [pc, #348]	; (800391c <HAL_ADC_ConfigChannel+0x688>)
 80037c0:	f7ff fa8e 	bl	8002ce0 <LL_ADC_IsEnabled>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d07d      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a51      	ldr	r2, [pc, #324]	; (8003920 <HAL_ADC_ConfigChannel+0x68c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d130      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x5ac>
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d12b      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a4b      	ldr	r2, [pc, #300]	; (800391c <HAL_ADC_ConfigChannel+0x688>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f040 8081 	bne.w	80038f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a44      	ldr	r2, [pc, #272]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_ADC_ConfigChannel+0x574>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a43      	ldr	r2, [pc, #268]	; (8003910 <HAL_ADC_ConfigChannel+0x67c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x578>
 8003808:	4a42      	ldr	r2, [pc, #264]	; (8003914 <HAL_ADC_ConfigChannel+0x680>)
 800380a:	e000      	b.n	800380e <HAL_ADC_ConfigChannel+0x57a>
 800380c:	4a42      	ldr	r2, [pc, #264]	; (8003918 <HAL_ADC_ConfigChannel+0x684>)
 800380e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7ff f8c7 	bl	80029aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_ADC_ConfigChannel+0x690>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	4a41      	ldr	r2, [pc, #260]	; (8003928 <HAL_ADC_ConfigChannel+0x694>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003830:	e002      	b.n	8003838 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3b01      	subs	r3, #1
 8003836:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f9      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800383e:	e05a      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a39      	ldr	r2, [pc, #228]	; (800392c <HAL_ADC_ConfigChannel+0x698>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d11e      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x5f4>
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d119      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a30      	ldr	r2, [pc, #192]	; (800391c <HAL_ADC_ConfigChannel+0x688>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d14b      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2a      	ldr	r2, [pc, #168]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_ADC_ConfigChannel+0x5de>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_ADC_ConfigChannel+0x67c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x5e2>
 8003872:	4a28      	ldr	r2, [pc, #160]	; (8003914 <HAL_ADC_ConfigChannel+0x680>)
 8003874:	e000      	b.n	8003878 <HAL_ADC_ConfigChannel+0x5e4>
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <HAL_ADC_ConfigChannel+0x684>)
 8003878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff f892 	bl	80029aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003886:	e036      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a28      	ldr	r2, [pc, #160]	; (8003930 <HAL_ADC_ConfigChannel+0x69c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d131      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d12c      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_ADC_ConfigChannel+0x688>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d127      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_ADC_ConfigChannel+0x626>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_ADC_ConfigChannel+0x67c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x62a>
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_ADC_ConfigChannel+0x680>)
 80038bc:	e000      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x62c>
 80038be:	4a16      	ldr	r2, [pc, #88]	; (8003918 <HAL_ADC_ConfigChannel+0x684>)
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7ff f86e 	bl	80029aa <LL_ADC_SetCommonPathInternalCh>
 80038ce:	e012      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038e2:	e008      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003902:	4618      	mov	r0, r3
 8003904:	3784      	adds	r7, #132	; 0x84
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	bf00      	nop
 800390c:	40022000 	.word	0x40022000
 8003910:	40022100 	.word	0x40022100
 8003914:	40022300 	.word	0x40022300
 8003918:	58026300 	.word	0x58026300
 800391c:	58026000 	.word	0x58026000
 8003920:	cb840000 	.word	0xcb840000
 8003924:	24000030 	.word	0x24000030
 8003928:	053e2d63 	.word	0x053e2d63
 800392c:	c7520000 	.word	0xc7520000
 8003930:	cfb80000 	.word	0xcfb80000

08003934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff f9cd 	bl	8002ce0 <LL_ADC_IsEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d16e      	bne.n	8003a2a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <ADC_Enable+0x100>)
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f043 0210 	orr.w	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e05a      	b.n	8003a2c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f988 	bl	8002c90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003980:	f7fe ff9e 	bl	80028c0 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <ADC_Enable+0x104>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <ADC_Enable+0x66>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <ADC_Enable+0x108>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <ADC_Enable+0x6a>
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <ADC_Enable+0x10c>)
 800399c:	e000      	b.n	80039a0 <ADC_Enable+0x6c>
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <ADC_Enable+0x110>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f919 	bl	8002bd8 <LL_ADC_GetMultimode>
 80039a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <ADC_Enable+0x108>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d002      	beq.n	80039b8 <ADC_Enable+0x84>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	e000      	b.n	80039ba <ADC_Enable+0x86>
 80039b8:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <ADC_Enable+0x104>)
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d130      	bne.n	8003a2a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039c8:	e028      	b.n	8003a1c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f986 	bl	8002ce0 <LL_ADC_IsEnabled>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff f956 	bl	8002c90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039e4:	f7fe ff6c 	bl	80028c0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d914      	bls.n	8003a1c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d00d      	beq.n	8003a1c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0210 	orr.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d1cf      	bne.n	80039ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	8000003f 	.word	0x8000003f
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40022100 	.word	0x40022100
 8003a40:	40022300 	.word	0x40022300
 8003a44:	58026300 	.word	0x58026300

08003a48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f956 	bl	8002d06 <LL_ADC_IsDisableOngoing>
 8003a5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f93d 	bl	8002ce0 <LL_ADC_IsEnabled>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d047      	beq.n	8003afc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d144      	bne.n	8003afc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030d 	and.w	r3, r3, #13
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10c      	bne.n	8003a9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f917 	bl	8002cb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a92:	f7fe ff15 	bl	80028c0 <HAL_GetTick>
 8003a96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a98:	e029      	b.n	8003aee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	f043 0210 	orr.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e023      	b.n	8003afe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ab6:	f7fe ff03 	bl	80028c0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d914      	bls.n	8003aee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1dc      	bne.n	8003ab6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d14b      	bne.n	8003bb8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d021      	beq.n	8003b7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe ffa8 	bl	8002a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d032      	beq.n	8003bb0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d12b      	bne.n	8003bb0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11f      	bne.n	8003bb0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
 8003b7c:	e018      	b.n	8003bb0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7fe f86b 	bl	8001c8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bb6:	e00e      	b.n	8003bd6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fb5b 	bl	8003280 <HAL_ADC_ErrorCallback>
}
 8003bca:	e004      	b.n	8003bd6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fb3d 	bl	800326c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f043 0204 	orr.w	r2, r3, #4
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff fb2d 	bl	8003280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a79      	ldr	r2, [pc, #484]	; (8003e24 <ADC_ConfigureBoostMode+0x1f4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <ADC_ConfigureBoostMode+0x1c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a78      	ldr	r2, [pc, #480]	; (8003e28 <ADC_ConfigureBoostMode+0x1f8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d109      	bne.n	8003c60 <ADC_ConfigureBoostMode+0x30>
 8003c4c:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <ADC_ConfigureBoostMode+0x1fc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e008      	b.n	8003c72 <ADC_ConfigureBoostMode+0x42>
 8003c60:	4b73      	ldr	r3, [pc, #460]	; (8003e30 <ADC_ConfigureBoostMode+0x200>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01c      	beq.n	8003cb0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c76:	f005 fad5 	bl	8009224 <HAL_RCC_GetHCLKFreq>
 8003c7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c84:	d010      	beq.n	8003ca8 <ADC_ConfigureBoostMode+0x78>
 8003c86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c8a:	d871      	bhi.n	8003d70 <ADC_ConfigureBoostMode+0x140>
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d002      	beq.n	8003c98 <ADC_ConfigureBoostMode+0x68>
 8003c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c96:	d16b      	bne.n	8003d70 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
        break;
 8003ca6:	e066      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	60fb      	str	r3, [r7, #12]
        break;
 8003cae:	e062      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cb4:	f006 fa58 	bl	800a168 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cb8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cc2:	d051      	beq.n	8003d68 <ADC_ConfigureBoostMode+0x138>
 8003cc4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cc8:	d854      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003cca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cce:	d047      	beq.n	8003d60 <ADC_ConfigureBoostMode+0x130>
 8003cd0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cd4:	d84e      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003cd6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cda:	d03d      	beq.n	8003d58 <ADC_ConfigureBoostMode+0x128>
 8003cdc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ce0:	d848      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ce6:	d033      	beq.n	8003d50 <ADC_ConfigureBoostMode+0x120>
 8003ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cec:	d842      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003cee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003cf2:	d029      	beq.n	8003d48 <ADC_ConfigureBoostMode+0x118>
 8003cf4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003cf8:	d83c      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003cfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003cfe:	d01a      	beq.n	8003d36 <ADC_ConfigureBoostMode+0x106>
 8003d00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d04:	d836      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003d06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d0a:	d014      	beq.n	8003d36 <ADC_ConfigureBoostMode+0x106>
 8003d0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d10:	d830      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d16:	d00e      	beq.n	8003d36 <ADC_ConfigureBoostMode+0x106>
 8003d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1c:	d82a      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003d1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d22:	d008      	beq.n	8003d36 <ADC_ConfigureBoostMode+0x106>
 8003d24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d28:	d824      	bhi.n	8003d74 <ADC_ConfigureBoostMode+0x144>
 8003d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d2e:	d002      	beq.n	8003d36 <ADC_ConfigureBoostMode+0x106>
 8003d30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d34:	d11e      	bne.n	8003d74 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	0c9b      	lsrs	r3, r3, #18
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	60fb      	str	r3, [r7, #12]
        break;
 8003d46:	e016      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
        break;
 8003d4e:	e012      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	60fb      	str	r3, [r7, #12]
        break;
 8003d56:	e00e      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	60fb      	str	r3, [r7, #12]
        break;
 8003d5e:	e00a      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	09db      	lsrs	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
        break;
 8003d66:	e006      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	60fb      	str	r3, [r7, #12]
        break;
 8003d6e:	e002      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
        break;
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003d74:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003d76:	f7fe fde3 	bl	8002940 <HAL_GetREVID>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d815      	bhi.n	8003db0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <ADC_ConfigureBoostMode+0x204>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d908      	bls.n	8003d9e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003d9c:	e03e      	b.n	8003e1c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dac:	609a      	str	r2, [r3, #8]
}
 8003dae:	e035      	b.n	8003e1c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <ADC_ConfigureBoostMode+0x208>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d808      	bhi.n	8003dd0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dcc:	609a      	str	r2, [r3, #8]
}
 8003dce:	e025      	b.n	8003e1c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <ADC_ConfigureBoostMode+0x20c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d80a      	bhi.n	8003dee <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dea:	609a      	str	r2, [r3, #8]
}
 8003dec:	e016      	b.n	8003e1c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <ADC_ConfigureBoostMode+0x210>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d80a      	bhi.n	8003e0c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	609a      	str	r2, [r3, #8]
}
 8003e0a:	e007      	b.n	8003e1c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40022100 	.word	0x40022100
 8003e2c:	40022300 	.word	0x40022300
 8003e30:	58026300 	.word	0x58026300
 8003e34:	01312d00 	.word	0x01312d00
 8003e38:	005f5e10 	.word	0x005f5e10
 8003e3c:	00bebc20 	.word	0x00bebc20
 8003e40:	017d7840 	.word	0x017d7840

08003e44 <LL_ADC_IsEnabled>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <LL_ADC_IsEnabled+0x18>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <LL_ADC_IsEnabled+0x1a>
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <LL_ADC_StartCalibration>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <LL_ADC_StartCalibration+0x38>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	3ffeffc0 	.word	0x3ffeffc0

08003ea8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ebc:	d101      	bne.n	8003ec2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d101      	bne.n	8003ee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e04c      	b.n	8003fb0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fd92 	bl	8003a48 <ADC_Disable>
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d135      	bne.n	8003f9a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f32:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	f043 0202 	orr.w	r2, r3, #2
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff90 	bl	8003e6c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f4c:	e014      	b.n	8003f78 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3301      	adds	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d30d      	bcc.n	8003f78 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f023 0312 	bic.w	r3, r3, #18
 8003f64:	f043 0210 	orr.w	r2, r3, #16
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01b      	b.n	8003fb0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff93 	bl	8003ea8 <LL_ADC_IsCalibrationOnGoing>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e2      	bne.n	8003f4e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f023 0303 	bic.w	r3, r3, #3
 8003f90:	f043 0201 	orr.w	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
 8003f98:	e005      	b.n	8003fa6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	ffffeefd 	.word	0xffffeefd
 8003fbc:	25c3f800 	.word	0x25c3f800

08003fc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b09f      	sub	sp, #124	; 0x7c
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0be      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a5c      	ldr	r2, [pc, #368]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d102      	bne.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	e001      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e09d      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ff54 	bl	8003ed0 <LL_ADC_REG_IsConversionOngoing>
 8004028:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff4e 	bl	8003ed0 <LL_ADC_REG_IsConversionOngoing>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d17f      	bne.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800403a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403c:	2b00      	cmp	r3, #0
 800403e:	d17c      	bne.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a47      	ldr	r2, [pc, #284]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a46      	ldr	r2, [pc, #280]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d101      	bne.n	8004058 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004054:	4b45      	ldr	r3, [pc, #276]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004056:	e000      	b.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004058:	4b45      	ldr	r3, [pc, #276]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800405a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d039      	beq.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	431a      	orrs	r2, r3
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3a      	ldr	r2, [pc, #232]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a38      	ldr	r2, [pc, #224]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10e      	bne.n	80040a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800408a:	4836      	ldr	r0, [pc, #216]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800408c:	f7ff feda 	bl	8003e44 <LL_ADC_IsEnabled>
 8004090:	4604      	mov	r4, r0
 8004092:	4835      	ldr	r0, [pc, #212]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004094:	f7ff fed6 	bl	8003e44 <LL_ADC_IsEnabled>
 8004098:	4603      	mov	r3, r0
 800409a:	4323      	orrs	r3, r4
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e008      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040a8:	4832      	ldr	r0, [pc, #200]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040aa:	f7ff fecb 	bl	8003e44 <LL_ADC_IsEnabled>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d047      	beq.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	431a      	orrs	r2, r3
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040d6:	e03a      	b.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d10e      	bne.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040f8:	481a      	ldr	r0, [pc, #104]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040fa:	f7ff fea3 	bl	8003e44 <LL_ADC_IsEnabled>
 80040fe:	4604      	mov	r4, r0
 8004100:	4819      	ldr	r0, [pc, #100]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004102:	f7ff fe9f 	bl	8003e44 <LL_ADC_IsEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	4323      	orrs	r3, r4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e008      	b.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004116:	4817      	ldr	r0, [pc, #92]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004118:	f7ff fe94 	bl	8003e44 <LL_ADC_IsEnabled>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004132:	4013      	ands	r3, r2
 8004134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004136:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004138:	e009      	b.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800414c:	e000      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800414e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004158:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800415c:	4618      	mov	r0, r3
 800415e:	377c      	adds	r7, #124	; 0x7c
 8004160:	46bd      	mov	sp, r7
 8004162:	bd90      	pop	{r4, r7, pc}
 8004164:	40022000 	.word	0x40022000
 8004168:	40022100 	.word	0x40022100
 800416c:	40022300 	.word	0x40022300
 8004170:	58026300 	.word	0x58026300
 8004174:	58026000 	.word	0x58026000
 8004178:	fffff0e0 	.word	0xfffff0e0

0800417c <__NVIC_SetPriorityGrouping>:
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <__NVIC_SetPriorityGrouping+0x40>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <__NVIC_SetPriorityGrouping+0x40>)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	60d3      	str	r3, [r2, #12]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00
 80041c0:	05fa0000 	.word	0x05fa0000

080041c4 <__NVIC_GetPriorityGrouping>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <__NVIC_GetPriorityGrouping+0x18>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0307 	and.w	r3, r3, #7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_EnableIRQ>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0b      	blt.n	800420a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <__NVIC_EnableIRQ+0x38>)
 80041fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2001      	movs	r0, #1
 8004202:	fa00 f202 	lsl.w	r2, r0, r2
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e8:	d301      	bcc.n	80042ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <SysTick_Config+0x40>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f6:	210f      	movs	r1, #15
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fc:	f7ff ff8e 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <SysTick_Config+0x40>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <SysTick_Config+0x40>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010

0800431c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff29 	bl	800417c <__NVIC_SetPriorityGrouping>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004340:	f7ff ff40 	bl	80041c4 <__NVIC_GetPriorityGrouping>
 8004344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	6978      	ldr	r0, [r7, #20]
 800434c:	f7ff ff90 	bl	8004270 <NVIC_EncodePriority>
 8004350:	4602      	mov	r2, r0
 8004352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff5f 	bl	800421c <__NVIC_SetPriority>
}
 800435e:	bf00      	nop
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff33 	bl	80041e0 <__NVIC_EnableIRQ>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ffa4 	bl	80042d8 <SysTick_Config>
 8004390:	4603      	mov	r3, r0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e014      	b.n	80043d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	791b      	ldrb	r3, [r3, #4]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fd fe0b 	bl	8001fd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	795b      	ldrb	r3, [r3, #5]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_DAC_Start+0x16>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e040      	b.n	8004476 <HAL_DAC_Start+0x98>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004428:	2b02      	cmp	r3, #2
 800442a:	d11d      	bne.n	8004468 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e014      	b.n	8004468 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2102      	movs	r1, #2
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	429a      	cmp	r2, r3
 8004456:	d107      	bne.n	8004468 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0202 	orr.w	r2, r2, #2
 8004466:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004482:	b480      	push	{r7}
 8004484:	b087      	sub	sp, #28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d105      	bne.n	80044ac <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	3308      	adds	r3, #8
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e004      	b.n	80044b6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	3314      	adds	r3, #20
 80044b4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	461a      	mov	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	795b      	ldrb	r3, [r3, #5]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_DAC_ConfigChannel+0x18>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e11d      	b.n	8004720 <HAL_DAC_ConfigChannel+0x254>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2202      	movs	r2, #2
 80044ee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d174      	bne.n	80045e2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044f8:	f7fe f9e2 	bl	80028c0 <HAL_GetTick>
 80044fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d134      	bne.n	800456e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004504:	e011      	b.n	800452a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004506:	f7fe f9db 	bl	80028c0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d90a      	bls.n	800452a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f043 0208 	orr.w	r2, r3, #8
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2203      	movs	r2, #3
 8004524:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0fa      	b.n	8004720 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004530:	4b7d      	ldr	r3, [pc, #500]	; (8004728 <HAL_DAC_ConfigChannel+0x25c>)
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e6      	bne.n	8004506 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004538:	2001      	movs	r0, #1
 800453a:	f7fe f9cd 	bl	80028d8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	6992      	ldr	r2, [r2, #24]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
 8004548:	e01e      	b.n	8004588 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800454a:	f7fe f9b9 	bl	80028c0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d90a      	bls.n	800456e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f043 0208 	orr.w	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2203      	movs	r2, #3
 8004568:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0d8      	b.n	8004720 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	2b00      	cmp	r3, #0
 8004576:	dbe8      	blt.n	800454a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004578:	2001      	movs	r0, #1
 800457a:	f7fe f9ad 	bl	80028d8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	6992      	ldr	r2, [r2, #24]
 8004586:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	ea02 0103 	and.w	r1, r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	409a      	lsls	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	21ff      	movs	r1, #255	; 0xff
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	ea02 0103 	and.w	r1, r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	409a      	lsls	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d11d      	bne.n	8004626 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	221f      	movs	r2, #31
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4013      	ands	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2207      	movs	r2, #7
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4013      	ands	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d102      	bne.n	8004650 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e00f      	b.n	8004670 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d102      	bne.n	800465e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004658:	2301      	movs	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e008      	b.n	8004670 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e001      	b.n	8004670 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	22c0      	movs	r2, #192	; 0xc0
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43da      	mvns	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	400a      	ands	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20008000 	.word	0x20008000

0800472c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7fe f8c4 	bl	80028c0 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e316      	b.n	8004d72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a66      	ldr	r2, [pc, #408]	; (80048e4 <HAL_DMA_Init+0x1b8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d04a      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a65      	ldr	r2, [pc, #404]	; (80048e8 <HAL_DMA_Init+0x1bc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d045      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a63      	ldr	r2, [pc, #396]	; (80048ec <HAL_DMA_Init+0x1c0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d040      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a62      	ldr	r2, [pc, #392]	; (80048f0 <HAL_DMA_Init+0x1c4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d03b      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a60      	ldr	r2, [pc, #384]	; (80048f4 <HAL_DMA_Init+0x1c8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d036      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a5f      	ldr	r2, [pc, #380]	; (80048f8 <HAL_DMA_Init+0x1cc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d031      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <HAL_DMA_Init+0x1d0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d02c      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a5c      	ldr	r2, [pc, #368]	; (8004900 <HAL_DMA_Init+0x1d4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d027      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5a      	ldr	r2, [pc, #360]	; (8004904 <HAL_DMA_Init+0x1d8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d022      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a59      	ldr	r2, [pc, #356]	; (8004908 <HAL_DMA_Init+0x1dc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d01d      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a57      	ldr	r2, [pc, #348]	; (800490c <HAL_DMA_Init+0x1e0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a56      	ldr	r2, [pc, #344]	; (8004910 <HAL_DMA_Init+0x1e4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a54      	ldr	r2, [pc, #336]	; (8004914 <HAL_DMA_Init+0x1e8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a53      	ldr	r2, [pc, #332]	; (8004918 <HAL_DMA_Init+0x1ec>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a51      	ldr	r2, [pc, #324]	; (800491c <HAL_DMA_Init+0x1f0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_DMA_Init+0xb8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a50      	ldr	r2, [pc, #320]	; (8004920 <HAL_DMA_Init+0x1f4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_DMA_Init+0xbc>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_DMA_Init+0xbe>
 80047e8:	2300      	movs	r3, #0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 813b 	beq.w	8004a66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <HAL_DMA_Init+0x1b8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d04a      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a36      	ldr	r2, [pc, #216]	; (80048e8 <HAL_DMA_Init+0x1bc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d045      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a34      	ldr	r2, [pc, #208]	; (80048ec <HAL_DMA_Init+0x1c0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d040      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a33      	ldr	r2, [pc, #204]	; (80048f0 <HAL_DMA_Init+0x1c4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d03b      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a31      	ldr	r2, [pc, #196]	; (80048f4 <HAL_DMA_Init+0x1c8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d036      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a30      	ldr	r2, [pc, #192]	; (80048f8 <HAL_DMA_Init+0x1cc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d031      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <HAL_DMA_Init+0x1d0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d02c      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <HAL_DMA_Init+0x1d4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d027      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <HAL_DMA_Init+0x1d8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d022      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <HAL_DMA_Init+0x1dc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d01d      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a28      	ldr	r2, [pc, #160]	; (800490c <HAL_DMA_Init+0x1e0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d018      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a27      	ldr	r2, [pc, #156]	; (8004910 <HAL_DMA_Init+0x1e4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d013      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a25      	ldr	r2, [pc, #148]	; (8004914 <HAL_DMA_Init+0x1e8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00e      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a24      	ldr	r2, [pc, #144]	; (8004918 <HAL_DMA_Init+0x1ec>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d009      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a22      	ldr	r2, [pc, #136]	; (800491c <HAL_DMA_Init+0x1f0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_DMA_Init+0x174>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a21      	ldr	r2, [pc, #132]	; (8004920 <HAL_DMA_Init+0x1f4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d108      	bne.n	80048b2 <HAL_DMA_Init+0x186>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e007      	b.n	80048c2 <HAL_DMA_Init+0x196>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048c2:	e02f      	b.n	8004924 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c4:	f7fd fffc 	bl	80028c0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d928      	bls.n	8004924 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e246      	b.n	8004d72 <HAL_DMA_Init+0x646>
 80048e4:	40020010 	.word	0x40020010
 80048e8:	40020028 	.word	0x40020028
 80048ec:	40020040 	.word	0x40020040
 80048f0:	40020058 	.word	0x40020058
 80048f4:	40020070 	.word	0x40020070
 80048f8:	40020088 	.word	0x40020088
 80048fc:	400200a0 	.word	0x400200a0
 8004900:	400200b8 	.word	0x400200b8
 8004904:	40020410 	.word	0x40020410
 8004908:	40020428 	.word	0x40020428
 800490c:	40020440 	.word	0x40020440
 8004910:	40020458 	.word	0x40020458
 8004914:	40020470 	.word	0x40020470
 8004918:	40020488 	.word	0x40020488
 800491c:	400204a0 	.word	0x400204a0
 8004920:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1c8      	bne.n	80048c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4b83      	ldr	r3, [pc, #524]	; (8004b4c <HAL_DMA_Init+0x420>)
 800493e:	4013      	ands	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800494a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004956:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004962:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2b04      	cmp	r3, #4
 8004976:	d107      	bne.n	8004988 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	4313      	orrs	r3, r2
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004988:	4b71      	ldr	r3, [pc, #452]	; (8004b50 <HAL_DMA_Init+0x424>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b71      	ldr	r3, [pc, #452]	; (8004b54 <HAL_DMA_Init+0x428>)
 800498e:	4013      	ands	r3, r2
 8004990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004994:	d328      	bcc.n	80049e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b28      	cmp	r3, #40	; 0x28
 800499c:	d903      	bls.n	80049a6 <HAL_DMA_Init+0x27a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b2e      	cmp	r3, #46	; 0x2e
 80049a4:	d917      	bls.n	80049d6 <HAL_DMA_Init+0x2aa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b3e      	cmp	r3, #62	; 0x3e
 80049ac:	d903      	bls.n	80049b6 <HAL_DMA_Init+0x28a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b42      	cmp	r3, #66	; 0x42
 80049b4:	d90f      	bls.n	80049d6 <HAL_DMA_Init+0x2aa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b46      	cmp	r3, #70	; 0x46
 80049bc:	d903      	bls.n	80049c6 <HAL_DMA_Init+0x29a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b48      	cmp	r3, #72	; 0x48
 80049c4:	d907      	bls.n	80049d6 <HAL_DMA_Init+0x2aa>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b4e      	cmp	r3, #78	; 0x4e
 80049cc:	d905      	bls.n	80049da <HAL_DMA_Init+0x2ae>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b52      	cmp	r3, #82	; 0x52
 80049d4:	d801      	bhi.n	80049da <HAL_DMA_Init+0x2ae>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_DMA_Init+0x2b0>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d117      	bne.n	8004a42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f002 fb33 	bl	8007090 <DMA_CheckFifoParam>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2240      	movs	r2, #64	; 0x40
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e197      	b.n	8004d72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f002 fa6e 	bl	8006f2c <DMA_CalcBaseAndBitshift>
 8004a50:	4603      	mov	r3, r0
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	223f      	movs	r2, #63	; 0x3f
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	e0cd      	b.n	8004c02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3b      	ldr	r2, [pc, #236]	; (8004b58 <HAL_DMA_Init+0x42c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a39      	ldr	r2, [pc, #228]	; (8004b5c <HAL_DMA_Init+0x430>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <HAL_DMA_Init+0x434>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a36      	ldr	r2, [pc, #216]	; (8004b64 <HAL_DMA_Init+0x438>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a35      	ldr	r2, [pc, #212]	; (8004b68 <HAL_DMA_Init+0x43c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <HAL_DMA_Init+0x440>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <HAL_DMA_Init+0x444>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_DMA_Init+0x38a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	; (8004b74 <HAL_DMA_Init+0x448>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d101      	bne.n	8004aba <HAL_DMA_Init+0x38e>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_DMA_Init+0x390>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8097 	beq.w	8004bf0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <HAL_DMA_Init+0x42c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d021      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <HAL_DMA_Init+0x430>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01c      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <HAL_DMA_Init+0x434>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d017      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <HAL_DMA_Init+0x438>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d012      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <HAL_DMA_Init+0x43c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00d      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <HAL_DMA_Init+0x440>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d008      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <HAL_DMA_Init+0x444>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <HAL_DMA_Init+0x3e4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <HAL_DMA_Init+0x448>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_DMA_Init+0x44c>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d020      	beq.n	8004b7c <HAL_DMA_Init+0x450>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d102      	bne.n	8004b48 <HAL_DMA_Init+0x41c>
 8004b42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b46:	e01a      	b.n	8004b7e <HAL_DMA_Init+0x452>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e018      	b.n	8004b7e <HAL_DMA_Init+0x452>
 8004b4c:	fe10803f 	.word	0xfe10803f
 8004b50:	5c001000 	.word	0x5c001000
 8004b54:	ffff0000 	.word	0xffff0000
 8004b58:	58025408 	.word	0x58025408
 8004b5c:	5802541c 	.word	0x5802541c
 8004b60:	58025430 	.word	0x58025430
 8004b64:	58025444 	.word	0x58025444
 8004b68:	58025458 	.word	0x58025458
 8004b6c:	5802546c 	.word	0x5802546c
 8004b70:	58025480 	.word	0x58025480
 8004b74:	58025494 	.word	0x58025494
 8004b78:	fffe000f 	.word	0xfffe000f
 8004b7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <HAL_DMA_Init+0x650>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a6e      	ldr	r2, [pc, #440]	; (8004d80 <HAL_DMA_Init+0x654>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	009a      	lsls	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f002 f9a9 	bl	8006f2c <DMA_CalcBaseAndBitshift>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2201      	movs	r2, #1
 8004be8:	409a      	lsls	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e008      	b.n	8004c02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2240      	movs	r2, #64	; 0x40
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e0b7      	b.n	8004d72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5f      	ldr	r2, [pc, #380]	; (8004d84 <HAL_DMA_Init+0x658>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d072      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5d      	ldr	r2, [pc, #372]	; (8004d88 <HAL_DMA_Init+0x65c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d06d      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5c      	ldr	r2, [pc, #368]	; (8004d8c <HAL_DMA_Init+0x660>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d068      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5a      	ldr	r2, [pc, #360]	; (8004d90 <HAL_DMA_Init+0x664>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d063      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a59      	ldr	r2, [pc, #356]	; (8004d94 <HAL_DMA_Init+0x668>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d05e      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a57      	ldr	r2, [pc, #348]	; (8004d98 <HAL_DMA_Init+0x66c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d059      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a56      	ldr	r2, [pc, #344]	; (8004d9c <HAL_DMA_Init+0x670>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d054      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a54      	ldr	r2, [pc, #336]	; (8004da0 <HAL_DMA_Init+0x674>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d04f      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a53      	ldr	r2, [pc, #332]	; (8004da4 <HAL_DMA_Init+0x678>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04a      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a51      	ldr	r2, [pc, #324]	; (8004da8 <HAL_DMA_Init+0x67c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_DMA_Init+0x680>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a4e      	ldr	r2, [pc, #312]	; (8004db0 <HAL_DMA_Init+0x684>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d03b      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a4d      	ldr	r2, [pc, #308]	; (8004db4 <HAL_DMA_Init+0x688>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d036      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a4b      	ldr	r2, [pc, #300]	; (8004db8 <HAL_DMA_Init+0x68c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_DMA_Init+0x690>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02c      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a48      	ldr	r2, [pc, #288]	; (8004dc0 <HAL_DMA_Init+0x694>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d027      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a47      	ldr	r2, [pc, #284]	; (8004dc4 <HAL_DMA_Init+0x698>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a45      	ldr	r2, [pc, #276]	; (8004dc8 <HAL_DMA_Init+0x69c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a44      	ldr	r2, [pc, #272]	; (8004dcc <HAL_DMA_Init+0x6a0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a42      	ldr	r2, [pc, #264]	; (8004dd0 <HAL_DMA_Init+0x6a4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a41      	ldr	r2, [pc, #260]	; (8004dd4 <HAL_DMA_Init+0x6a8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3f      	ldr	r2, [pc, #252]	; (8004dd8 <HAL_DMA_Init+0x6ac>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a3e      	ldr	r2, [pc, #248]	; (8004ddc <HAL_DMA_Init+0x6b0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_DMA_Init+0x5c6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3c      	ldr	r2, [pc, #240]	; (8004de0 <HAL_DMA_Init+0x6b4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_DMA_Init+0x5ca>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_DMA_Init+0x5cc>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d032      	beq.n	8004d62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f002 fa43 	bl	8007188 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d102      	bne.n	8004d10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_DMA_Init+0x624>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d80c      	bhi.n	8004d50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f002 fac0 	bl	80072bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	e008      	b.n	8004d62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	a7fdabf8 	.word	0xa7fdabf8
 8004d80:	cccccccd 	.word	0xcccccccd
 8004d84:	40020010 	.word	0x40020010
 8004d88:	40020028 	.word	0x40020028
 8004d8c:	40020040 	.word	0x40020040
 8004d90:	40020058 	.word	0x40020058
 8004d94:	40020070 	.word	0x40020070
 8004d98:	40020088 	.word	0x40020088
 8004d9c:	400200a0 	.word	0x400200a0
 8004da0:	400200b8 	.word	0x400200b8
 8004da4:	40020410 	.word	0x40020410
 8004da8:	40020428 	.word	0x40020428
 8004dac:	40020440 	.word	0x40020440
 8004db0:	40020458 	.word	0x40020458
 8004db4:	40020470 	.word	0x40020470
 8004db8:	40020488 	.word	0x40020488
 8004dbc:	400204a0 	.word	0x400204a0
 8004dc0:	400204b8 	.word	0x400204b8
 8004dc4:	58025408 	.word	0x58025408
 8004dc8:	5802541c 	.word	0x5802541c
 8004dcc:	58025430 	.word	0x58025430
 8004dd0:	58025444 	.word	0x58025444
 8004dd4:	58025458 	.word	0x58025458
 8004dd8:	5802546c 	.word	0x5802546c
 8004ddc:	58025480 	.word	0x58025480
 8004de0:	58025494 	.word	0x58025494

08004de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e226      	b.n	800524e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_DMA_Start_IT+0x2a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e21f      	b.n	800524e <HAL_DMA_Start_IT+0x46a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	f040 820a 	bne.w	8005238 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a68      	ldr	r2, [pc, #416]	; (8004fd8 <HAL_DMA_Start_IT+0x1f4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04a      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a66      	ldr	r2, [pc, #408]	; (8004fdc <HAL_DMA_Start_IT+0x1f8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d045      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a65      	ldr	r2, [pc, #404]	; (8004fe0 <HAL_DMA_Start_IT+0x1fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d040      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a63      	ldr	r2, [pc, #396]	; (8004fe4 <HAL_DMA_Start_IT+0x200>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d03b      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a62      	ldr	r2, [pc, #392]	; (8004fe8 <HAL_DMA_Start_IT+0x204>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d036      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a60      	ldr	r2, [pc, #384]	; (8004fec <HAL_DMA_Start_IT+0x208>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d031      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a5f      	ldr	r2, [pc, #380]	; (8004ff0 <HAL_DMA_Start_IT+0x20c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d02c      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a5d      	ldr	r2, [pc, #372]	; (8004ff4 <HAL_DMA_Start_IT+0x210>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d027      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5c      	ldr	r2, [pc, #368]	; (8004ff8 <HAL_DMA_Start_IT+0x214>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5a      	ldr	r2, [pc, #360]	; (8004ffc <HAL_DMA_Start_IT+0x218>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01d      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a59      	ldr	r2, [pc, #356]	; (8005000 <HAL_DMA_Start_IT+0x21c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a57      	ldr	r2, [pc, #348]	; (8005004 <HAL_DMA_Start_IT+0x220>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a56      	ldr	r2, [pc, #344]	; (8005008 <HAL_DMA_Start_IT+0x224>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a54      	ldr	r2, [pc, #336]	; (800500c <HAL_DMA_Start_IT+0x228>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a53      	ldr	r2, [pc, #332]	; (8005010 <HAL_DMA_Start_IT+0x22c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a51      	ldr	r2, [pc, #324]	; (8005014 <HAL_DMA_Start_IT+0x230>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <HAL_DMA_Start_IT+0x100>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e007      	b.n	8004ef4 <HAL_DMA_Start_IT+0x110>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f001 fe6a 	bl	8006bd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a34      	ldr	r2, [pc, #208]	; (8004fd8 <HAL_DMA_Start_IT+0x1f4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d04a      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a33      	ldr	r2, [pc, #204]	; (8004fdc <HAL_DMA_Start_IT+0x1f8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d045      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a31      	ldr	r2, [pc, #196]	; (8004fe0 <HAL_DMA_Start_IT+0x1fc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d040      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <HAL_DMA_Start_IT+0x200>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d03b      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2e      	ldr	r2, [pc, #184]	; (8004fe8 <HAL_DMA_Start_IT+0x204>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d036      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <HAL_DMA_Start_IT+0x208>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d031      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2b      	ldr	r2, [pc, #172]	; (8004ff0 <HAL_DMA_Start_IT+0x20c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d02c      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ff4 <HAL_DMA_Start_IT+0x210>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d027      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a28      	ldr	r2, [pc, #160]	; (8004ff8 <HAL_DMA_Start_IT+0x214>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <HAL_DMA_Start_IT+0x218>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d01d      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a25      	ldr	r2, [pc, #148]	; (8005000 <HAL_DMA_Start_IT+0x21c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a24      	ldr	r2, [pc, #144]	; (8005004 <HAL_DMA_Start_IT+0x220>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	; (8005008 <HAL_DMA_Start_IT+0x224>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	; (800500c <HAL_DMA_Start_IT+0x228>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <HAL_DMA_Start_IT+0x22c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x1bc>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_DMA_Start_IT+0x230>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DMA_Start_IT+0x1c0>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_Start_IT+0x1c2>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d036      	beq.n	8005018 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 021e 	bic.w	r2, r3, #30
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0216 	orr.w	r2, r2, #22
 8004fbc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d03e      	beq.n	8005044 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0208 	orr.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e035      	b.n	8005044 <HAL_DMA_Start_IT+0x260>
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020e 	bic.w	r2, r3, #14
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 020a 	orr.w	r2, r2, #10
 800502a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0204 	orr.w	r2, r2, #4
 8005042:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a83      	ldr	r2, [pc, #524]	; (8005258 <HAL_DMA_Start_IT+0x474>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d072      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a82      	ldr	r2, [pc, #520]	; (800525c <HAL_DMA_Start_IT+0x478>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d06d      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a80      	ldr	r2, [pc, #512]	; (8005260 <HAL_DMA_Start_IT+0x47c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d068      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7f      	ldr	r2, [pc, #508]	; (8005264 <HAL_DMA_Start_IT+0x480>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d063      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a7d      	ldr	r2, [pc, #500]	; (8005268 <HAL_DMA_Start_IT+0x484>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d05e      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a7c      	ldr	r2, [pc, #496]	; (800526c <HAL_DMA_Start_IT+0x488>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d059      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a7a      	ldr	r2, [pc, #488]	; (8005270 <HAL_DMA_Start_IT+0x48c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d054      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a79      	ldr	r2, [pc, #484]	; (8005274 <HAL_DMA_Start_IT+0x490>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d04f      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a77      	ldr	r2, [pc, #476]	; (8005278 <HAL_DMA_Start_IT+0x494>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d04a      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a76      	ldr	r2, [pc, #472]	; (800527c <HAL_DMA_Start_IT+0x498>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d045      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a74      	ldr	r2, [pc, #464]	; (8005280 <HAL_DMA_Start_IT+0x49c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d040      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a73      	ldr	r2, [pc, #460]	; (8005284 <HAL_DMA_Start_IT+0x4a0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d03b      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a71      	ldr	r2, [pc, #452]	; (8005288 <HAL_DMA_Start_IT+0x4a4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d036      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a70      	ldr	r2, [pc, #448]	; (800528c <HAL_DMA_Start_IT+0x4a8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d031      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6e      	ldr	r2, [pc, #440]	; (8005290 <HAL_DMA_Start_IT+0x4ac>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02c      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6d      	ldr	r2, [pc, #436]	; (8005294 <HAL_DMA_Start_IT+0x4b0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d027      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6b      	ldr	r2, [pc, #428]	; (8005298 <HAL_DMA_Start_IT+0x4b4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d022      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a6a      	ldr	r2, [pc, #424]	; (800529c <HAL_DMA_Start_IT+0x4b8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d01d      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a68      	ldr	r2, [pc, #416]	; (80052a0 <HAL_DMA_Start_IT+0x4bc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d018      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a67      	ldr	r2, [pc, #412]	; (80052a4 <HAL_DMA_Start_IT+0x4c0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_DMA_Start_IT+0x4c4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00e      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a64      	ldr	r2, [pc, #400]	; (80052ac <HAL_DMA_Start_IT+0x4c8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d009      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a62      	ldr	r2, [pc, #392]	; (80052b0 <HAL_DMA_Start_IT+0x4cc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_DMA_Start_IT+0x350>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a61      	ldr	r2, [pc, #388]	; (80052b4 <HAL_DMA_Start_IT+0x4d0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Start_IT+0x354>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_DMA_Start_IT+0x356>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005172:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a37      	ldr	r2, [pc, #220]	; (8005258 <HAL_DMA_Start_IT+0x474>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d04a      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a36      	ldr	r2, [pc, #216]	; (800525c <HAL_DMA_Start_IT+0x478>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d045      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a34      	ldr	r2, [pc, #208]	; (8005260 <HAL_DMA_Start_IT+0x47c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d040      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a33      	ldr	r2, [pc, #204]	; (8005264 <HAL_DMA_Start_IT+0x480>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d03b      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a31      	ldr	r2, [pc, #196]	; (8005268 <HAL_DMA_Start_IT+0x484>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d036      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a30      	ldr	r2, [pc, #192]	; (800526c <HAL_DMA_Start_IT+0x488>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d031      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2e      	ldr	r2, [pc, #184]	; (8005270 <HAL_DMA_Start_IT+0x48c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d02c      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <HAL_DMA_Start_IT+0x490>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d027      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	; (8005278 <HAL_DMA_Start_IT+0x494>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d022      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2a      	ldr	r2, [pc, #168]	; (800527c <HAL_DMA_Start_IT+0x498>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d01d      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a28      	ldr	r2, [pc, #160]	; (8005280 <HAL_DMA_Start_IT+0x49c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d018      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a27      	ldr	r2, [pc, #156]	; (8005284 <HAL_DMA_Start_IT+0x4a0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a25      	ldr	r2, [pc, #148]	; (8005288 <HAL_DMA_Start_IT+0x4a4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00e      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a24      	ldr	r2, [pc, #144]	; (800528c <HAL_DMA_Start_IT+0x4a8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <HAL_DMA_Start_IT+0x4ac>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_DMA_Start_IT+0x430>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a21      	ldr	r2, [pc, #132]	; (8005294 <HAL_DMA_Start_IT+0x4b0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <HAL_DMA_Start_IT+0x442>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e012      	b.n	800524c <HAL_DMA_Start_IT+0x468>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e009      	b.n	800524c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800523e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40020010 	.word	0x40020010
 800525c:	40020028 	.word	0x40020028
 8005260:	40020040 	.word	0x40020040
 8005264:	40020058 	.word	0x40020058
 8005268:	40020070 	.word	0x40020070
 800526c:	40020088 	.word	0x40020088
 8005270:	400200a0 	.word	0x400200a0
 8005274:	400200b8 	.word	0x400200b8
 8005278:	40020410 	.word	0x40020410
 800527c:	40020428 	.word	0x40020428
 8005280:	40020440 	.word	0x40020440
 8005284:	40020458 	.word	0x40020458
 8005288:	40020470 	.word	0x40020470
 800528c:	40020488 	.word	0x40020488
 8005290:	400204a0 	.word	0x400204a0
 8005294:	400204b8 	.word	0x400204b8
 8005298:	58025408 	.word	0x58025408
 800529c:	5802541c 	.word	0x5802541c
 80052a0:	58025430 	.word	0x58025430
 80052a4:	58025444 	.word	0x58025444
 80052a8:	58025458 	.word	0x58025458
 80052ac:	5802546c 	.word	0x5802546c
 80052b0:	58025480 	.word	0x58025480
 80052b4:	58025494 	.word	0x58025494

080052b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7fd fafe 	bl	80028c0 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e2dc      	b.n	800588a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d008      	beq.n	80052ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e2cd      	b.n	800588a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a76      	ldr	r2, [pc, #472]	; (80054cc <HAL_DMA_Abort+0x214>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a74      	ldr	r2, [pc, #464]	; (80054d0 <HAL_DMA_Abort+0x218>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a73      	ldr	r2, [pc, #460]	; (80054d4 <HAL_DMA_Abort+0x21c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a71      	ldr	r2, [pc, #452]	; (80054d8 <HAL_DMA_Abort+0x220>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a70      	ldr	r2, [pc, #448]	; (80054dc <HAL_DMA_Abort+0x224>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a6e      	ldr	r2, [pc, #440]	; (80054e0 <HAL_DMA_Abort+0x228>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a6d      	ldr	r2, [pc, #436]	; (80054e4 <HAL_DMA_Abort+0x22c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a6b      	ldr	r2, [pc, #428]	; (80054e8 <HAL_DMA_Abort+0x230>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6a      	ldr	r2, [pc, #424]	; (80054ec <HAL_DMA_Abort+0x234>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a68      	ldr	r2, [pc, #416]	; (80054f0 <HAL_DMA_Abort+0x238>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a67      	ldr	r2, [pc, #412]	; (80054f4 <HAL_DMA_Abort+0x23c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a65      	ldr	r2, [pc, #404]	; (80054f8 <HAL_DMA_Abort+0x240>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a64      	ldr	r2, [pc, #400]	; (80054fc <HAL_DMA_Abort+0x244>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a62      	ldr	r2, [pc, #392]	; (8005500 <HAL_DMA_Abort+0x248>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a61      	ldr	r2, [pc, #388]	; (8005504 <HAL_DMA_Abort+0x24c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_Abort+0xd6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5f      	ldr	r2, [pc, #380]	; (8005508 <HAL_DMA_Abort+0x250>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_DMA_Abort+0xda>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_DMA_Abort+0xdc>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 021e 	bic.w	r2, r2, #30
 80053a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e00a      	b.n	80053d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 020e 	bic.w	r2, r2, #14
 80053ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <HAL_DMA_Abort+0x214>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d072      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a3a      	ldr	r2, [pc, #232]	; (80054d0 <HAL_DMA_Abort+0x218>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d06d      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <HAL_DMA_Abort+0x21c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d068      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <HAL_DMA_Abort+0x220>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d063      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a36      	ldr	r2, [pc, #216]	; (80054dc <HAL_DMA_Abort+0x224>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d05e      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <HAL_DMA_Abort+0x228>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d059      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a33      	ldr	r2, [pc, #204]	; (80054e4 <HAL_DMA_Abort+0x22c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d054      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a31      	ldr	r2, [pc, #196]	; (80054e8 <HAL_DMA_Abort+0x230>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d04f      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a30      	ldr	r2, [pc, #192]	; (80054ec <HAL_DMA_Abort+0x234>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2e      	ldr	r2, [pc, #184]	; (80054f0 <HAL_DMA_Abort+0x238>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d045      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <HAL_DMA_Abort+0x23c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d040      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <HAL_DMA_Abort+0x240>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d03b      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <HAL_DMA_Abort+0x244>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d036      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a28      	ldr	r2, [pc, #160]	; (8005500 <HAL_DMA_Abort+0x248>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a27      	ldr	r2, [pc, #156]	; (8005504 <HAL_DMA_Abort+0x24c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d02c      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <HAL_DMA_Abort+0x250>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d027      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a24      	ldr	r2, [pc, #144]	; (800550c <HAL_DMA_Abort+0x254>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_DMA_Abort+0x258>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <HAL_DMA_Abort+0x25c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <HAL_DMA_Abort+0x260>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_DMA_Abort+0x264>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_DMA_Abort+0x268>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_DMA_Abort+0x26c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_Abort+0x20e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <HAL_DMA_Abort+0x270>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d132      	bne.n	800552c <HAL_DMA_Abort+0x274>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e031      	b.n	800552e <HAL_DMA_Abort+0x276>
 80054ca:	bf00      	nop
 80054cc:	40020010 	.word	0x40020010
 80054d0:	40020028 	.word	0x40020028
 80054d4:	40020040 	.word	0x40020040
 80054d8:	40020058 	.word	0x40020058
 80054dc:	40020070 	.word	0x40020070
 80054e0:	40020088 	.word	0x40020088
 80054e4:	400200a0 	.word	0x400200a0
 80054e8:	400200b8 	.word	0x400200b8
 80054ec:	40020410 	.word	0x40020410
 80054f0:	40020428 	.word	0x40020428
 80054f4:	40020440 	.word	0x40020440
 80054f8:	40020458 	.word	0x40020458
 80054fc:	40020470 	.word	0x40020470
 8005500:	40020488 	.word	0x40020488
 8005504:	400204a0 	.word	0x400204a0
 8005508:	400204b8 	.word	0x400204b8
 800550c:	58025408 	.word	0x58025408
 8005510:	5802541c 	.word	0x5802541c
 8005514:	58025430 	.word	0x58025430
 8005518:	58025444 	.word	0x58025444
 800551c:	58025458 	.word	0x58025458
 8005520:	5802546c 	.word	0x5802546c
 8005524:	58025480 	.word	0x58025480
 8005528:	58025494 	.word	0x58025494
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005540:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a6d      	ldr	r2, [pc, #436]	; (80056fc <HAL_DMA_Abort+0x444>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6b      	ldr	r2, [pc, #428]	; (8005700 <HAL_DMA_Abort+0x448>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a6a      	ldr	r2, [pc, #424]	; (8005704 <HAL_DMA_Abort+0x44c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a68      	ldr	r2, [pc, #416]	; (8005708 <HAL_DMA_Abort+0x450>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a67      	ldr	r2, [pc, #412]	; (800570c <HAL_DMA_Abort+0x454>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a65      	ldr	r2, [pc, #404]	; (8005710 <HAL_DMA_Abort+0x458>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a64      	ldr	r2, [pc, #400]	; (8005714 <HAL_DMA_Abort+0x45c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a62      	ldr	r2, [pc, #392]	; (8005718 <HAL_DMA_Abort+0x460>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a61      	ldr	r2, [pc, #388]	; (800571c <HAL_DMA_Abort+0x464>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a5f      	ldr	r2, [pc, #380]	; (8005720 <HAL_DMA_Abort+0x468>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a5e      	ldr	r2, [pc, #376]	; (8005724 <HAL_DMA_Abort+0x46c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a5c      	ldr	r2, [pc, #368]	; (8005728 <HAL_DMA_Abort+0x470>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a5b      	ldr	r2, [pc, #364]	; (800572c <HAL_DMA_Abort+0x474>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a59      	ldr	r2, [pc, #356]	; (8005730 <HAL_DMA_Abort+0x478>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a58      	ldr	r2, [pc, #352]	; (8005734 <HAL_DMA_Abort+0x47c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Abort+0x32a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a56      	ldr	r2, [pc, #344]	; (8005738 <HAL_DMA_Abort+0x480>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <HAL_DMA_Abort+0x33c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e007      	b.n	8005604 <HAL_DMA_Abort+0x34c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005604:	e013      	b.n	800562e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005606:	f7fd f95b 	bl	80028c0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b05      	cmp	r3, #5
 8005612:	d90c      	bls.n	800562e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2203      	movs	r2, #3
 800561e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e12d      	b.n	800588a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <HAL_DMA_Abort+0x444>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2d      	ldr	r2, [pc, #180]	; (8005700 <HAL_DMA_Abort+0x448>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2c      	ldr	r2, [pc, #176]	; (8005704 <HAL_DMA_Abort+0x44c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <HAL_DMA_Abort+0x450>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a29      	ldr	r2, [pc, #164]	; (800570c <HAL_DMA_Abort+0x454>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a27      	ldr	r2, [pc, #156]	; (8005710 <HAL_DMA_Abort+0x458>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a26      	ldr	r2, [pc, #152]	; (8005714 <HAL_DMA_Abort+0x45c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a24      	ldr	r2, [pc, #144]	; (8005718 <HAL_DMA_Abort+0x460>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a23      	ldr	r2, [pc, #140]	; (800571c <HAL_DMA_Abort+0x464>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_Abort+0x422>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a21      	ldr	r2, [pc, #132]	; (8005720 <HAL_DMA_Abort+0x468>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMA_Abort+0x422>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a20      	ldr	r2, [pc, #128]	; (8005724 <HAL_DMA_Abort+0x46c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <HAL_DMA_Abort+0x470>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1d      	ldr	r2, [pc, #116]	; (800572c <HAL_DMA_Abort+0x474>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <HAL_DMA_Abort+0x478>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <HAL_DMA_Abort+0x47c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_Abort+0x422>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_DMA_Abort+0x480>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMA_Abort+0x426>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMA_Abort+0x428>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02b      	beq.n	800573c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	223f      	movs	r2, #63	; 0x3f
 80056f4:	409a      	lsls	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	e02a      	b.n	8005752 <HAL_DMA_Abort+0x49a>
 80056fc:	40020010 	.word	0x40020010
 8005700:	40020028 	.word	0x40020028
 8005704:	40020040 	.word	0x40020040
 8005708:	40020058 	.word	0x40020058
 800570c:	40020070 	.word	0x40020070
 8005710:	40020088 	.word	0x40020088
 8005714:	400200a0 	.word	0x400200a0
 8005718:	400200b8 	.word	0x400200b8
 800571c:	40020410 	.word	0x40020410
 8005720:	40020428 	.word	0x40020428
 8005724:	40020440 	.word	0x40020440
 8005728:	40020458 	.word	0x40020458
 800572c:	40020470 	.word	0x40020470
 8005730:	40020488 	.word	0x40020488
 8005734:	400204a0 	.word	0x400204a0
 8005738:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	409a      	lsls	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4f      	ldr	r2, [pc, #316]	; (8005894 <HAL_DMA_Abort+0x5dc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d072      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a4d      	ldr	r2, [pc, #308]	; (8005898 <HAL_DMA_Abort+0x5e0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d06d      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a4c      	ldr	r2, [pc, #304]	; (800589c <HAL_DMA_Abort+0x5e4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d068      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a4a      	ldr	r2, [pc, #296]	; (80058a0 <HAL_DMA_Abort+0x5e8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d063      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a49      	ldr	r2, [pc, #292]	; (80058a4 <HAL_DMA_Abort+0x5ec>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d05e      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a47      	ldr	r2, [pc, #284]	; (80058a8 <HAL_DMA_Abort+0x5f0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d059      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a46      	ldr	r2, [pc, #280]	; (80058ac <HAL_DMA_Abort+0x5f4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d054      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a44      	ldr	r2, [pc, #272]	; (80058b0 <HAL_DMA_Abort+0x5f8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04f      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a43      	ldr	r2, [pc, #268]	; (80058b4 <HAL_DMA_Abort+0x5fc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d04a      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a41      	ldr	r2, [pc, #260]	; (80058b8 <HAL_DMA_Abort+0x600>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d045      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a40      	ldr	r2, [pc, #256]	; (80058bc <HAL_DMA_Abort+0x604>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d040      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <HAL_DMA_Abort+0x608>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d03b      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3d      	ldr	r2, [pc, #244]	; (80058c4 <HAL_DMA_Abort+0x60c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d036      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <HAL_DMA_Abort+0x610>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d031      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <HAL_DMA_Abort+0x614>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d02c      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <HAL_DMA_Abort+0x618>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d027      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <HAL_DMA_Abort+0x61c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d022      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <HAL_DMA_Abort+0x620>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01d      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_DMA_Abort+0x624>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d018      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a32      	ldr	r2, [pc, #200]	; (80058e0 <HAL_DMA_Abort+0x628>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a31      	ldr	r2, [pc, #196]	; (80058e4 <HAL_DMA_Abort+0x62c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <HAL_DMA_Abort+0x630>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <HAL_DMA_Abort+0x634>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_DMA_Abort+0x58a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <HAL_DMA_Abort+0x638>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_DMA_Abort+0x58e>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_DMA_Abort+0x590>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005854:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800586c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005876:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8
 80058d4:	58025408 	.word	0x58025408
 80058d8:	5802541c 	.word	0x5802541c
 80058dc:	58025430 	.word	0x58025430
 80058e0:	58025444 	.word	0x58025444
 80058e4:	58025458 	.word	0x58025458
 80058e8:	5802546c 	.word	0x5802546c
 80058ec:	58025480 	.word	0x58025480
 80058f0:	58025494 	.word	0x58025494

080058f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e237      	b.n	8005d76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d004      	beq.n	800591c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e22c      	b.n	8005d76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a5c      	ldr	r2, [pc, #368]	; (8005a94 <HAL_DMA_Abort_IT+0x1a0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d04a      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a5b      	ldr	r2, [pc, #364]	; (8005a98 <HAL_DMA_Abort_IT+0x1a4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d045      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a59      	ldr	r2, [pc, #356]	; (8005a9c <HAL_DMA_Abort_IT+0x1a8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d040      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a58      	ldr	r2, [pc, #352]	; (8005aa0 <HAL_DMA_Abort_IT+0x1ac>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d03b      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a56      	ldr	r2, [pc, #344]	; (8005aa4 <HAL_DMA_Abort_IT+0x1b0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d036      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a55      	ldr	r2, [pc, #340]	; (8005aa8 <HAL_DMA_Abort_IT+0x1b4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d031      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a53      	ldr	r2, [pc, #332]	; (8005aac <HAL_DMA_Abort_IT+0x1b8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02c      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a52      	ldr	r2, [pc, #328]	; (8005ab0 <HAL_DMA_Abort_IT+0x1bc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d027      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a50      	ldr	r2, [pc, #320]	; (8005ab4 <HAL_DMA_Abort_IT+0x1c0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d022      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a4f      	ldr	r2, [pc, #316]	; (8005ab8 <HAL_DMA_Abort_IT+0x1c4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01d      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4d      	ldr	r2, [pc, #308]	; (8005abc <HAL_DMA_Abort_IT+0x1c8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d018      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4c      	ldr	r2, [pc, #304]	; (8005ac0 <HAL_DMA_Abort_IT+0x1cc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a4a      	ldr	r2, [pc, #296]	; (8005ac4 <HAL_DMA_Abort_IT+0x1d0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00e      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a49      	ldr	r2, [pc, #292]	; (8005ac8 <HAL_DMA_Abort_IT+0x1d4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a47      	ldr	r2, [pc, #284]	; (8005acc <HAL_DMA_Abort_IT+0x1d8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <HAL_DMA_Abort_IT+0xc8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a46      	ldr	r2, [pc, #280]	; (8005ad0 <HAL_DMA_Abort_IT+0x1dc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <HAL_DMA_Abort_IT+0xcc>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_DMA_Abort_IT+0xce>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8086 	beq.w	8005ad4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2204      	movs	r2, #4
 80059cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a2f      	ldr	r2, [pc, #188]	; (8005a94 <HAL_DMA_Abort_IT+0x1a0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d04a      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2e      	ldr	r2, [pc, #184]	; (8005a98 <HAL_DMA_Abort_IT+0x1a4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d045      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <HAL_DMA_Abort_IT+0x1a8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d040      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <HAL_DMA_Abort_IT+0x1ac>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d03b      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a29      	ldr	r2, [pc, #164]	; (8005aa4 <HAL_DMA_Abort_IT+0x1b0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d036      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a28      	ldr	r2, [pc, #160]	; (8005aa8 <HAL_DMA_Abort_IT+0x1b4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d031      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <HAL_DMA_Abort_IT+0x1b8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d02c      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <HAL_DMA_Abort_IT+0x1bc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d027      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <HAL_DMA_Abort_IT+0x1c0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a22      	ldr	r2, [pc, #136]	; (8005ab8 <HAL_DMA_Abort_IT+0x1c4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d01d      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a20      	ldr	r2, [pc, #128]	; (8005abc <HAL_DMA_Abort_IT+0x1c8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <HAL_DMA_Abort_IT+0x1cc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_DMA_Abort_IT+0x1d0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_DMA_Abort_IT+0x1d4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_DMA_Abort_IT+0x1d8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_DMA_Abort_IT+0x17c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_DMA_Abort_IT+0x1dc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <HAL_DMA_Abort_IT+0x18e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e178      	b.n	8005d74 <HAL_DMA_Abort_IT+0x480>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e16f      	b.n	8005d74 <HAL_DMA_Abort_IT+0x480>
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 020e 	bic.w	r2, r2, #14
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6c      	ldr	r2, [pc, #432]	; (8005c9c <HAL_DMA_Abort_IT+0x3a8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d04a      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a6b      	ldr	r2, [pc, #428]	; (8005ca0 <HAL_DMA_Abort_IT+0x3ac>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d045      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a69      	ldr	r2, [pc, #420]	; (8005ca4 <HAL_DMA_Abort_IT+0x3b0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d040      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a68      	ldr	r2, [pc, #416]	; (8005ca8 <HAL_DMA_Abort_IT+0x3b4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d03b      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a66      	ldr	r2, [pc, #408]	; (8005cac <HAL_DMA_Abort_IT+0x3b8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d036      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a65      	ldr	r2, [pc, #404]	; (8005cb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d031      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a63      	ldr	r2, [pc, #396]	; (8005cb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02c      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a62      	ldr	r2, [pc, #392]	; (8005cb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d027      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a60      	ldr	r2, [pc, #384]	; (8005cbc <HAL_DMA_Abort_IT+0x3c8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d022      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5f      	ldr	r2, [pc, #380]	; (8005cc0 <HAL_DMA_Abort_IT+0x3cc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01d      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5d      	ldr	r2, [pc, #372]	; (8005cc4 <HAL_DMA_Abort_IT+0x3d0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_DMA_Abort_IT+0x3d4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5a      	ldr	r2, [pc, #360]	; (8005ccc <HAL_DMA_Abort_IT+0x3d8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a59      	ldr	r2, [pc, #356]	; (8005cd0 <HAL_DMA_Abort_IT+0x3dc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a57      	ldr	r2, [pc, #348]	; (8005cd4 <HAL_DMA_Abort_IT+0x3e0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_DMA_Abort_IT+0x290>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a56      	ldr	r2, [pc, #344]	; (8005cd8 <HAL_DMA_Abort_IT+0x3e4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <HAL_DMA_Abort_IT+0x2a2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e007      	b.n	8005ba6 <HAL_DMA_Abort_IT+0x2b2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <HAL_DMA_Abort_IT+0x3a8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d072      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a3a      	ldr	r2, [pc, #232]	; (8005ca0 <HAL_DMA_Abort_IT+0x3ac>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d06d      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a39      	ldr	r2, [pc, #228]	; (8005ca4 <HAL_DMA_Abort_IT+0x3b0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d068      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a37      	ldr	r2, [pc, #220]	; (8005ca8 <HAL_DMA_Abort_IT+0x3b4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d063      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a36      	ldr	r2, [pc, #216]	; (8005cac <HAL_DMA_Abort_IT+0x3b8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d05e      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d059      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a33      	ldr	r2, [pc, #204]	; (8005cb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d054      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a31      	ldr	r2, [pc, #196]	; (8005cb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d04f      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a30      	ldr	r2, [pc, #192]	; (8005cbc <HAL_DMA_Abort_IT+0x3c8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2e      	ldr	r2, [pc, #184]	; (8005cc0 <HAL_DMA_Abort_IT+0x3cc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <HAL_DMA_Abort_IT+0x3d0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2b      	ldr	r2, [pc, #172]	; (8005cc8 <HAL_DMA_Abort_IT+0x3d4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <HAL_DMA_Abort_IT+0x3d8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <HAL_DMA_Abort_IT+0x3dc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <HAL_DMA_Abort_IT+0x3e0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a25      	ldr	r2, [pc, #148]	; (8005cd8 <HAL_DMA_Abort_IT+0x3e4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <HAL_DMA_Abort_IT+0x3e8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <HAL_DMA_Abort_IT+0x3ec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <HAL_DMA_Abort_IT+0x3f0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1f      	ldr	r2, [pc, #124]	; (8005ce8 <HAL_DMA_Abort_IT+0x3f4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <HAL_DMA_Abort_IT+0x3f8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <HAL_DMA_Abort_IT+0x3fc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_DMA_Abort_IT+0x400>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x3a2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <HAL_DMA_Abort_IT+0x404>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d132      	bne.n	8005cfc <HAL_DMA_Abort_IT+0x408>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e031      	b.n	8005cfe <HAL_DMA_Abort_IT+0x40a>
 8005c9a:	bf00      	nop
 8005c9c:	40020010 	.word	0x40020010
 8005ca0:	40020028 	.word	0x40020028
 8005ca4:	40020040 	.word	0x40020040
 8005ca8:	40020058 	.word	0x40020058
 8005cac:	40020070 	.word	0x40020070
 8005cb0:	40020088 	.word	0x40020088
 8005cb4:	400200a0 	.word	0x400200a0
 8005cb8:	400200b8 	.word	0x400200b8
 8005cbc:	40020410 	.word	0x40020410
 8005cc0:	40020428 	.word	0x40020428
 8005cc4:	40020440 	.word	0x40020440
 8005cc8:	40020458 	.word	0x40020458
 8005ccc:	40020470 	.word	0x40020470
 8005cd0:	40020488 	.word	0x40020488
 8005cd4:	400204a0 	.word	0x400204a0
 8005cd8:	400204b8 	.word	0x400204b8
 8005cdc:	58025408 	.word	0x58025408
 8005ce0:	5802541c 	.word	0x5802541c
 8005ce4:	58025430 	.word	0x58025430
 8005ce8:	58025444 	.word	0x58025444
 8005cec:	58025458 	.word	0x58025458
 8005cf0:	5802546c 	.word	0x5802546c
 8005cf4:	58025480 	.word	0x58025480
 8005cf8:	58025494 	.word	0x58025494
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d028      	beq.n	8005d54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2201      	movs	r2, #1
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00c      	beq.n	8005d54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop

08005d80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d8c:	4b67      	ldr	r3, [pc, #412]	; (8005f2c <HAL_DMA_IRQHandler+0x1ac>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a67      	ldr	r2, [pc, #412]	; (8005f30 <HAL_DMA_IRQHandler+0x1b0>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	0a9b      	lsrs	r3, r3, #10
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a5f      	ldr	r2, [pc, #380]	; (8005f34 <HAL_DMA_IRQHandler+0x1b4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04a      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5d      	ldr	r2, [pc, #372]	; (8005f38 <HAL_DMA_IRQHandler+0x1b8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d045      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5c      	ldr	r2, [pc, #368]	; (8005f3c <HAL_DMA_IRQHandler+0x1bc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d040      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a5a      	ldr	r2, [pc, #360]	; (8005f40 <HAL_DMA_IRQHandler+0x1c0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d03b      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a59      	ldr	r2, [pc, #356]	; (8005f44 <HAL_DMA_IRQHandler+0x1c4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d036      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a57      	ldr	r2, [pc, #348]	; (8005f48 <HAL_DMA_IRQHandler+0x1c8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d031      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a56      	ldr	r2, [pc, #344]	; (8005f4c <HAL_DMA_IRQHandler+0x1cc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d02c      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a54      	ldr	r2, [pc, #336]	; (8005f50 <HAL_DMA_IRQHandler+0x1d0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d027      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a53      	ldr	r2, [pc, #332]	; (8005f54 <HAL_DMA_IRQHandler+0x1d4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d022      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a51      	ldr	r2, [pc, #324]	; (8005f58 <HAL_DMA_IRQHandler+0x1d8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01d      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a50      	ldr	r2, [pc, #320]	; (8005f5c <HAL_DMA_IRQHandler+0x1dc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d018      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a4e      	ldr	r2, [pc, #312]	; (8005f60 <HAL_DMA_IRQHandler+0x1e0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a4d      	ldr	r2, [pc, #308]	; (8005f64 <HAL_DMA_IRQHandler+0x1e4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00e      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a4b      	ldr	r2, [pc, #300]	; (8005f68 <HAL_DMA_IRQHandler+0x1e8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a4a      	ldr	r2, [pc, #296]	; (8005f6c <HAL_DMA_IRQHandler+0x1ec>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xd2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a48      	ldr	r2, [pc, #288]	; (8005f70 <HAL_DMA_IRQHandler+0x1f0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_DMA_IRQHandler+0xd6>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_DMA_IRQHandler+0xd8>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 842b 	beq.w	80066b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	2208      	movs	r2, #8
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80a2 	beq.w	8005fb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <HAL_DMA_IRQHandler+0x1b4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d04a      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <HAL_DMA_IRQHandler+0x1b8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d045      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <HAL_DMA_IRQHandler+0x1bc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d040      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2a      	ldr	r2, [pc, #168]	; (8005f40 <HAL_DMA_IRQHandler+0x1c0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d03b      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <HAL_DMA_IRQHandler+0x1c4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d036      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a27      	ldr	r2, [pc, #156]	; (8005f48 <HAL_DMA_IRQHandler+0x1c8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d031      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <HAL_DMA_IRQHandler+0x1cc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02c      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a24      	ldr	r2, [pc, #144]	; (8005f50 <HAL_DMA_IRQHandler+0x1d0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d027      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <HAL_DMA_IRQHandler+0x1d4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <HAL_DMA_IRQHandler+0x1d8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d01d      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <HAL_DMA_IRQHandler+0x1dc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	; (8005f60 <HAL_DMA_IRQHandler+0x1e0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_DMA_IRQHandler+0x1e4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1b      	ldr	r2, [pc, #108]	; (8005f68 <HAL_DMA_IRQHandler+0x1e8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_DMA_IRQHandler+0x1ec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x194>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <HAL_DMA_IRQHandler+0x1f0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d12f      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x1f4>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e02e      	b.n	8005f88 <HAL_DMA_IRQHandler+0x208>
 8005f2a:	bf00      	nop
 8005f2c:	24000030 	.word	0x24000030
 8005f30:	1b4e81b5 	.word	0x1b4e81b5
 8005f34:	40020010 	.word	0x40020010
 8005f38:	40020028 	.word	0x40020028
 8005f3c:	40020040 	.word	0x40020040
 8005f40:	40020058 	.word	0x40020058
 8005f44:	40020070 	.word	0x40020070
 8005f48:	40020088 	.word	0x40020088
 8005f4c:	400200a0 	.word	0x400200a0
 8005f50:	400200b8 	.word	0x400200b8
 8005f54:	40020410 	.word	0x40020410
 8005f58:	40020428 	.word	0x40020428
 8005f5c:	40020440 	.word	0x40020440
 8005f60:	40020458 	.word	0x40020458
 8005f64:	40020470 	.word	0x40020470
 8005f68:	40020488 	.word	0x40020488
 8005f6c:	400204a0 	.word	0x400204a0
 8005f70:	400204b8 	.word	0x400204b8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0204 	bic.w	r2, r2, #4
 8005f9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d06e      	beq.n	80060ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a69      	ldr	r2, [pc, #420]	; (8006178 <HAL_DMA_IRQHandler+0x3f8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d04a      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a67      	ldr	r2, [pc, #412]	; (800617c <HAL_DMA_IRQHandler+0x3fc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a66      	ldr	r2, [pc, #408]	; (8006180 <HAL_DMA_IRQHandler+0x400>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d040      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a64      	ldr	r2, [pc, #400]	; (8006184 <HAL_DMA_IRQHandler+0x404>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d03b      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a63      	ldr	r2, [pc, #396]	; (8006188 <HAL_DMA_IRQHandler+0x408>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d036      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a61      	ldr	r2, [pc, #388]	; (800618c <HAL_DMA_IRQHandler+0x40c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d031      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a60      	ldr	r2, [pc, #384]	; (8006190 <HAL_DMA_IRQHandler+0x410>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d02c      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5e      	ldr	r2, [pc, #376]	; (8006194 <HAL_DMA_IRQHandler+0x414>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d027      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a5d      	ldr	r2, [pc, #372]	; (8006198 <HAL_DMA_IRQHandler+0x418>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5b      	ldr	r2, [pc, #364]	; (800619c <HAL_DMA_IRQHandler+0x41c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01d      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a5a      	ldr	r2, [pc, #360]	; (80061a0 <HAL_DMA_IRQHandler+0x420>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a58      	ldr	r2, [pc, #352]	; (80061a4 <HAL_DMA_IRQHandler+0x424>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a57      	ldr	r2, [pc, #348]	; (80061a8 <HAL_DMA_IRQHandler+0x428>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a55      	ldr	r2, [pc, #340]	; (80061ac <HAL_DMA_IRQHandler+0x42c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a54      	ldr	r2, [pc, #336]	; (80061b0 <HAL_DMA_IRQHandler+0x430>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_DMA_IRQHandler+0x2ee>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a52      	ldr	r2, [pc, #328]	; (80061b4 <HAL_DMA_IRQHandler+0x434>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10a      	bne.n	8006084 <HAL_DMA_IRQHandler+0x304>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e003      	b.n	800608c <HAL_DMA_IRQHandler+0x30c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	2201      	movs	r2, #1
 800609a:	409a      	lsls	r2, r3
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	f043 0202 	orr.w	r2, r3, #2
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2204      	movs	r2, #4
 80060b6:	409a      	lsls	r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 808f 	beq.w	80061e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <HAL_DMA_IRQHandler+0x3f8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d04a      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2a      	ldr	r2, [pc, #168]	; (800617c <HAL_DMA_IRQHandler+0x3fc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d045      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a29      	ldr	r2, [pc, #164]	; (8006180 <HAL_DMA_IRQHandler+0x400>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d040      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a27      	ldr	r2, [pc, #156]	; (8006184 <HAL_DMA_IRQHandler+0x404>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d03b      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a26      	ldr	r2, [pc, #152]	; (8006188 <HAL_DMA_IRQHandler+0x408>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d036      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a24      	ldr	r2, [pc, #144]	; (800618c <HAL_DMA_IRQHandler+0x40c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d031      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a23      	ldr	r2, [pc, #140]	; (8006190 <HAL_DMA_IRQHandler+0x410>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d02c      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a21      	ldr	r2, [pc, #132]	; (8006194 <HAL_DMA_IRQHandler+0x414>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d027      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a20      	ldr	r2, [pc, #128]	; (8006198 <HAL_DMA_IRQHandler+0x418>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d022      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1e      	ldr	r2, [pc, #120]	; (800619c <HAL_DMA_IRQHandler+0x41c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01d      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <HAL_DMA_IRQHandler+0x420>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d018      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <HAL_DMA_IRQHandler+0x424>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1a      	ldr	r2, [pc, #104]	; (80061a8 <HAL_DMA_IRQHandler+0x428>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00e      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <HAL_DMA_IRQHandler+0x42c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a17      	ldr	r2, [pc, #92]	; (80061b0 <HAL_DMA_IRQHandler+0x430>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_DMA_IRQHandler+0x3e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <HAL_DMA_IRQHandler+0x434>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d12a      	bne.n	80061b8 <HAL_DMA_IRQHandler+0x438>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e023      	b.n	80061c0 <HAL_DMA_IRQHandler+0x440>
 8006178:	40020010 	.word	0x40020010
 800617c:	40020028 	.word	0x40020028
 8006180:	40020040 	.word	0x40020040
 8006184:	40020058 	.word	0x40020058
 8006188:	40020070 	.word	0x40020070
 800618c:	40020088 	.word	0x40020088
 8006190:	400200a0 	.word	0x400200a0
 8006194:	400200b8 	.word	0x400200b8
 8006198:	40020410 	.word	0x40020410
 800619c:	40020428 	.word	0x40020428
 80061a0:	40020440 	.word	0x40020440
 80061a4:	40020458 	.word	0x40020458
 80061a8:	40020470 	.word	0x40020470
 80061ac:	40020488 	.word	0x40020488
 80061b0:	400204a0 	.word	0x400204a0
 80061b4:	400204b8 	.word	0x400204b8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2204      	movs	r2, #4
 80061ce:	409a      	lsls	r2, r3
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	f043 0204 	orr.w	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2210      	movs	r2, #16
 80061ea:	409a      	lsls	r2, r3
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80a6 	beq.w	8006342 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a85      	ldr	r2, [pc, #532]	; (8006410 <HAL_DMA_IRQHandler+0x690>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04a      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a83      	ldr	r2, [pc, #524]	; (8006414 <HAL_DMA_IRQHandler+0x694>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d045      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a82      	ldr	r2, [pc, #520]	; (8006418 <HAL_DMA_IRQHandler+0x698>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a80      	ldr	r2, [pc, #512]	; (800641c <HAL_DMA_IRQHandler+0x69c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d03b      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7f      	ldr	r2, [pc, #508]	; (8006420 <HAL_DMA_IRQHandler+0x6a0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d036      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7d      	ldr	r2, [pc, #500]	; (8006424 <HAL_DMA_IRQHandler+0x6a4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7c      	ldr	r2, [pc, #496]	; (8006428 <HAL_DMA_IRQHandler+0x6a8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d02c      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a7a      	ldr	r2, [pc, #488]	; (800642c <HAL_DMA_IRQHandler+0x6ac>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d027      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a79      	ldr	r2, [pc, #484]	; (8006430 <HAL_DMA_IRQHandler+0x6b0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a77      	ldr	r2, [pc, #476]	; (8006434 <HAL_DMA_IRQHandler+0x6b4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a76      	ldr	r2, [pc, #472]	; (8006438 <HAL_DMA_IRQHandler+0x6b8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a74      	ldr	r2, [pc, #464]	; (800643c <HAL_DMA_IRQHandler+0x6bc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a73      	ldr	r2, [pc, #460]	; (8006440 <HAL_DMA_IRQHandler+0x6c0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a71      	ldr	r2, [pc, #452]	; (8006444 <HAL_DMA_IRQHandler+0x6c4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a70      	ldr	r2, [pc, #448]	; (8006448 <HAL_DMA_IRQHandler+0x6c8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_IRQHandler+0x516>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6e      	ldr	r2, [pc, #440]	; (800644c <HAL_DMA_IRQHandler+0x6cc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10a      	bne.n	80062ac <HAL_DMA_IRQHandler+0x52c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e009      	b.n	80062c0 <HAL_DMA_IRQHandler+0x540>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d03e      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2210      	movs	r2, #16
 80062ce:	409a      	lsls	r2, r3
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d018      	beq.n	8006314 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d108      	bne.n	8006302 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d024      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
 8006300:	e01f      	b.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	e016      	b.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d107      	bne.n	8006332 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0208 	bic.w	r2, r2, #8
 8006330:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2220      	movs	r2, #32
 800634c:	409a      	lsls	r2, r3
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8110 	beq.w	8006578 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2c      	ldr	r2, [pc, #176]	; (8006410 <HAL_DMA_IRQHandler+0x690>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04a      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2b      	ldr	r2, [pc, #172]	; (8006414 <HAL_DMA_IRQHandler+0x694>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d045      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a29      	ldr	r2, [pc, #164]	; (8006418 <HAL_DMA_IRQHandler+0x698>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d040      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a28      	ldr	r2, [pc, #160]	; (800641c <HAL_DMA_IRQHandler+0x69c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d03b      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a26      	ldr	r2, [pc, #152]	; (8006420 <HAL_DMA_IRQHandler+0x6a0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d036      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a25      	ldr	r2, [pc, #148]	; (8006424 <HAL_DMA_IRQHandler+0x6a4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d031      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a23      	ldr	r2, [pc, #140]	; (8006428 <HAL_DMA_IRQHandler+0x6a8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02c      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a22      	ldr	r2, [pc, #136]	; (800642c <HAL_DMA_IRQHandler+0x6ac>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d027      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a20      	ldr	r2, [pc, #128]	; (8006430 <HAL_DMA_IRQHandler+0x6b0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1f      	ldr	r2, [pc, #124]	; (8006434 <HAL_DMA_IRQHandler+0x6b4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01d      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1d      	ldr	r2, [pc, #116]	; (8006438 <HAL_DMA_IRQHandler+0x6b8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1c      	ldr	r2, [pc, #112]	; (800643c <HAL_DMA_IRQHandler+0x6bc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1a      	ldr	r2, [pc, #104]	; (8006440 <HAL_DMA_IRQHandler+0x6c0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a19      	ldr	r2, [pc, #100]	; (8006444 <HAL_DMA_IRQHandler+0x6c4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a17      	ldr	r2, [pc, #92]	; (8006448 <HAL_DMA_IRQHandler+0x6c8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x678>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a16      	ldr	r2, [pc, #88]	; (800644c <HAL_DMA_IRQHandler+0x6cc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d12b      	bne.n	8006450 <HAL_DMA_IRQHandler+0x6d0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e02a      	b.n	8006464 <HAL_DMA_IRQHandler+0x6e4>
 800640e:	bf00      	nop
 8006410:	40020010 	.word	0x40020010
 8006414:	40020028 	.word	0x40020028
 8006418:	40020040 	.word	0x40020040
 800641c:	40020058 	.word	0x40020058
 8006420:	40020070 	.word	0x40020070
 8006424:	40020088 	.word	0x40020088
 8006428:	400200a0 	.word	0x400200a0
 800642c:	400200b8 	.word	0x400200b8
 8006430:	40020410 	.word	0x40020410
 8006434:	40020428 	.word	0x40020428
 8006438:	40020440 	.word	0x40020440
 800643c:	40020458 	.word	0x40020458
 8006440:	40020470 	.word	0x40020470
 8006444:	40020488 	.word	0x40020488
 8006448:	400204a0 	.word	0x400204a0
 800644c:	400204b8 	.word	0x400204b8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8087 	beq.w	8006578 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2220      	movs	r2, #32
 8006474:	409a      	lsls	r2, r3
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b04      	cmp	r3, #4
 8006484:	d139      	bne.n	80064fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0216 	bic.w	r2, r2, #22
 8006494:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <HAL_DMA_IRQHandler+0x736>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0208 	bic.w	r2, r2, #8
 80064c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	223f      	movs	r2, #63	; 0x3f
 80064d0:	409a      	lsls	r2, r3
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 834a 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
          }
          return;
 80064f8:	e344      	b.n	8006b84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d018      	beq.n	800653a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d108      	bne.n	8006528 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651a:	2b00      	cmp	r3, #0
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	e027      	b.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d023      	beq.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
 8006538:	e01e      	b.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10f      	bne.n	8006568 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0210 	bic.w	r2, r2, #16
 8006556:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8306 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8088 	beq.w	80066a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2204      	movs	r2, #4
 8006594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7a      	ldr	r2, [pc, #488]	; (8006788 <HAL_DMA_IRQHandler+0xa08>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d04a      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a79      	ldr	r2, [pc, #484]	; (800678c <HAL_DMA_IRQHandler+0xa0c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d045      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a77      	ldr	r2, [pc, #476]	; (8006790 <HAL_DMA_IRQHandler+0xa10>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d040      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a76      	ldr	r2, [pc, #472]	; (8006794 <HAL_DMA_IRQHandler+0xa14>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d03b      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a74      	ldr	r2, [pc, #464]	; (8006798 <HAL_DMA_IRQHandler+0xa18>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d036      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a73      	ldr	r2, [pc, #460]	; (800679c <HAL_DMA_IRQHandler+0xa1c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d031      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a71      	ldr	r2, [pc, #452]	; (80067a0 <HAL_DMA_IRQHandler+0xa20>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02c      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a70      	ldr	r2, [pc, #448]	; (80067a4 <HAL_DMA_IRQHandler+0xa24>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d027      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6e      	ldr	r2, [pc, #440]	; (80067a8 <HAL_DMA_IRQHandler+0xa28>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d022      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6d      	ldr	r2, [pc, #436]	; (80067ac <HAL_DMA_IRQHandler+0xa2c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d01d      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6b      	ldr	r2, [pc, #428]	; (80067b0 <HAL_DMA_IRQHandler+0xa30>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6a      	ldr	r2, [pc, #424]	; (80067b4 <HAL_DMA_IRQHandler+0xa34>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a68      	ldr	r2, [pc, #416]	; (80067b8 <HAL_DMA_IRQHandler+0xa38>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a67      	ldr	r2, [pc, #412]	; (80067bc <HAL_DMA_IRQHandler+0xa3c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a65      	ldr	r2, [pc, #404]	; (80067c0 <HAL_DMA_IRQHandler+0xa40>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_DMA_IRQHandler+0x8b8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a64      	ldr	r2, [pc, #400]	; (80067c4 <HAL_DMA_IRQHandler+0xa44>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <HAL_DMA_IRQHandler+0x8ca>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e007      	b.n	800665a <HAL_DMA_IRQHandler+0x8da>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	429a      	cmp	r2, r3
 8006664:	d307      	bcc.n	8006676 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f2      	bne.n	800665a <HAL_DMA_IRQHandler+0x8da>
 8006674:	e000      	b.n	8006678 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006676:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2203      	movs	r2, #3
 800668a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800668e:	e003      	b.n	8006698 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8272 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	e26c      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a43      	ldr	r2, [pc, #268]	; (80067c8 <HAL_DMA_IRQHandler+0xa48>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a42      	ldr	r2, [pc, #264]	; (80067cc <HAL_DMA_IRQHandler+0xa4c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01d      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a40      	ldr	r2, [pc, #256]	; (80067d0 <HAL_DMA_IRQHandler+0xa50>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a3f      	ldr	r2, [pc, #252]	; (80067d4 <HAL_DMA_IRQHandler+0xa54>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a3d      	ldr	r2, [pc, #244]	; (80067d8 <HAL_DMA_IRQHandler+0xa58>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a3c      	ldr	r2, [pc, #240]	; (80067dc <HAL_DMA_IRQHandler+0xa5c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a3a      	ldr	r2, [pc, #232]	; (80067e0 <HAL_DMA_IRQHandler+0xa60>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_DMA_IRQHandler+0x984>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a39      	ldr	r2, [pc, #228]	; (80067e4 <HAL_DMA_IRQHandler+0xa64>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_DMA_IRQHandler+0x988>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_DMA_IRQHandler+0x98a>
 8006708:	2300      	movs	r3, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 823f 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2204      	movs	r2, #4
 8006722:	409a      	lsls	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80cd 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xb48>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80c7 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2204      	movs	r2, #4
 8006744:	409a      	lsls	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d049      	beq.n	80067e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8210 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006770:	e20a      	b.n	8006b88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8206 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006784:	e200      	b.n	8006b88 <HAL_DMA_IRQHandler+0xe08>
 8006786:	bf00      	nop
 8006788:	40020010 	.word	0x40020010
 800678c:	40020028 	.word	0x40020028
 8006790:	40020040 	.word	0x40020040
 8006794:	40020058 	.word	0x40020058
 8006798:	40020070 	.word	0x40020070
 800679c:	40020088 	.word	0x40020088
 80067a0:	400200a0 	.word	0x400200a0
 80067a4:	400200b8 	.word	0x400200b8
 80067a8:	40020410 	.word	0x40020410
 80067ac:	40020428 	.word	0x40020428
 80067b0:	40020440 	.word	0x40020440
 80067b4:	40020458 	.word	0x40020458
 80067b8:	40020470 	.word	0x40020470
 80067bc:	40020488 	.word	0x40020488
 80067c0:	400204a0 	.word	0x400204a0
 80067c4:	400204b8 	.word	0x400204b8
 80067c8:	58025408 	.word	0x58025408
 80067cc:	5802541c 	.word	0x5802541c
 80067d0:	58025430 	.word	0x58025430
 80067d4:	58025444 	.word	0x58025444
 80067d8:	58025458 	.word	0x58025458
 80067dc:	5802546c 	.word	0x5802546c
 80067e0:	58025480 	.word	0x58025480
 80067e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d160      	bne.n	80068b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7f      	ldr	r2, [pc, #508]	; (80069f4 <HAL_DMA_IRQHandler+0xc74>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d04a      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7d      	ldr	r2, [pc, #500]	; (80069f8 <HAL_DMA_IRQHandler+0xc78>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d045      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a7c      	ldr	r2, [pc, #496]	; (80069fc <HAL_DMA_IRQHandler+0xc7c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d040      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a7a      	ldr	r2, [pc, #488]	; (8006a00 <HAL_DMA_IRQHandler+0xc80>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d03b      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a79      	ldr	r2, [pc, #484]	; (8006a04 <HAL_DMA_IRQHandler+0xc84>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d036      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a77      	ldr	r2, [pc, #476]	; (8006a08 <HAL_DMA_IRQHandler+0xc88>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d031      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a76      	ldr	r2, [pc, #472]	; (8006a0c <HAL_DMA_IRQHandler+0xc8c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d02c      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a74      	ldr	r2, [pc, #464]	; (8006a10 <HAL_DMA_IRQHandler+0xc90>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d027      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a73      	ldr	r2, [pc, #460]	; (8006a14 <HAL_DMA_IRQHandler+0xc94>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a71      	ldr	r2, [pc, #452]	; (8006a18 <HAL_DMA_IRQHandler+0xc98>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01d      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a70      	ldr	r2, [pc, #448]	; (8006a1c <HAL_DMA_IRQHandler+0xc9c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6e      	ldr	r2, [pc, #440]	; (8006a20 <HAL_DMA_IRQHandler+0xca0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6d      	ldr	r2, [pc, #436]	; (8006a24 <HAL_DMA_IRQHandler+0xca4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a6b      	ldr	r2, [pc, #428]	; (8006a28 <HAL_DMA_IRQHandler+0xca8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6a      	ldr	r2, [pc, #424]	; (8006a2c <HAL_DMA_IRQHandler+0xcac>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_DMA_IRQHandler+0xb12>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a68      	ldr	r2, [pc, #416]	; (8006a30 <HAL_DMA_IRQHandler+0xcb0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <HAL_DMA_IRQHandler+0xb24>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0208 	bic.w	r2, r2, #8
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e007      	b.n	80068b4 <HAL_DMA_IRQHandler+0xb34>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8165 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c6:	e15f      	b.n	8006b88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2202      	movs	r2, #2
 80068d2:	409a      	lsls	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80c5 	beq.w	8006a68 <HAL_DMA_IRQHandler+0xce8>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80bf 	beq.w	8006a68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2202      	movs	r2, #2
 80068f4:	409a      	lsls	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 813a 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006920:	e134      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8130 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006934:	e12a      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8089 	bne.w	8006a54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2b      	ldr	r2, [pc, #172]	; (80069f4 <HAL_DMA_IRQHandler+0xc74>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d04a      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a29      	ldr	r2, [pc, #164]	; (80069f8 <HAL_DMA_IRQHandler+0xc78>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d045      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a28      	ldr	r2, [pc, #160]	; (80069fc <HAL_DMA_IRQHandler+0xc7c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d040      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <HAL_DMA_IRQHandler+0xc80>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d03b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a25      	ldr	r2, [pc, #148]	; (8006a04 <HAL_DMA_IRQHandler+0xc84>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d036      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <HAL_DMA_IRQHandler+0xc88>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <HAL_DMA_IRQHandler+0xc8c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d02c      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a20      	ldr	r2, [pc, #128]	; (8006a10 <HAL_DMA_IRQHandler+0xc90>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d027      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <HAL_DMA_IRQHandler+0xc94>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <HAL_DMA_IRQHandler+0xc98>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <HAL_DMA_IRQHandler+0xc9c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1a      	ldr	r2, [pc, #104]	; (8006a20 <HAL_DMA_IRQHandler+0xca0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <HAL_DMA_IRQHandler+0xca4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <HAL_DMA_IRQHandler+0xca8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_DMA_IRQHandler+0xcac>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xc62>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <HAL_DMA_IRQHandler+0xcb0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d128      	bne.n	8006a34 <HAL_DMA_IRQHandler+0xcb4>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0214 	bic.w	r2, r2, #20
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e027      	b.n	8006a44 <HAL_DMA_IRQHandler+0xcc4>
 80069f4:	40020010 	.word	0x40020010
 80069f8:	40020028 	.word	0x40020028
 80069fc:	40020040 	.word	0x40020040
 8006a00:	40020058 	.word	0x40020058
 8006a04:	40020070 	.word	0x40020070
 8006a08:	40020088 	.word	0x40020088
 8006a0c:	400200a0 	.word	0x400200a0
 8006a10:	400200b8 	.word	0x400200b8
 8006a14:	40020410 	.word	0x40020410
 8006a18:	40020428 	.word	0x40020428
 8006a1c:	40020440 	.word	0x40020440
 8006a20:	40020458 	.word	0x40020458
 8006a24:	40020470 	.word	0x40020470
 8006a28:	40020488 	.word	0x40020488
 8006a2c:	400204a0 	.word	0x400204a0
 8006a30:	400204b8 	.word	0x400204b8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 020a 	bic.w	r2, r2, #10
 8006a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8097 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a66:	e091      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2208      	movs	r2, #8
 8006a72:	409a      	lsls	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8088 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8082 	beq.w	8006b8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a41      	ldr	r2, [pc, #260]	; (8006b94 <HAL_DMA_IRQHandler+0xe14>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d04a      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <HAL_DMA_IRQHandler+0xe18>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d045      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3e      	ldr	r2, [pc, #248]	; (8006b9c <HAL_DMA_IRQHandler+0xe1c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d040      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <HAL_DMA_IRQHandler+0xe20>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d03b      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a3b      	ldr	r2, [pc, #236]	; (8006ba4 <HAL_DMA_IRQHandler+0xe24>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d036      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a39      	ldr	r2, [pc, #228]	; (8006ba8 <HAL_DMA_IRQHandler+0xe28>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d031      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a38      	ldr	r2, [pc, #224]	; (8006bac <HAL_DMA_IRQHandler+0xe2c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d02c      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a36      	ldr	r2, [pc, #216]	; (8006bb0 <HAL_DMA_IRQHandler+0xe30>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d027      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a35      	ldr	r2, [pc, #212]	; (8006bb4 <HAL_DMA_IRQHandler+0xe34>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d022      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a33      	ldr	r2, [pc, #204]	; (8006bb8 <HAL_DMA_IRQHandler+0xe38>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d01d      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a32      	ldr	r2, [pc, #200]	; (8006bbc <HAL_DMA_IRQHandler+0xe3c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d018      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <HAL_DMA_IRQHandler+0xe40>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2f      	ldr	r2, [pc, #188]	; (8006bc4 <HAL_DMA_IRQHandler+0xe44>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00e      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_DMA_IRQHandler+0xe48>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d009      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	; (8006bcc <HAL_DMA_IRQHandler+0xe4c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <HAL_DMA_IRQHandler+0xdaa>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <HAL_DMA_IRQHandler+0xe50>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d108      	bne.n	8006b3c <HAL_DMA_IRQHandler+0xdbc>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 021c 	bic.w	r2, r2, #28
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e007      	b.n	8006b4c <HAL_DMA_IRQHandler+0xdcc>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 020e 	bic.w	r2, r2, #14
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2201      	movs	r2, #1
 8006b56:	409a      	lsls	r2, r3
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e004      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b8e:	3728      	adds	r7, #40	; 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40020010 	.word	0x40020010
 8006b98:	40020028 	.word	0x40020028
 8006b9c:	40020040 	.word	0x40020040
 8006ba0:	40020058 	.word	0x40020058
 8006ba4:	40020070 	.word	0x40020070
 8006ba8:	40020088 	.word	0x40020088
 8006bac:	400200a0 	.word	0x400200a0
 8006bb0:	400200b8 	.word	0x400200b8
 8006bb4:	40020410 	.word	0x40020410
 8006bb8:	40020428 	.word	0x40020428
 8006bbc:	40020440 	.word	0x40020440
 8006bc0:	40020458 	.word	0x40020458
 8006bc4:	40020470 	.word	0x40020470
 8006bc8:	40020488 	.word	0x40020488
 8006bcc:	400204a0 	.word	0x400204a0
 8006bd0:	400204b8 	.word	0x400204b8

08006bd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a7f      	ldr	r2, [pc, #508]	; (8006df0 <DMA_SetConfig+0x21c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d072      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a7d      	ldr	r2, [pc, #500]	; (8006df4 <DMA_SetConfig+0x220>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d06d      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a7c      	ldr	r2, [pc, #496]	; (8006df8 <DMA_SetConfig+0x224>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d068      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a7a      	ldr	r2, [pc, #488]	; (8006dfc <DMA_SetConfig+0x228>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d063      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a79      	ldr	r2, [pc, #484]	; (8006e00 <DMA_SetConfig+0x22c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d05e      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a77      	ldr	r2, [pc, #476]	; (8006e04 <DMA_SetConfig+0x230>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d059      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a76      	ldr	r2, [pc, #472]	; (8006e08 <DMA_SetConfig+0x234>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d054      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a74      	ldr	r2, [pc, #464]	; (8006e0c <DMA_SetConfig+0x238>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d04f      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a73      	ldr	r2, [pc, #460]	; (8006e10 <DMA_SetConfig+0x23c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d04a      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a71      	ldr	r2, [pc, #452]	; (8006e14 <DMA_SetConfig+0x240>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d045      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a70      	ldr	r2, [pc, #448]	; (8006e18 <DMA_SetConfig+0x244>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d040      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a6e      	ldr	r2, [pc, #440]	; (8006e1c <DMA_SetConfig+0x248>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d03b      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a6d      	ldr	r2, [pc, #436]	; (8006e20 <DMA_SetConfig+0x24c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d036      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a6b      	ldr	r2, [pc, #428]	; (8006e24 <DMA_SetConfig+0x250>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d031      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6a      	ldr	r2, [pc, #424]	; (8006e28 <DMA_SetConfig+0x254>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d02c      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a68      	ldr	r2, [pc, #416]	; (8006e2c <DMA_SetConfig+0x258>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d027      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a67      	ldr	r2, [pc, #412]	; (8006e30 <DMA_SetConfig+0x25c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d022      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a65      	ldr	r2, [pc, #404]	; (8006e34 <DMA_SetConfig+0x260>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01d      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a64      	ldr	r2, [pc, #400]	; (8006e38 <DMA_SetConfig+0x264>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a62      	ldr	r2, [pc, #392]	; (8006e3c <DMA_SetConfig+0x268>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a61      	ldr	r2, [pc, #388]	; (8006e40 <DMA_SetConfig+0x26c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a5f      	ldr	r2, [pc, #380]	; (8006e44 <DMA_SetConfig+0x270>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a5e      	ldr	r2, [pc, #376]	; (8006e48 <DMA_SetConfig+0x274>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <DMA_SetConfig+0x10a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a5c      	ldr	r2, [pc, #368]	; (8006e4c <DMA_SetConfig+0x278>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d101      	bne.n	8006ce2 <DMA_SetConfig+0x10e>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <DMA_SetConfig+0x110>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cf0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <DMA_SetConfig+0x21c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d04a      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a38      	ldr	r2, [pc, #224]	; (8006df4 <DMA_SetConfig+0x220>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d045      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a36      	ldr	r2, [pc, #216]	; (8006df8 <DMA_SetConfig+0x224>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d040      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a35      	ldr	r2, [pc, #212]	; (8006dfc <DMA_SetConfig+0x228>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d03b      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a33      	ldr	r2, [pc, #204]	; (8006e00 <DMA_SetConfig+0x22c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d036      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a32      	ldr	r2, [pc, #200]	; (8006e04 <DMA_SetConfig+0x230>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d031      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a30      	ldr	r2, [pc, #192]	; (8006e08 <DMA_SetConfig+0x234>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d02c      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a2f      	ldr	r2, [pc, #188]	; (8006e0c <DMA_SetConfig+0x238>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d027      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a2d      	ldr	r2, [pc, #180]	; (8006e10 <DMA_SetConfig+0x23c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d022      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <DMA_SetConfig+0x240>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d01d      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <DMA_SetConfig+0x244>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a29      	ldr	r2, [pc, #164]	; (8006e1c <DMA_SetConfig+0x248>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a27      	ldr	r2, [pc, #156]	; (8006e20 <DMA_SetConfig+0x24c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a26      	ldr	r2, [pc, #152]	; (8006e24 <DMA_SetConfig+0x250>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a24      	ldr	r2, [pc, #144]	; (8006e28 <DMA_SetConfig+0x254>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <DMA_SetConfig+0x1d0>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a23      	ldr	r2, [pc, #140]	; (8006e2c <DMA_SetConfig+0x258>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <DMA_SetConfig+0x1d4>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <DMA_SetConfig+0x1d6>
 8006da8:	2300      	movs	r3, #0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d059      	beq.n	8006e62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	223f      	movs	r2, #63	; 0x3f
 8006db8:	409a      	lsls	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dcc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d138      	bne.n	8006e50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006dee:	e086      	b.n	8006efe <DMA_SetConfig+0x32a>
 8006df0:	40020010 	.word	0x40020010
 8006df4:	40020028 	.word	0x40020028
 8006df8:	40020040 	.word	0x40020040
 8006dfc:	40020058 	.word	0x40020058
 8006e00:	40020070 	.word	0x40020070
 8006e04:	40020088 	.word	0x40020088
 8006e08:	400200a0 	.word	0x400200a0
 8006e0c:	400200b8 	.word	0x400200b8
 8006e10:	40020410 	.word	0x40020410
 8006e14:	40020428 	.word	0x40020428
 8006e18:	40020440 	.word	0x40020440
 8006e1c:	40020458 	.word	0x40020458
 8006e20:	40020470 	.word	0x40020470
 8006e24:	40020488 	.word	0x40020488
 8006e28:	400204a0 	.word	0x400204a0
 8006e2c:	400204b8 	.word	0x400204b8
 8006e30:	58025408 	.word	0x58025408
 8006e34:	5802541c 	.word	0x5802541c
 8006e38:	58025430 	.word	0x58025430
 8006e3c:	58025444 	.word	0x58025444
 8006e40:	58025458 	.word	0x58025458
 8006e44:	5802546c 	.word	0x5802546c
 8006e48:	58025480 	.word	0x58025480
 8006e4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
}
 8006e60:	e04d      	b.n	8006efe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a29      	ldr	r2, [pc, #164]	; (8006f0c <DMA_SetConfig+0x338>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d022      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a27      	ldr	r2, [pc, #156]	; (8006f10 <DMA_SetConfig+0x33c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01d      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <DMA_SetConfig+0x340>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d018      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a24      	ldr	r2, [pc, #144]	; (8006f18 <DMA_SetConfig+0x344>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <DMA_SetConfig+0x348>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00e      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <DMA_SetConfig+0x34c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <DMA_SetConfig+0x350>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <DMA_SetConfig+0x2de>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <DMA_SetConfig+0x354>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d101      	bne.n	8006eb6 <DMA_SetConfig+0x2e2>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <DMA_SetConfig+0x2e4>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d108      	bne.n	8006eee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	60da      	str	r2, [r3, #12]
}
 8006eec:	e007      	b.n	8006efe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	58025408 	.word	0x58025408
 8006f10:	5802541c 	.word	0x5802541c
 8006f14:	58025430 	.word	0x58025430
 8006f18:	58025444 	.word	0x58025444
 8006f1c:	58025458 	.word	0x58025458
 8006f20:	5802546c 	.word	0x5802546c
 8006f24:	58025480 	.word	0x58025480
 8006f28:	58025494 	.word	0x58025494

08006f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a42      	ldr	r2, [pc, #264]	; (8007044 <DMA_CalcBaseAndBitshift+0x118>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d04a      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a41      	ldr	r2, [pc, #260]	; (8007048 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d045      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a3f      	ldr	r2, [pc, #252]	; (800704c <DMA_CalcBaseAndBitshift+0x120>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d040      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a3e      	ldr	r2, [pc, #248]	; (8007050 <DMA_CalcBaseAndBitshift+0x124>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d03b      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a3c      	ldr	r2, [pc, #240]	; (8007054 <DMA_CalcBaseAndBitshift+0x128>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d036      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d031      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a39      	ldr	r2, [pc, #228]	; (800705c <DMA_CalcBaseAndBitshift+0x130>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d02c      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a38      	ldr	r2, [pc, #224]	; (8007060 <DMA_CalcBaseAndBitshift+0x134>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d027      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a36      	ldr	r2, [pc, #216]	; (8007064 <DMA_CalcBaseAndBitshift+0x138>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d022      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a35      	ldr	r2, [pc, #212]	; (8007068 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d01d      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a33      	ldr	r2, [pc, #204]	; (800706c <DMA_CalcBaseAndBitshift+0x140>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d018      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a32      	ldr	r2, [pc, #200]	; (8007070 <DMA_CalcBaseAndBitshift+0x144>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a30      	ldr	r2, [pc, #192]	; (8007074 <DMA_CalcBaseAndBitshift+0x148>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00e      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d009      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2d      	ldr	r2, [pc, #180]	; (800707c <DMA_CalcBaseAndBitshift+0x150>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d004      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2c      	ldr	r2, [pc, #176]	; (8007080 <DMA_CalcBaseAndBitshift+0x154>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d101      	bne.n	8006fd8 <DMA_CalcBaseAndBitshift+0xac>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e000      	b.n	8006fda <DMA_CalcBaseAndBitshift+0xae>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d024      	beq.n	8007028 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	3b10      	subs	r3, #16
 8006fe6:	4a27      	ldr	r2, [pc, #156]	; (8007084 <DMA_CalcBaseAndBitshift+0x158>)
 8006fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fec:	091b      	lsrs	r3, r3, #4
 8006fee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	4a24      	ldr	r2, [pc, #144]	; (8007088 <DMA_CalcBaseAndBitshift+0x15c>)
 8006ff8:	5cd3      	ldrb	r3, [r2, r3]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d908      	bls.n	8007018 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	4b1f      	ldr	r3, [pc, #124]	; (800708c <DMA_CalcBaseAndBitshift+0x160>)
 800700e:	4013      	ands	r3, r2
 8007010:	1d1a      	adds	r2, r3, #4
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	659a      	str	r2, [r3, #88]	; 0x58
 8007016:	e00d      	b.n	8007034 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <DMA_CalcBaseAndBitshift+0x160>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6593      	str	r3, [r2, #88]	; 0x58
 8007026:	e005      	b.n	8007034 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	40020010 	.word	0x40020010
 8007048:	40020028 	.word	0x40020028
 800704c:	40020040 	.word	0x40020040
 8007050:	40020058 	.word	0x40020058
 8007054:	40020070 	.word	0x40020070
 8007058:	40020088 	.word	0x40020088
 800705c:	400200a0 	.word	0x400200a0
 8007060:	400200b8 	.word	0x400200b8
 8007064:	40020410 	.word	0x40020410
 8007068:	40020428 	.word	0x40020428
 800706c:	40020440 	.word	0x40020440
 8007070:	40020458 	.word	0x40020458
 8007074:	40020470 	.word	0x40020470
 8007078:	40020488 	.word	0x40020488
 800707c:	400204a0 	.word	0x400204a0
 8007080:	400204b8 	.word	0x400204b8
 8007084:	aaaaaaab 	.word	0xaaaaaaab
 8007088:	0800fe68 	.word	0x0800fe68
 800708c:	fffffc00 	.word	0xfffffc00

08007090 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d120      	bne.n	80070e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d858      	bhi.n	800715e <DMA_CheckFifoParam+0xce>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <DMA_CheckFifoParam+0x24>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070d7 	.word	0x080070d7
 80070bc:	080070c5 	.word	0x080070c5
 80070c0:	0800715f 	.word	0x0800715f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d048      	beq.n	8007162 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070d4:	e045      	b.n	8007162 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070de:	d142      	bne.n	8007166 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070e4:	e03f      	b.n	8007166 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ee:	d123      	bne.n	8007138 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d838      	bhi.n	800716a <DMA_CheckFifoParam+0xda>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <DMA_CheckFifoParam+0x70>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007111 	.word	0x08007111
 8007104:	08007117 	.word	0x08007117
 8007108:	08007111 	.word	0x08007111
 800710c:	08007129 	.word	0x08007129
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
        break;
 8007114:	e030      	b.n	8007178 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d025      	beq.n	800716e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007126:	e022      	b.n	800716e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007130:	d11f      	bne.n	8007172 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007136:	e01c      	b.n	8007172 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	2b02      	cmp	r3, #2
 800713e:	d902      	bls.n	8007146 <DMA_CheckFifoParam+0xb6>
 8007140:	2b03      	cmp	r3, #3
 8007142:	d003      	beq.n	800714c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007144:	e018      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
        break;
 800714a:	e015      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
    break;
 800715c:	e00b      	b.n	8007176 <DMA_CheckFifoParam+0xe6>
        break;
 800715e:	bf00      	nop
 8007160:	e00a      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        break;
 8007162:	bf00      	nop
 8007164:	e008      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        break;
 8007166:	bf00      	nop
 8007168:	e006      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
        break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
    break;
 8007176:	bf00      	nop
    }
  }

  return status;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a38      	ldr	r2, [pc, #224]	; (800727c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d022      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a36      	ldr	r2, [pc, #216]	; (8007280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01d      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a35      	ldr	r2, [pc, #212]	; (8007284 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d018      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a33      	ldr	r2, [pc, #204]	; (8007288 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a32      	ldr	r2, [pc, #200]	; (800728c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00e      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a30      	ldr	r2, [pc, #192]	; (8007290 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2f      	ldr	r2, [pc, #188]	; (8007294 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a2d      	ldr	r2, [pc, #180]	; (8007298 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d101      	bne.n	80071ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01a      	beq.n	8007226 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	3b08      	subs	r3, #8
 80071f8:	4a28      	ldr	r2, [pc, #160]	; (800729c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	091b      	lsrs	r3, r3, #4
 8007200:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007214:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	2201      	movs	r2, #1
 800721e:	409a      	lsls	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007224:	e024      	b.n	8007270 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3b10      	subs	r3, #16
 800722e:	4a1e      	ldr	r2, [pc, #120]	; (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d806      	bhi.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4a1b      	ldr	r2, [pc, #108]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d902      	bls.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3308      	adds	r3, #8
 800724c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007260:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2201      	movs	r2, #1
 800726a:	409a      	lsls	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	58025408 	.word	0x58025408
 8007280:	5802541c 	.word	0x5802541c
 8007284:	58025430 	.word	0x58025430
 8007288:	58025444 	.word	0x58025444
 800728c:	58025458 	.word	0x58025458
 8007290:	5802546c 	.word	0x5802546c
 8007294:	58025480 	.word	0x58025480
 8007298:	58025494 	.word	0x58025494
 800729c:	cccccccd 	.word	0xcccccccd
 80072a0:	16009600 	.word	0x16009600
 80072a4:	58025880 	.word	0x58025880
 80072a8:	aaaaaaab 	.word	0xaaaaaaab
 80072ac:	400204b8 	.word	0x400204b8
 80072b0:	4002040f 	.word	0x4002040f
 80072b4:	10008200 	.word	0x10008200
 80072b8:	40020880 	.word	0x40020880

080072bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d04a      	beq.n	8007368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d847      	bhi.n	8007368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a25      	ldr	r2, [pc, #148]	; (8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d022      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a24      	ldr	r2, [pc, #144]	; (8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d01d      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a22      	ldr	r2, [pc, #136]	; (800737c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d018      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a21      	ldr	r2, [pc, #132]	; (8007380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d013      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1f      	ldr	r2, [pc, #124]	; (8007384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00e      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d009      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1c      	ldr	r2, [pc, #112]	; (800738c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d101      	bne.n	800732c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	4b17      	ldr	r3, [pc, #92]	; (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a15      	ldr	r2, [pc, #84]	; (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007344:	671a      	str	r2, [r3, #112]	; 0x70
 8007346:	e009      	b.n	800735c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a11      	ldr	r2, [pc, #68]	; (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800735a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3b01      	subs	r3, #1
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	58025408 	.word	0x58025408
 8007378:	5802541c 	.word	0x5802541c
 800737c:	58025430 	.word	0x58025430
 8007380:	58025444 	.word	0x58025444
 8007384:	58025458 	.word	0x58025458
 8007388:	5802546c 	.word	0x5802546c
 800738c:	58025480 	.word	0x58025480
 8007390:	58025494 	.word	0x58025494
 8007394:	1600963f 	.word	0x1600963f
 8007398:	58025940 	.word	0x58025940
 800739c:	1000823f 	.word	0x1000823f
 80073a0:	40020940 	.word	0x40020940

080073a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b089      	sub	sp, #36	; 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073b2:	4b89      	ldr	r3, [pc, #548]	; (80075d8 <HAL_GPIO_Init+0x234>)
 80073b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073b6:	e194      	b.n	80076e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	2101      	movs	r1, #1
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	fa01 f303 	lsl.w	r3, r1, r3
 80073c4:	4013      	ands	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8186 	beq.w	80076dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d005      	beq.n	80073e8 <HAL_GPIO_Init+0x44>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d130      	bne.n	800744a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	2203      	movs	r2, #3
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	43db      	mvns	r3, r3
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	4013      	ands	r3, r2
 80073fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	4313      	orrs	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800741e:	2201      	movs	r2, #1
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	43db      	mvns	r3, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4013      	ands	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	f003 0201 	and.w	r2, r3, #1
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	4313      	orrs	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d017      	beq.n	8007486 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	2203      	movs	r2, #3
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4013      	ands	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	4313      	orrs	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d123      	bne.n	80074da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	08da      	lsrs	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3208      	adds	r2, #8
 800749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	220f      	movs	r2, #15
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	08da      	lsrs	r2, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3208      	adds	r2, #8
 80074d4:	69b9      	ldr	r1, [r7, #24]
 80074d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	2203      	movs	r2, #3
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43db      	mvns	r3, r3
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	4013      	ands	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f003 0203 	and.w	r2, r3, #3
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	4313      	orrs	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80e0 	beq.w	80076dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800751c:	4b2f      	ldr	r3, [pc, #188]	; (80075dc <HAL_GPIO_Init+0x238>)
 800751e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007522:	4a2e      	ldr	r2, [pc, #184]	; (80075dc <HAL_GPIO_Init+0x238>)
 8007524:	f043 0302 	orr.w	r3, r3, #2
 8007528:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800752c:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <HAL_GPIO_Init+0x238>)
 800752e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800753a:	4a29      	ldr	r2, [pc, #164]	; (80075e0 <HAL_GPIO_Init+0x23c>)
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	089b      	lsrs	r3, r3, #2
 8007540:	3302      	adds	r3, #2
 8007542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	220f      	movs	r2, #15
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43db      	mvns	r3, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4013      	ands	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a20      	ldr	r2, [pc, #128]	; (80075e4 <HAL_GPIO_Init+0x240>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d052      	beq.n	800760c <HAL_GPIO_Init+0x268>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <HAL_GPIO_Init+0x244>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d031      	beq.n	80075d2 <HAL_GPIO_Init+0x22e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <HAL_GPIO_Init+0x248>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d02b      	beq.n	80075ce <HAL_GPIO_Init+0x22a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <HAL_GPIO_Init+0x24c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d025      	beq.n	80075ca <HAL_GPIO_Init+0x226>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <HAL_GPIO_Init+0x250>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01f      	beq.n	80075c6 <HAL_GPIO_Init+0x222>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1b      	ldr	r2, [pc, #108]	; (80075f8 <HAL_GPIO_Init+0x254>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d019      	beq.n	80075c2 <HAL_GPIO_Init+0x21e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1a      	ldr	r2, [pc, #104]	; (80075fc <HAL_GPIO_Init+0x258>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_GPIO_Init+0x21a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a19      	ldr	r2, [pc, #100]	; (8007600 <HAL_GPIO_Init+0x25c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00d      	beq.n	80075ba <HAL_GPIO_Init+0x216>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a18      	ldr	r2, [pc, #96]	; (8007604 <HAL_GPIO_Init+0x260>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <HAL_GPIO_Init+0x212>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a17      	ldr	r2, [pc, #92]	; (8007608 <HAL_GPIO_Init+0x264>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d101      	bne.n	80075b2 <HAL_GPIO_Init+0x20e>
 80075ae:	2309      	movs	r3, #9
 80075b0:	e02d      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075b2:	230a      	movs	r3, #10
 80075b4:	e02b      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075b6:	2308      	movs	r3, #8
 80075b8:	e029      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075ba:	2307      	movs	r3, #7
 80075bc:	e027      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075be:	2306      	movs	r3, #6
 80075c0:	e025      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075c2:	2305      	movs	r3, #5
 80075c4:	e023      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075c6:	2304      	movs	r3, #4
 80075c8:	e021      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075ca:	2303      	movs	r3, #3
 80075cc:	e01f      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e01d      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e01b      	b.n	800760e <HAL_GPIO_Init+0x26a>
 80075d6:	bf00      	nop
 80075d8:	58000080 	.word	0x58000080
 80075dc:	58024400 	.word	0x58024400
 80075e0:	58000400 	.word	0x58000400
 80075e4:	58020000 	.word	0x58020000
 80075e8:	58020400 	.word	0x58020400
 80075ec:	58020800 	.word	0x58020800
 80075f0:	58020c00 	.word	0x58020c00
 80075f4:	58021000 	.word	0x58021000
 80075f8:	58021400 	.word	0x58021400
 80075fc:	58021800 	.word	0x58021800
 8007600:	58021c00 	.word	0x58021c00
 8007604:	58022000 	.word	0x58022000
 8007608:	58022400 	.word	0x58022400
 800760c:	2300      	movs	r3, #0
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	f002 0203 	and.w	r2, r2, #3
 8007614:	0092      	lsls	r2, r2, #2
 8007616:	4093      	lsls	r3, r2
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	4313      	orrs	r3, r2
 800761c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800761e:	4938      	ldr	r1, [pc, #224]	; (8007700 <HAL_GPIO_Init+0x35c>)
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	089b      	lsrs	r3, r3, #2
 8007624:	3302      	adds	r3, #2
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800762c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	43db      	mvns	r3, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4013      	ands	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800765a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	43db      	mvns	r3, r3
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4013      	ands	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	43db      	mvns	r3, r3
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	4013      	ands	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4013      	ands	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3301      	adds	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f47f ae63 	bne.w	80073b8 <HAL_GPIO_Init+0x14>
  }
}
 80076f2:	bf00      	nop
 80076f4:	bf00      	nop
 80076f6:	3724      	adds	r7, #36	; 0x24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	58000400 	.word	0x58000400

08007704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e001      	b.n	8007726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	807b      	strh	r3, [r7, #2]
 8007740:	4613      	mov	r3, r2
 8007742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007744:	787b      	ldrb	r3, [r7, #1]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800774a:	887a      	ldrh	r2, [r7, #2]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007750:	e003      	b.n	800775a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007752:	887b      	ldrh	r3, [r7, #2]
 8007754:	041a      	lsls	r2, r3, #16
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	619a      	str	r2, [r3, #24]
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e07f      	b.n	800787a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fa fc68 	bl	8002064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2224      	movs	r2, #36	; 0x24
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077de:	609a      	str	r2, [r3, #8]
 80077e0:	e006      	b.n	80077f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80077ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d104      	bne.n	8007802 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6859      	ldr	r1, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <HAL_I2C_Init+0x11c>)
 800780e:	430b      	orrs	r3, r1
 8007810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69d9      	ldr	r1, [r3, #28]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	02008000 	.word	0x02008000

08007888 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	461a      	mov	r2, r3
 8007894:	460b      	mov	r3, r1
 8007896:	817b      	strh	r3, [r7, #10]
 8007898:	4613      	mov	r3, r2
 800789a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	f040 80da 	bne.w	8007a5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_I2C_Master_Transmit+0x30>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e0d3      	b.n	8007a60 <HAL_I2C_Master_Transmit+0x1d8>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078c0:	f7fa fffe 	bl	80028c0 <HAL_GetTick>
 80078c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	2319      	movs	r3, #25
 80078cc:	2201      	movs	r2, #1
 80078ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f9e6 	bl	8007ca4 <I2C_WaitOnFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e0be      	b.n	8007a60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2221      	movs	r2, #33	; 0x21
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2210      	movs	r2, #16
 80078ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	893a      	ldrh	r2, [r7, #8]
 8007902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790e:	b29b      	uxth	r3, r3
 8007910:	2bff      	cmp	r3, #255	; 0xff
 8007912:	d90e      	bls.n	8007932 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	22ff      	movs	r2, #255	; 0xff
 8007918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	b2da      	uxtb	r2, r3
 8007920:	8979      	ldrh	r1, [r7, #10]
 8007922:	4b51      	ldr	r3, [pc, #324]	; (8007a68 <HAL_I2C_Master_Transmit+0x1e0>)
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fbdc 	bl	80080e8 <I2C_TransferConfig>
 8007930:	e06c      	b.n	8007a0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007940:	b2da      	uxtb	r2, r3
 8007942:	8979      	ldrh	r1, [r7, #10]
 8007944:	4b48      	ldr	r3, [pc, #288]	; (8007a68 <HAL_I2C_Master_Transmit+0x1e0>)
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fbcb 	bl	80080e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007952:	e05b      	b.n	8007a0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	6a39      	ldr	r1, [r7, #32]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f9e3 	bl	8007d24 <I2C_WaitOnTXISFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e07b      	b.n	8007a60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d034      	beq.n	8007a0c <HAL_I2C_Master_Transmit+0x184>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d130      	bne.n	8007a0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	2200      	movs	r2, #0
 80079b2:	2180      	movs	r1, #128	; 0x80
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f975 	bl	8007ca4 <I2C_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e04d      	b.n	8007a60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2bff      	cmp	r3, #255	; 0xff
 80079cc:	d90e      	bls.n	80079ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	22ff      	movs	r2, #255	; 0xff
 80079d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	8979      	ldrh	r1, [r7, #10]
 80079dc:	2300      	movs	r3, #0
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 fb7f 	bl	80080e8 <I2C_TransferConfig>
 80079ea:	e00f      	b.n	8007a0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	8979      	ldrh	r1, [r7, #10]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fb6e 	bl	80080e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d19e      	bne.n	8007954 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	6a39      	ldr	r1, [r7, #32]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f9c2 	bl	8007da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e01a      	b.n	8007a60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <HAL_I2C_Master_Transmit+0x1e4>)
 8007a3e:	400b      	ands	r3, r1
 8007a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e000      	b.n	8007a60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	80002000 	.word	0x80002000
 8007a6c:	fe00e800 	.word	0xfe00e800

08007a70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	817b      	strh	r3, [r7, #10]
 8007a80:	4613      	mov	r3, r2
 8007a82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	f040 80db 	bne.w	8007c48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_I2C_Master_Receive+0x30>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e0d4      	b.n	8007c4a <HAL_I2C_Master_Receive+0x1da>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007aa8:	f7fa ff0a 	bl	80028c0 <HAL_GetTick>
 8007aac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	2319      	movs	r3, #25
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f8f2 	bl	8007ca4 <I2C_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e0bf      	b.n	8007c4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2222      	movs	r2, #34	; 0x22
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	893a      	ldrh	r2, [r7, #8]
 8007aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2bff      	cmp	r3, #255	; 0xff
 8007afa:	d90e      	bls.n	8007b1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	22ff      	movs	r2, #255	; 0xff
 8007b00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	8979      	ldrh	r1, [r7, #10]
 8007b0a:	4b52      	ldr	r3, [pc, #328]	; (8007c54 <HAL_I2C_Master_Receive+0x1e4>)
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fae8 	bl	80080e8 <I2C_TransferConfig>
 8007b18:	e06d      	b.n	8007bf6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	8979      	ldrh	r1, [r7, #10]
 8007b2c:	4b49      	ldr	r3, [pc, #292]	; (8007c54 <HAL_I2C_Master_Receive+0x1e4>)
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fad7 	bl	80080e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b3a:	e05c      	b.n	8007bf6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	6a39      	ldr	r1, [r7, #32]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f96b 	bl	8007e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e07c      	b.n	8007c4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d034      	beq.n	8007bf6 <HAL_I2C_Master_Receive+0x186>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d130      	bne.n	8007bf6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2180      	movs	r1, #128	; 0x80
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f880 	bl	8007ca4 <I2C_WaitOnFlagUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e04d      	b.n	8007c4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2bff      	cmp	r3, #255	; 0xff
 8007bb6:	d90e      	bls.n	8007bd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	22ff      	movs	r2, #255	; 0xff
 8007bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	8979      	ldrh	r1, [r7, #10]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fa8a 	bl	80080e8 <I2C_TransferConfig>
 8007bd4:	e00f      	b.n	8007bf6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	8979      	ldrh	r1, [r7, #10]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fa79 	bl	80080e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d19d      	bne.n	8007b3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	6a39      	ldr	r1, [r7, #32]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f8cd 	bl	8007da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e01a      	b.n	8007c4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6859      	ldr	r1, [r3, #4]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <HAL_I2C_Master_Receive+0x1e8>)
 8007c28:	400b      	ands	r3, r1
 8007c2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	80002400 	.word	0x80002400
 8007c58:	fe00e800 	.word	0xfe00e800

08007c5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d103      	bne.n	8007c7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d007      	beq.n	8007c98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	619a      	str	r2, [r3, #24]
  }
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cb4:	e022      	b.n	8007cfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cbc:	d01e      	beq.n	8007cfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cbe:	f7fa fdff 	bl	80028c0 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d302      	bcc.n	8007cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d113      	bne.n	8007cfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	f043 0220 	orr.w	r2, r3, #32
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e00f      	b.n	8007d1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	4013      	ands	r3, r2
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d0cd      	beq.n	8007cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d30:	e02c      	b.n	8007d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	68b9      	ldr	r1, [r7, #8]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f8ea 	bl	8007f10 <I2C_IsErrorOccurred>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e02a      	b.n	8007d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4c:	d01e      	beq.n	8007d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4e:	f7fa fdb7 	bl	80028c0 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d302      	bcc.n	8007d64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d113      	bne.n	8007d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	f043 0220 	orr.w	r2, r3, #32
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e007      	b.n	8007d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d1cb      	bne.n	8007d32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007db0:	e028      	b.n	8007e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f8aa 	bl	8007f10 <I2C_IsErrorOccurred>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e026      	b.n	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc6:	f7fa fd7b 	bl	80028c0 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d302      	bcc.n	8007ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d113      	bne.n	8007e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de0:	f043 0220 	orr.w	r2, r3, #32
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e007      	b.n	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d1cf      	bne.n	8007db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e28:	e064      	b.n	8007ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f86e 	bl	8007f10 <I2C_IsErrorOccurred>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e062      	b.n	8007f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d138      	bne.n	8007ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d105      	bne.n	8007e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e04e      	b.n	8007f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b10      	cmp	r3, #16
 8007e72:	d107      	bne.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2210      	movs	r2, #16
 8007e7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	645a      	str	r2, [r3, #68]	; 0x44
 8007e82:	e002      	b.n	8007e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6859      	ldr	r1, [r3, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b1b      	ldr	r3, [pc, #108]	; (8007f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007e9e:	400b      	ands	r3, r1
 8007ea0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e022      	b.n	8007f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ebe:	f7fa fcff 	bl	80028c0 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d302      	bcc.n	8007ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10f      	bne.n	8007ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed8:	f043 0220 	orr.w	r2, r3, #32
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e007      	b.n	8007f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d193      	bne.n	8007e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	fe00e800 	.word	0xfe00e800

08007f10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d075      	beq.n	8008028 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2210      	movs	r2, #16
 8007f42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f44:	e056      	b.n	8007ff4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4c:	d052      	beq.n	8007ff4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f4e:	f7fa fcb7 	bl	80028c0 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d302      	bcc.n	8007f64 <I2C_IsErrorOccurred+0x54>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d147      	bne.n	8007ff4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f86:	d12e      	bne.n	8007fe6 <I2C_IsErrorOccurred+0xd6>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f8e:	d02a      	beq.n	8007fe6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007f90:	7cfb      	ldrb	r3, [r7, #19]
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d027      	beq.n	8007fe6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fa4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fa6:	f7fa fc8b 	bl	80028c0 <HAL_GetTick>
 8007faa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fac:	e01b      	b.n	8007fe6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fae:	f7fa fc87 	bl	80028c0 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b19      	cmp	r3, #25
 8007fba:	d914      	bls.n	8007fe6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	f043 0220 	orr.w	r2, r3, #32
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d1dc      	bne.n	8007fae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d003      	beq.n	800800a <I2C_IsErrorOccurred+0xfa>
 8008002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008006:	2b00      	cmp	r3, #0
 8008008:	d09d      	beq.n	8007f46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800800a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2220      	movs	r2, #32
 8008018:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f043 0304 	orr.w	r3, r3, #4
 8008020:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800804a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	f043 0308 	orr.w	r3, r3, #8
 8008062:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800806c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f043 0302 	orr.w	r3, r3, #2
 8008084:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800808e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800809a:	2b00      	cmp	r3, #0
 800809c:	d01c      	beq.n	80080d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fddc 	bl	8007c5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <I2C_IsErrorOccurred+0x1d4>)
 80080b0:	400b      	ands	r3, r1
 80080b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80080d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3728      	adds	r7, #40	; 0x28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	fe00e800 	.word	0xfe00e800

080080e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	817b      	strh	r3, [r7, #10]
 80080f6:	4613      	mov	r3, r2
 80080f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080fa:	897b      	ldrh	r3, [r7, #10]
 80080fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008100:	7a7b      	ldrb	r3, [r7, #9]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008108:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	4313      	orrs	r3, r2
 8008112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008116:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	0d5b      	lsrs	r3, r3, #21
 8008122:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008126:	4b08      	ldr	r3, [pc, #32]	; (8008148 <I2C_TransferConfig+0x60>)
 8008128:	430b      	orrs	r3, r1
 800812a:	43db      	mvns	r3, r3
 800812c:	ea02 0103 	and.w	r1, r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800813a:	bf00      	nop
 800813c:	371c      	adds	r7, #28
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	03ff63ff 	.word	0x03ff63ff

0800814c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b20      	cmp	r3, #32
 8008160:	d138      	bne.n	80081d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800816c:	2302      	movs	r3, #2
 800816e:	e032      	b.n	80081d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2224      	movs	r2, #36	; 0x24
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800819e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6819      	ldr	r1, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e000      	b.n	80081d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081d4:	2302      	movs	r3, #2
  }
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d139      	bne.n	800826c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008202:	2302      	movs	r3, #2
 8008204:	e033      	b.n	800826e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2224      	movs	r2, #36	; 0x24
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0201 	bic.w	r2, r2, #1
 8008224:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008234:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	e000      	b.n	800826e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800826c:	2302      	movs	r3, #2
  }
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
	...

0800827c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008288:	4b18      	ldr	r3, [pc, #96]	; (80082ec <HAL_PWR_EnterSTOPMode+0x70>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f023 0201 	bic.w	r2, r3, #1
 8008290:	4916      	ldr	r1, [pc, #88]	; (80082ec <HAL_PWR_EnterSTOPMode+0x70>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4313      	orrs	r3, r2
 8008296:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008298:	4b14      	ldr	r3, [pc, #80]	; (80082ec <HAL_PWR_EnterSTOPMode+0x70>)
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	4a13      	ldr	r2, [pc, #76]	; (80082ec <HAL_PWR_EnterSTOPMode+0x70>)
 800829e:	f023 0305 	bic.w	r3, r3, #5
 80082a2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <HAL_PWR_EnterSTOPMode+0x70>)
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	4a10      	ldr	r2, [pc, #64]	; (80082ec <HAL_PWR_EnterSTOPMode+0x70>)
 80082aa:	f023 0302 	bic.w	r3, r3, #2
 80082ae:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <HAL_PWR_EnterSTOPMode+0x74>)
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	4a0e      	ldr	r2, [pc, #56]	; (80082f0 <HAL_PWR_EnterSTOPMode+0x74>)
 80082b6:	f043 0304 	orr.w	r3, r3, #4
 80082ba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80082bc:	f3bf 8f4f 	dsb	sy
}
 80082c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80082c2:	f3bf 8f6f 	isb	sy
}
 80082c6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80082ce:	bf30      	wfi
 80082d0:	e000      	b.n	80082d4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80082d2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <HAL_PWR_EnterSTOPMode+0x74>)
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	4a05      	ldr	r2, [pc, #20]	; (80082f0 <HAL_PWR_EnterSTOPMode+0x74>)
 80082da:	f023 0304 	bic.w	r3, r3, #4
 80082de:	6113      	str	r3, [r2, #16]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	58024800 	.word	0x58024800
 80082f0:	e000ed00 	.word	0xe000ed00

080082f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <HAL_PWREx_ConfigSupply+0x70>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b04      	cmp	r3, #4
 8008306:	d00a      	beq.n	800831e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008308:	4b16      	ldr	r3, [pc, #88]	; (8008364 <HAL_PWREx_ConfigSupply+0x70>)
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d001      	beq.n	800831a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e01f      	b.n	800835a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e01d      	b.n	800835a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <HAL_PWREx_ConfigSupply+0x70>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f023 0207 	bic.w	r2, r3, #7
 8008326:	490f      	ldr	r1, [pc, #60]	; (8008364 <HAL_PWREx_ConfigSupply+0x70>)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4313      	orrs	r3, r2
 800832c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800832e:	f7fa fac7 	bl	80028c0 <HAL_GetTick>
 8008332:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008334:	e009      	b.n	800834a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008336:	f7fa fac3 	bl	80028c0 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008344:	d901      	bls.n	800834a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e007      	b.n	800835a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800834a:	4b06      	ldr	r3, [pc, #24]	; (8008364 <HAL_PWREx_ConfigSupply+0x70>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008356:	d1ee      	bne.n	8008336 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	58024800 	.word	0x58024800

08008368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08c      	sub	sp, #48	; 0x30
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f000 bc1d 	b.w	8008bb6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8087 	beq.w	8008498 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800838a:	4b99      	ldr	r3, [pc, #612]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008394:	4b96      	ldr	r3, [pc, #600]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b10      	cmp	r3, #16
 800839e:	d007      	beq.n	80083b0 <HAL_RCC_OscConfig+0x48>
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	2b18      	cmp	r3, #24
 80083a4:	d110      	bne.n	80083c8 <HAL_RCC_OscConfig+0x60>
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d10b      	bne.n	80083c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b0:	4b8f      	ldr	r3, [pc, #572]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d06c      	beq.n	8008496 <HAL_RCC_OscConfig+0x12e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d168      	bne.n	8008496 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e3f6      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d0:	d106      	bne.n	80083e0 <HAL_RCC_OscConfig+0x78>
 80083d2:	4b87      	ldr	r3, [pc, #540]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a86      	ldr	r2, [pc, #536]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e02e      	b.n	800843e <HAL_RCC_OscConfig+0xd6>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10c      	bne.n	8008402 <HAL_RCC_OscConfig+0x9a>
 80083e8:	4b81      	ldr	r3, [pc, #516]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a80      	ldr	r2, [pc, #512]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	4b7e      	ldr	r3, [pc, #504]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a7d      	ldr	r2, [pc, #500]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80083fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	e01d      	b.n	800843e <HAL_RCC_OscConfig+0xd6>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800840a:	d10c      	bne.n	8008426 <HAL_RCC_OscConfig+0xbe>
 800840c:	4b78      	ldr	r3, [pc, #480]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a77      	ldr	r2, [pc, #476]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4b75      	ldr	r3, [pc, #468]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a74      	ldr	r2, [pc, #464]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800841e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	e00b      	b.n	800843e <HAL_RCC_OscConfig+0xd6>
 8008426:	4b72      	ldr	r3, [pc, #456]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a71      	ldr	r2, [pc, #452]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800842c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	4b6f      	ldr	r3, [pc, #444]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a6e      	ldr	r2, [pc, #440]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800843c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d013      	beq.n	800846e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008446:	f7fa fa3b 	bl	80028c0 <HAL_GetTick>
 800844a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800844c:	e008      	b.n	8008460 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800844e:	f7fa fa37 	bl	80028c0 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b64      	cmp	r3, #100	; 0x64
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e3aa      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008460:	4b63      	ldr	r3, [pc, #396]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0f0      	beq.n	800844e <HAL_RCC_OscConfig+0xe6>
 800846c:	e014      	b.n	8008498 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800846e:	f7fa fa27 	bl	80028c0 <HAL_GetTick>
 8008472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008474:	e008      	b.n	8008488 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008476:	f7fa fa23 	bl	80028c0 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b64      	cmp	r3, #100	; 0x64
 8008482:	d901      	bls.n	8008488 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e396      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008488:	4b59      	ldr	r3, [pc, #356]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1f0      	bne.n	8008476 <HAL_RCC_OscConfig+0x10e>
 8008494:	e000      	b.n	8008498 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008496:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80cb 	beq.w	800863c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084a6:	4b52      	ldr	r3, [pc, #328]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084b0:	4b4f      	ldr	r3, [pc, #316]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <HAL_RCC_OscConfig+0x164>
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	2b18      	cmp	r3, #24
 80084c0:	d156      	bne.n	8008570 <HAL_RCC_OscConfig+0x208>
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d151      	bne.n	8008570 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084cc:	4b48      	ldr	r3, [pc, #288]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_RCC_OscConfig+0x17c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e368      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084e4:	4b42      	ldr	r3, [pc, #264]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f023 0219 	bic.w	r2, r3, #25
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	493f      	ldr	r1, [pc, #252]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084f6:	f7fa f9e3 	bl	80028c0 <HAL_GetTick>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084fc:	e008      	b.n	8008510 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084fe:	f7fa f9df 	bl	80028c0 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d901      	bls.n	8008510 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e352      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008510:	4b37      	ldr	r3, [pc, #220]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0f0      	beq.n	80084fe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851c:	f7fa fa10 	bl	8002940 <HAL_GetREVID>
 8008520:	4603      	mov	r3, r0
 8008522:	f241 0203 	movw	r2, #4099	; 0x1003
 8008526:	4293      	cmp	r3, r2
 8008528:	d817      	bhi.n	800855a <HAL_RCC_OscConfig+0x1f2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b40      	cmp	r3, #64	; 0x40
 8008530:	d108      	bne.n	8008544 <HAL_RCC_OscConfig+0x1dc>
 8008532:	4b2f      	ldr	r3, [pc, #188]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800853a:	4a2d      	ldr	r2, [pc, #180]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800853c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008540:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008542:	e07b      	b.n	800863c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008544:	4b2a      	ldr	r3, [pc, #168]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	031b      	lsls	r3, r3, #12
 8008552:	4927      	ldr	r1, [pc, #156]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008554:	4313      	orrs	r3, r2
 8008556:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008558:	e070      	b.n	800863c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800855a:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	061b      	lsls	r3, r3, #24
 8008568:	4921      	ldr	r1, [pc, #132]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800856a:	4313      	orrs	r3, r2
 800856c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800856e:	e065      	b.n	800863c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d048      	beq.n	800860a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f023 0219 	bic.w	r2, r3, #25
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	491a      	ldr	r1, [pc, #104]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 8008586:	4313      	orrs	r3, r2
 8008588:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858a:	f7fa f999 	bl	80028c0 <HAL_GetTick>
 800858e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008592:	f7fa f995 	bl	80028c0 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e308      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b0:	f7fa f9c6 	bl	8002940 <HAL_GetREVID>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d81a      	bhi.n	80085f4 <HAL_RCC_OscConfig+0x28c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d108      	bne.n	80085d8 <HAL_RCC_OscConfig+0x270>
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085ce:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80085d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d4:	6053      	str	r3, [r2, #4]
 80085d6:	e031      	b.n	800863c <HAL_RCC_OscConfig+0x2d4>
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	031b      	lsls	r3, r3, #12
 80085e6:	4902      	ldr	r1, [pc, #8]	; (80085f0 <HAL_RCC_OscConfig+0x288>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	604b      	str	r3, [r1, #4]
 80085ec:	e026      	b.n	800863c <HAL_RCC_OscConfig+0x2d4>
 80085ee:	bf00      	nop
 80085f0:	58024400 	.word	0x58024400
 80085f4:	4b9a      	ldr	r3, [pc, #616]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	061b      	lsls	r3, r3, #24
 8008602:	4997      	ldr	r1, [pc, #604]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008604:	4313      	orrs	r3, r2
 8008606:	604b      	str	r3, [r1, #4]
 8008608:	e018      	b.n	800863c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800860a:	4b95      	ldr	r3, [pc, #596]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a94      	ldr	r2, [pc, #592]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008616:	f7fa f953 	bl	80028c0 <HAL_GetTick>
 800861a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800861e:	f7fa f94f 	bl	80028c0 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e2c2      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008630:	4b8b      	ldr	r3, [pc, #556]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 80a9 	beq.w	800879c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800864a:	4b85      	ldr	r3, [pc, #532]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008652:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008654:	4b82      	ldr	r3, [pc, #520]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b08      	cmp	r3, #8
 800865e:	d007      	beq.n	8008670 <HAL_RCC_OscConfig+0x308>
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b18      	cmp	r3, #24
 8008664:	d13a      	bne.n	80086dc <HAL_RCC_OscConfig+0x374>
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	2b01      	cmp	r3, #1
 800866e:	d135      	bne.n	80086dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008670:	4b7b      	ldr	r3, [pc, #492]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <HAL_RCC_OscConfig+0x320>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	2b80      	cmp	r3, #128	; 0x80
 8008682:	d001      	beq.n	8008688 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e296      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008688:	f7fa f95a 	bl	8002940 <HAL_GetREVID>
 800868c:	4603      	mov	r3, r0
 800868e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008692:	4293      	cmp	r3, r2
 8008694:	d817      	bhi.n	80086c6 <HAL_RCC_OscConfig+0x35e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	2b20      	cmp	r3, #32
 800869c:	d108      	bne.n	80086b0 <HAL_RCC_OscConfig+0x348>
 800869e:	4b70      	ldr	r3, [pc, #448]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086a6:	4a6e      	ldr	r2, [pc, #440]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086ae:	e075      	b.n	800879c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086b0:	4b6b      	ldr	r3, [pc, #428]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	069b      	lsls	r3, r3, #26
 80086be:	4968      	ldr	r1, [pc, #416]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086c4:	e06a      	b.n	800879c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086c6:	4b66      	ldr	r3, [pc, #408]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	061b      	lsls	r3, r3, #24
 80086d4:	4962      	ldr	r1, [pc, #392]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086da:	e05f      	b.n	800879c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d042      	beq.n	800876a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086e4:	4b5e      	ldr	r3, [pc, #376]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a5d      	ldr	r2, [pc, #372]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80086ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f0:	f7fa f8e6 	bl	80028c0 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086f8:	f7fa f8e2 	bl	80028c0 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e255      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800870a:	4b55      	ldr	r3, [pc, #340]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f0      	beq.n	80086f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008716:	f7fa f913 	bl	8002940 <HAL_GetREVID>
 800871a:	4603      	mov	r3, r0
 800871c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008720:	4293      	cmp	r3, r2
 8008722:	d817      	bhi.n	8008754 <HAL_RCC_OscConfig+0x3ec>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	2b20      	cmp	r3, #32
 800872a:	d108      	bne.n	800873e <HAL_RCC_OscConfig+0x3d6>
 800872c:	4b4c      	ldr	r3, [pc, #304]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008734:	4a4a      	ldr	r2, [pc, #296]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800873a:	6053      	str	r3, [r2, #4]
 800873c:	e02e      	b.n	800879c <HAL_RCC_OscConfig+0x434>
 800873e:	4b48      	ldr	r3, [pc, #288]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	069b      	lsls	r3, r3, #26
 800874c:	4944      	ldr	r1, [pc, #272]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800874e:	4313      	orrs	r3, r2
 8008750:	604b      	str	r3, [r1, #4]
 8008752:	e023      	b.n	800879c <HAL_RCC_OscConfig+0x434>
 8008754:	4b42      	ldr	r3, [pc, #264]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	061b      	lsls	r3, r3, #24
 8008762:	493f      	ldr	r1, [pc, #252]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008764:	4313      	orrs	r3, r2
 8008766:	60cb      	str	r3, [r1, #12]
 8008768:	e018      	b.n	800879c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800876a:	4b3d      	ldr	r3, [pc, #244]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a3c      	ldr	r2, [pc, #240]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008776:	f7fa f8a3 	bl	80028c0 <HAL_GetTick>
 800877a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800877e:	f7fa f89f 	bl	80028c0 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e212      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008790:	4b33      	ldr	r3, [pc, #204]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f0      	bne.n	800877e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d036      	beq.n	8008816 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d019      	beq.n	80087e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087b0:	4b2b      	ldr	r3, [pc, #172]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80087b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b4:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80087b6:	f043 0301 	orr.w	r3, r3, #1
 80087ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087bc:	f7fa f880 	bl	80028c0 <HAL_GetTick>
 80087c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087c4:	f7fa f87c 	bl	80028c0 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e1ef      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087d6:	4b22      	ldr	r3, [pc, #136]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80087d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f0      	beq.n	80087c4 <HAL_RCC_OscConfig+0x45c>
 80087e2:	e018      	b.n	8008816 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087e4:	4b1e      	ldr	r3, [pc, #120]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80087e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e8:	4a1d      	ldr	r2, [pc, #116]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f0:	f7fa f866 	bl	80028c0 <HAL_GetTick>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f8:	f7fa f862 	bl	80028c0 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e1d5      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800880a:	4b15      	ldr	r3, [pc, #84]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800880c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f0      	bne.n	80087f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d039      	beq.n	8008896 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01c      	beq.n	8008864 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800882a:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a0c      	ldr	r2, [pc, #48]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008834:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008836:	f7fa f843 	bl	80028c0 <HAL_GetTick>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800883e:	f7fa f83f 	bl	80028c0 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e1b2      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008850:	4b03      	ldr	r3, [pc, #12]	; (8008860 <HAL_RCC_OscConfig+0x4f8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x4d6>
 800885c:	e01b      	b.n	8008896 <HAL_RCC_OscConfig+0x52e>
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008864:	4b9b      	ldr	r3, [pc, #620]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a9a      	ldr	r2, [pc, #616]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 800886a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800886e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008870:	f7fa f826 	bl	80028c0 <HAL_GetTick>
 8008874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008878:	f7fa f822 	bl	80028c0 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e195      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800888a:	4b92      	ldr	r3, [pc, #584]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f0      	bne.n	8008878 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8081 	beq.w	80089a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088a4:	4b8c      	ldr	r3, [pc, #560]	; (8008ad8 <HAL_RCC_OscConfig+0x770>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a8b      	ldr	r2, [pc, #556]	; (8008ad8 <HAL_RCC_OscConfig+0x770>)
 80088aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088b0:	f7fa f806 	bl	80028c0 <HAL_GetTick>
 80088b4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088b8:	f7fa f802 	bl	80028c0 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b64      	cmp	r3, #100	; 0x64
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e175      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088ca:	4b83      	ldr	r3, [pc, #524]	; (8008ad8 <HAL_RCC_OscConfig+0x770>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0f0      	beq.n	80088b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d106      	bne.n	80088ec <HAL_RCC_OscConfig+0x584>
 80088de:	4b7d      	ldr	r3, [pc, #500]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80088e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e2:	4a7c      	ldr	r2, [pc, #496]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	6713      	str	r3, [r2, #112]	; 0x70
 80088ea:	e02d      	b.n	8008948 <HAL_RCC_OscConfig+0x5e0>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10c      	bne.n	800890e <HAL_RCC_OscConfig+0x5a6>
 80088f4:	4b77      	ldr	r3, [pc, #476]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80088f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f8:	4a76      	ldr	r2, [pc, #472]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008900:	4b74      	ldr	r3, [pc, #464]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008904:	4a73      	ldr	r2, [pc, #460]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008906:	f023 0304 	bic.w	r3, r3, #4
 800890a:	6713      	str	r3, [r2, #112]	; 0x70
 800890c:	e01c      	b.n	8008948 <HAL_RCC_OscConfig+0x5e0>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b05      	cmp	r3, #5
 8008914:	d10c      	bne.n	8008930 <HAL_RCC_OscConfig+0x5c8>
 8008916:	4b6f      	ldr	r3, [pc, #444]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	4a6e      	ldr	r2, [pc, #440]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	6713      	str	r3, [r2, #112]	; 0x70
 8008922:	4b6c      	ldr	r3, [pc, #432]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	4a6b      	ldr	r2, [pc, #428]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6713      	str	r3, [r2, #112]	; 0x70
 800892e:	e00b      	b.n	8008948 <HAL_RCC_OscConfig+0x5e0>
 8008930:	4b68      	ldr	r3, [pc, #416]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008934:	4a67      	ldr	r2, [pc, #412]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	6713      	str	r3, [r2, #112]	; 0x70
 800893c:	4b65      	ldr	r3, [pc, #404]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 800893e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008940:	4a64      	ldr	r2, [pc, #400]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008942:	f023 0304 	bic.w	r3, r3, #4
 8008946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d015      	beq.n	800897c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008950:	f7f9 ffb6 	bl	80028c0 <HAL_GetTick>
 8008954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008956:	e00a      	b.n	800896e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008958:	f7f9 ffb2 	bl	80028c0 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f241 3288 	movw	r2, #5000	; 0x1388
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e123      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800896e:	4b59      	ldr	r3, [pc, #356]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0ee      	beq.n	8008958 <HAL_RCC_OscConfig+0x5f0>
 800897a:	e014      	b.n	80089a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897c:	f7f9 ffa0 	bl	80028c0 <HAL_GetTick>
 8008980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008982:	e00a      	b.n	800899a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008984:	f7f9 ff9c 	bl	80028c0 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e10d      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800899a:	4b4e      	ldr	r3, [pc, #312]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1ee      	bne.n	8008984 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8102 	beq.w	8008bb4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089b0:	4b48      	ldr	r3, [pc, #288]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089b8:	2b18      	cmp	r3, #24
 80089ba:	f000 80bd 	beq.w	8008b38 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	f040 809e 	bne.w	8008b04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a41      	ldr	r2, [pc, #260]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80089ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d4:	f7f9 ff74 	bl	80028c0 <HAL_GetTick>
 80089d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089da:	e008      	b.n	80089ee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089dc:	f7f9 ff70 	bl	80028c0 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e0e3      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089ee:	4b39      	ldr	r3, [pc, #228]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f0      	bne.n	80089dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089fa:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <HAL_RCC_OscConfig+0x774>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a0a:	0112      	lsls	r2, r2, #4
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	4931      	ldr	r1, [pc, #196]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	628b      	str	r3, [r1, #40]	; 0x28
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	3b01      	subs	r3, #1
 8008a24:	025b      	lsls	r3, r3, #9
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	041b      	lsls	r3, r3, #16
 8008a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	061b      	lsls	r3, r3, #24
 8008a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a44:	4923      	ldr	r1, [pc, #140]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a4a:	4b22      	ldr	r3, [pc, #136]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a50:	f023 0301 	bic.w	r3, r3, #1
 8008a54:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a56:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a5a:	4b21      	ldr	r3, [pc, #132]	; (8008ae0 <HAL_RCC_OscConfig+0x778>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a62:	00d2      	lsls	r2, r2, #3
 8008a64:	491b      	ldr	r1, [pc, #108]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	f023 020c 	bic.w	r2, r3, #12
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	4917      	ldr	r1, [pc, #92]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a7c:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f023 0202 	bic.w	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a88:	4912      	ldr	r1, [pc, #72]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	4a07      	ldr	r2, [pc, #28]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008ab8:	f043 0301 	orr.w	r3, r3, #1
 8008abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <HAL_RCC_OscConfig+0x76c>)
 8008ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aca:	f7f9 fef9 	bl	80028c0 <HAL_GetTick>
 8008ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ad0:	e011      	b.n	8008af6 <HAL_RCC_OscConfig+0x78e>
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	58024800 	.word	0x58024800
 8008adc:	fffffc0c 	.word	0xfffffc0c
 8008ae0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ae4:	f7f9 feec 	bl	80028c0 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e05f      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008af6:	4b32      	ldr	r3, [pc, #200]	; (8008bc0 <HAL_RCC_OscConfig+0x858>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x77c>
 8008b02:	e057      	b.n	8008bb4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b04:	4b2e      	ldr	r3, [pc, #184]	; (8008bc0 <HAL_RCC_OscConfig+0x858>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a2d      	ldr	r2, [pc, #180]	; (8008bc0 <HAL_RCC_OscConfig+0x858>)
 8008b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b10:	f7f9 fed6 	bl	80028c0 <HAL_GetTick>
 8008b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b18:	f7f9 fed2 	bl	80028c0 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e045      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b2a:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <HAL_RCC_OscConfig+0x858>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1f0      	bne.n	8008b18 <HAL_RCC_OscConfig+0x7b0>
 8008b36:	e03d      	b.n	8008bb4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b38:	4b21      	ldr	r3, [pc, #132]	; (8008bc0 <HAL_RCC_OscConfig+0x858>)
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b3e:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <HAL_RCC_OscConfig+0x858>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d031      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f003 0203 	and.w	r2, r3, #3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d12a      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d122      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d11a      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	0a5b      	lsrs	r3, r3, #9
 8008b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d111      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d108      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008baa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d001      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3730      	adds	r7, #48	; 0x30
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	58024400 	.word	0x58024400

08008bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e19c      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008bd8:	4b8a      	ldr	r3, [pc, #552]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d910      	bls.n	8008c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008be6:	4b87      	ldr	r3, [pc, #540]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f023 020f 	bic.w	r2, r3, #15
 8008bee:	4985      	ldr	r1, [pc, #532]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bf6:	4b83      	ldr	r3, [pc, #524]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d001      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e184      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d010      	beq.n	8008c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	4b7b      	ldr	r3, [pc, #492]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d908      	bls.n	8008c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c24:	4b78      	ldr	r3, [pc, #480]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	4975      	ldr	r1, [pc, #468]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	4b70      	ldr	r3, [pc, #448]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d908      	bls.n	8008c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c52:	4b6d      	ldr	r3, [pc, #436]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	496a      	ldr	r1, [pc, #424]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d010      	beq.n	8008c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	4b64      	ldr	r3, [pc, #400]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d908      	bls.n	8008c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c80:	4b61      	ldr	r3, [pc, #388]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	495e      	ldr	r1, [pc, #376]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	4b59      	ldr	r3, [pc, #356]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d908      	bls.n	8008cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008cae:	4b56      	ldr	r3, [pc, #344]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	4953      	ldr	r1, [pc, #332]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d010      	beq.n	8008cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	4b4d      	ldr	r3, [pc, #308]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d908      	bls.n	8008cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cdc:	4b4a      	ldr	r3, [pc, #296]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f023 020f 	bic.w	r2, r3, #15
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4947      	ldr	r1, [pc, #284]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d055      	beq.n	8008da6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cfa:	4b43      	ldr	r3, [pc, #268]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	4940      	ldr	r1, [pc, #256]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d107      	bne.n	8008d24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d14:	4b3c      	ldr	r3, [pc, #240]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d121      	bne.n	8008d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0f6      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d107      	bne.n	8008d3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d2c:	4b36      	ldr	r3, [pc, #216]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d115      	bne.n	8008d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e0ea      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d107      	bne.n	8008d54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d44:	4b30      	ldr	r3, [pc, #192]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0de      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d54:	4b2c      	ldr	r3, [pc, #176]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0d6      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d64:	4b28      	ldr	r3, [pc, #160]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f023 0207 	bic.w	r2, r3, #7
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	4925      	ldr	r1, [pc, #148]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d76:	f7f9 fda3 	bl	80028c0 <HAL_GetTick>
 8008d7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d7c:	e00a      	b.n	8008d94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d7e:	f7f9 fd9f 	bl	80028c0 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e0be      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d94:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d1eb      	bne.n	8008d7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d010      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d208      	bcs.n	8008dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dc2:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f023 020f 	bic.w	r2, r3, #15
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	490e      	ldr	r1, [pc, #56]	; (8008e08 <HAL_RCC_ClockConfig+0x244>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dd4:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d214      	bcs.n	8008e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f023 020f 	bic.w	r2, r3, #15
 8008dea:	4906      	ldr	r1, [pc, #24]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df2:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <HAL_RCC_ClockConfig+0x240>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d005      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e086      	b.n	8008f12 <HAL_RCC_ClockConfig+0x34e>
 8008e04:	52002000 	.word	0x52002000
 8008e08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d010      	beq.n	8008e3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691a      	ldr	r2, [r3, #16]
 8008e1c:	4b3f      	ldr	r3, [pc, #252]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d208      	bcs.n	8008e3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e28:	4b3c      	ldr	r3, [pc, #240]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	4939      	ldr	r1, [pc, #228]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d010      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695a      	ldr	r2, [r3, #20]
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d208      	bcs.n	8008e68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e56:	4b31      	ldr	r3, [pc, #196]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	492e      	ldr	r1, [pc, #184]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d010      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	4b28      	ldr	r3, [pc, #160]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d208      	bcs.n	8008e96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e84:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	4922      	ldr	r1, [pc, #136]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d010      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69da      	ldr	r2, [r3, #28]
 8008ea6:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d208      	bcs.n	8008ec4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008eb2:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	4917      	ldr	r1, [pc, #92]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ec4:	f000 f834 	bl	8008f30 <HAL_RCC_GetSysClockFreq>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	4b14      	ldr	r3, [pc, #80]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	0a1b      	lsrs	r3, r3, #8
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	4912      	ldr	r1, [pc, #72]	; (8008f20 <HAL_RCC_ClockConfig+0x35c>)
 8008ed6:	5ccb      	ldrb	r3, [r1, r3]
 8008ed8:	f003 031f 	and.w	r3, r3, #31
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <HAL_RCC_ClockConfig+0x358>)
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	4a0d      	ldr	r2, [pc, #52]	; (8008f20 <HAL_RCC_ClockConfig+0x35c>)
 8008eec:	5cd3      	ldrb	r3, [r2, r3]
 8008eee:	f003 031f 	and.w	r3, r3, #31
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef8:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <HAL_RCC_ClockConfig+0x360>)
 8008efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008efc:	4a0a      	ldr	r2, [pc, #40]	; (8008f28 <HAL_RCC_ClockConfig+0x364>)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <HAL_RCC_ClockConfig+0x368>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f9 fc90 	bl	800282c <HAL_InitTick>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	58024400 	.word	0x58024400
 8008f20:	0800fe58 	.word	0x0800fe58
 8008f24:	24000034 	.word	0x24000034
 8008f28:	24000030 	.word	0x24000030
 8008f2c:	24000038 	.word	0x24000038

08008f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b089      	sub	sp, #36	; 0x24
 8008f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f36:	4bb3      	ldr	r3, [pc, #716]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f3e:	2b18      	cmp	r3, #24
 8008f40:	f200 8155 	bhi.w	80091ee <HAL_RCC_GetSysClockFreq+0x2be>
 8008f44:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	08008fb1 	.word	0x08008fb1
 8008f50:	080091ef 	.word	0x080091ef
 8008f54:	080091ef 	.word	0x080091ef
 8008f58:	080091ef 	.word	0x080091ef
 8008f5c:	080091ef 	.word	0x080091ef
 8008f60:	080091ef 	.word	0x080091ef
 8008f64:	080091ef 	.word	0x080091ef
 8008f68:	080091ef 	.word	0x080091ef
 8008f6c:	08008fd7 	.word	0x08008fd7
 8008f70:	080091ef 	.word	0x080091ef
 8008f74:	080091ef 	.word	0x080091ef
 8008f78:	080091ef 	.word	0x080091ef
 8008f7c:	080091ef 	.word	0x080091ef
 8008f80:	080091ef 	.word	0x080091ef
 8008f84:	080091ef 	.word	0x080091ef
 8008f88:	080091ef 	.word	0x080091ef
 8008f8c:	08008fdd 	.word	0x08008fdd
 8008f90:	080091ef 	.word	0x080091ef
 8008f94:	080091ef 	.word	0x080091ef
 8008f98:	080091ef 	.word	0x080091ef
 8008f9c:	080091ef 	.word	0x080091ef
 8008fa0:	080091ef 	.word	0x080091ef
 8008fa4:	080091ef 	.word	0x080091ef
 8008fa8:	080091ef 	.word	0x080091ef
 8008fac:	08008fe3 	.word	0x08008fe3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fb0:	4b94      	ldr	r3, [pc, #592]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0320 	and.w	r3, r3, #32
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d009      	beq.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fbc:	4b91      	ldr	r3, [pc, #580]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	08db      	lsrs	r3, r3, #3
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	4a90      	ldr	r2, [pc, #576]	; (8009208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008fce:	e111      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fd0:	4b8d      	ldr	r3, [pc, #564]	; (8009208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fd2:	61bb      	str	r3, [r7, #24]
    break;
 8008fd4:	e10e      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008fd6:	4b8d      	ldr	r3, [pc, #564]	; (800920c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fd8:	61bb      	str	r3, [r7, #24]
    break;
 8008fda:	e10b      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008fdc:	4b8c      	ldr	r3, [pc, #560]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fde:	61bb      	str	r3, [r7, #24]
    break;
 8008fe0:	e108      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fe2:	4b88      	ldr	r3, [pc, #544]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008fec:	4b85      	ldr	r3, [pc, #532]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	091b      	lsrs	r3, r3, #4
 8008ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ff6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ff8:	4b82      	ldr	r3, [pc, #520]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009002:	4b80      	ldr	r3, [pc, #512]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80e1 	beq.w	80091e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b02      	cmp	r3, #2
 800902a:	f000 8083 	beq.w	8009134 <HAL_RCC_GetSysClockFreq+0x204>
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b02      	cmp	r3, #2
 8009032:	f200 80a1 	bhi.w	8009178 <HAL_RCC_GetSysClockFreq+0x248>
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_RCC_GetSysClockFreq+0x114>
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d056      	beq.n	80090f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009042:	e099      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009044:	4b6f      	ldr	r3, [pc, #444]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d02d      	beq.n	80090ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009050:	4b6c      	ldr	r3, [pc, #432]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	08db      	lsrs	r3, r3, #3
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	4a6b      	ldr	r2, [pc, #428]	; (8009208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907a:	4b62      	ldr	r3, [pc, #392]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908a:	ed97 6a02 	vldr	s12, [r7, #8]
 800908e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800909e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090aa:	e087      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b51      	ldr	r3, [pc, #324]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80090d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ee:	e065      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800921c <HAL_RCC_GetSysClockFreq+0x2ec>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b40      	ldr	r3, [pc, #256]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a02 	vldr	s12, [r7, #8]
 8009116:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009132:	e043      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b2f      	ldr	r3, [pc, #188]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a02 	vldr	s12, [r7, #8]
 800915a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009176:	e021      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a26 	vldr	s13, [pc, #152]	; 800921c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a02 	vldr	s12, [r7, #8]
 800919e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091bc:	4b11      	ldr	r3, [pc, #68]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	0a5b      	lsrs	r3, r3, #9
 80091c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c6:	3301      	adds	r3, #1
 80091c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	ee07 3a90 	vmov	s15, r3
 80091d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e0:	ee17 3a90 	vmov	r3, s15
 80091e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80091e6:	e005      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	61bb      	str	r3, [r7, #24]
    break;
 80091ec:	e002      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80091ee:	4b07      	ldr	r3, [pc, #28]	; (800920c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091f0:	61bb      	str	r3, [r7, #24]
    break;
 80091f2:	bf00      	nop
  }

  return sysclockfreq;
 80091f4:	69bb      	ldr	r3, [r7, #24]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3724      	adds	r7, #36	; 0x24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	58024400 	.word	0x58024400
 8009208:	03d09000 	.word	0x03d09000
 800920c:	003d0900 	.word	0x003d0900
 8009210:	017d7840 	.word	0x017d7840
 8009214:	46000000 	.word	0x46000000
 8009218:	4c742400 	.word	0x4c742400
 800921c:	4a742400 	.word	0x4a742400
 8009220:	4bbebc20 	.word	0x4bbebc20

08009224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800922a:	f7ff fe81 	bl	8008f30 <HAL_RCC_GetSysClockFreq>
 800922e:	4602      	mov	r2, r0
 8009230:	4b10      	ldr	r3, [pc, #64]	; (8009274 <HAL_RCC_GetHCLKFreq+0x50>)
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	0a1b      	lsrs	r3, r3, #8
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	490f      	ldr	r1, [pc, #60]	; (8009278 <HAL_RCC_GetHCLKFreq+0x54>)
 800923c:	5ccb      	ldrb	r3, [r1, r3]
 800923e:	f003 031f 	and.w	r3, r3, #31
 8009242:	fa22 f303 	lsr.w	r3, r2, r3
 8009246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <HAL_RCC_GetHCLKFreq+0x50>)
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	4a09      	ldr	r2, [pc, #36]	; (8009278 <HAL_RCC_GetHCLKFreq+0x54>)
 8009252:	5cd3      	ldrb	r3, [r2, r3]
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	fa22 f303 	lsr.w	r3, r2, r3
 800925e:	4a07      	ldr	r2, [pc, #28]	; (800927c <HAL_RCC_GetHCLKFreq+0x58>)
 8009260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009262:	4a07      	ldr	r2, [pc, #28]	; (8009280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <HAL_RCC_GetHCLKFreq+0x58>)
 800926a:	681b      	ldr	r3, [r3, #0]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	58024400 	.word	0x58024400
 8009278:	0800fe58 	.word	0x0800fe58
 800927c:	24000034 	.word	0x24000034
 8009280:	24000030 	.word	0x24000030

08009284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009288:	f7ff ffcc 	bl	8009224 <HAL_RCC_GetHCLKFreq>
 800928c:	4602      	mov	r2, r0
 800928e:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	091b      	lsrs	r3, r3, #4
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	4904      	ldr	r1, [pc, #16]	; (80092ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	58024400 	.word	0x58024400
 80092ac:	0800fe58 	.word	0x0800fe58

080092b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092b4:	f7ff ffb6 	bl	8009224 <HAL_RCC_GetHCLKFreq>
 80092b8:	4602      	mov	r2, r0
 80092ba:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	4904      	ldr	r1, [pc, #16]	; (80092d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092c6:	5ccb      	ldrb	r3, [r1, r3]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	0800fe58 	.word	0x0800fe58

080092dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092e4:	2300      	movs	r3, #0
 80092e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e8:	2300      	movs	r3, #0
 80092ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d03f      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009300:	d02a      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009306:	d824      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930c:	d018      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800930e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009312:	d81e      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931c:	d007      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800931e:	e018      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009320:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	4aa2      	ldr	r2, [pc, #648]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800932a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800932c:	e015      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3304      	adds	r3, #4
 8009332:	2102      	movs	r1, #2
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fff9 	bl	800b32c <RCCEx_PLL2_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800933e:	e00c      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3324      	adds	r3, #36	; 0x24
 8009344:	2102      	movs	r1, #2
 8009346:	4618      	mov	r0, r3
 8009348:	f002 f8a2 	bl	800b490 <RCCEx_PLL3_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009350:	e003      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]
      break;
 8009356:	e000      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009360:	4b93      	ldr	r3, [pc, #588]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800936c:	4990      	ldr	r1, [pc, #576]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800936e:	4313      	orrs	r3, r2
 8009370:	650b      	str	r3, [r1, #80]	; 0x50
 8009372:	e001      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009380:	2b00      	cmp	r3, #0
 8009382:	d03d      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009388:	2b04      	cmp	r3, #4
 800938a:	d826      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	080093a9 	.word	0x080093a9
 8009398:	080093b7 	.word	0x080093b7
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	080093e1 	.word	0x080093e1
 80093a4:	080093e1 	.word	0x080093e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a8:	4b81      	ldr	r3, [pc, #516]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4a80      	ldr	r2, [pc, #512]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093b4:	e015      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3304      	adds	r3, #4
 80093ba:	2100      	movs	r1, #0
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 ffb5 	bl	800b32c <RCCEx_PLL2_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093c6:	e00c      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3324      	adds	r3, #36	; 0x24
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 f85e 	bl	800b490 <RCCEx_PLL3_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d8:	e003      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
      break;
 80093de:	e000      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093e8:	4b71      	ldr	r3, [pc, #452]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ec:	f023 0207 	bic.w	r2, r3, #7
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f4:	496e      	ldr	r1, [pc, #440]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	650b      	str	r3, [r1, #80]	; 0x50
 80093fa:	e001      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009408:	2b00      	cmp	r3, #0
 800940a:	d042      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009414:	d02b      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800941a:	d825      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800941c:	2bc0      	cmp	r3, #192	; 0xc0
 800941e:	d028      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009420:	2bc0      	cmp	r3, #192	; 0xc0
 8009422:	d821      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009424:	2b80      	cmp	r3, #128	; 0x80
 8009426:	d016      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009428:	2b80      	cmp	r3, #128	; 0x80
 800942a:	d81d      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009430:	2b40      	cmp	r3, #64	; 0x40
 8009432:	d007      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009434:	e018      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009436:	4b5e      	ldr	r3, [pc, #376]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	4a5d      	ldr	r2, [pc, #372]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800943c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009442:	e017      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3304      	adds	r3, #4
 8009448:	2100      	movs	r1, #0
 800944a:	4618      	mov	r0, r3
 800944c:	f001 ff6e 	bl	800b32c <RCCEx_PLL2_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009454:	e00e      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3324      	adds	r3, #36	; 0x24
 800945a:	2100      	movs	r1, #0
 800945c:	4618      	mov	r0, r3
 800945e:	f002 f817 	bl	800b490 <RCCEx_PLL3_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009466:	e005      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	75fb      	strb	r3, [r7, #23]
      break;
 800946c:	e002      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800946e:	bf00      	nop
 8009470:	e000      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d109      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800947a:	4b4d      	ldr	r3, [pc, #308]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800947c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009486:	494a      	ldr	r1, [pc, #296]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009488:	4313      	orrs	r3, r2
 800948a:	650b      	str	r3, [r1, #80]	; 0x50
 800948c:	e001      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800949a:	2b00      	cmp	r3, #0
 800949c:	d049      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a8:	d030      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094ae:	d82a      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b4:	d02c      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80094b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094ba:	d824      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c0:	d018      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80094c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c6:	d81e      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094d0:	d007      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094d2:	e018      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	4a35      	ldr	r2, [pc, #212]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094e0:	e017      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3304      	adds	r3, #4
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f001 ff1f 	bl	800b32c <RCCEx_PLL2_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094f2:	e00e      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3324      	adds	r3, #36	; 0x24
 80094f8:	2100      	movs	r1, #0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 ffc8 	bl	800b490 <RCCEx_PLL3_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009504:	e005      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	75fb      	strb	r3, [r7, #23]
      break;
 800950a:	e002      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800950c:	bf00      	nop
 800950e:	e000      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009518:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800951a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009526:	4922      	ldr	r1, [pc, #136]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009528:	4313      	orrs	r3, r2
 800952a:	658b      	str	r3, [r1, #88]	; 0x58
 800952c:	e001      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953a:	2b00      	cmp	r3, #0
 800953c:	d04b      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009548:	d030      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800954a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800954e:	d82a      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009554:	d02e      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800955a:	d824      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800955c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009560:	d018      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009566:	d81e      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800956c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009570:	d007      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009572:	e018      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009574:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	4a0d      	ldr	r2, [pc, #52]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800957a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800957e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009580:	e019      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3304      	adds	r3, #4
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fecf 	bl	800b32c <RCCEx_PLL2_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009592:	e010      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3324      	adds	r3, #36	; 0x24
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f001 ff78 	bl	800b490 <RCCEx_PLL3_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095a4:	e007      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	75fb      	strb	r3, [r7, #23]
      break;
 80095aa:	e004      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80095ac:	bf00      	nop
 80095ae:	e002      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80095b0:	58024400 	.word	0x58024400
      break;
 80095b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095bc:	4b99      	ldr	r3, [pc, #612]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095ca:	4996      	ldr	r1, [pc, #600]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	658b      	str	r3, [r1, #88]	; 0x58
 80095d0:	e001      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d032      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e6:	2b30      	cmp	r3, #48	; 0x30
 80095e8:	d01c      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80095ea:	2b30      	cmp	r3, #48	; 0x30
 80095ec:	d817      	bhi.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d00c      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x330>
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d813      	bhi.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d016      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d10f      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095fe:	4b89      	ldr	r3, [pc, #548]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009602:	4a88      	ldr	r2, [pc, #544]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800960a:	e00e      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3304      	adds	r3, #4
 8009610:	2102      	movs	r1, #2
 8009612:	4618      	mov	r0, r3
 8009614:	f001 fe8a 	bl	800b32c <RCCEx_PLL2_Config>
 8009618:	4603      	mov	r3, r0
 800961a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800961c:	e005      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	75fb      	strb	r3, [r7, #23]
      break;
 8009622:	e002      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009624:	bf00      	nop
 8009626:	e000      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d109      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009630:	4b7c      	ldr	r3, [pc, #496]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800963c:	4979      	ldr	r1, [pc, #484]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800963e:	4313      	orrs	r3, r2
 8009640:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009642:	e001      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d047      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800965c:	d030      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800965e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009662:	d82a      	bhi.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009668:	d02c      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800966a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800966e:	d824      	bhi.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009674:	d018      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967a:	d81e      	bhi.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009684:	d007      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009686:	e018      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009688:	4b66      	ldr	r3, [pc, #408]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	4a65      	ldr	r2, [pc, #404]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800968e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009694:	e017      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3304      	adds	r3, #4
 800969a:	2100      	movs	r1, #0
 800969c:	4618      	mov	r0, r3
 800969e:	f001 fe45 	bl	800b32c <RCCEx_PLL2_Config>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a6:	e00e      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3324      	adds	r3, #36	; 0x24
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 feee 	bl	800b490 <RCCEx_PLL3_Config>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096b8:	e005      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	75fb      	strb	r3, [r7, #23]
      break;
 80096be:	e002      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096c0:	bf00      	nop
 80096c2:	e000      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d109      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096cc:	4b55      	ldr	r3, [pc, #340]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d8:	4952      	ldr	r1, [pc, #328]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	650b      	str	r3, [r1, #80]	; 0x50
 80096de:	e001      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d049      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096f8:	d02e      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096fe:	d828      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009704:	d02a      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800970a:	d822      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800970c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009710:	d026      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009716:	d81c      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800971c:	d010      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800971e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009722:	d816      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01d      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972c:	d111      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3304      	adds	r3, #4
 8009732:	2101      	movs	r1, #1
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fdf9 	bl	800b32c <RCCEx_PLL2_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800973e:	e012      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3324      	adds	r3, #36	; 0x24
 8009744:	2101      	movs	r1, #1
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fea2 	bl	800b490 <RCCEx_PLL3_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009750:	e009      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	75fb      	strb	r3, [r7, #23]
      break;
 8009756:	e006      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009758:	bf00      	nop
 800975a:	e004      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800976c:	4b2d      	ldr	r3, [pc, #180]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800976e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009770:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009778:	492a      	ldr	r1, [pc, #168]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800977a:	4313      	orrs	r3, r2
 800977c:	650b      	str	r3, [r1, #80]	; 0x50
 800977e:	e001      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d04d      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800979a:	d02e      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800979c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097a0:	d828      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a6:	d02a      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x522>
 80097a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ac:	d822      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097b2:	d026      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80097b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097b8:	d81c      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097be:	d010      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80097c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c4:	d816      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d01d      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ce:	d111      	bne.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	2101      	movs	r1, #1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 fda8 	bl	800b32c <RCCEx_PLL2_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097e0:	e012      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3324      	adds	r3, #36	; 0x24
 80097e6:	2101      	movs	r1, #1
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 fe51 	bl	800b490 <RCCEx_PLL3_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097f2:	e009      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	75fb      	strb	r3, [r7, #23]
      break;
 80097f8:	e006      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097fa:	bf00      	nop
 80097fc:	e004      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097fe:	bf00      	nop
 8009800:	e002      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009802:	bf00      	nop
 8009804:	e000      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10c      	bne.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009812:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800981c:	4901      	ldr	r1, [pc, #4]	; (8009824 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800981e:	4313      	orrs	r3, r2
 8009820:	658b      	str	r3, [r1, #88]	; 0x58
 8009822:	e003      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d02f      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800983c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009840:	d00e      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009846:	d814      	bhi.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d015      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800984c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009850:	d10f      	bne.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009852:	4baf      	ldr	r3, [pc, #700]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	4aae      	ldr	r2, [pc, #696]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800985e:	e00c      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3304      	adds	r3, #4
 8009864:	2101      	movs	r1, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fd60 	bl	800b32c <RCCEx_PLL2_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009870:	e003      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	75fb      	strb	r3, [r7, #23]
      break;
 8009876:	e000      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800987a:	7dfb      	ldrb	r3, [r7, #23]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009880:	4ba3      	ldr	r3, [pc, #652]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988c:	49a0      	ldr	r1, [pc, #640]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800988e:	4313      	orrs	r3, r2
 8009890:	650b      	str	r3, [r1, #80]	; 0x50
 8009892:	e001      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d032      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d81b      	bhi.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80098ac:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098eb 	.word	0x080098eb
 80098b8:	080098c5 	.word	0x080098c5
 80098bc:	080098d3 	.word	0x080098d3
 80098c0:	080098eb 	.word	0x080098eb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c4:	4b92      	ldr	r3, [pc, #584]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	4a91      	ldr	r2, [pc, #580]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098d0:	e00c      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	2102      	movs	r1, #2
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fd27 	bl	800b32c <RCCEx_PLL2_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098e2:	e003      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]
      break;
 80098e8:	e000      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80098ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098f2:	4b87      	ldr	r3, [pc, #540]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	f023 0203 	bic.w	r2, r3, #3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	4984      	ldr	r1, [pc, #528]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009900:	4313      	orrs	r3, r2
 8009902:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009904:	e001      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 8086 	beq.w	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009918:	4b7e      	ldr	r3, [pc, #504]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a7d      	ldr	r2, [pc, #500]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800991e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009924:	f7f8 ffcc 	bl	80028c0 <HAL_GetTick>
 8009928:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800992a:	e009      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800992c:	f7f8 ffc8 	bl	80028c0 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b64      	cmp	r3, #100	; 0x64
 8009938:	d902      	bls.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	75fb      	strb	r3, [r7, #23]
        break;
 800993e:	e005      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009940:	4b74      	ldr	r3, [pc, #464]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0ef      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d166      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009952:	4b6f      	ldr	r3, [pc, #444]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800995c:	4053      	eors	r3, r2
 800995e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009962:	2b00      	cmp	r3, #0
 8009964:	d013      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009966:	4b6a      	ldr	r3, [pc, #424]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800996e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009970:	4b67      	ldr	r3, [pc, #412]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009974:	4a66      	ldr	r2, [pc, #408]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800997a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800997c:	4b64      	ldr	r3, [pc, #400]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a63      	ldr	r2, [pc, #396]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009986:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009988:	4a61      	ldr	r2, [pc, #388]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009998:	d115      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999a:	f7f8 ff91 	bl	80028c0 <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099a0:	e00b      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099a2:	f7f8 ff8d 	bl	80028c0 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d902      	bls.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	75fb      	strb	r3, [r7, #23]
            break;
 80099b8:	e005      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099ba:	4b55      	ldr	r3, [pc, #340]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0ed      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d126      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099da:	d10d      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80099dc:	4b4c      	ldr	r3, [pc, #304]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099ea:	0919      	lsrs	r1, r3, #4
 80099ec:	4b4a      	ldr	r3, [pc, #296]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80099ee:	400b      	ands	r3, r1
 80099f0:	4947      	ldr	r1, [pc, #284]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	610b      	str	r3, [r1, #16]
 80099f6:	e005      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80099f8:	4b45      	ldr	r3, [pc, #276]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	4a44      	ldr	r2, [pc, #272]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a02:	6113      	str	r3, [r2, #16]
 8009a04:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a12:	493f      	ldr	r1, [pc, #252]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a14:	4313      	orrs	r3, r2
 8009a16:	670b      	str	r3, [r1, #112]	; 0x70
 8009a18:	e004      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	75bb      	strb	r3, [r7, #22]
 8009a1e:	e001      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8085 	beq.w	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a36:	2b28      	cmp	r3, #40	; 0x28
 8009a38:	d866      	bhi.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a3a:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009b1d 	.word	0x08009b1d
 8009a44:	08009b09 	.word	0x08009b09
 8009a48:	08009b09 	.word	0x08009b09
 8009a4c:	08009b09 	.word	0x08009b09
 8009a50:	08009b09 	.word	0x08009b09
 8009a54:	08009b09 	.word	0x08009b09
 8009a58:	08009b09 	.word	0x08009b09
 8009a5c:	08009b09 	.word	0x08009b09
 8009a60:	08009ae5 	.word	0x08009ae5
 8009a64:	08009b09 	.word	0x08009b09
 8009a68:	08009b09 	.word	0x08009b09
 8009a6c:	08009b09 	.word	0x08009b09
 8009a70:	08009b09 	.word	0x08009b09
 8009a74:	08009b09 	.word	0x08009b09
 8009a78:	08009b09 	.word	0x08009b09
 8009a7c:	08009b09 	.word	0x08009b09
 8009a80:	08009af7 	.word	0x08009af7
 8009a84:	08009b09 	.word	0x08009b09
 8009a88:	08009b09 	.word	0x08009b09
 8009a8c:	08009b09 	.word	0x08009b09
 8009a90:	08009b09 	.word	0x08009b09
 8009a94:	08009b09 	.word	0x08009b09
 8009a98:	08009b09 	.word	0x08009b09
 8009a9c:	08009b09 	.word	0x08009b09
 8009aa0:	08009b1d 	.word	0x08009b1d
 8009aa4:	08009b09 	.word	0x08009b09
 8009aa8:	08009b09 	.word	0x08009b09
 8009aac:	08009b09 	.word	0x08009b09
 8009ab0:	08009b09 	.word	0x08009b09
 8009ab4:	08009b09 	.word	0x08009b09
 8009ab8:	08009b09 	.word	0x08009b09
 8009abc:	08009b09 	.word	0x08009b09
 8009ac0:	08009b1d 	.word	0x08009b1d
 8009ac4:	08009b09 	.word	0x08009b09
 8009ac8:	08009b09 	.word	0x08009b09
 8009acc:	08009b09 	.word	0x08009b09
 8009ad0:	08009b09 	.word	0x08009b09
 8009ad4:	08009b09 	.word	0x08009b09
 8009ad8:	08009b09 	.word	0x08009b09
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	08009b1d 	.word	0x08009b1d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	2101      	movs	r1, #1
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 fc1e 	bl	800b32c <RCCEx_PLL2_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009af4:	e013      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3324      	adds	r3, #36	; 0x24
 8009afa:	2101      	movs	r1, #1
 8009afc:	4618      	mov	r0, r3
 8009afe:	f001 fcc7 	bl	800b490 <RCCEx_PLL3_Config>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b06:	e00a      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0c:	e007      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b0e:	bf00      	nop
 8009b10:	58024400 	.word	0x58024400
 8009b14:	58024800 	.word	0x58024800
 8009b18:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d109      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b24:	4b96      	ldr	r3, [pc, #600]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b28:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b30:	4993      	ldr	r1, [pc, #588]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	654b      	str	r3, [r1, #84]	; 0x54
 8009b36:	e001      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d038      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b4c:	2b05      	cmp	r3, #5
 8009b4e:	d821      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b50:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009b9b 	.word	0x08009b9b
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b83 	.word	0x08009b83
 8009b64:	08009b9b 	.word	0x08009b9b
 8009b68:	08009b9b 	.word	0x08009b9b
 8009b6c:	08009b9b 	.word	0x08009b9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	2101      	movs	r1, #1
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fbd8 	bl	800b32c <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b80:	e00c      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	2101      	movs	r1, #1
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fc81 	bl	800b490 <RCCEx_PLL3_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b92:	e003      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	e000      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d109      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009ba2:	4b77      	ldr	r3, [pc, #476]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba6:	f023 0207 	bic.w	r2, r3, #7
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bae:	4974      	ldr	r1, [pc, #464]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	654b      	str	r3, [r1, #84]	; 0x54
 8009bb4:	e001      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d03a      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	d821      	bhi.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009bd0:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009c1b 	.word	0x08009c1b
 8009bdc:	08009bf1 	.word	0x08009bf1
 8009be0:	08009c03 	.word	0x08009c03
 8009be4:	08009c1b 	.word	0x08009c1b
 8009be8:	08009c1b 	.word	0x08009c1b
 8009bec:	08009c1b 	.word	0x08009c1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f001 fb98 	bl	800b32c <RCCEx_PLL2_Config>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c00:	e00c      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3324      	adds	r3, #36	; 0x24
 8009c06:	2101      	movs	r1, #1
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f001 fc41 	bl	800b490 <RCCEx_PLL3_Config>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c12:	e003      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	75fb      	strb	r3, [r7, #23]
      break;
 8009c18:	e000      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c22:	4b57      	ldr	r3, [pc, #348]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c26:	f023 0207 	bic.w	r2, r3, #7
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c30:	4953      	ldr	r1, [pc, #332]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	658b      	str	r3, [r1, #88]	; 0x58
 8009c36:	e001      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0320 	and.w	r3, r3, #32
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d04b      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c52:	d02e      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c58:	d828      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5e:	d02a      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c64:	d822      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c6a:	d026      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c70:	d81c      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c76:	d010      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7c:	d816      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01d      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c86:	d111      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 fb4c 	bl	800b32c <RCCEx_PLL2_Config>
 8009c94:	4603      	mov	r3, r0
 8009c96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c98:	e012      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3324      	adds	r3, #36	; 0x24
 8009c9e:	2102      	movs	r1, #2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 fbf5 	bl	800b490 <RCCEx_PLL3_Config>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009caa:	e009      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb0:	e006      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e004      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e002      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cba:	bf00      	nop
 8009cbc:	e000      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cc6:	4b2e      	ldr	r3, [pc, #184]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cd4:	492a      	ldr	r1, [pc, #168]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	654b      	str	r3, [r1, #84]	; 0x54
 8009cda:	e001      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d04d      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cf6:	d02e      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009cf8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cfc:	d828      	bhi.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d02:	d02a      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d08:	d822      	bhi.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d0e:	d026      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d14:	d81c      	bhi.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d1a:	d010      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d20:	d816      	bhi.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d01d      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d2a:	d111      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fafa 	bl	800b32c <RCCEx_PLL2_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d3c:	e012      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3324      	adds	r3, #36	; 0x24
 8009d42:	2102      	movs	r1, #2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 fba3 	bl	800b490 <RCCEx_PLL3_Config>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d4e:	e009      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	75fb      	strb	r3, [r7, #23]
      break;
 8009d54:	e006      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d56:	bf00      	nop
 8009d58:	e004      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d5a:	bf00      	nop
 8009d5c:	e002      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d5e:	bf00      	nop
 8009d60:	e000      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10c      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d6a:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d78:	4901      	ldr	r1, [pc, #4]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	658b      	str	r3, [r1, #88]	; 0x58
 8009d7e:	e003      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d04b      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d9e:	d02e      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009da0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009da4:	d828      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009daa:	d02a      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db0:	d822      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009db2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009db6:	d026      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009db8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dbc:	d81c      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc2:	d010      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc8:	d816      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d01d      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd2:	d111      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 faa6 	bl	800b32c <RCCEx_PLL2_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009de4:	e012      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3324      	adds	r3, #36	; 0x24
 8009dea:	2102      	movs	r1, #2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 fb4f 	bl	800b490 <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009df6:	e009      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009dfc:	e006      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e004      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e12:	4b9d      	ldr	r3, [pc, #628]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e20:	4999      	ldr	r1, [pc, #612]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	658b      	str	r3, [r1, #88]	; 0x58
 8009e26:	e001      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
 8009e2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0308 	and.w	r3, r3, #8
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01a      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e42:	d10a      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3324      	adds	r3, #36	; 0x24
 8009e48:	2102      	movs	r1, #2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 fb20 	bl	800b490 <RCCEx_PLL3_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e5a:	4b8b      	ldr	r3, [pc, #556]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e68:	4987      	ldr	r1, [pc, #540]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0310 	and.w	r3, r3, #16
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d01a      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e84:	d10a      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3324      	adds	r3, #36	; 0x24
 8009e8a:	2102      	movs	r1, #2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f001 faff 	bl	800b490 <RCCEx_PLL3_Config>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e9c:	4b7a      	ldr	r3, [pc, #488]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eaa:	4977      	ldr	r1, [pc, #476]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d034      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ec6:	d01d      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ecc:	d817      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed6:	d009      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009ed8:	e011      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 fa23 	bl	800b32c <RCCEx_PLL2_Config>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009eea:	e00c      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3324      	adds	r3, #36	; 0x24
 8009ef0:	2102      	movs	r1, #2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 facc 	bl	800b490 <RCCEx_PLL3_Config>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009efc:	e003      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	75fb      	strb	r3, [r7, #23]
      break;
 8009f02:	e000      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f0c:	4b5e      	ldr	r3, [pc, #376]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f1a:	495b      	ldr	r1, [pc, #364]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	658b      	str	r3, [r1, #88]	; 0x58
 8009f20:	e001      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d033      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f3c:	d01c      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f42:	d816      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f48:	d003      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f4e:	d007      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f50:	e00f      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f52:	4b4d      	ldr	r3, [pc, #308]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	4a4c      	ldr	r2, [pc, #304]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f5e:	e00c      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3324      	adds	r3, #36	; 0x24
 8009f64:	2101      	movs	r1, #1
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 fa92 	bl	800b490 <RCCEx_PLL3_Config>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f70:	e003      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]
      break;
 8009f76:	e000      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f80:	4b41      	ldr	r3, [pc, #260]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f8e:	493e      	ldr	r1, [pc, #248]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	654b      	str	r3, [r1, #84]	; 0x54
 8009f94:	e001      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d029      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb2:	d007      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009fb4:	e00f      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb6:	4b34      	ldr	r3, [pc, #208]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fba:	4a33      	ldr	r2, [pc, #204]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fc2:	e00b      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	2102      	movs	r1, #2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 f9ae 	bl	800b32c <RCCEx_PLL2_Config>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fd4:	e002      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d109      	bne.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fe2:	4b29      	ldr	r3, [pc, #164]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fee:	4926      	ldr	r1, [pc, #152]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ff4:	e001      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3324      	adds	r3, #36	; 0x24
 800a00a:	2102      	movs	r1, #2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f001 fa3f 	bl	800b490 <RCCEx_PLL3_Config>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d033      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a02c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a030:	d017      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a036:	d811      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a03c:	d013      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a03e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a042:	d80b      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a044:	2b00      	cmp	r3, #0
 800a046:	d010      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04c:	d106      	bne.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04e:	4b0e      	ldr	r3, [pc, #56]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	4a0d      	ldr	r2, [pc, #52]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a05a:	e007      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
      break;
 800a060:	e004      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a062:	bf00      	nop
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a06a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10c      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07e:	4902      	ldr	r1, [pc, #8]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a080:	4313      	orrs	r3, r2
 800a082:	654b      	str	r3, [r1, #84]	; 0x54
 800a084:	e004      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a086:	bf00      	nop
 800a088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d008      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a09c:	4b31      	ldr	r3, [pc, #196]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a8:	492e      	ldr	r1, [pc, #184]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0ba:	4b2a      	ldr	r3, [pc, #168]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0c8:	4926      	ldr	r1, [pc, #152]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d008      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0da:	4b22      	ldr	r3, [pc, #136]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e6:	491f      	ldr	r1, [pc, #124]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00d      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0f8:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	4a19      	ldr	r2, [pc, #100]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a102:	6113      	str	r3, [r2, #16]
 800a104:	4b17      	ldr	r3, [pc, #92]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a106:	691a      	ldr	r2, [r3, #16]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a10e:	4915      	ldr	r1, [pc, #84]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a110:	4313      	orrs	r3, r2
 800a112:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	da08      	bge.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a120:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a128:	490e      	ldr	r1, [pc, #56]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d009      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a13a:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a148:	4906      	ldr	r1, [pc, #24]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a14e:	7dbb      	ldrb	r3, [r7, #22]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	58024400 	.word	0x58024400

0800a168 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b090      	sub	sp, #64	; 0x40
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a176:	f040 8095 	bne.w	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a17a:	4b97      	ldr	r3, [pc, #604]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17e:	f003 0307 	and.w	r3, r3, #7
 800a182:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	2b04      	cmp	r3, #4
 800a188:	f200 8088 	bhi.w	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a18c:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a192:	bf00      	nop
 800a194:	0800a1a9 	.word	0x0800a1a9
 800a198:	0800a1d1 	.word	0x0800a1d1
 800a19c:	0800a1f9 	.word	0x0800a1f9
 800a1a0:	0800a295 	.word	0x0800a295
 800a1a4:	0800a221 	.word	0x0800a221
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1a8:	4b8b      	ldr	r3, [pc, #556]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b4:	d108      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 ff64 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1c4:	f000 bc94 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1cc:	f000 bc90 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1d0:	4b81      	ldr	r3, [pc, #516]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1dc:	d108      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1de:	f107 0318 	add.w	r3, r7, #24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fca8 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ec:	f000 bc80 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f4:	f000 bc7c 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1f8:	4b77      	ldr	r3, [pc, #476]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a204:	d108      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a206:	f107 030c 	add.w	r3, r7, #12
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fde8 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a214:	f000 bc6c 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a21c:	f000 bc68 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a220:	4b6d      	ldr	r3, [pc, #436]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a228:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a22a:	4b6b      	ldr	r3, [pc, #428]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b04      	cmp	r3, #4
 800a234:	d10c      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d109      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a23c:	4b66      	ldr	r3, [pc, #408]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	08db      	lsrs	r3, r3, #3
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	4a65      	ldr	r2, [pc, #404]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a248:	fa22 f303 	lsr.w	r3, r2, r3
 800a24c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24e:	e01f      	b.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a250:	4b61      	ldr	r3, [pc, #388]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25c:	d106      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a264:	d102      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a266:	4b5e      	ldr	r3, [pc, #376]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26a:	e011      	b.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a26c:	4b5a      	ldr	r3, [pc, #360]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a278:	d106      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a280:	d102      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a282:	4b58      	ldr	r3, [pc, #352]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a286:	e003      	b.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a28c:	f000 bc30 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a290:	f000 bc2e 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a294:	4b54      	ldr	r3, [pc, #336]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a298:	f000 bc2a 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a0:	f000 bc26 	b.w	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2aa:	f040 809f 	bne.w	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a2ae:	4b4a      	ldr	r3, [pc, #296]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a2b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2be:	d04d      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2c6:	f200 8084 	bhi.w	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ce:	d07d      	beq.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a2d4:	d87d      	bhi.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	2b80      	cmp	r3, #128	; 0x80
 800a2da:	d02d      	beq.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	2b80      	cmp	r3, #128	; 0x80
 800a2e0:	d877      	bhi.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	2b40      	cmp	r3, #64	; 0x40
 800a2ec:	d012      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a2ee:	e070      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2f0:	4b39      	ldr	r3, [pc, #228]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2fc:	d107      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fec0 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a30c:	e3f0      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a312:	e3ed      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a314:	4b30      	ldr	r3, [pc, #192]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a31c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a320:	d107      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a322:	f107 0318 	add.w	r3, r7, #24
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fc06 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a330:	e3de      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a336:	e3db      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a338:	4b27      	ldr	r3, [pc, #156]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a344:	d107      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a346:	f107 030c 	add.w	r3, r7, #12
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fd48 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a354:	e3cc      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a35a:	e3c9      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a35c:	4b1e      	ldr	r3, [pc, #120]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a35e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a364:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a366:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0304 	and.w	r3, r3, #4
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d10c      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a374:	2b00      	cmp	r3, #0
 800a376:	d109      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a378:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	08db      	lsrs	r3, r3, #3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	4a16      	ldr	r2, [pc, #88]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a38a:	e01e      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a38c:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a398:	d106      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3a0:	d102      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a6:	e010      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3b4:	d106      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3bc:	d102      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3be:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c2:	e002      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3c8:	e392      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3ca:	e391      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3cc:	4b06      	ldr	r3, [pc, #24]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d0:	e38e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d6:	e38b      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3d8:	58024400 	.word	0x58024400
 800a3dc:	03d09000 	.word	0x03d09000
 800a3e0:	003d0900 	.word	0x003d0900
 800a3e4:	017d7840 	.word	0x017d7840
 800a3e8:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f2:	f040 809c 	bne.w	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a3f6:	4b9d      	ldr	r3, [pc, #628]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a3fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a406:	d054      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a40e:	f200 808b 	bhi.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a418:	f000 8083 	beq.w	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a422:	f200 8081 	bhi.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a42c:	d02f      	beq.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a434:	d878      	bhi.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d004      	beq.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a442:	d012      	beq.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a444:	e070      	b.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a446:	4b89      	ldr	r3, [pc, #548]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a452:	d107      	bne.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fe15 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a462:	e345      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a468:	e342      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a46a:	4b80      	ldr	r3, [pc, #512]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a476:	d107      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a478:	f107 0318 	add.w	r3, r7, #24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fb5b 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a486:	e333      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48c:	e330      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a48e:	4b77      	ldr	r3, [pc, #476]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a49a:	d107      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a49c:	f107 030c 	add.w	r3, r7, #12
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fc9d 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4aa:	e321      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b0:	e31e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4b2:	4b6e      	ldr	r3, [pc, #440]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4ba:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4bc:	4b6b      	ldr	r3, [pc, #428]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	d10c      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d109      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4ce:	4b67      	ldr	r3, [pc, #412]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	08db      	lsrs	r3, r3, #3
 800a4d4:	f003 0303 	and.w	r3, r3, #3
 800a4d8:	4a65      	ldr	r2, [pc, #404]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a4da:	fa22 f303 	lsr.w	r3, r2, r3
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e0:	e01e      	b.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4e2:	4b62      	ldr	r3, [pc, #392]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4f8:	4b5e      	ldr	r3, [pc, #376]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fc:	e010      	b.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4fe:	4b5b      	ldr	r3, [pc, #364]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a50a:	d106      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a512:	d102      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a514:	4b58      	ldr	r3, [pc, #352]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a518:	e002      	b.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a51e:	e2e7      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a520:	e2e6      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a522:	4b56      	ldr	r3, [pc, #344]	; (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a526:	e2e3      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a52c:	e2e0      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a534:	f040 80a7 	bne.w	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a538:	4b4c      	ldr	r3, [pc, #304]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a540:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a548:	d055      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a550:	f200 8096 	bhi.w	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a55a:	f000 8084 	beq.w	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a564:	f200 808c 	bhi.w	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a56e:	d030      	beq.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a576:	f200 8083 	bhi.w	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d004      	beq.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a586:	d012      	beq.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a588:	e07a      	b.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a58a:	4b38      	ldr	r3, [pc, #224]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a596:	d107      	bne.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fd73 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5a6:	e2a3      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ac:	e2a0      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5ae:	4b2f      	ldr	r3, [pc, #188]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5ba:	d107      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5bc:	f107 0318 	add.w	r3, r7, #24
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fab9 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5ca:	e291      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d0:	e28e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5d2:	4b26      	ldr	r3, [pc, #152]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5de:	d107      	bne.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5e0:	f107 030c 	add.w	r3, r7, #12
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 fbfb 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5ee:	e27f      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f4:	e27c      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5f6:	4b1d      	ldr	r3, [pc, #116]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a600:	4b1a      	ldr	r3, [pc, #104]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d10c      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d109      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	08db      	lsrs	r3, r3, #3
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	4a14      	ldr	r2, [pc, #80]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a61e:	fa22 f303 	lsr.w	r3, r2, r3
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a624:	e01e      	b.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a626:	4b11      	ldr	r3, [pc, #68]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a632:	d106      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a63a:	d102      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a640:	e010      	b.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a642:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a64a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a64e:	d106      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a656:	d102      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a658:	4b07      	ldr	r3, [pc, #28]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a65c:	e002      	b.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a662:	e245      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a664:	e244      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a66a:	e241      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a66c:	58024400 	.word	0x58024400
 800a670:	03d09000 	.word	0x03d09000
 800a674:	003d0900 	.word	0x003d0900
 800a678:	017d7840 	.word	0x017d7840
 800a67c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a684:	e234      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68c:	f040 809c 	bne.w	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a690:	4b9b      	ldr	r3, [pc, #620]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a694:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a698:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6a0:	d054      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6a8:	f200 808b 	bhi.w	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6b2:	f000 8083 	beq.w	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6bc:	f200 8081 	bhi.w	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c6:	d02f      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ce:	d878      	bhi.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6dc:	d012      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a6de:	e070      	b.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6e0:	4b87      	ldr	r3, [pc, #540]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6ec:	d107      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fcc8 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6fc:	e1f8      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a702:	e1f5      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a704:	4b7e      	ldr	r3, [pc, #504]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a70c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a710:	d107      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a712:	f107 0318 	add.w	r3, r7, #24
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fa0e 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a720:	e1e6      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a726:	e1e3      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a728:	4b75      	ldr	r3, [pc, #468]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a734:	d107      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a736:	f107 030c 	add.w	r3, r7, #12
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fb50 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a744:	e1d4      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74a:	e1d1      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a74c:	4b6c      	ldr	r3, [pc, #432]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a754:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a756:	4b6a      	ldr	r3, [pc, #424]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d10c      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a764:	2b00      	cmp	r3, #0
 800a766:	d109      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a768:	4b65      	ldr	r3, [pc, #404]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	08db      	lsrs	r3, r3, #3
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	4a64      	ldr	r2, [pc, #400]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a77a:	e01e      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a77c:	4b60      	ldr	r3, [pc, #384]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a788:	d106      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a790:	d102      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a792:	4b5d      	ldr	r3, [pc, #372]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a796:	e010      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a798:	4b59      	ldr	r3, [pc, #356]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a4:	d106      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ac:	d102      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7ae:	4b57      	ldr	r3, [pc, #348]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b2:	e002      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7b8:	e19a      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7ba:	e199      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7bc:	4b54      	ldr	r3, [pc, #336]	; (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7c0:	e196      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7c6:	e193      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7ce:	d173      	bne.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7d0:	4b4b      	ldr	r3, [pc, #300]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7e0:	d02f      	beq.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7e8:	d863      	bhi.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f6:	d012      	beq.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a7f8:	e05b      	b.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7fa:	4b41      	ldr	r3, [pc, #260]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a806:	d107      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a808:	f107 0318 	add.w	r3, r7, #24
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 f993 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a816:	e16b      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a81c:	e168      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a81e:	4b38      	ldr	r3, [pc, #224]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a82a:	d107      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a82c:	f107 030c 	add.w	r3, r7, #12
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fad5 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a83a:	e159      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a840:	e156      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a842:	4b2f      	ldr	r3, [pc, #188]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a84a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a84c:	4b2c      	ldr	r3, [pc, #176]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b04      	cmp	r3, #4
 800a856:	d10c      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d109      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a85e:	4b28      	ldr	r3, [pc, #160]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	08db      	lsrs	r3, r3, #3
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	4a26      	ldr	r2, [pc, #152]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a86a:	fa22 f303 	lsr.w	r3, r2, r3
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a870:	e01e      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a872:	4b23      	ldr	r3, [pc, #140]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87e:	d106      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a886:	d102      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a888:	4b1f      	ldr	r3, [pc, #124]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a88c:	e010      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a88e:	4b1c      	ldr	r3, [pc, #112]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a89a:	d106      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a2:	d102      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8a4:	4b19      	ldr	r3, [pc, #100]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a8:	e002      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8ae:	e11f      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8b0:	e11e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b6:	e11b      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8be:	d13e      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d6:	d01d      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a8d8:	e02e      	b.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8e6:	d107      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fbcb 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8f6:	e0fb      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8fc:	e0f8      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8fe:	bf00      	nop
 800a900:	58024400 	.word	0x58024400
 800a904:	03d09000 	.word	0x03d09000
 800a908:	003d0900 	.word	0x003d0900
 800a90c:	017d7840 	.word	0x017d7840
 800a910:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a914:	4b79      	ldr	r3, [pc, #484]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a91c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a920:	d107      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a922:	f107 0318 	add.w	r3, r7, #24
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f906 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a930:	e0de      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a936:	e0db      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a93c:	e0d8      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a944:	f040 8085 	bne.w	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a948:	4b6c      	ldr	r3, [pc, #432]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a94a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a94c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a950:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a958:	d06b      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a960:	d874      	bhi.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a968:	d056      	beq.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a970:	d86c      	bhi.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a978:	d03b      	beq.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a980:	d864      	bhi.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a988:	d021      	beq.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a990:	d85c      	bhi.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	2b00      	cmp	r3, #0
 800a996:	d004      	beq.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a99e:	d004      	beq.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a9a0:	e054      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a9a2:	f000 f8b3 	bl	800ab0c <HAL_RCCEx_GetD3PCLK1Freq>
 800a9a6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a9a8:	e0a2      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9aa:	4b54      	ldr	r3, [pc, #336]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b6:	d107      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b8:	f107 0318 	add.w	r3, r7, #24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f8bb 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9c6:	e093      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9cc:	e090      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ce:	4b4b      	ldr	r3, [pc, #300]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9da:	d107      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 f9fd 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9ea:	e081      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9f0:	e07e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9f2:	4b42      	ldr	r3, [pc, #264]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0304 	and.w	r3, r3, #4
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d109      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9fe:	4b3f      	ldr	r3, [pc, #252]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	08db      	lsrs	r3, r3, #3
 800aa04:	f003 0303 	and.w	r3, r3, #3
 800aa08:	4a3d      	ldr	r2, [pc, #244]	; (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa0a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa10:	e06e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa16:	e06b      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa18:	4b38      	ldr	r3, [pc, #224]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa24:	d102      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aa26:	4b37      	ldr	r3, [pc, #220]	; (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa2a:	e061      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa30:	e05e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa32:	4b32      	ldr	r3, [pc, #200]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa3e:	d102      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa40:	4b31      	ldr	r3, [pc, #196]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa44:	e054      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa4a:	e051      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa50:	e04e      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa58:	d148      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa5a:	4b28      	ldr	r3, [pc, #160]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa6a:	d02a      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa72:	d838      	bhi.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa80:	d00d      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aa82:	e030      	b.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa84:	4b1d      	ldr	r3, [pc, #116]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa90:	d102      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aa92:	4b1d      	ldr	r3, [pc, #116]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa96:	e02b      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa9c:	e028      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa9e:	4b17      	ldr	r3, [pc, #92]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaaa:	d107      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fae9 	bl	800b088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaba:	e019      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac0:	e016      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac2:	4b0e      	ldr	r3, [pc, #56]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aace:	d107      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aad0:	f107 0318 	add.w	r3, r7, #24
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 f82f 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aade:	e007      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aae4:	e004      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaea:	e001      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3740      	adds	r7, #64	; 0x40
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	58024400 	.word	0x58024400
 800ab00:	03d09000 	.word	0x03d09000
 800ab04:	003d0900 	.word	0x003d0900
 800ab08:	017d7840 	.word	0x017d7840

0800ab0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab10:	f7fe fb88 	bl	8009224 <HAL_RCC_GetHCLKFreq>
 800ab14:	4602      	mov	r2, r0
 800ab16:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	091b      	lsrs	r3, r3, #4
 800ab1c:	f003 0307 	and.w	r3, r3, #7
 800ab20:	4904      	ldr	r1, [pc, #16]	; (800ab34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab22:	5ccb      	ldrb	r3, [r1, r3]
 800ab24:	f003 031f 	and.w	r3, r3, #31
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	58024400 	.word	0x58024400
 800ab34:	0800fe58 	.word	0x0800fe58

0800ab38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b089      	sub	sp, #36	; 0x24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab40:	4ba1      	ldr	r3, [pc, #644]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab4a:	4b9f      	ldr	r3, [pc, #636]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4e:	0b1b      	lsrs	r3, r3, #12
 800ab50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab56:	4b9c      	ldr	r3, [pc, #624]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	091b      	lsrs	r3, r3, #4
 800ab5c:	f003 0301 	and.w	r3, r3, #1
 800ab60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab62:	4b99      	ldr	r3, [pc, #612]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab66:	08db      	lsrs	r3, r3, #3
 800ab68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	fb02 f303 	mul.w	r3, r2, r3
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 8111 	beq.w	800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	f000 8083 	beq.w	800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	f200 80a1 	bhi.w	800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d056      	beq.n	800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aba2:	e099      	b.n	800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba4:	4b88      	ldr	r3, [pc, #544]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0320 	and.w	r3, r3, #32
 800abac:	2b00      	cmp	r3, #0
 800abae:	d02d      	beq.n	800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abb0:	4b85      	ldr	r3, [pc, #532]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	08db      	lsrs	r3, r3, #3
 800abb6:	f003 0303 	and.w	r3, r3, #3
 800abba:	4a84      	ldr	r2, [pc, #528]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abbc:	fa22 f303 	lsr.w	r3, r2, r3
 800abc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abda:	4b7b      	ldr	r3, [pc, #492]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abea:	ed97 6a03 	vldr	s12, [r7, #12]
 800abee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac0a:	e087      	b.n	800ad1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1e:	4b6a      	ldr	r3, [pc, #424]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac32:	eddf 5a67 	vldr	s11, [pc, #412]	; 800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac4e:	e065      	b.n	800ad1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac62:	4b59      	ldr	r3, [pc, #356]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac76:	eddf 5a56 	vldr	s11, [pc, #344]	; 800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac92:	e043      	b.n	800ad1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca6:	4b48      	ldr	r3, [pc, #288]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acd6:	e021      	b.n	800ad1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ace6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acea:	4b37      	ldr	r3, [pc, #220]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad1c:	4b2a      	ldr	r3, [pc, #168]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	0a5b      	lsrs	r3, r3, #9
 800ad22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad42:	ee17 2a90 	vmov	r2, s15
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad4a:	4b1f      	ldr	r3, [pc, #124]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	0c1b      	lsrs	r3, r3, #16
 800ad50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad54:	ee07 3a90 	vmov	s15, r3
 800ad58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad64:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad70:	ee17 2a90 	vmov	r2, s15
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad78:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	0e1b      	lsrs	r3, r3, #24
 800ad7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad92:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad9e:	ee17 2a90 	vmov	r2, s15
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ada6:	e008      	b.n	800adba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	609a      	str	r2, [r3, #8]
}
 800adba:	bf00      	nop
 800adbc:	3724      	adds	r7, #36	; 0x24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	58024400 	.word	0x58024400
 800adcc:	03d09000 	.word	0x03d09000
 800add0:	46000000 	.word	0x46000000
 800add4:	4c742400 	.word	0x4c742400
 800add8:	4a742400 	.word	0x4a742400
 800addc:	4bbebc20 	.word	0x4bbebc20

0800ade0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b089      	sub	sp, #36	; 0x24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ade8:	4ba1      	ldr	r3, [pc, #644]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adec:	f003 0303 	and.w	r3, r3, #3
 800adf0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adf2:	4b9f      	ldr	r3, [pc, #636]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf6:	0d1b      	lsrs	r3, r3, #20
 800adf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800adfe:	4b9c      	ldr	r3, [pc, #624]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	0a1b      	lsrs	r3, r3, #8
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae0a:	4b99      	ldr	r3, [pc, #612]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0e:	08db      	lsrs	r3, r3, #3
 800ae10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	fb02 f303 	mul.w	r3, r2, r3
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 8111 	beq.w	800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	f000 8083 	beq.w	800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	f200 80a1 	bhi.w	800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d056      	beq.n	800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae4a:	e099      	b.n	800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae4c:	4b88      	ldr	r3, [pc, #544]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d02d      	beq.n	800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae58:	4b85      	ldr	r3, [pc, #532]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	08db      	lsrs	r3, r3, #3
 800ae5e:	f003 0303 	and.w	r3, r3, #3
 800ae62:	4a84      	ldr	r2, [pc, #528]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
 800ae68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	ee07 3a90 	vmov	s15, r3
 800ae70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae82:	4b7b      	ldr	r3, [pc, #492]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae96:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aeb2:	e087      	b.n	800afc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aec6:	4b6a      	ldr	r3, [pc, #424]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aece:	ee07 3a90 	vmov	s15, r3
 800aed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeda:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aef6:	e065      	b.n	800afc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0a:	4b59      	ldr	r3, [pc, #356]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af3a:	e043      	b.n	800afc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4e:	4b48      	ldr	r3, [pc, #288]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af62:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af7e:	e021      	b.n	800afc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af92:	4b37      	ldr	r3, [pc, #220]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800afc4:	4b2a      	ldr	r3, [pc, #168]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc8:	0a5b      	lsrs	r3, r3, #9
 800afca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afde:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afea:	ee17 2a90 	vmov	r2, s15
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aff2:	4b1f      	ldr	r3, [pc, #124]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff6:	0c1b      	lsrs	r3, r3, #16
 800aff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affc:	ee07 3a90 	vmov	s15, r3
 800b000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b00c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b018:	ee17 2a90 	vmov	r2, s15
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b020:	4b13      	ldr	r3, [pc, #76]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	0e1b      	lsrs	r3, r3, #24
 800b026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b03a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b03e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b046:	ee17 2a90 	vmov	r2, s15
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b04e:	e008      	b.n	800b062 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	609a      	str	r2, [r3, #8]
}
 800b062:	bf00      	nop
 800b064:	3724      	adds	r7, #36	; 0x24
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	58024400 	.word	0x58024400
 800b074:	03d09000 	.word	0x03d09000
 800b078:	46000000 	.word	0x46000000
 800b07c:	4c742400 	.word	0x4c742400
 800b080:	4a742400 	.word	0x4a742400
 800b084:	4bbebc20 	.word	0x4bbebc20

0800b088 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b088:	b480      	push	{r7}
 800b08a:	b089      	sub	sp, #36	; 0x24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b090:	4ba0      	ldr	r3, [pc, #640]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b09a:	4b9e      	ldr	r3, [pc, #632]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	091b      	lsrs	r3, r3, #4
 800b0a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0a6:	4b9b      	ldr	r3, [pc, #620]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b0b0:	4b98      	ldr	r3, [pc, #608]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b4:	08db      	lsrs	r3, r3, #3
 800b0b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 8111 	beq.w	800b2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	f000 8083 	beq.w	800b1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	f200 80a1 	bhi.w	800b226 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d056      	beq.n	800b19e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0f0:	e099      	b.n	800b226 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0f2:	4b88      	ldr	r3, [pc, #544]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d02d      	beq.n	800b15a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0fe:	4b85      	ldr	r3, [pc, #532]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	08db      	lsrs	r3, r3, #3
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	4a83      	ldr	r2, [pc, #524]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b10a:	fa22 f303 	lsr.w	r3, r2, r3
 800b10e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b128:	4b7a      	ldr	r3, [pc, #488]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b130:	ee07 3a90 	vmov	s15, r3
 800b134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b138:	ed97 6a03 	vldr	s12, [r7, #12]
 800b13c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b14c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b154:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b158:	e087      	b.n	800b26a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	ee07 3a90 	vmov	s15, r3
 800b160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b164:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16c:	4b69      	ldr	r3, [pc, #420]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b174:	ee07 3a90 	vmov	s15, r3
 800b178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b180:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b198:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b19c:	e065      	b.n	800b26a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	ee07 3a90 	vmov	s15, r3
 800b1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b0:	4b58      	ldr	r3, [pc, #352]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b8:	ee07 3a90 	vmov	s15, r3
 800b1bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1e0:	e043      	b.n	800b26a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f4:	4b47      	ldr	r3, [pc, #284]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fc:	ee07 3a90 	vmov	s15, r3
 800b200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b204:	ed97 6a03 	vldr	s12, [r7, #12]
 800b208:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b20c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b21c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b224:	e021      	b.n	800b26a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b230:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b238:	4b36      	ldr	r3, [pc, #216]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b240:	ee07 3a90 	vmov	s15, r3
 800b244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b248:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b260:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b268:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b26a:	4b2a      	ldr	r3, [pc, #168]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26e:	0a5b      	lsrs	r3, r3, #9
 800b270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b274:	ee07 3a90 	vmov	s15, r3
 800b278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b284:	edd7 6a07 	vldr	s13, [r7, #28]
 800b288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b290:	ee17 2a90 	vmov	r2, s15
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b298:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29c:	0c1b      	lsrs	r3, r3, #16
 800b29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a2:	ee07 3a90 	vmov	s15, r3
 800b2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2be:	ee17 2a90 	vmov	r2, s15
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b2c6:	4b13      	ldr	r3, [pc, #76]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ca:	0e1b      	lsrs	r3, r3, #24
 800b2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d0:	ee07 3a90 	vmov	s15, r3
 800b2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ec:	ee17 2a90 	vmov	r2, s15
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2f4:	e008      	b.n	800b308 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	609a      	str	r2, [r3, #8]
}
 800b308:	bf00      	nop
 800b30a:	3724      	adds	r7, #36	; 0x24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	58024400 	.word	0x58024400
 800b318:	03d09000 	.word	0x03d09000
 800b31c:	46000000 	.word	0x46000000
 800b320:	4c742400 	.word	0x4c742400
 800b324:	4a742400 	.word	0x4a742400
 800b328:	4bbebc20 	.word	0x4bbebc20

0800b32c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b33a:	4b53      	ldr	r3, [pc, #332]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	2b03      	cmp	r3, #3
 800b344:	d101      	bne.n	800b34a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e099      	b.n	800b47e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b34a:	4b4f      	ldr	r3, [pc, #316]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a4e      	ldr	r2, [pc, #312]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b356:	f7f7 fab3 	bl	80028c0 <HAL_GetTick>
 800b35a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b35c:	e008      	b.n	800b370 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b35e:	f7f7 faaf 	bl	80028c0 <HAL_GetTick>
 800b362:	4602      	mov	r2, r0
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d901      	bls.n	800b370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e086      	b.n	800b47e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b370:	4b45      	ldr	r3, [pc, #276]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1f0      	bne.n	800b35e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b37c:	4b42      	ldr	r3, [pc, #264]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	031b      	lsls	r3, r3, #12
 800b38a:	493f      	ldr	r1, [pc, #252]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	628b      	str	r3, [r1, #40]	; 0x28
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	3b01      	subs	r3, #1
 800b396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	025b      	lsls	r3, r3, #9
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	431a      	orrs	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	041b      	lsls	r3, r3, #16
 800b3ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	061b      	lsls	r3, r3, #24
 800b3bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3c0:	4931      	ldr	r1, [pc, #196]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3c6:	4b30      	ldr	r3, [pc, #192]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	492d      	ldr	r1, [pc, #180]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3d8:	4b2b      	ldr	r3, [pc, #172]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	f023 0220 	bic.w	r2, r3, #32
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	4928      	ldr	r1, [pc, #160]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3ea:	4b27      	ldr	r3, [pc, #156]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	4a26      	ldr	r2, [pc, #152]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	f023 0310 	bic.w	r3, r3, #16
 800b3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3f6:	4b24      	ldr	r3, [pc, #144]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b3f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3fa:	4b24      	ldr	r3, [pc, #144]	; (800b48c <RCCEx_PLL2_Config+0x160>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	69d2      	ldr	r2, [r2, #28]
 800b402:	00d2      	lsls	r2, r2, #3
 800b404:	4920      	ldr	r1, [pc, #128]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b406:	4313      	orrs	r3, r2
 800b408:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b40a:	4b1f      	ldr	r3, [pc, #124]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	4a1e      	ldr	r2, [pc, #120]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b410:	f043 0310 	orr.w	r3, r3, #16
 800b414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b41c:	4b1a      	ldr	r3, [pc, #104]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	4a19      	ldr	r2, [pc, #100]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b426:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b428:	e00f      	b.n	800b44a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d106      	bne.n	800b43e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b430:	4b15      	ldr	r3, [pc, #84]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	4a14      	ldr	r2, [pc, #80]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b43a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b43c:	e005      	b.n	800b44a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b43e:	4b12      	ldr	r3, [pc, #72]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	4a11      	ldr	r2, [pc, #68]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b44a:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a0e      	ldr	r2, [pc, #56]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b456:	f7f7 fa33 	bl	80028c0 <HAL_GetTick>
 800b45a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b45c:	e008      	b.n	800b470 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b45e:	f7f7 fa2f 	bl	80028c0 <HAL_GetTick>
 800b462:	4602      	mov	r2, r0
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d901      	bls.n	800b470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e006      	b.n	800b47e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <RCCEx_PLL2_Config+0x15c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0f0      	beq.n	800b45e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
 800b48c:	ffff0007 	.word	0xffff0007

0800b490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b49e:	4b53      	ldr	r3, [pc, #332]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a2:	f003 0303 	and.w	r3, r3, #3
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d101      	bne.n	800b4ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e099      	b.n	800b5e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4ae:	4b4f      	ldr	r3, [pc, #316]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a4e      	ldr	r2, [pc, #312]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b4b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ba:	f7f7 fa01 	bl	80028c0 <HAL_GetTick>
 800b4be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4c0:	e008      	b.n	800b4d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4c2:	f7f7 f9fd 	bl	80028c0 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d901      	bls.n	800b4d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e086      	b.n	800b5e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4d4:	4b45      	ldr	r3, [pc, #276]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1f0      	bne.n	800b4c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4e0:	4b42      	ldr	r3, [pc, #264]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	051b      	lsls	r3, r3, #20
 800b4ee:	493f      	ldr	r1, [pc, #252]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	628b      	str	r3, [r1, #40]	; 0x28
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	3b01      	subs	r3, #1
 800b504:	025b      	lsls	r3, r3, #9
 800b506:	b29b      	uxth	r3, r3
 800b508:	431a      	orrs	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	3b01      	subs	r3, #1
 800b510:	041b      	lsls	r3, r3, #16
 800b512:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b516:	431a      	orrs	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	061b      	lsls	r3, r3, #24
 800b520:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b524:	4931      	ldr	r1, [pc, #196]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b526:	4313      	orrs	r3, r2
 800b528:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b52a:	4b30      	ldr	r3, [pc, #192]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	492d      	ldr	r1, [pc, #180]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b53c:	4b2b      	ldr	r3, [pc, #172]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	4928      	ldr	r1, [pc, #160]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b54e:	4b27      	ldr	r3, [pc, #156]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	4a26      	ldr	r2, [pc, #152]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b55a:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b55e:	4b24      	ldr	r3, [pc, #144]	; (800b5f0 <RCCEx_PLL3_Config+0x160>)
 800b560:	4013      	ands	r3, r2
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	69d2      	ldr	r2, [r2, #28]
 800b566:	00d2      	lsls	r2, r2, #3
 800b568:	4920      	ldr	r1, [pc, #128]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b56e:	4b1f      	ldr	r3, [pc, #124]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	4a1e      	ldr	r2, [pc, #120]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b580:	4b1a      	ldr	r3, [pc, #104]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	4a19      	ldr	r2, [pc, #100]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b58a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b58c:	e00f      	b.n	800b5ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d106      	bne.n	800b5a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b594:	4b15      	ldr	r3, [pc, #84]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	4a14      	ldr	r2, [pc, #80]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b59a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b59e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5a0:	e005      	b.n	800b5ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5a2:	4b12      	ldr	r3, [pc, #72]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a6:	4a11      	ldr	r2, [pc, #68]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a0e      	ldr	r2, [pc, #56]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ba:	f7f7 f981 	bl	80028c0 <HAL_GetTick>
 800b5be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5c0:	e008      	b.n	800b5d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5c2:	f7f7 f97d 	bl	80028c0 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d901      	bls.n	800b5d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e006      	b.n	800b5e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <RCCEx_PLL3_Config+0x15c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0f0      	beq.n	800b5c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	58024400 	.word	0x58024400
 800b5f0:	ffff0007 	.word	0xffff0007

0800b5f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e0f1      	b.n	800b7ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a78      	ldr	r2, [pc, #480]	; (800b7f4 <HAL_SPI_Init+0x200>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d00f      	beq.n	800b636 <HAL_SPI_Init+0x42>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a77      	ldr	r2, [pc, #476]	; (800b7f8 <HAL_SPI_Init+0x204>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00a      	beq.n	800b636 <HAL_SPI_Init+0x42>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a75      	ldr	r2, [pc, #468]	; (800b7fc <HAL_SPI_Init+0x208>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d005      	beq.n	800b636 <HAL_SPI_Init+0x42>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	2b0f      	cmp	r3, #15
 800b630:	d901      	bls.n	800b636 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e0d9      	b.n	800b7ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fd74 	bl	800c124 <SPI_GetPacketSize>
 800b63c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a6c      	ldr	r2, [pc, #432]	; (800b7f4 <HAL_SPI_Init+0x200>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d00c      	beq.n	800b662 <HAL_SPI_Init+0x6e>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a6a      	ldr	r2, [pc, #424]	; (800b7f8 <HAL_SPI_Init+0x204>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d007      	beq.n	800b662 <HAL_SPI_Init+0x6e>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a69      	ldr	r2, [pc, #420]	; (800b7fc <HAL_SPI_Init+0x208>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d002      	beq.n	800b662 <HAL_SPI_Init+0x6e>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b08      	cmp	r3, #8
 800b660:	d811      	bhi.n	800b686 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b666:	4a63      	ldr	r2, [pc, #396]	; (800b7f4 <HAL_SPI_Init+0x200>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d009      	beq.n	800b680 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a61      	ldr	r2, [pc, #388]	; (800b7f8 <HAL_SPI_Init+0x204>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d004      	beq.n	800b680 <HAL_SPI_Init+0x8c>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a60      	ldr	r2, [pc, #384]	; (800b7fc <HAL_SPI_Init+0x208>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d104      	bne.n	800b68a <HAL_SPI_Init+0x96>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b10      	cmp	r3, #16
 800b684:	d901      	bls.n	800b68a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	e0af      	b.n	800b7ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f6 fd46 	bl	8002130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0201 	bic.w	r2, r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b6c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6d0:	d119      	bne.n	800b706 <HAL_SPI_Init+0x112>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6da:	d103      	bne.n	800b6e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d008      	beq.n	800b6f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10c      	bne.n	800b706 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6f4:	d107      	bne.n	800b706 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b704:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	69da      	ldr	r2, [r3, #28]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70e:	431a      	orrs	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	431a      	orrs	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b718:	ea42 0103 	orr.w	r1, r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b730:	431a      	orrs	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b736:	431a      	orrs	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	431a      	orrs	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	431a      	orrs	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	431a      	orrs	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b75a:	431a      	orrs	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	431a      	orrs	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b766:	ea42 0103 	orr.w	r1, r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	430a      	orrs	r2, r1
 800b774:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d113      	bne.n	800b7a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b790:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f022 0201 	bic.w	r2, r2, #1
 800b7b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	40013000 	.word	0x40013000
 800b7f8:	40003800 	.word	0x40003800
 800b7fc:	40003c00 	.word	0x40003c00

0800b800 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	; 0x28
 800b804:	af02      	add	r7, sp, #8
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	4613      	mov	r3, r2
 800b80e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3330      	adds	r3, #48	; 0x30
 800b81a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b824:	d112      	bne.n	800b84c <HAL_SPI_Receive+0x4c>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10e      	bne.n	800b84c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2204      	movs	r2, #4
 800b832:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b836:	88fa      	ldrh	r2, [r7, #6]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	4613      	mov	r3, r2
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	68b9      	ldr	r1, [r7, #8]
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 f978 	bl	800bb38 <HAL_SPI_TransmitReceive>
 800b848:	4603      	mov	r3, r0
 800b84a:	e16f      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b852:	2b01      	cmp	r3, #1
 800b854:	d101      	bne.n	800b85a <HAL_SPI_Receive+0x5a>
 800b856:	2302      	movs	r3, #2
 800b858:	e168      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b862:	f7f7 f82d 	bl	80028c0 <HAL_GetTick>
 800b866:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b01      	cmp	r3, #1
 800b872:	d007      	beq.n	800b884 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b874:	2302      	movs	r3, #2
 800b876:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b880:	7ffb      	ldrb	r3, [r7, #31]
 800b882:	e153      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <HAL_SPI_Receive+0x90>
 800b88a:	88fb      	ldrh	r3, [r7, #6]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d107      	bne.n	800b8a0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b89c:	7ffb      	ldrb	r3, [r7, #31]
 800b89e:	e145      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	88fa      	ldrh	r2, [r7, #6]
 800b8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	88fa      	ldrh	r2, [r7, #6]
 800b8c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b8f0:	d107      	bne.n	800b902 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b900:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	4b8a      	ldr	r3, [pc, #552]	; (800bb34 <HAL_SPI_Receive+0x334>)
 800b90a:	4013      	ands	r3, r2
 800b90c:	88f9      	ldrh	r1, [r7, #6]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	6812      	ldr	r2, [r2, #0]
 800b912:	430b      	orrs	r3, r1
 800b914:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f042 0201 	orr.w	r2, r2, #1
 800b924:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b92e:	d107      	bne.n	800b940 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b93e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b0f      	cmp	r3, #15
 800b946:	d948      	bls.n	800b9da <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b948:	e040      	b.n	800b9cc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	695a      	ldr	r2, [r3, #20]
 800b950:	f248 0308 	movw	r3, #32776	; 0x8008
 800b954:	4013      	ands	r3, r2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d014      	beq.n	800b984 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b962:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b964:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b96a:	1d1a      	adds	r2, r3, #4
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b976:	b29b      	uxth	r3, r3
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b982:	e023      	b.n	800b9cc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b984:	f7f6 ff9c 	bl	80028c0 <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d803      	bhi.n	800b99c <HAL_SPI_Receive+0x19c>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b99a:	d102      	bne.n	800b9a2 <HAL_SPI_Receive+0x1a2>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d114      	bne.n	800b9cc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 faf0 	bl	800bf88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e0af      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1b8      	bne.n	800b94a <HAL_SPI_Receive+0x14a>
 800b9d8:	e095      	b.n	800bb06 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	2b07      	cmp	r3, #7
 800b9e0:	f240 808b 	bls.w	800bafa <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9e4:	e03f      	b.n	800ba66 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d114      	bne.n	800ba1e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	8812      	ldrh	r2, [r2, #0]
 800b9fc:	b292      	uxth	r2, r2
 800b9fe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba04:	1c9a      	adds	r2, r3, #2
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba1c:	e023      	b.n	800ba66 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba1e:	f7f6 ff4f 	bl	80028c0 <HAL_GetTick>
 800ba22:	4602      	mov	r2, r0
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d803      	bhi.n	800ba36 <HAL_SPI_Receive+0x236>
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba34:	d102      	bne.n	800ba3c <HAL_SPI_Receive+0x23c>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d114      	bne.n	800ba66 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 faa3 	bl	800bf88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e062      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1b9      	bne.n	800b9e6 <HAL_SPI_Receive+0x1e6>
 800ba72:	e048      	b.n	800bb06 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d117      	bne.n	800bab2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba8e:	7812      	ldrb	r2, [r2, #0]
 800ba90:	b2d2      	uxtb	r2, r2
 800ba92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3b01      	subs	r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bab0:	e023      	b.n	800bafa <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bab2:	f7f6 ff05 	bl	80028c0 <HAL_GetTick>
 800bab6:	4602      	mov	r2, r0
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d803      	bhi.n	800baca <HAL_SPI_Receive+0x2ca>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bac8:	d102      	bne.n	800bad0 <HAL_SPI_Receive+0x2d0>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d114      	bne.n	800bafa <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 fa59 	bl	800bf88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800baf6:	2303      	movs	r3, #3
 800baf8:	e018      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1b6      	bne.n	800ba74 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 fa3e 	bl	800bf88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e000      	b.n	800bb2c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bb2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3720      	adds	r7, #32
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	ffff0000 	.word	0xffff0000

0800bb38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08e      	sub	sp, #56	; 0x38
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3320      	adds	r3, #32
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3330      	adds	r3, #48	; 0x30
 800bb5a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d101      	bne.n	800bb6a <HAL_SPI_TransmitReceive+0x32>
 800bb66:	2302      	movs	r3, #2
 800bb68:	e209      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb72:	f7f6 fea5 	bl	80028c0 <HAL_GetTick>
 800bb76:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bb78:	887b      	ldrh	r3, [r7, #2]
 800bb7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bb7c:	887b      	ldrh	r3, [r7, #2]
 800bb7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb86:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb8e:	7efb      	ldrb	r3, [r7, #27]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d014      	beq.n	800bbbe <HAL_SPI_TransmitReceive+0x86>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb9a:	d106      	bne.n	800bbaa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bba4:	7efb      	ldrb	r3, [r7, #27]
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d009      	beq.n	800bbbe <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bbaa:	2302      	movs	r3, #2
 800bbac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbbc:	e1df      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d005      	beq.n	800bbd0 <HAL_SPI_TransmitReceive+0x98>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d002      	beq.n	800bbd0 <HAL_SPI_TransmitReceive+0x98>
 800bbca:	887b      	ldrh	r3, [r7, #2]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbe2:	e1cc      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b04      	cmp	r3, #4
 800bbee:	d003      	beq.n	800bbf8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2205      	movs	r2, #5
 800bbf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	887a      	ldrh	r2, [r7, #2]
 800bc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	887a      	ldrh	r2, [r7, #2]
 800bc12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	887a      	ldrh	r2, [r7, #2]
 800bc20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	887a      	ldrh	r2, [r7, #2]
 800bc28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	4b82      	ldr	r3, [pc, #520]	; (800be48 <HAL_SPI_TransmitReceive+0x310>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	8879      	ldrh	r1, [r7, #2]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	6812      	ldr	r2, [r2, #0]
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f042 0201 	orr.w	r2, r2, #1
 800bc5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc64:	d107      	bne.n	800bc76 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	2b0f      	cmp	r3, #15
 800bc7c:	d970      	bls.n	800bd60 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc7e:	e068      	b.n	800bd52 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d11a      	bne.n	800bcc4 <HAL_SPI_TransmitReceive+0x18c>
 800bc8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d017      	beq.n	800bcc4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6812      	ldr	r2, [r2, #0]
 800bc9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bca4:	1d1a      	adds	r2, r3, #4
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	695a      	ldr	r2, [r3, #20]
 800bcca:	f248 0308 	movw	r3, #32776	; 0x8008
 800bcce:	4013      	ands	r3, r2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d01a      	beq.n	800bd0a <HAL_SPI_TransmitReceive+0x1d2>
 800bcd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d017      	beq.n	800bd0a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bce2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bce4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd08:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd0a:	f7f6 fdd9 	bl	80028c0 <HAL_GetTick>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d803      	bhi.n	800bd22 <HAL_SPI_TransmitReceive+0x1ea>
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd20:	d102      	bne.n	800bd28 <HAL_SPI_TransmitReceive+0x1f0>
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d114      	bne.n	800bd52 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f92d 	bl	800bf88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e115      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d193      	bne.n	800bc80 <HAL_SPI_TransmitReceive+0x148>
 800bd58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d190      	bne.n	800bc80 <HAL_SPI_TransmitReceive+0x148>
 800bd5e:	e0e7      	b.n	800bf30 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	2b07      	cmp	r3, #7
 800bd66:	f240 80dd 	bls.w	800bf24 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd6a:	e066      	b.n	800be3a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d119      	bne.n	800bdae <HAL_SPI_TransmitReceive+0x276>
 800bd7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d016      	beq.n	800bdae <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd84:	881a      	ldrh	r2, [r3, #0]
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd8e:	1c9a      	adds	r2, r3, #2
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d11a      	bne.n	800bdf2 <HAL_SPI_TransmitReceive+0x2ba>
 800bdbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d017      	beq.n	800bdf2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc6:	6a3a      	ldr	r2, [r7, #32]
 800bdc8:	8812      	ldrh	r2, [r2, #0]
 800bdca:	b292      	uxth	r2, r2
 800bdcc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdd2:	1c9a      	adds	r2, r3, #2
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	3b01      	subs	r3, #1
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdf2:	f7f6 fd65 	bl	80028c0 <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d803      	bhi.n	800be0a <HAL_SPI_TransmitReceive+0x2d2>
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be08:	d102      	bne.n	800be10 <HAL_SPI_TransmitReceive+0x2d8>
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d114      	bne.n	800be3a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f8b9 	bl	800bf88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800be36:	2303      	movs	r3, #3
 800be38:	e0a1      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d195      	bne.n	800bd6c <HAL_SPI_TransmitReceive+0x234>
 800be40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d192      	bne.n	800bd6c <HAL_SPI_TransmitReceive+0x234>
 800be46:	e073      	b.n	800bf30 <HAL_SPI_TransmitReceive+0x3f8>
 800be48:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b02      	cmp	r3, #2
 800be58:	d11b      	bne.n	800be92 <HAL_SPI_TransmitReceive+0x35a>
 800be5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d018      	beq.n	800be92 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3320      	adds	r3, #32
 800be6a:	7812      	ldrb	r2, [r2, #0]
 800be6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be7e:	b29b      	uxth	r3, r3
 800be80:	3b01      	subs	r3, #1
 800be82:	b29a      	uxth	r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be90:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d11d      	bne.n	800bedc <HAL_SPI_TransmitReceive+0x3a4>
 800bea0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d01a      	beq.n	800bedc <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	b2d2      	uxtb	r2, r2
 800beb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bec8:	b29b      	uxth	r3, r3
 800beca:	3b01      	subs	r3, #1
 800becc:	b29a      	uxth	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800beda:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bedc:	f7f6 fcf0 	bl	80028c0 <HAL_GetTick>
 800bee0:	4602      	mov	r2, r0
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bee8:	429a      	cmp	r2, r3
 800beea:	d803      	bhi.n	800bef4 <HAL_SPI_TransmitReceive+0x3bc>
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bef2:	d102      	bne.n	800befa <HAL_SPI_TransmitReceive+0x3c2>
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d114      	bne.n	800bf24 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 f844 	bl	800bf88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf20:	2303      	movs	r3, #3
 800bf22:	e02c      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d190      	bne.n	800be4c <HAL_SPI_TransmitReceive+0x314>
 800bf2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d18d      	bne.n	800be4c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	2200      	movs	r2, #0
 800bf38:	2108      	movs	r1, #8
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 f8c4 	bl	800c0c8 <SPI_WaitOnFlagUntilTimeout>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf4c:	f043 0220 	orr.w	r2, r3, #32
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f000 f816 	bl	800bf88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e001      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bf7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3730      	adds	r7, #48	; 0x30
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop

0800bf88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	699a      	ldr	r2, [r3, #24]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f042 0208 	orr.w	r2, r2, #8
 800bfa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	699a      	ldr	r2, [r3, #24]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f042 0210 	orr.w	r2, r2, #16
 800bfb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f022 0201 	bic.w	r2, r2, #1
 800bfc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6919      	ldr	r1, [r3, #16]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b3c      	ldr	r3, [pc, #240]	; (800c0c4 <SPI_CloseTransfer+0x13c>)
 800bfd4:	400b      	ands	r3, r1
 800bfd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689a      	ldr	r2, [r3, #8]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bfe6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	d014      	beq.n	800c01e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00f      	beq.n	800c01e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	699a      	ldr	r2, [r3, #24]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f042 0220 	orr.w	r2, r2, #32
 800c01c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b03      	cmp	r3, #3
 800c028:	d014      	beq.n	800c054 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00f      	beq.n	800c054 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c03a:	f043 0204 	orr.w	r2, r3, #4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699a      	ldr	r2, [r3, #24]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c052:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00f      	beq.n	800c07e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c064:	f043 0201 	orr.w	r2, r3, #1
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c07c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00f      	beq.n	800c0a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c08e:	f043 0208 	orr.w	r2, r3, #8
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	699a      	ldr	r2, [r3, #24]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c0b8:	bf00      	nop
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	fffffc90 	.word	0xfffffc90

0800c0c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0d8:	e010      	b.n	800c0fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0da:	f7f6 fbf1 	bl	80028c0 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d803      	bhi.n	800c0f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0f0:	d102      	bne.n	800c0f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e00f      	b.n	800c11c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	695a      	ldr	r2, [r3, #20]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	4013      	ands	r3, r2
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	429a      	cmp	r2, r3
 800c10a:	bf0c      	ite	eq
 800c10c:	2301      	moveq	r3, #1
 800c10e:	2300      	movne	r3, #0
 800c110:	b2db      	uxtb	r3, r3
 800c112:	461a      	mov	r2, r3
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	429a      	cmp	r2, r3
 800c118:	d0df      	beq.n	800c0da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c130:	095b      	lsrs	r3, r3, #5
 800c132:	3301      	adds	r3, #1
 800c134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	3301      	adds	r3, #1
 800c13c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	3307      	adds	r3, #7
 800c142:	08db      	lsrs	r3, r3, #3
 800c144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
	...

0800c15c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d109      	bne.n	800c184 <HAL_TIM_OC_Start_IT+0x28>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	bf14      	ite	ne
 800c17c:	2301      	movne	r3, #1
 800c17e:	2300      	moveq	r3, #0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	e03c      	b.n	800c1fe <HAL_TIM_OC_Start_IT+0xa2>
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b04      	cmp	r3, #4
 800c188:	d109      	bne.n	800c19e <HAL_TIM_OC_Start_IT+0x42>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b01      	cmp	r3, #1
 800c194:	bf14      	ite	ne
 800c196:	2301      	movne	r3, #1
 800c198:	2300      	moveq	r3, #0
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	e02f      	b.n	800c1fe <HAL_TIM_OC_Start_IT+0xa2>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d109      	bne.n	800c1b8 <HAL_TIM_OC_Start_IT+0x5c>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	bf14      	ite	ne
 800c1b0:	2301      	movne	r3, #1
 800c1b2:	2300      	moveq	r3, #0
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	e022      	b.n	800c1fe <HAL_TIM_OC_Start_IT+0xa2>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2b0c      	cmp	r3, #12
 800c1bc:	d109      	bne.n	800c1d2 <HAL_TIM_OC_Start_IT+0x76>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	bf14      	ite	ne
 800c1ca:	2301      	movne	r3, #1
 800c1cc:	2300      	moveq	r3, #0
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	e015      	b.n	800c1fe <HAL_TIM_OC_Start_IT+0xa2>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b10      	cmp	r3, #16
 800c1d6:	d109      	bne.n	800c1ec <HAL_TIM_OC_Start_IT+0x90>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	bf14      	ite	ne
 800c1e4:	2301      	movne	r3, #1
 800c1e6:	2300      	moveq	r3, #0
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	e008      	b.n	800c1fe <HAL_TIM_OC_Start_IT+0xa2>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	bf14      	ite	ne
 800c1f8:	2301      	movne	r3, #1
 800c1fa:	2300      	moveq	r3, #0
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d001      	beq.n	800c206 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e0ec      	b.n	800c3e0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d104      	bne.n	800c216 <HAL_TIM_OC_Start_IT+0xba>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c214:	e023      	b.n	800c25e <HAL_TIM_OC_Start_IT+0x102>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b04      	cmp	r3, #4
 800c21a:	d104      	bne.n	800c226 <HAL_TIM_OC_Start_IT+0xca>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c224:	e01b      	b.n	800c25e <HAL_TIM_OC_Start_IT+0x102>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b08      	cmp	r3, #8
 800c22a:	d104      	bne.n	800c236 <HAL_TIM_OC_Start_IT+0xda>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2202      	movs	r2, #2
 800c230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c234:	e013      	b.n	800c25e <HAL_TIM_OC_Start_IT+0x102>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b0c      	cmp	r3, #12
 800c23a:	d104      	bne.n	800c246 <HAL_TIM_OC_Start_IT+0xea>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2202      	movs	r2, #2
 800c240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c244:	e00b      	b.n	800c25e <HAL_TIM_OC_Start_IT+0x102>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b10      	cmp	r3, #16
 800c24a:	d104      	bne.n	800c256 <HAL_TIM_OC_Start_IT+0xfa>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c254:	e003      	b.n	800c25e <HAL_TIM_OC_Start_IT+0x102>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2202      	movs	r2, #2
 800c25a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b0c      	cmp	r3, #12
 800c262:	d841      	bhi.n	800c2e8 <HAL_TIM_OC_Start_IT+0x18c>
 800c264:	a201      	add	r2, pc, #4	; (adr r2, 800c26c <HAL_TIM_OC_Start_IT+0x110>)
 800c266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c2a1 	.word	0x0800c2a1
 800c270:	0800c2e9 	.word	0x0800c2e9
 800c274:	0800c2e9 	.word	0x0800c2e9
 800c278:	0800c2e9 	.word	0x0800c2e9
 800c27c:	0800c2b3 	.word	0x0800c2b3
 800c280:	0800c2e9 	.word	0x0800c2e9
 800c284:	0800c2e9 	.word	0x0800c2e9
 800c288:	0800c2e9 	.word	0x0800c2e9
 800c28c:	0800c2c5 	.word	0x0800c2c5
 800c290:	0800c2e9 	.word	0x0800c2e9
 800c294:	0800c2e9 	.word	0x0800c2e9
 800c298:	0800c2e9 	.word	0x0800c2e9
 800c29c:	0800c2d7 	.word	0x0800c2d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f042 0202 	orr.w	r2, r2, #2
 800c2ae:	60da      	str	r2, [r3, #12]
      break;
 800c2b0:	e01d      	b.n	800c2ee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68da      	ldr	r2, [r3, #12]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f042 0204 	orr.w	r2, r2, #4
 800c2c0:	60da      	str	r2, [r3, #12]
      break;
 800c2c2:	e014      	b.n	800c2ee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68da      	ldr	r2, [r3, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f042 0208 	orr.w	r2, r2, #8
 800c2d2:	60da      	str	r2, [r3, #12]
      break;
 800c2d4:	e00b      	b.n	800c2ee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68da      	ldr	r2, [r3, #12]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f042 0210 	orr.w	r2, r2, #16
 800c2e4:	60da      	str	r2, [r3, #12]
      break;
 800c2e6:	e002      	b.n	800c2ee <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c2ec:	bf00      	nop
  }

  if (status == HAL_OK)
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d174      	bne.n	800c3de <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 ff8d 	bl	800d21c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a38      	ldr	r2, [pc, #224]	; (800c3e8 <HAL_TIM_OC_Start_IT+0x28c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d013      	beq.n	800c334 <HAL_TIM_OC_Start_IT+0x1d8>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a36      	ldr	r2, [pc, #216]	; (800c3ec <HAL_TIM_OC_Start_IT+0x290>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d00e      	beq.n	800c334 <HAL_TIM_OC_Start_IT+0x1d8>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a35      	ldr	r2, [pc, #212]	; (800c3f0 <HAL_TIM_OC_Start_IT+0x294>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d009      	beq.n	800c334 <HAL_TIM_OC_Start_IT+0x1d8>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a33      	ldr	r2, [pc, #204]	; (800c3f4 <HAL_TIM_OC_Start_IT+0x298>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d004      	beq.n	800c334 <HAL_TIM_OC_Start_IT+0x1d8>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a32      	ldr	r2, [pc, #200]	; (800c3f8 <HAL_TIM_OC_Start_IT+0x29c>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d101      	bne.n	800c338 <HAL_TIM_OC_Start_IT+0x1dc>
 800c334:	2301      	movs	r3, #1
 800c336:	e000      	b.n	800c33a <HAL_TIM_OC_Start_IT+0x1de>
 800c338:	2300      	movs	r3, #0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d007      	beq.n	800c34e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c34c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a25      	ldr	r2, [pc, #148]	; (800c3e8 <HAL_TIM_OC_Start_IT+0x28c>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d022      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c360:	d01d      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a25      	ldr	r2, [pc, #148]	; (800c3fc <HAL_TIM_OC_Start_IT+0x2a0>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d018      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a23      	ldr	r2, [pc, #140]	; (800c400 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d013      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a22      	ldr	r2, [pc, #136]	; (800c404 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00e      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a19      	ldr	r2, [pc, #100]	; (800c3ec <HAL_TIM_OC_Start_IT+0x290>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d009      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a1e      	ldr	r2, [pc, #120]	; (800c408 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d004      	beq.n	800c39e <HAL_TIM_OC_Start_IT+0x242>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a15      	ldr	r2, [pc, #84]	; (800c3f0 <HAL_TIM_OC_Start_IT+0x294>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d115      	bne.n	800c3ca <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689a      	ldr	r2, [r3, #8]
 800c3a4:	4b19      	ldr	r3, [pc, #100]	; (800c40c <HAL_TIM_OC_Start_IT+0x2b0>)
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2b06      	cmp	r3, #6
 800c3ae:	d015      	beq.n	800c3dc <HAL_TIM_OC_Start_IT+0x280>
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b6:	d011      	beq.n	800c3dc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0201 	orr.w	r2, r2, #1
 800c3c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c8:	e008      	b.n	800c3dc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f042 0201 	orr.w	r2, r2, #1
 800c3d8:	601a      	str	r2, [r3, #0]
 800c3da:	e000      	b.n	800c3de <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3dc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	40010000 	.word	0x40010000
 800c3ec:	40010400 	.word	0x40010400
 800c3f0:	40014000 	.word	0x40014000
 800c3f4:	40014400 	.word	0x40014400
 800c3f8:	40014800 	.word	0x40014800
 800c3fc:	40000400 	.word	0x40000400
 800c400:	40000800 	.word	0x40000800
 800c404:	40000c00 	.word	0x40000c00
 800c408:	40001800 	.word	0x40001800
 800c40c:	00010007 	.word	0x00010007

0800c410 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b0c      	cmp	r3, #12
 800c422:	d841      	bhi.n	800c4a8 <HAL_TIM_OC_Stop_IT+0x98>
 800c424:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <HAL_TIM_OC_Stop_IT+0x1c>)
 800c426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42a:	bf00      	nop
 800c42c:	0800c461 	.word	0x0800c461
 800c430:	0800c4a9 	.word	0x0800c4a9
 800c434:	0800c4a9 	.word	0x0800c4a9
 800c438:	0800c4a9 	.word	0x0800c4a9
 800c43c:	0800c473 	.word	0x0800c473
 800c440:	0800c4a9 	.word	0x0800c4a9
 800c444:	0800c4a9 	.word	0x0800c4a9
 800c448:	0800c4a9 	.word	0x0800c4a9
 800c44c:	0800c485 	.word	0x0800c485
 800c450:	0800c4a9 	.word	0x0800c4a9
 800c454:	0800c4a9 	.word	0x0800c4a9
 800c458:	0800c4a9 	.word	0x0800c4a9
 800c45c:	0800c497 	.word	0x0800c497
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f022 0202 	bic.w	r2, r2, #2
 800c46e:	60da      	str	r2, [r3, #12]
      break;
 800c470:	e01d      	b.n	800c4ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0204 	bic.w	r2, r2, #4
 800c480:	60da      	str	r2, [r3, #12]
      break;
 800c482:	e014      	b.n	800c4ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68da      	ldr	r2, [r3, #12]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f022 0208 	bic.w	r2, r2, #8
 800c492:	60da      	str	r2, [r3, #12]
      break;
 800c494:	e00b      	b.n	800c4ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68da      	ldr	r2, [r3, #12]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f022 0210 	bic.w	r2, r2, #16
 800c4a4:	60da      	str	r2, [r3, #12]
      break;
 800c4a6:	e002      	b.n	800c4ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f040 8081 	bne.w	800c5b8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 feac 	bl	800d21c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a3e      	ldr	r2, [pc, #248]	; (800c5c4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d013      	beq.n	800c4f6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a3d      	ldr	r2, [pc, #244]	; (800c5c8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d00e      	beq.n	800c4f6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a3b      	ldr	r2, [pc, #236]	; (800c5cc <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d009      	beq.n	800c4f6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a3a      	ldr	r2, [pc, #232]	; (800c5d0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d004      	beq.n	800c4f6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a38      	ldr	r2, [pc, #224]	; (800c5d4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d101      	bne.n	800c4fa <HAL_TIM_OC_Stop_IT+0xea>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <HAL_TIM_OC_Stop_IT+0xec>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d017      	beq.n	800c530 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6a1a      	ldr	r2, [r3, #32]
 800c506:	f241 1311 	movw	r3, #4369	; 0x1111
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10f      	bne.n	800c530 <HAL_TIM_OC_Stop_IT+0x120>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	f240 4344 	movw	r3, #1092	; 0x444
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <HAL_TIM_OC_Stop_IT+0x120>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c52e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6a1a      	ldr	r2, [r3, #32]
 800c536:	f241 1311 	movw	r3, #4369	; 0x1111
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10f      	bne.n	800c560 <HAL_TIM_OC_Stop_IT+0x150>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6a1a      	ldr	r2, [r3, #32]
 800c546:	f240 4344 	movw	r3, #1092	; 0x444
 800c54a:	4013      	ands	r3, r2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d107      	bne.n	800c560 <HAL_TIM_OC_Stop_IT+0x150>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f022 0201 	bic.w	r2, r2, #1
 800c55e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d104      	bne.n	800c570 <HAL_TIM_OC_Stop_IT+0x160>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c56e:	e023      	b.n	800c5b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b04      	cmp	r3, #4
 800c574:	d104      	bne.n	800c580 <HAL_TIM_OC_Stop_IT+0x170>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c57e:	e01b      	b.n	800c5b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b08      	cmp	r3, #8
 800c584:	d104      	bne.n	800c590 <HAL_TIM_OC_Stop_IT+0x180>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c58e:	e013      	b.n	800c5b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b0c      	cmp	r3, #12
 800c594:	d104      	bne.n	800c5a0 <HAL_TIM_OC_Stop_IT+0x190>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c59e:	e00b      	b.n	800c5b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b10      	cmp	r3, #16
 800c5a4:	d104      	bne.n	800c5b0 <HAL_TIM_OC_Stop_IT+0x1a0>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5ae:	e003      	b.n	800c5b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	40010000 	.word	0x40010000
 800c5c8:	40010400 	.word	0x40010400
 800c5cc:	40014000 	.word	0x40014000
 800c5d0:	40014400 	.word	0x40014400
 800c5d4:	40014800 	.word	0x40014800

0800c5d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e049      	b.n	800c67e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7f5 fe46 	bl	8002290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2202      	movs	r2, #2
 800c608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3304      	adds	r3, #4
 800c614:	4619      	mov	r1, r3
 800c616:	4610      	mov	r0, r2
 800c618:	f000 fa90 	bl	800cb3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b082      	sub	sp, #8
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d122      	bne.n	800c6e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	f003 0302 	and.w	r3, r3, #2
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d11b      	bne.n	800c6e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f06f 0202 	mvn.w	r2, #2
 800c6b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	f003 0303 	and.w	r3, r3, #3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d003      	beq.n	800c6d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa19 	bl	800cb00 <HAL_TIM_IC_CaptureCallback>
 800c6ce:	e005      	b.n	800c6dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7f4 fac5 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa1c 	bl	800cb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	f003 0304 	and.w	r3, r3, #4
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d122      	bne.n	800c736 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	f003 0304 	and.w	r3, r3, #4
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	d11b      	bne.n	800c736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f06f 0204 	mvn.w	r2, #4
 800c706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f9ef 	bl	800cb00 <HAL_TIM_IC_CaptureCallback>
 800c722:	e005      	b.n	800c730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7f4 fa9b 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f9f2 	bl	800cb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	f003 0308 	and.w	r3, r3, #8
 800c740:	2b08      	cmp	r3, #8
 800c742:	d122      	bne.n	800c78a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	f003 0308 	and.w	r3, r3, #8
 800c74e:	2b08      	cmp	r3, #8
 800c750:	d11b      	bne.n	800c78a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f06f 0208 	mvn.w	r2, #8
 800c75a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2204      	movs	r2, #4
 800c760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	f003 0303 	and.w	r3, r3, #3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f9c5 	bl	800cb00 <HAL_TIM_IC_CaptureCallback>
 800c776:	e005      	b.n	800c784 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7f4 fa71 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f9c8 	bl	800cb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	f003 0310 	and.w	r3, r3, #16
 800c794:	2b10      	cmp	r3, #16
 800c796:	d122      	bne.n	800c7de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f003 0310 	and.w	r3, r3, #16
 800c7a2:	2b10      	cmp	r3, #16
 800c7a4:	d11b      	bne.n	800c7de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f06f 0210 	mvn.w	r2, #16
 800c7ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2208      	movs	r2, #8
 800c7b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	69db      	ldr	r3, [r3, #28]
 800c7bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f99b 	bl	800cb00 <HAL_TIM_IC_CaptureCallback>
 800c7ca:	e005      	b.n	800c7d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7f4 fa47 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f99e 	bl	800cb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d10e      	bne.n	800c80a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d107      	bne.n	800c80a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f06f 0201 	mvn.w	r2, #1
 800c802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f971 	bl	800caec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c814:	2b80      	cmp	r3, #128	; 0x80
 800c816:	d10e      	bne.n	800c836 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c822:	2b80      	cmp	r3, #128	; 0x80
 800c824:	d107      	bne.n	800c836 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fe2f 	bl	800d494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c844:	d10e      	bne.n	800c864 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c850:	2b80      	cmp	r3, #128	; 0x80
 800c852:	d107      	bne.n	800c864 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c85c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fe22 	bl	800d4a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c86e:	2b40      	cmp	r3, #64	; 0x40
 800c870:	d10e      	bne.n	800c890 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c87c:	2b40      	cmp	r3, #64	; 0x40
 800c87e:	d107      	bne.n	800c890 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f94c 	bl	800cb28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	f003 0320 	and.w	r3, r3, #32
 800c89a:	2b20      	cmp	r3, #32
 800c89c:	d10e      	bne.n	800c8bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f003 0320 	and.w	r3, r3, #32
 800c8a8:	2b20      	cmp	r3, #32
 800c8aa:	d107      	bne.n	800c8bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f06f 0220 	mvn.w	r2, #32
 800c8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fde2 	bl	800d480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d101      	bne.n	800c8e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	e0ff      	b.n	800cae2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b14      	cmp	r3, #20
 800c8ee:	f200 80f0 	bhi.w	800cad2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8f2:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f8:	0800c94d 	.word	0x0800c94d
 800c8fc:	0800cad3 	.word	0x0800cad3
 800c900:	0800cad3 	.word	0x0800cad3
 800c904:	0800cad3 	.word	0x0800cad3
 800c908:	0800c98d 	.word	0x0800c98d
 800c90c:	0800cad3 	.word	0x0800cad3
 800c910:	0800cad3 	.word	0x0800cad3
 800c914:	0800cad3 	.word	0x0800cad3
 800c918:	0800c9cf 	.word	0x0800c9cf
 800c91c:	0800cad3 	.word	0x0800cad3
 800c920:	0800cad3 	.word	0x0800cad3
 800c924:	0800cad3 	.word	0x0800cad3
 800c928:	0800ca0f 	.word	0x0800ca0f
 800c92c:	0800cad3 	.word	0x0800cad3
 800c930:	0800cad3 	.word	0x0800cad3
 800c934:	0800cad3 	.word	0x0800cad3
 800c938:	0800ca51 	.word	0x0800ca51
 800c93c:	0800cad3 	.word	0x0800cad3
 800c940:	0800cad3 	.word	0x0800cad3
 800c944:	0800cad3 	.word	0x0800cad3
 800c948:	0800ca91 	.word	0x0800ca91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68b9      	ldr	r1, [r7, #8]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 f98c 	bl	800cc70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	699a      	ldr	r2, [r3, #24]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f042 0208 	orr.w	r2, r2, #8
 800c966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	699a      	ldr	r2, [r3, #24]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f022 0204 	bic.w	r2, r2, #4
 800c976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6999      	ldr	r1, [r3, #24]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	691a      	ldr	r2, [r3, #16]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	619a      	str	r2, [r3, #24]
      break;
 800c98a:	e0a5      	b.n	800cad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68b9      	ldr	r1, [r7, #8]
 800c992:	4618      	mov	r0, r3
 800c994:	f000 f9fc 	bl	800cd90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	699a      	ldr	r2, [r3, #24]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	699a      	ldr	r2, [r3, #24]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6999      	ldr	r1, [r3, #24]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	021a      	lsls	r2, r3, #8
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	430a      	orrs	r2, r1
 800c9ca:	619a      	str	r2, [r3, #24]
      break;
 800c9cc:	e084      	b.n	800cad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68b9      	ldr	r1, [r7, #8]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fa65 	bl	800cea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69da      	ldr	r2, [r3, #28]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f042 0208 	orr.w	r2, r2, #8
 800c9e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	69da      	ldr	r2, [r3, #28]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f022 0204 	bic.w	r2, r2, #4
 800c9f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	69d9      	ldr	r1, [r3, #28]
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	691a      	ldr	r2, [r3, #16]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	430a      	orrs	r2, r1
 800ca0a:	61da      	str	r2, [r3, #28]
      break;
 800ca0c:	e064      	b.n	800cad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 facd 	bl	800cfb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	69da      	ldr	r2, [r3, #28]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69da      	ldr	r2, [r3, #28]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69d9      	ldr	r1, [r3, #28]
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	021a      	lsls	r2, r3, #8
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	430a      	orrs	r2, r1
 800ca4c:	61da      	str	r2, [r3, #28]
      break;
 800ca4e:	e043      	b.n	800cad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	68b9      	ldr	r1, [r7, #8]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f000 fb16 	bl	800d088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f042 0208 	orr.w	r2, r2, #8
 800ca6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f022 0204 	bic.w	r2, r2, #4
 800ca7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	691a      	ldr	r2, [r3, #16]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca8e:	e023      	b.n	800cad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fb5a 	bl	800d150 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800caaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	021a      	lsls	r2, r3, #8
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	430a      	orrs	r2, r1
 800cace:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cad0:	e002      	b.n	800cad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	75fb      	strb	r3, [r7, #23]
      break;
 800cad6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop

0800caec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb30:	bf00      	nop
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a40      	ldr	r2, [pc, #256]	; (800cc50 <TIM_Base_SetConfig+0x114>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d013      	beq.n	800cb7c <TIM_Base_SetConfig+0x40>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb5a:	d00f      	beq.n	800cb7c <TIM_Base_SetConfig+0x40>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a3d      	ldr	r2, [pc, #244]	; (800cc54 <TIM_Base_SetConfig+0x118>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d00b      	beq.n	800cb7c <TIM_Base_SetConfig+0x40>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a3c      	ldr	r2, [pc, #240]	; (800cc58 <TIM_Base_SetConfig+0x11c>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d007      	beq.n	800cb7c <TIM_Base_SetConfig+0x40>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a3b      	ldr	r2, [pc, #236]	; (800cc5c <TIM_Base_SetConfig+0x120>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d003      	beq.n	800cb7c <TIM_Base_SetConfig+0x40>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a3a      	ldr	r2, [pc, #232]	; (800cc60 <TIM_Base_SetConfig+0x124>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d108      	bne.n	800cb8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a2f      	ldr	r2, [pc, #188]	; (800cc50 <TIM_Base_SetConfig+0x114>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d01f      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb9c:	d01b      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a2c      	ldr	r2, [pc, #176]	; (800cc54 <TIM_Base_SetConfig+0x118>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d017      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a2b      	ldr	r2, [pc, #172]	; (800cc58 <TIM_Base_SetConfig+0x11c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d013      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a2a      	ldr	r2, [pc, #168]	; (800cc5c <TIM_Base_SetConfig+0x120>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d00f      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a29      	ldr	r2, [pc, #164]	; (800cc60 <TIM_Base_SetConfig+0x124>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d00b      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a28      	ldr	r2, [pc, #160]	; (800cc64 <TIM_Base_SetConfig+0x128>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d007      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a27      	ldr	r2, [pc, #156]	; (800cc68 <TIM_Base_SetConfig+0x12c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d003      	beq.n	800cbd6 <TIM_Base_SetConfig+0x9a>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a26      	ldr	r2, [pc, #152]	; (800cc6c <TIM_Base_SetConfig+0x130>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d108      	bne.n	800cbe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	689a      	ldr	r2, [r3, #8]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a10      	ldr	r2, [pc, #64]	; (800cc50 <TIM_Base_SetConfig+0x114>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d00f      	beq.n	800cc34 <TIM_Base_SetConfig+0xf8>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a12      	ldr	r2, [pc, #72]	; (800cc60 <TIM_Base_SetConfig+0x124>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d00b      	beq.n	800cc34 <TIM_Base_SetConfig+0xf8>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a11      	ldr	r2, [pc, #68]	; (800cc64 <TIM_Base_SetConfig+0x128>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d007      	beq.n	800cc34 <TIM_Base_SetConfig+0xf8>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a10      	ldr	r2, [pc, #64]	; (800cc68 <TIM_Base_SetConfig+0x12c>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d003      	beq.n	800cc34 <TIM_Base_SetConfig+0xf8>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a0f      	ldr	r2, [pc, #60]	; (800cc6c <TIM_Base_SetConfig+0x130>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d103      	bne.n	800cc3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	691a      	ldr	r2, [r3, #16]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	615a      	str	r2, [r3, #20]
}
 800cc42:	bf00      	nop
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	40010000 	.word	0x40010000
 800cc54:	40000400 	.word	0x40000400
 800cc58:	40000800 	.word	0x40000800
 800cc5c:	40000c00 	.word	0x40000c00
 800cc60:	40010400 	.word	0x40010400
 800cc64:	40014000 	.word	0x40014000
 800cc68:	40014400 	.word	0x40014400
 800cc6c:	40014800 	.word	0x40014800

0800cc70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	f023 0201 	bic.w	r2, r3, #1
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	4b37      	ldr	r3, [pc, #220]	; (800cd78 <TIM_OC1_SetConfig+0x108>)
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f023 0303 	bic.w	r3, r3, #3
 800cca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f023 0302 	bic.w	r3, r3, #2
 800ccb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a2d      	ldr	r2, [pc, #180]	; (800cd7c <TIM_OC1_SetConfig+0x10c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d00f      	beq.n	800ccec <TIM_OC1_SetConfig+0x7c>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a2c      	ldr	r2, [pc, #176]	; (800cd80 <TIM_OC1_SetConfig+0x110>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d00b      	beq.n	800ccec <TIM_OC1_SetConfig+0x7c>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4a2b      	ldr	r2, [pc, #172]	; (800cd84 <TIM_OC1_SetConfig+0x114>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d007      	beq.n	800ccec <TIM_OC1_SetConfig+0x7c>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a2a      	ldr	r2, [pc, #168]	; (800cd88 <TIM_OC1_SetConfig+0x118>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d003      	beq.n	800ccec <TIM_OC1_SetConfig+0x7c>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a29      	ldr	r2, [pc, #164]	; (800cd8c <TIM_OC1_SetConfig+0x11c>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d10c      	bne.n	800cd06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f023 0308 	bic.w	r3, r3, #8
 800ccf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f023 0304 	bic.w	r3, r3, #4
 800cd04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4a1c      	ldr	r2, [pc, #112]	; (800cd7c <TIM_OC1_SetConfig+0x10c>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d00f      	beq.n	800cd2e <TIM_OC1_SetConfig+0xbe>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4a1b      	ldr	r2, [pc, #108]	; (800cd80 <TIM_OC1_SetConfig+0x110>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d00b      	beq.n	800cd2e <TIM_OC1_SetConfig+0xbe>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a1a      	ldr	r2, [pc, #104]	; (800cd84 <TIM_OC1_SetConfig+0x114>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d007      	beq.n	800cd2e <TIM_OC1_SetConfig+0xbe>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a19      	ldr	r2, [pc, #100]	; (800cd88 <TIM_OC1_SetConfig+0x118>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d003      	beq.n	800cd2e <TIM_OC1_SetConfig+0xbe>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a18      	ldr	r2, [pc, #96]	; (800cd8c <TIM_OC1_SetConfig+0x11c>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d111      	bne.n	800cd52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	695b      	ldr	r3, [r3, #20]
 800cd42:	693a      	ldr	r2, [r7, #16]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	693a      	ldr	r2, [r7, #16]
 800cd56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	621a      	str	r2, [r3, #32]
}
 800cd6c:	bf00      	nop
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	fffeff8f 	.word	0xfffeff8f
 800cd7c:	40010000 	.word	0x40010000
 800cd80:	40010400 	.word	0x40010400
 800cd84:	40014000 	.word	0x40014000
 800cd88:	40014400 	.word	0x40014400
 800cd8c:	40014800 	.word	0x40014800

0800cd90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	f023 0210 	bic.w	r2, r3, #16
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4b34      	ldr	r3, [pc, #208]	; (800ce8c <TIM_OC2_SetConfig+0xfc>)
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	021b      	lsls	r3, r3, #8
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	f023 0320 	bic.w	r3, r3, #32
 800cdda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	011b      	lsls	r3, r3, #4
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a29      	ldr	r2, [pc, #164]	; (800ce90 <TIM_OC2_SetConfig+0x100>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d003      	beq.n	800cdf8 <TIM_OC2_SetConfig+0x68>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4a28      	ldr	r2, [pc, #160]	; (800ce94 <TIM_OC2_SetConfig+0x104>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d10d      	bne.n	800ce14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	011b      	lsls	r3, r3, #4
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a1e      	ldr	r2, [pc, #120]	; (800ce90 <TIM_OC2_SetConfig+0x100>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d00f      	beq.n	800ce3c <TIM_OC2_SetConfig+0xac>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a1d      	ldr	r2, [pc, #116]	; (800ce94 <TIM_OC2_SetConfig+0x104>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00b      	beq.n	800ce3c <TIM_OC2_SetConfig+0xac>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a1c      	ldr	r2, [pc, #112]	; (800ce98 <TIM_OC2_SetConfig+0x108>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d007      	beq.n	800ce3c <TIM_OC2_SetConfig+0xac>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a1b      	ldr	r2, [pc, #108]	; (800ce9c <TIM_OC2_SetConfig+0x10c>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d003      	beq.n	800ce3c <TIM_OC2_SetConfig+0xac>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a1a      	ldr	r2, [pc, #104]	; (800cea0 <TIM_OC2_SetConfig+0x110>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d113      	bne.n	800ce64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	693a      	ldr	r2, [r7, #16]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685a      	ldr	r2, [r3, #4]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	621a      	str	r2, [r3, #32]
}
 800ce7e:	bf00      	nop
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	feff8fff 	.word	0xfeff8fff
 800ce90:	40010000 	.word	0x40010000
 800ce94:	40010400 	.word	0x40010400
 800ce98:	40014000 	.word	0x40014000
 800ce9c:	40014400 	.word	0x40014400
 800cea0:	40014800 	.word	0x40014800

0800cea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b087      	sub	sp, #28
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4b33      	ldr	r3, [pc, #204]	; (800cf9c <TIM_OC3_SetConfig+0xf8>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f023 0303 	bic.w	r3, r3, #3
 800ceda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ceec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	021b      	lsls	r3, r3, #8
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a28      	ldr	r2, [pc, #160]	; (800cfa0 <TIM_OC3_SetConfig+0xfc>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d003      	beq.n	800cf0a <TIM_OC3_SetConfig+0x66>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a27      	ldr	r2, [pc, #156]	; (800cfa4 <TIM_OC3_SetConfig+0x100>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d10d      	bne.n	800cf26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	021b      	lsls	r3, r3, #8
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a1d      	ldr	r2, [pc, #116]	; (800cfa0 <TIM_OC3_SetConfig+0xfc>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d00f      	beq.n	800cf4e <TIM_OC3_SetConfig+0xaa>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a1c      	ldr	r2, [pc, #112]	; (800cfa4 <TIM_OC3_SetConfig+0x100>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d00b      	beq.n	800cf4e <TIM_OC3_SetConfig+0xaa>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4a1b      	ldr	r2, [pc, #108]	; (800cfa8 <TIM_OC3_SetConfig+0x104>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d007      	beq.n	800cf4e <TIM_OC3_SetConfig+0xaa>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a1a      	ldr	r2, [pc, #104]	; (800cfac <TIM_OC3_SetConfig+0x108>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d003      	beq.n	800cf4e <TIM_OC3_SetConfig+0xaa>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a19      	ldr	r2, [pc, #100]	; (800cfb0 <TIM_OC3_SetConfig+0x10c>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d113      	bne.n	800cf76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	621a      	str	r2, [r3, #32]
}
 800cf90:	bf00      	nop
 800cf92:	371c      	adds	r7, #28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	fffeff8f 	.word	0xfffeff8f
 800cfa0:	40010000 	.word	0x40010000
 800cfa4:	40010400 	.word	0x40010400
 800cfa8:	40014000 	.word	0x40014000
 800cfac:	40014400 	.word	0x40014400
 800cfb0:	40014800 	.word	0x40014800

0800cfb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	4b24      	ldr	r3, [pc, #144]	; (800d070 <TIM_OC4_SetConfig+0xbc>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	021b      	lsls	r3, r3, #8
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	031b      	lsls	r3, r3, #12
 800d006:	693a      	ldr	r2, [r7, #16]
 800d008:	4313      	orrs	r3, r2
 800d00a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a19      	ldr	r2, [pc, #100]	; (800d074 <TIM_OC4_SetConfig+0xc0>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d00f      	beq.n	800d034 <TIM_OC4_SetConfig+0x80>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a18      	ldr	r2, [pc, #96]	; (800d078 <TIM_OC4_SetConfig+0xc4>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d00b      	beq.n	800d034 <TIM_OC4_SetConfig+0x80>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a17      	ldr	r2, [pc, #92]	; (800d07c <TIM_OC4_SetConfig+0xc8>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d007      	beq.n	800d034 <TIM_OC4_SetConfig+0x80>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a16      	ldr	r2, [pc, #88]	; (800d080 <TIM_OC4_SetConfig+0xcc>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d003      	beq.n	800d034 <TIM_OC4_SetConfig+0x80>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a15      	ldr	r2, [pc, #84]	; (800d084 <TIM_OC4_SetConfig+0xd0>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d109      	bne.n	800d048 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d03a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	019b      	lsls	r3, r3, #6
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	4313      	orrs	r3, r2
 800d046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	621a      	str	r2, [r3, #32]
}
 800d062:	bf00      	nop
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	feff8fff 	.word	0xfeff8fff
 800d074:	40010000 	.word	0x40010000
 800d078:	40010400 	.word	0x40010400
 800d07c:	40014000 	.word	0x40014000
 800d080:	40014400 	.word	0x40014400
 800d084:	40014800 	.word	0x40014800

0800d088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d088:	b480      	push	{r7}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4b21      	ldr	r3, [pc, #132]	; (800d138 <TIM_OC5_SetConfig+0xb0>)
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d0c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	041b      	lsls	r3, r3, #16
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a18      	ldr	r2, [pc, #96]	; (800d13c <TIM_OC5_SetConfig+0xb4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d00f      	beq.n	800d0fe <TIM_OC5_SetConfig+0x76>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a17      	ldr	r2, [pc, #92]	; (800d140 <TIM_OC5_SetConfig+0xb8>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d00b      	beq.n	800d0fe <TIM_OC5_SetConfig+0x76>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a16      	ldr	r2, [pc, #88]	; (800d144 <TIM_OC5_SetConfig+0xbc>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d007      	beq.n	800d0fe <TIM_OC5_SetConfig+0x76>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a15      	ldr	r2, [pc, #84]	; (800d148 <TIM_OC5_SetConfig+0xc0>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d003      	beq.n	800d0fe <TIM_OC5_SetConfig+0x76>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a14      	ldr	r2, [pc, #80]	; (800d14c <TIM_OC5_SetConfig+0xc4>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d109      	bne.n	800d112 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d104:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	021b      	lsls	r3, r3, #8
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	4313      	orrs	r3, r2
 800d110:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	685a      	ldr	r2, [r3, #4]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	621a      	str	r2, [r3, #32]
}
 800d12c:	bf00      	nop
 800d12e:	371c      	adds	r7, #28
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	fffeff8f 	.word	0xfffeff8f
 800d13c:	40010000 	.word	0x40010000
 800d140:	40010400 	.word	0x40010400
 800d144:	40014000 	.word	0x40014000
 800d148:	40014400 	.word	0x40014400
 800d14c:	40014800 	.word	0x40014800

0800d150 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	4b22      	ldr	r3, [pc, #136]	; (800d204 <TIM_OC6_SetConfig+0xb4>)
 800d17c:	4013      	ands	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	4313      	orrs	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	051b      	lsls	r3, r3, #20
 800d19a:	693a      	ldr	r2, [r7, #16]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a19      	ldr	r2, [pc, #100]	; (800d208 <TIM_OC6_SetConfig+0xb8>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d00f      	beq.n	800d1c8 <TIM_OC6_SetConfig+0x78>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a18      	ldr	r2, [pc, #96]	; (800d20c <TIM_OC6_SetConfig+0xbc>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d00b      	beq.n	800d1c8 <TIM_OC6_SetConfig+0x78>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a17      	ldr	r2, [pc, #92]	; (800d210 <TIM_OC6_SetConfig+0xc0>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d007      	beq.n	800d1c8 <TIM_OC6_SetConfig+0x78>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a16      	ldr	r2, [pc, #88]	; (800d214 <TIM_OC6_SetConfig+0xc4>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d003      	beq.n	800d1c8 <TIM_OC6_SetConfig+0x78>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4a15      	ldr	r2, [pc, #84]	; (800d218 <TIM_OC6_SetConfig+0xc8>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d109      	bne.n	800d1dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	029b      	lsls	r3, r3, #10
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	621a      	str	r2, [r3, #32]
}
 800d1f6:	bf00      	nop
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	feff8fff 	.word	0xfeff8fff
 800d208:	40010000 	.word	0x40010000
 800d20c:	40010400 	.word	0x40010400
 800d210:	40014000 	.word	0x40014000
 800d214:	40014400 	.word	0x40014400
 800d218:	40014800 	.word	0x40014800

0800d21c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f003 031f 	and.w	r3, r3, #31
 800d22e:	2201      	movs	r2, #1
 800d230:	fa02 f303 	lsl.w	r3, r2, r3
 800d234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6a1a      	ldr	r2, [r3, #32]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	43db      	mvns	r3, r3
 800d23e:	401a      	ands	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6a1a      	ldr	r2, [r3, #32]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	f003 031f 	and.w	r3, r3, #31
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	fa01 f303 	lsl.w	r3, r1, r3
 800d254:	431a      	orrs	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	621a      	str	r2, [r3, #32]
}
 800d25a:	bf00      	nop
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
	...

0800d268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d101      	bne.n	800d280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d27c:	2302      	movs	r3, #2
 800d27e:	e06d      	b.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a30      	ldr	r2, [pc, #192]	; (800d368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d004      	beq.n	800d2b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a2f      	ldr	r2, [pc, #188]	; (800d36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d108      	bne.n	800d2c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a20      	ldr	r2, [pc, #128]	; (800d368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d022      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f2:	d01d      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a1d      	ldr	r2, [pc, #116]	; (800d370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d018      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a1c      	ldr	r2, [pc, #112]	; (800d374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d013      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a1a      	ldr	r2, [pc, #104]	; (800d378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d00e      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a15      	ldr	r2, [pc, #84]	; (800d36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d009      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a16      	ldr	r2, [pc, #88]	; (800d37c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d004      	beq.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a15      	ldr	r2, [pc, #84]	; (800d380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d10c      	bne.n	800d34a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2201      	movs	r2, #1
 800d34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	40010000 	.word	0x40010000
 800d36c:	40010400 	.word	0x40010400
 800d370:	40000400 	.word	0x40000400
 800d374:	40000800 	.word	0x40000800
 800d378:	40000c00 	.word	0x40000c00
 800d37c:	40001800 	.word	0x40001800
 800d380:	40014000 	.word	0x40014000

0800d384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d38e:	2300      	movs	r3, #0
 800d390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d101      	bne.n	800d3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d39c:	2302      	movs	r3, #2
 800d39e:	e065      	b.n	800d46c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d406:	4313      	orrs	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	041b      	lsls	r3, r3, #16
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a16      	ldr	r2, [pc, #88]	; (800d478 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d004      	beq.n	800d42e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a14      	ldr	r2, [pc, #80]	; (800d47c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d115      	bne.n	800d45a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d438:	051b      	lsls	r3, r3, #20
 800d43a:	4313      	orrs	r3, r2
 800d43c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	69db      	ldr	r3, [r3, #28]
 800d448:	4313      	orrs	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	4313      	orrs	r3, r2
 800d458:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	40010000 	.word	0x40010000
 800d47c:	40010400 	.word	0x40010400

0800d480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e042      	b.n	800d554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d106      	bne.n	800d4e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7f4 ff97 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2224      	movs	r2, #36	; 0x24
 800d4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f022 0201 	bic.w	r2, r2, #1
 800d4fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fcd6 	bl	800deb0 <UART_SetConfig>
 800d504:	4603      	mov	r3, r0
 800d506:	2b01      	cmp	r3, #1
 800d508:	d101      	bne.n	800d50e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e022      	b.n	800d554 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 fa32 	bl	800e980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d52a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689a      	ldr	r2, [r3, #8]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d53a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f042 0201 	orr.w	r2, r2, #1
 800d54a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f001 fab9 	bl	800eac4 <UART_CheckIdleState>
 800d552:	4603      	mov	r3, r0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	; 0x28
 800d560:	af02      	add	r7, sp, #8
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	4613      	mov	r3, r2
 800d56a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d572:	2b20      	cmp	r3, #32
 800d574:	f040 8083 	bne.w	800d67e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <HAL_UART_Transmit+0x28>
 800d57e:	88fb      	ldrh	r3, [r7, #6]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d101      	bne.n	800d588 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e07b      	b.n	800d680 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d101      	bne.n	800d596 <HAL_UART_Transmit+0x3a>
 800d592:	2302      	movs	r3, #2
 800d594:	e074      	b.n	800d680 <HAL_UART_Transmit+0x124>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2221      	movs	r2, #33	; 0x21
 800d5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5ae:	f7f5 f987 	bl	80028c0 <HAL_GetTick>
 800d5b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	88fa      	ldrh	r2, [r7, #6]
 800d5b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	88fa      	ldrh	r2, [r7, #6]
 800d5c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5cc:	d108      	bne.n	800d5e0 <HAL_UART_Transmit+0x84>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d104      	bne.n	800d5e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	61bb      	str	r3, [r7, #24]
 800d5de:	e003      	b.n	800d5e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d5f0:	e02c      	b.n	800d64c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2180      	movs	r1, #128	; 0x80
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f001 faac 	bl	800eb5a <UART_WaitOnFlagUntilTimeout>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d001      	beq.n	800d60c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d608:	2303      	movs	r3, #3
 800d60a:	e039      	b.n	800d680 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10b      	bne.n	800d62a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	881b      	ldrh	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	3302      	adds	r3, #2
 800d626:	61bb      	str	r3, [r7, #24]
 800d628:	e007      	b.n	800d63a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	781a      	ldrb	r2, [r3, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	3301      	adds	r3, #1
 800d638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d640:	b29b      	uxth	r3, r3
 800d642:	3b01      	subs	r3, #1
 800d644:	b29a      	uxth	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d652:	b29b      	uxth	r3, r3
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1cc      	bne.n	800d5f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	2200      	movs	r2, #0
 800d660:	2140      	movs	r1, #64	; 0x40
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f001 fa79 	bl	800eb5a <UART_WaitOnFlagUntilTimeout>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d001      	beq.n	800d672 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e006      	b.n	800d680 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2220      	movs	r2, #32
 800d676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	e000      	b.n	800d680 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d67e:	2302      	movs	r3, #2
  }
}
 800d680:	4618      	mov	r0, r3
 800d682:	3720      	adds	r7, #32
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b08a      	sub	sp, #40	; 0x28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	4613      	mov	r3, r2
 800d694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69c:	2b20      	cmp	r3, #32
 800d69e:	d142      	bne.n	800d726 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <HAL_UART_Receive_IT+0x24>
 800d6a6:	88fb      	ldrh	r3, [r7, #6]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e03b      	b.n	800d728 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d101      	bne.n	800d6be <HAL_UART_Receive_IT+0x36>
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	e034      	b.n	800d728 <HAL_UART_Receive_IT+0xa0>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a17      	ldr	r2, [pc, #92]	; (800d730 <HAL_UART_Receive_IT+0xa8>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d01f      	beq.n	800d716 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d018      	beq.n	800d716 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	613b      	str	r3, [r7, #16]
   return(result);
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	623b      	str	r3, [r7, #32]
 800d704:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d706:	69f9      	ldr	r1, [r7, #28]
 800d708:	6a3a      	ldr	r2, [r7, #32]
 800d70a:	e841 2300 	strex	r3, r2, [r1]
 800d70e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d1e6      	bne.n	800d6e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d716:	88fb      	ldrh	r3, [r7, #6]
 800d718:	461a      	mov	r2, r3
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f001 fae5 	bl	800ecec <UART_Start_Receive_IT>
 800d722:	4603      	mov	r3, r0
 800d724:	e000      	b.n	800d728 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d726:	2302      	movs	r3, #2
  }
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3728      	adds	r7, #40	; 0x28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	58000c00 	.word	0x58000c00

0800d734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b0ba      	sub	sp, #232	; 0xe8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	69db      	ldr	r3, [r3, #28]
 800d742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d75a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d75e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d762:	4013      	ands	r3, r2
 800d764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d11b      	bne.n	800d7a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d774:	f003 0320 	and.w	r3, r3, #32
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d015      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d780:	f003 0320 	and.w	r3, r3, #32
 800d784:	2b00      	cmp	r3, #0
 800d786:	d105      	bne.n	800d794 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d78c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d790:	2b00      	cmp	r3, #0
 800d792:	d009      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 835a 	beq.w	800de52 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	4798      	blx	r3
      }
      return;
 800d7a6:	e354      	b.n	800de52 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f000 811f 	beq.w	800d9f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7b6:	4b8b      	ldr	r3, [pc, #556]	; (800d9e4 <HAL_UART_IRQHandler+0x2b0>)
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7c2:	4b89      	ldr	r3, [pc, #548]	; (800d9e8 <HAL_UART_IRQHandler+0x2b4>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 8112 	beq.w	800d9f0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d011      	beq.n	800d7fc <HAL_UART_IRQHandler+0xc8>
 800d7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00b      	beq.n	800d7fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7f2:	f043 0201 	orr.w	r2, r3, #1
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d800:	f003 0302 	and.w	r3, r3, #2
 800d804:	2b00      	cmp	r3, #0
 800d806:	d011      	beq.n	800d82c <HAL_UART_IRQHandler+0xf8>
 800d808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00b      	beq.n	800d82c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2202      	movs	r2, #2
 800d81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d822:	f043 0204 	orr.w	r2, r3, #4
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	d011      	beq.n	800d85c <HAL_UART_IRQHandler+0x128>
 800d838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00b      	beq.n	800d85c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2204      	movs	r2, #4
 800d84a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d852:	f043 0202 	orr.w	r2, r3, #2
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d860:	f003 0308 	and.w	r3, r3, #8
 800d864:	2b00      	cmp	r3, #0
 800d866:	d017      	beq.n	800d898 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d86c:	f003 0320 	and.w	r3, r3, #32
 800d870:	2b00      	cmp	r3, #0
 800d872:	d105      	bne.n	800d880 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d878:	4b5a      	ldr	r3, [pc, #360]	; (800d9e4 <HAL_UART_IRQHandler+0x2b0>)
 800d87a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00b      	beq.n	800d898 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2208      	movs	r2, #8
 800d886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d88e:	f043 0208 	orr.w	r2, r3, #8
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d012      	beq.n	800d8ca <HAL_UART_IRQHandler+0x196>
 800d8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00c      	beq.n	800d8ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8c0:	f043 0220 	orr.w	r2, r3, #32
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 82c0 	beq.w	800de56 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8da:	f003 0320 	and.w	r3, r3, #32
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d013      	beq.n	800d90a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d105      	bne.n	800d8fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d007      	beq.n	800d90a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d91e:	2b40      	cmp	r3, #64	; 0x40
 800d920:	d005      	beq.n	800d92e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d926:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d04f      	beq.n	800d9ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 fb06 	bl	800ef40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d93e:	2b40      	cmp	r3, #64	; 0x40
 800d940:	d141      	bne.n	800d9c6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	3308      	adds	r3, #8
 800d948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d950:	e853 3f00 	ldrex	r3, [r3]
 800d954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d95c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3308      	adds	r3, #8
 800d96a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d96e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d97a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d97e:	e841 2300 	strex	r3, r2, [r1]
 800d982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1d9      	bne.n	800d942 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d992:	2b00      	cmp	r3, #0
 800d994:	d013      	beq.n	800d9be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99a:	4a14      	ldr	r2, [pc, #80]	; (800d9ec <HAL_UART_IRQHandler+0x2b8>)
 800d99c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7f7 ffa6 	bl	80058f4 <HAL_DMA_Abort_IT>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d017      	beq.n	800d9de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9bc:	e00f      	b.n	800d9de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fa60 	bl	800de84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c4:	e00b      	b.n	800d9de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa5c 	bl	800de84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9cc:	e007      	b.n	800d9de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fa58 	bl	800de84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d9dc:	e23b      	b.n	800de56 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9de:	bf00      	nop
    return;
 800d9e0:	e239      	b.n	800de56 <HAL_UART_IRQHandler+0x722>
 800d9e2:	bf00      	nop
 800d9e4:	10000001 	.word	0x10000001
 800d9e8:	04000120 	.word	0x04000120
 800d9ec:	0800f00d 	.word	0x0800f00d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	f040 81ce 	bne.w	800dd96 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fe:	f003 0310 	and.w	r3, r3, #16
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 81c7 	beq.w	800dd96 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da0c:	f003 0310 	and.w	r3, r3, #16
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 81c0 	beq.w	800dd96 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2210      	movs	r2, #16
 800da1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da28:	2b40      	cmp	r3, #64	; 0x40
 800da2a:	f040 813b 	bne.w	800dca4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a8b      	ldr	r2, [pc, #556]	; (800dc64 <HAL_UART_IRQHandler+0x530>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d059      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a89      	ldr	r2, [pc, #548]	; (800dc68 <HAL_UART_IRQHandler+0x534>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d053      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a87      	ldr	r2, [pc, #540]	; (800dc6c <HAL_UART_IRQHandler+0x538>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d04d      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a85      	ldr	r2, [pc, #532]	; (800dc70 <HAL_UART_IRQHandler+0x53c>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d047      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a83      	ldr	r2, [pc, #524]	; (800dc74 <HAL_UART_IRQHandler+0x540>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d041      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a81      	ldr	r2, [pc, #516]	; (800dc78 <HAL_UART_IRQHandler+0x544>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d03b      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a7f      	ldr	r2, [pc, #508]	; (800dc7c <HAL_UART_IRQHandler+0x548>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d035      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a7d      	ldr	r2, [pc, #500]	; (800dc80 <HAL_UART_IRQHandler+0x54c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d02f      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a7b      	ldr	r2, [pc, #492]	; (800dc84 <HAL_UART_IRQHandler+0x550>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d029      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a79      	ldr	r2, [pc, #484]	; (800dc88 <HAL_UART_IRQHandler+0x554>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d023      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a77      	ldr	r2, [pc, #476]	; (800dc8c <HAL_UART_IRQHandler+0x558>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d01d      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a75      	ldr	r2, [pc, #468]	; (800dc90 <HAL_UART_IRQHandler+0x55c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d017      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a73      	ldr	r2, [pc, #460]	; (800dc94 <HAL_UART_IRQHandler+0x560>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d011      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a71      	ldr	r2, [pc, #452]	; (800dc98 <HAL_UART_IRQHandler+0x564>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d00b      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a6f      	ldr	r2, [pc, #444]	; (800dc9c <HAL_UART_IRQHandler+0x568>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d005      	beq.n	800daee <HAL_UART_IRQHandler+0x3ba>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a6d      	ldr	r2, [pc, #436]	; (800dca0 <HAL_UART_IRQHandler+0x56c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d105      	bne.n	800dafa <HAL_UART_IRQHandler+0x3c6>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	e004      	b.n	800db04 <HAL_UART_IRQHandler+0x3d0>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	b29b      	uxth	r3, r3
 800db04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f000 81a4 	beq.w	800de5a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db1c:	429a      	cmp	r2, r3
 800db1e:	f080 819c 	bcs.w	800de5a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db30:	69db      	ldr	r3, [r3, #28]
 800db32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db36:	f000 8086 	beq.w	800dc46 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800db7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1da      	bne.n	800db3a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3308      	adds	r3, #8
 800db8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db8e:	e853 3f00 	ldrex	r3, [r3]
 800db92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db96:	f023 0301 	bic.w	r3, r3, #1
 800db9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3308      	adds	r3, #8
 800dba4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dba8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dbac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dbb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dbb4:	e841 2300 	strex	r3, r2, [r1]
 800dbb8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dbba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1e1      	bne.n	800db84 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbca:	e853 3f00 	ldrex	r3, [r3]
 800dbce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dbd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3308      	adds	r3, #8
 800dbe0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dbe4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbe6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbec:	e841 2300 	strex	r3, r2, [r1]
 800dbf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dbf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1e3      	bne.n	800dbc0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2220      	movs	r2, #32
 800dbfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc16:	f023 0310 	bic.w	r3, r3, #16
 800dc1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	461a      	mov	r2, r3
 800dc24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc28:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc30:	e841 2300 	strex	r3, r2, [r1]
 800dc34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1e4      	bne.n	800dc06 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7f7 fb39 	bl	80052b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f91c 	bl	800de98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc60:	e0fb      	b.n	800de5a <HAL_UART_IRQHandler+0x726>
 800dc62:	bf00      	nop
 800dc64:	40020010 	.word	0x40020010
 800dc68:	40020028 	.word	0x40020028
 800dc6c:	40020040 	.word	0x40020040
 800dc70:	40020058 	.word	0x40020058
 800dc74:	40020070 	.word	0x40020070
 800dc78:	40020088 	.word	0x40020088
 800dc7c:	400200a0 	.word	0x400200a0
 800dc80:	400200b8 	.word	0x400200b8
 800dc84:	40020410 	.word	0x40020410
 800dc88:	40020428 	.word	0x40020428
 800dc8c:	40020440 	.word	0x40020440
 800dc90:	40020458 	.word	0x40020458
 800dc94:	40020470 	.word	0x40020470
 800dc98:	40020488 	.word	0x40020488
 800dc9c:	400204a0 	.word	0x400204a0
 800dca0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 80cc 	beq.w	800de5e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dcc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f000 80c7 	beq.w	800de5e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd8:	e853 3f00 	ldrex	r3, [r3]
 800dcdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcf2:	647b      	str	r3, [r7, #68]	; 0x44
 800dcf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dcf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcfa:	e841 2300 	strex	r3, r2, [r1]
 800dcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1e4      	bne.n	800dcd0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	e853 3f00 	ldrex	r3, [r3]
 800dd14:	623b      	str	r3, [r7, #32]
   return(result);
 800dd16:	6a3a      	ldr	r2, [r7, #32]
 800dd18:	4b54      	ldr	r3, [pc, #336]	; (800de6c <HAL_UART_IRQHandler+0x738>)
 800dd1a:	4013      	ands	r3, r2
 800dd1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3308      	adds	r3, #8
 800dd26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd2a:	633a      	str	r2, [r7, #48]	; 0x30
 800dd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd32:	e841 2300 	strex	r3, r2, [r1]
 800dd36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1e3      	bne.n	800dd06 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2220      	movs	r2, #32
 800dd42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	e853 3f00 	ldrex	r3, [r3]
 800dd5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f023 0310 	bic.w	r3, r3, #16
 800dd66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd78:	69b9      	ldr	r1, [r7, #24]
 800dd7a:	69fa      	ldr	r2, [r7, #28]
 800dd7c:	e841 2300 	strex	r3, r2, [r1]
 800dd80:	617b      	str	r3, [r7, #20]
   return(result);
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1e4      	bne.n	800dd52 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f882 	bl	800de98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd94:	e063      	b.n	800de5e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00e      	beq.n	800ddc0 <HAL_UART_IRQHandler+0x68c>
 800dda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dda6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d008      	beq.n	800ddc0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ddb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f001 fdc5 	bl	800f948 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddbe:	e051      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ddc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d014      	beq.n	800ddf6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ddcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d105      	bne.n	800dde4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ddd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d008      	beq.n	800ddf6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d03a      	beq.n	800de62 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	4798      	blx	r3
    }
    return;
 800ddf4:	e035      	b.n	800de62 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ddf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <HAL_UART_IRQHandler+0x6e2>
 800de02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d003      	beq.n	800de16 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f001 f912 	bl	800f038 <UART_EndTransmit_IT>
    return;
 800de14:	e026      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <HAL_UART_IRQHandler+0x702>
 800de22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d003      	beq.n	800de36 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f001 fd9e 	bl	800f970 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de34:	e016      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d010      	beq.n	800de64 <HAL_UART_IRQHandler+0x730>
 800de42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de46:	2b00      	cmp	r3, #0
 800de48:	da0c      	bge.n	800de64 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f001 fd86 	bl	800f95c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de50:	e008      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
      return;
 800de52:	bf00      	nop
 800de54:	e006      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
    return;
 800de56:	bf00      	nop
 800de58:	e004      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
      return;
 800de5a:	bf00      	nop
 800de5c:	e002      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
      return;
 800de5e:	bf00      	nop
 800de60:	e000      	b.n	800de64 <HAL_UART_IRQHandler+0x730>
    return;
 800de62:	bf00      	nop
  }
}
 800de64:	37e8      	adds	r7, #232	; 0xe8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	effffffe 	.word	0xeffffffe

0800de70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800deb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800deb4:	b092      	sub	sp, #72	; 0x48
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800deba:	2300      	movs	r3, #0
 800debc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	689a      	ldr	r2, [r3, #8]
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	431a      	orrs	r2, r3
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	431a      	orrs	r2, r3
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	4bbe      	ldr	r3, [pc, #760]	; (800e1d8 <UART_SetConfig+0x328>)
 800dee0:	4013      	ands	r3, r2
 800dee2:	697a      	ldr	r2, [r7, #20]
 800dee4:	6812      	ldr	r2, [r2, #0]
 800dee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dee8:	430b      	orrs	r3, r1
 800deea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	68da      	ldr	r2, [r3, #12]
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	430a      	orrs	r2, r1
 800df00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	699b      	ldr	r3, [r3, #24]
 800df06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4ab3      	ldr	r2, [pc, #716]	; (800e1dc <UART_SetConfig+0x32c>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d004      	beq.n	800df1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df18:	4313      	orrs	r3, r2
 800df1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689a      	ldr	r2, [r3, #8]
 800df22:	4baf      	ldr	r3, [pc, #700]	; (800e1e0 <UART_SetConfig+0x330>)
 800df24:	4013      	ands	r3, r2
 800df26:	697a      	ldr	r2, [r7, #20]
 800df28:	6812      	ldr	r2, [r2, #0]
 800df2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df2c:	430b      	orrs	r3, r1
 800df2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df36:	f023 010f 	bic.w	r1, r3, #15
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	430a      	orrs	r2, r1
 800df44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4aa6      	ldr	r2, [pc, #664]	; (800e1e4 <UART_SetConfig+0x334>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d177      	bne.n	800e040 <UART_SetConfig+0x190>
 800df50:	4ba5      	ldr	r3, [pc, #660]	; (800e1e8 <UART_SetConfig+0x338>)
 800df52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df58:	2b28      	cmp	r3, #40	; 0x28
 800df5a:	d86d      	bhi.n	800e038 <UART_SetConfig+0x188>
 800df5c:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <UART_SetConfig+0xb4>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800e009 	.word	0x0800e009
 800df68:	0800e039 	.word	0x0800e039
 800df6c:	0800e039 	.word	0x0800e039
 800df70:	0800e039 	.word	0x0800e039
 800df74:	0800e039 	.word	0x0800e039
 800df78:	0800e039 	.word	0x0800e039
 800df7c:	0800e039 	.word	0x0800e039
 800df80:	0800e039 	.word	0x0800e039
 800df84:	0800e011 	.word	0x0800e011
 800df88:	0800e039 	.word	0x0800e039
 800df8c:	0800e039 	.word	0x0800e039
 800df90:	0800e039 	.word	0x0800e039
 800df94:	0800e039 	.word	0x0800e039
 800df98:	0800e039 	.word	0x0800e039
 800df9c:	0800e039 	.word	0x0800e039
 800dfa0:	0800e039 	.word	0x0800e039
 800dfa4:	0800e019 	.word	0x0800e019
 800dfa8:	0800e039 	.word	0x0800e039
 800dfac:	0800e039 	.word	0x0800e039
 800dfb0:	0800e039 	.word	0x0800e039
 800dfb4:	0800e039 	.word	0x0800e039
 800dfb8:	0800e039 	.word	0x0800e039
 800dfbc:	0800e039 	.word	0x0800e039
 800dfc0:	0800e039 	.word	0x0800e039
 800dfc4:	0800e021 	.word	0x0800e021
 800dfc8:	0800e039 	.word	0x0800e039
 800dfcc:	0800e039 	.word	0x0800e039
 800dfd0:	0800e039 	.word	0x0800e039
 800dfd4:	0800e039 	.word	0x0800e039
 800dfd8:	0800e039 	.word	0x0800e039
 800dfdc:	0800e039 	.word	0x0800e039
 800dfe0:	0800e039 	.word	0x0800e039
 800dfe4:	0800e029 	.word	0x0800e029
 800dfe8:	0800e039 	.word	0x0800e039
 800dfec:	0800e039 	.word	0x0800e039
 800dff0:	0800e039 	.word	0x0800e039
 800dff4:	0800e039 	.word	0x0800e039
 800dff8:	0800e039 	.word	0x0800e039
 800dffc:	0800e039 	.word	0x0800e039
 800e000:	0800e039 	.word	0x0800e039
 800e004:	0800e031 	.word	0x0800e031
 800e008:	2301      	movs	r3, #1
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e222      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e010:	2304      	movs	r3, #4
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e21e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e018:	2308      	movs	r3, #8
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e21a      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e020:	2310      	movs	r3, #16
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e026:	e216      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e028:	2320      	movs	r3, #32
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02e:	e212      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e030:	2340      	movs	r3, #64	; 0x40
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e20e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e038:	2380      	movs	r3, #128	; 0x80
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e20a      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a69      	ldr	r2, [pc, #420]	; (800e1ec <UART_SetConfig+0x33c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d130      	bne.n	800e0ac <UART_SetConfig+0x1fc>
 800e04a:	4b67      	ldr	r3, [pc, #412]	; (800e1e8 <UART_SetConfig+0x338>)
 800e04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e04e:	f003 0307 	and.w	r3, r3, #7
 800e052:	2b05      	cmp	r3, #5
 800e054:	d826      	bhi.n	800e0a4 <UART_SetConfig+0x1f4>
 800e056:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <UART_SetConfig+0x1ac>)
 800e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05c:	0800e075 	.word	0x0800e075
 800e060:	0800e07d 	.word	0x0800e07d
 800e064:	0800e085 	.word	0x0800e085
 800e068:	0800e08d 	.word	0x0800e08d
 800e06c:	0800e095 	.word	0x0800e095
 800e070:	0800e09d 	.word	0x0800e09d
 800e074:	2300      	movs	r3, #0
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e1ec      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e07c:	2304      	movs	r3, #4
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e1e8      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e084:	2308      	movs	r3, #8
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e1e4      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e08c:	2310      	movs	r3, #16
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e092:	e1e0      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e094:	2320      	movs	r3, #32
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09a:	e1dc      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e09c:	2340      	movs	r3, #64	; 0x40
 800e09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a2:	e1d8      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e0a4:	2380      	movs	r3, #128	; 0x80
 800e0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0aa:	e1d4      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a4f      	ldr	r2, [pc, #316]	; (800e1f0 <UART_SetConfig+0x340>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d130      	bne.n	800e118 <UART_SetConfig+0x268>
 800e0b6:	4b4c      	ldr	r3, [pc, #304]	; (800e1e8 <UART_SetConfig+0x338>)
 800e0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ba:	f003 0307 	and.w	r3, r3, #7
 800e0be:	2b05      	cmp	r3, #5
 800e0c0:	d826      	bhi.n	800e110 <UART_SetConfig+0x260>
 800e0c2:	a201      	add	r2, pc, #4	; (adr r2, 800e0c8 <UART_SetConfig+0x218>)
 800e0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c8:	0800e0e1 	.word	0x0800e0e1
 800e0cc:	0800e0e9 	.word	0x0800e0e9
 800e0d0:	0800e0f1 	.word	0x0800e0f1
 800e0d4:	0800e0f9 	.word	0x0800e0f9
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e109 	.word	0x0800e109
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e1b6      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e0e8:	2304      	movs	r3, #4
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e1b2      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e0f0:	2308      	movs	r3, #8
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e1ae      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e0f8:	2310      	movs	r3, #16
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e1aa      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e100:	2320      	movs	r3, #32
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e1a6      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e108:	2340      	movs	r3, #64	; 0x40
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e1a2      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e110:	2380      	movs	r3, #128	; 0x80
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e19e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a35      	ldr	r2, [pc, #212]	; (800e1f4 <UART_SetConfig+0x344>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d130      	bne.n	800e184 <UART_SetConfig+0x2d4>
 800e122:	4b31      	ldr	r3, [pc, #196]	; (800e1e8 <UART_SetConfig+0x338>)
 800e124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e126:	f003 0307 	and.w	r3, r3, #7
 800e12a:	2b05      	cmp	r3, #5
 800e12c:	d826      	bhi.n	800e17c <UART_SetConfig+0x2cc>
 800e12e:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <UART_SetConfig+0x284>)
 800e130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e134:	0800e14d 	.word	0x0800e14d
 800e138:	0800e155 	.word	0x0800e155
 800e13c:	0800e15d 	.word	0x0800e15d
 800e140:	0800e165 	.word	0x0800e165
 800e144:	0800e16d 	.word	0x0800e16d
 800e148:	0800e175 	.word	0x0800e175
 800e14c:	2300      	movs	r3, #0
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e180      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e154:	2304      	movs	r3, #4
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e17c      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e15c:	2308      	movs	r3, #8
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e178      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e164:	2310      	movs	r3, #16
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e174      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e16c:	2320      	movs	r3, #32
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e170      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e174:	2340      	movs	r3, #64	; 0x40
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e16c      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e17c:	2380      	movs	r3, #128	; 0x80
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e168      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a1b      	ldr	r2, [pc, #108]	; (800e1f8 <UART_SetConfig+0x348>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d142      	bne.n	800e214 <UART_SetConfig+0x364>
 800e18e:	4b16      	ldr	r3, [pc, #88]	; (800e1e8 <UART_SetConfig+0x338>)
 800e190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b05      	cmp	r3, #5
 800e198:	d838      	bhi.n	800e20c <UART_SetConfig+0x35c>
 800e19a:	a201      	add	r2, pc, #4	; (adr r2, 800e1a0 <UART_SetConfig+0x2f0>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e1b9 	.word	0x0800e1b9
 800e1a4:	0800e1c1 	.word	0x0800e1c1
 800e1a8:	0800e1c9 	.word	0x0800e1c9
 800e1ac:	0800e1d1 	.word	0x0800e1d1
 800e1b0:	0800e1fd 	.word	0x0800e1fd
 800e1b4:	0800e205 	.word	0x0800e205
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1be:	e14a      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c6:	e146      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e1c8:	2308      	movs	r3, #8
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e142      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e1d0:	2310      	movs	r3, #16
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e13e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e1d8:	cfff69f3 	.word	0xcfff69f3
 800e1dc:	58000c00 	.word	0x58000c00
 800e1e0:	11fff4ff 	.word	0x11fff4ff
 800e1e4:	40011000 	.word	0x40011000
 800e1e8:	58024400 	.word	0x58024400
 800e1ec:	40004400 	.word	0x40004400
 800e1f0:	40004800 	.word	0x40004800
 800e1f4:	40004c00 	.word	0x40004c00
 800e1f8:	40005000 	.word	0x40005000
 800e1fc:	2320      	movs	r3, #32
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e128      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e204:	2340      	movs	r3, #64	; 0x40
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e124      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e20c:	2380      	movs	r3, #128	; 0x80
 800e20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e212:	e120      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4acb      	ldr	r2, [pc, #812]	; (800e548 <UART_SetConfig+0x698>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d176      	bne.n	800e30c <UART_SetConfig+0x45c>
 800e21e:	4bcb      	ldr	r3, [pc, #812]	; (800e54c <UART_SetConfig+0x69c>)
 800e220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e226:	2b28      	cmp	r3, #40	; 0x28
 800e228:	d86c      	bhi.n	800e304 <UART_SetConfig+0x454>
 800e22a:	a201      	add	r2, pc, #4	; (adr r2, 800e230 <UART_SetConfig+0x380>)
 800e22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e230:	0800e2d5 	.word	0x0800e2d5
 800e234:	0800e305 	.word	0x0800e305
 800e238:	0800e305 	.word	0x0800e305
 800e23c:	0800e305 	.word	0x0800e305
 800e240:	0800e305 	.word	0x0800e305
 800e244:	0800e305 	.word	0x0800e305
 800e248:	0800e305 	.word	0x0800e305
 800e24c:	0800e305 	.word	0x0800e305
 800e250:	0800e2dd 	.word	0x0800e2dd
 800e254:	0800e305 	.word	0x0800e305
 800e258:	0800e305 	.word	0x0800e305
 800e25c:	0800e305 	.word	0x0800e305
 800e260:	0800e305 	.word	0x0800e305
 800e264:	0800e305 	.word	0x0800e305
 800e268:	0800e305 	.word	0x0800e305
 800e26c:	0800e305 	.word	0x0800e305
 800e270:	0800e2e5 	.word	0x0800e2e5
 800e274:	0800e305 	.word	0x0800e305
 800e278:	0800e305 	.word	0x0800e305
 800e27c:	0800e305 	.word	0x0800e305
 800e280:	0800e305 	.word	0x0800e305
 800e284:	0800e305 	.word	0x0800e305
 800e288:	0800e305 	.word	0x0800e305
 800e28c:	0800e305 	.word	0x0800e305
 800e290:	0800e2ed 	.word	0x0800e2ed
 800e294:	0800e305 	.word	0x0800e305
 800e298:	0800e305 	.word	0x0800e305
 800e29c:	0800e305 	.word	0x0800e305
 800e2a0:	0800e305 	.word	0x0800e305
 800e2a4:	0800e305 	.word	0x0800e305
 800e2a8:	0800e305 	.word	0x0800e305
 800e2ac:	0800e305 	.word	0x0800e305
 800e2b0:	0800e2f5 	.word	0x0800e2f5
 800e2b4:	0800e305 	.word	0x0800e305
 800e2b8:	0800e305 	.word	0x0800e305
 800e2bc:	0800e305 	.word	0x0800e305
 800e2c0:	0800e305 	.word	0x0800e305
 800e2c4:	0800e305 	.word	0x0800e305
 800e2c8:	0800e305 	.word	0x0800e305
 800e2cc:	0800e305 	.word	0x0800e305
 800e2d0:	0800e2fd 	.word	0x0800e2fd
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2da:	e0bc      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e2dc:	2304      	movs	r3, #4
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e2:	e0b8      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e2e4:	2308      	movs	r3, #8
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e0b4      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e2ec:	2310      	movs	r3, #16
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e0b0      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e2f4:	2320      	movs	r3, #32
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e0ac      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e2fc:	2340      	movs	r3, #64	; 0x40
 800e2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e302:	e0a8      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e304:	2380      	movs	r3, #128	; 0x80
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e0a4      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a8f      	ldr	r2, [pc, #572]	; (800e550 <UART_SetConfig+0x6a0>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d130      	bne.n	800e378 <UART_SetConfig+0x4c8>
 800e316:	4b8d      	ldr	r3, [pc, #564]	; (800e54c <UART_SetConfig+0x69c>)
 800e318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e31a:	f003 0307 	and.w	r3, r3, #7
 800e31e:	2b05      	cmp	r3, #5
 800e320:	d826      	bhi.n	800e370 <UART_SetConfig+0x4c0>
 800e322:	a201      	add	r2, pc, #4	; (adr r2, 800e328 <UART_SetConfig+0x478>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e341 	.word	0x0800e341
 800e32c:	0800e349 	.word	0x0800e349
 800e330:	0800e351 	.word	0x0800e351
 800e334:	0800e359 	.word	0x0800e359
 800e338:	0800e361 	.word	0x0800e361
 800e33c:	0800e369 	.word	0x0800e369
 800e340:	2300      	movs	r3, #0
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e086      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e348:	2304      	movs	r3, #4
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e082      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e350:	2308      	movs	r3, #8
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e07e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e358:	2310      	movs	r3, #16
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e07a      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e360:	2320      	movs	r3, #32
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e076      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e072      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e370:	2380      	movs	r3, #128	; 0x80
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e06e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a75      	ldr	r2, [pc, #468]	; (800e554 <UART_SetConfig+0x6a4>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d130      	bne.n	800e3e4 <UART_SetConfig+0x534>
 800e382:	4b72      	ldr	r3, [pc, #456]	; (800e54c <UART_SetConfig+0x69c>)
 800e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	d826      	bhi.n	800e3dc <UART_SetConfig+0x52c>
 800e38e:	a201      	add	r2, pc, #4	; (adr r2, 800e394 <UART_SetConfig+0x4e4>)
 800e390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e394:	0800e3ad 	.word	0x0800e3ad
 800e398:	0800e3b5 	.word	0x0800e3b5
 800e39c:	0800e3bd 	.word	0x0800e3bd
 800e3a0:	0800e3c5 	.word	0x0800e3c5
 800e3a4:	0800e3cd 	.word	0x0800e3cd
 800e3a8:	0800e3d5 	.word	0x0800e3d5
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e050      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3b4:	2304      	movs	r3, #4
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e04c      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3bc:	2308      	movs	r3, #8
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e048      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3c4:	2310      	movs	r3, #16
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e044      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3cc:	2320      	movs	r3, #32
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e040      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3d4:	2340      	movs	r3, #64	; 0x40
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e03c      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3dc:	2380      	movs	r3, #128	; 0x80
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e038      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a5b      	ldr	r2, [pc, #364]	; (800e558 <UART_SetConfig+0x6a8>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d130      	bne.n	800e450 <UART_SetConfig+0x5a0>
 800e3ee:	4b57      	ldr	r3, [pc, #348]	; (800e54c <UART_SetConfig+0x69c>)
 800e3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3f2:	f003 0307 	and.w	r3, r3, #7
 800e3f6:	2b05      	cmp	r3, #5
 800e3f8:	d826      	bhi.n	800e448 <UART_SetConfig+0x598>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <UART_SetConfig+0x550>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e419 	.word	0x0800e419
 800e404:	0800e421 	.word	0x0800e421
 800e408:	0800e429 	.word	0x0800e429
 800e40c:	0800e431 	.word	0x0800e431
 800e410:	0800e439 	.word	0x0800e439
 800e414:	0800e441 	.word	0x0800e441
 800e418:	2302      	movs	r3, #2
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e01a      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e420:	2304      	movs	r3, #4
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e016      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e428:	2308      	movs	r3, #8
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e012      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e430:	2310      	movs	r3, #16
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e00e      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e438:	2320      	movs	r3, #32
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e00a      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e440:	2340      	movs	r3, #64	; 0x40
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e006      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e448:	2380      	movs	r3, #128	; 0x80
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e002      	b.n	800e456 <UART_SetConfig+0x5a6>
 800e450:	2380      	movs	r3, #128	; 0x80
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a3f      	ldr	r2, [pc, #252]	; (800e558 <UART_SetConfig+0x6a8>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	f040 80f8 	bne.w	800e652 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e466:	2b20      	cmp	r3, #32
 800e468:	dc46      	bgt.n	800e4f8 <UART_SetConfig+0x648>
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	f2c0 8082 	blt.w	800e574 <UART_SetConfig+0x6c4>
 800e470:	3b02      	subs	r3, #2
 800e472:	2b1e      	cmp	r3, #30
 800e474:	d87e      	bhi.n	800e574 <UART_SetConfig+0x6c4>
 800e476:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <UART_SetConfig+0x5cc>)
 800e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47c:	0800e4ff 	.word	0x0800e4ff
 800e480:	0800e575 	.word	0x0800e575
 800e484:	0800e507 	.word	0x0800e507
 800e488:	0800e575 	.word	0x0800e575
 800e48c:	0800e575 	.word	0x0800e575
 800e490:	0800e575 	.word	0x0800e575
 800e494:	0800e517 	.word	0x0800e517
 800e498:	0800e575 	.word	0x0800e575
 800e49c:	0800e575 	.word	0x0800e575
 800e4a0:	0800e575 	.word	0x0800e575
 800e4a4:	0800e575 	.word	0x0800e575
 800e4a8:	0800e575 	.word	0x0800e575
 800e4ac:	0800e575 	.word	0x0800e575
 800e4b0:	0800e575 	.word	0x0800e575
 800e4b4:	0800e527 	.word	0x0800e527
 800e4b8:	0800e575 	.word	0x0800e575
 800e4bc:	0800e575 	.word	0x0800e575
 800e4c0:	0800e575 	.word	0x0800e575
 800e4c4:	0800e575 	.word	0x0800e575
 800e4c8:	0800e575 	.word	0x0800e575
 800e4cc:	0800e575 	.word	0x0800e575
 800e4d0:	0800e575 	.word	0x0800e575
 800e4d4:	0800e575 	.word	0x0800e575
 800e4d8:	0800e575 	.word	0x0800e575
 800e4dc:	0800e575 	.word	0x0800e575
 800e4e0:	0800e575 	.word	0x0800e575
 800e4e4:	0800e575 	.word	0x0800e575
 800e4e8:	0800e575 	.word	0x0800e575
 800e4ec:	0800e575 	.word	0x0800e575
 800e4f0:	0800e575 	.word	0x0800e575
 800e4f4:	0800e567 	.word	0x0800e567
 800e4f8:	2b40      	cmp	r3, #64	; 0x40
 800e4fa:	d037      	beq.n	800e56c <UART_SetConfig+0x6bc>
 800e4fc:	e03a      	b.n	800e574 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4fe:	f7fc fb05 	bl	800ab0c <HAL_RCCEx_GetD3PCLK1Freq>
 800e502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e504:	e03c      	b.n	800e580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fc fb14 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e514:	e034      	b.n	800e580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e516:	f107 0318 	add.w	r3, r7, #24
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fc fc60 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e524:	e02c      	b.n	800e580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <UART_SetConfig+0x69c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f003 0320 	and.w	r3, r3, #32
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d016      	beq.n	800e560 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e532:	4b06      	ldr	r3, [pc, #24]	; (800e54c <UART_SetConfig+0x69c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	08db      	lsrs	r3, r3, #3
 800e538:	f003 0303 	and.w	r3, r3, #3
 800e53c:	4a07      	ldr	r2, [pc, #28]	; (800e55c <UART_SetConfig+0x6ac>)
 800e53e:	fa22 f303 	lsr.w	r3, r2, r3
 800e542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e544:	e01c      	b.n	800e580 <UART_SetConfig+0x6d0>
 800e546:	bf00      	nop
 800e548:	40011400 	.word	0x40011400
 800e54c:	58024400 	.word	0x58024400
 800e550:	40007800 	.word	0x40007800
 800e554:	40007c00 	.word	0x40007c00
 800e558:	58000c00 	.word	0x58000c00
 800e55c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e560:	4b9d      	ldr	r3, [pc, #628]	; (800e7d8 <UART_SetConfig+0x928>)
 800e562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e564:	e00c      	b.n	800e580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e566:	4b9d      	ldr	r3, [pc, #628]	; (800e7dc <UART_SetConfig+0x92c>)
 800e568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e56a:	e009      	b.n	800e580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e56c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e572:	e005      	b.n	800e580 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e574:	2300      	movs	r3, #0
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e57e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 81de 	beq.w	800e944 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58c:	4a94      	ldr	r2, [pc, #592]	; (800e7e0 <UART_SetConfig+0x930>)
 800e58e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e592:	461a      	mov	r2, r3
 800e594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e596:	fbb3 f3f2 	udiv	r3, r3, r2
 800e59a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	4413      	add	r3, r2
 800e5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d305      	bcc.n	800e5b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d903      	bls.n	800e5c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e5be:	e1c1      	b.n	800e944 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	60bb      	str	r3, [r7, #8]
 800e5c6:	60fa      	str	r2, [r7, #12]
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5cc:	4a84      	ldr	r2, [pc, #528]	; (800e7e0 <UART_SetConfig+0x930>)
 800e5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	607a      	str	r2, [r7, #4]
 800e5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5e2:	f7f1 fe79 	bl	80002d8 <__aeabi_uldivmod>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	f04f 0200 	mov.w	r2, #0
 800e5f2:	f04f 0300 	mov.w	r3, #0
 800e5f6:	020b      	lsls	r3, r1, #8
 800e5f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5fc:	0202      	lsls	r2, r0, #8
 800e5fe:	6979      	ldr	r1, [r7, #20]
 800e600:	6849      	ldr	r1, [r1, #4]
 800e602:	0849      	lsrs	r1, r1, #1
 800e604:	2000      	movs	r0, #0
 800e606:	460c      	mov	r4, r1
 800e608:	4605      	mov	r5, r0
 800e60a:	eb12 0804 	adds.w	r8, r2, r4
 800e60e:	eb43 0905 	adc.w	r9, r3, r5
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	469a      	mov	sl, r3
 800e61a:	4693      	mov	fp, r2
 800e61c:	4652      	mov	r2, sl
 800e61e:	465b      	mov	r3, fp
 800e620:	4640      	mov	r0, r8
 800e622:	4649      	mov	r1, r9
 800e624:	f7f1 fe58 	bl	80002d8 <__aeabi_uldivmod>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4613      	mov	r3, r2
 800e62e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e636:	d308      	bcc.n	800e64a <UART_SetConfig+0x79a>
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e63e:	d204      	bcs.n	800e64a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e646:	60da      	str	r2, [r3, #12]
 800e648:	e17c      	b.n	800e944 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e650:	e178      	b.n	800e944 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	69db      	ldr	r3, [r3, #28]
 800e656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e65a:	f040 80c5 	bne.w	800e7e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e65e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e662:	2b20      	cmp	r3, #32
 800e664:	dc48      	bgt.n	800e6f8 <UART_SetConfig+0x848>
 800e666:	2b00      	cmp	r3, #0
 800e668:	db7b      	blt.n	800e762 <UART_SetConfig+0x8b2>
 800e66a:	2b20      	cmp	r3, #32
 800e66c:	d879      	bhi.n	800e762 <UART_SetConfig+0x8b2>
 800e66e:	a201      	add	r2, pc, #4	; (adr r2, 800e674 <UART_SetConfig+0x7c4>)
 800e670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e674:	0800e6ff 	.word	0x0800e6ff
 800e678:	0800e707 	.word	0x0800e707
 800e67c:	0800e763 	.word	0x0800e763
 800e680:	0800e763 	.word	0x0800e763
 800e684:	0800e70f 	.word	0x0800e70f
 800e688:	0800e763 	.word	0x0800e763
 800e68c:	0800e763 	.word	0x0800e763
 800e690:	0800e763 	.word	0x0800e763
 800e694:	0800e71f 	.word	0x0800e71f
 800e698:	0800e763 	.word	0x0800e763
 800e69c:	0800e763 	.word	0x0800e763
 800e6a0:	0800e763 	.word	0x0800e763
 800e6a4:	0800e763 	.word	0x0800e763
 800e6a8:	0800e763 	.word	0x0800e763
 800e6ac:	0800e763 	.word	0x0800e763
 800e6b0:	0800e763 	.word	0x0800e763
 800e6b4:	0800e72f 	.word	0x0800e72f
 800e6b8:	0800e763 	.word	0x0800e763
 800e6bc:	0800e763 	.word	0x0800e763
 800e6c0:	0800e763 	.word	0x0800e763
 800e6c4:	0800e763 	.word	0x0800e763
 800e6c8:	0800e763 	.word	0x0800e763
 800e6cc:	0800e763 	.word	0x0800e763
 800e6d0:	0800e763 	.word	0x0800e763
 800e6d4:	0800e763 	.word	0x0800e763
 800e6d8:	0800e763 	.word	0x0800e763
 800e6dc:	0800e763 	.word	0x0800e763
 800e6e0:	0800e763 	.word	0x0800e763
 800e6e4:	0800e763 	.word	0x0800e763
 800e6e8:	0800e763 	.word	0x0800e763
 800e6ec:	0800e763 	.word	0x0800e763
 800e6f0:	0800e763 	.word	0x0800e763
 800e6f4:	0800e755 	.word	0x0800e755
 800e6f8:	2b40      	cmp	r3, #64	; 0x40
 800e6fa:	d02e      	beq.n	800e75a <UART_SetConfig+0x8aa>
 800e6fc:	e031      	b.n	800e762 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6fe:	f7fa fdc1 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 800e702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e704:	e033      	b.n	800e76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e706:	f7fa fdd3 	bl	80092b0 <HAL_RCC_GetPCLK2Freq>
 800e70a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e70c:	e02f      	b.n	800e76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e70e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e712:	4618      	mov	r0, r3
 800e714:	f7fc fa10 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e71c:	e027      	b.n	800e76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e71e:	f107 0318 	add.w	r3, r7, #24
 800e722:	4618      	mov	r0, r3
 800e724:	f7fc fb5c 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e72c:	e01f      	b.n	800e76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e72e:	4b2d      	ldr	r3, [pc, #180]	; (800e7e4 <UART_SetConfig+0x934>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f003 0320 	and.w	r3, r3, #32
 800e736:	2b00      	cmp	r3, #0
 800e738:	d009      	beq.n	800e74e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e73a:	4b2a      	ldr	r3, [pc, #168]	; (800e7e4 <UART_SetConfig+0x934>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	08db      	lsrs	r3, r3, #3
 800e740:	f003 0303 	and.w	r3, r3, #3
 800e744:	4a24      	ldr	r2, [pc, #144]	; (800e7d8 <UART_SetConfig+0x928>)
 800e746:	fa22 f303 	lsr.w	r3, r2, r3
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e74c:	e00f      	b.n	800e76e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e74e:	4b22      	ldr	r3, [pc, #136]	; (800e7d8 <UART_SetConfig+0x928>)
 800e750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e752:	e00c      	b.n	800e76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e754:	4b21      	ldr	r3, [pc, #132]	; (800e7dc <UART_SetConfig+0x92c>)
 800e756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e758:	e009      	b.n	800e76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e760:	e005      	b.n	800e76e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e762:	2300      	movs	r3, #0
 800e764:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e76c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e770:	2b00      	cmp	r3, #0
 800e772:	f000 80e7 	beq.w	800e944 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77a:	4a19      	ldr	r2, [pc, #100]	; (800e7e0 <UART_SetConfig+0x930>)
 800e77c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e780:	461a      	mov	r2, r3
 800e782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e784:	fbb3 f3f2 	udiv	r3, r3, r2
 800e788:	005a      	lsls	r2, r3, #1
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	085b      	lsrs	r3, r3, #1
 800e790:	441a      	add	r2, r3
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	fbb2 f3f3 	udiv	r3, r2, r3
 800e79a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	2b0f      	cmp	r3, #15
 800e7a0:	d916      	bls.n	800e7d0 <UART_SetConfig+0x920>
 800e7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7a8:	d212      	bcs.n	800e7d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f023 030f 	bic.w	r3, r3, #15
 800e7b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	085b      	lsrs	r3, r3, #1
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	f003 0307 	and.w	r3, r3, #7
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e7cc:	60da      	str	r2, [r3, #12]
 800e7ce:	e0b9      	b.n	800e944 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7d6:	e0b5      	b.n	800e944 <UART_SetConfig+0xa94>
 800e7d8:	03d09000 	.word	0x03d09000
 800e7dc:	003d0900 	.word	0x003d0900
 800e7e0:	0800fe70 	.word	0x0800fe70
 800e7e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7ec:	2b20      	cmp	r3, #32
 800e7ee:	dc49      	bgt.n	800e884 <UART_SetConfig+0x9d4>
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	db7c      	blt.n	800e8ee <UART_SetConfig+0xa3e>
 800e7f4:	2b20      	cmp	r3, #32
 800e7f6:	d87a      	bhi.n	800e8ee <UART_SetConfig+0xa3e>
 800e7f8:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <UART_SetConfig+0x950>)
 800e7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fe:	bf00      	nop
 800e800:	0800e88b 	.word	0x0800e88b
 800e804:	0800e893 	.word	0x0800e893
 800e808:	0800e8ef 	.word	0x0800e8ef
 800e80c:	0800e8ef 	.word	0x0800e8ef
 800e810:	0800e89b 	.word	0x0800e89b
 800e814:	0800e8ef 	.word	0x0800e8ef
 800e818:	0800e8ef 	.word	0x0800e8ef
 800e81c:	0800e8ef 	.word	0x0800e8ef
 800e820:	0800e8ab 	.word	0x0800e8ab
 800e824:	0800e8ef 	.word	0x0800e8ef
 800e828:	0800e8ef 	.word	0x0800e8ef
 800e82c:	0800e8ef 	.word	0x0800e8ef
 800e830:	0800e8ef 	.word	0x0800e8ef
 800e834:	0800e8ef 	.word	0x0800e8ef
 800e838:	0800e8ef 	.word	0x0800e8ef
 800e83c:	0800e8ef 	.word	0x0800e8ef
 800e840:	0800e8bb 	.word	0x0800e8bb
 800e844:	0800e8ef 	.word	0x0800e8ef
 800e848:	0800e8ef 	.word	0x0800e8ef
 800e84c:	0800e8ef 	.word	0x0800e8ef
 800e850:	0800e8ef 	.word	0x0800e8ef
 800e854:	0800e8ef 	.word	0x0800e8ef
 800e858:	0800e8ef 	.word	0x0800e8ef
 800e85c:	0800e8ef 	.word	0x0800e8ef
 800e860:	0800e8ef 	.word	0x0800e8ef
 800e864:	0800e8ef 	.word	0x0800e8ef
 800e868:	0800e8ef 	.word	0x0800e8ef
 800e86c:	0800e8ef 	.word	0x0800e8ef
 800e870:	0800e8ef 	.word	0x0800e8ef
 800e874:	0800e8ef 	.word	0x0800e8ef
 800e878:	0800e8ef 	.word	0x0800e8ef
 800e87c:	0800e8ef 	.word	0x0800e8ef
 800e880:	0800e8e1 	.word	0x0800e8e1
 800e884:	2b40      	cmp	r3, #64	; 0x40
 800e886:	d02e      	beq.n	800e8e6 <UART_SetConfig+0xa36>
 800e888:	e031      	b.n	800e8ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e88a:	f7fa fcfb 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 800e88e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e890:	e033      	b.n	800e8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e892:	f7fa fd0d 	bl	80092b0 <HAL_RCC_GetPCLK2Freq>
 800e896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e898:	e02f      	b.n	800e8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fc f94a 	bl	800ab38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a8:	e027      	b.n	800e8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8aa:	f107 0318 	add.w	r3, r7, #24
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fc fa96 	bl	800ade0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b8:	e01f      	b.n	800e8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8ba:	4b2d      	ldr	r3, [pc, #180]	; (800e970 <UART_SetConfig+0xac0>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 0320 	and.w	r3, r3, #32
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d009      	beq.n	800e8da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8c6:	4b2a      	ldr	r3, [pc, #168]	; (800e970 <UART_SetConfig+0xac0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	08db      	lsrs	r3, r3, #3
 800e8cc:	f003 0303 	and.w	r3, r3, #3
 800e8d0:	4a28      	ldr	r2, [pc, #160]	; (800e974 <UART_SetConfig+0xac4>)
 800e8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8d8:	e00f      	b.n	800e8fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e8da:	4b26      	ldr	r3, [pc, #152]	; (800e974 <UART_SetConfig+0xac4>)
 800e8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8de:	e00c      	b.n	800e8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8e0:	4b25      	ldr	r3, [pc, #148]	; (800e978 <UART_SetConfig+0xac8>)
 800e8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e4:	e009      	b.n	800e8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ec:	e005      	b.n	800e8fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8f8:	bf00      	nop
    }

    if (pclk != 0U)
 800e8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d021      	beq.n	800e944 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e904:	4a1d      	ldr	r2, [pc, #116]	; (800e97c <UART_SetConfig+0xacc>)
 800e906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e90a:	461a      	mov	r2, r3
 800e90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	085b      	lsrs	r3, r3, #1
 800e918:	441a      	add	r2, r3
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e922:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	2b0f      	cmp	r3, #15
 800e928:	d909      	bls.n	800e93e <UART_SetConfig+0xa8e>
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e930:	d205      	bcs.n	800e93e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e934:	b29a      	uxth	r2, r3
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	60da      	str	r2, [r3, #12]
 800e93c:	e002      	b.n	800e944 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	2201      	movs	r2, #1
 800e948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2201      	movs	r2, #1
 800e950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	2200      	movs	r2, #0
 800e958:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	2200      	movs	r2, #0
 800e95e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e960:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e964:	4618      	mov	r0, r3
 800e966:	3748      	adds	r7, #72	; 0x48
 800e968:	46bd      	mov	sp, r7
 800e96a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e96e:	bf00      	nop
 800e970:	58024400 	.word	0x58024400
 800e974:	03d09000 	.word	0x03d09000
 800e978:	003d0900 	.word	0x003d0900
 800e97c:	0800fe70 	.word	0x0800fe70

0800e980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00a      	beq.n	800e9aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ae:	f003 0302 	and.w	r3, r3, #2
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00a      	beq.n	800e9cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	430a      	orrs	r2, r1
 800e9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00a      	beq.n	800e9ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	430a      	orrs	r2, r1
 800e9ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f2:	f003 0308 	and.w	r3, r3, #8
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00a      	beq.n	800ea10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	430a      	orrs	r2, r1
 800ea0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00a      	beq.n	800ea32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	430a      	orrs	r2, r1
 800ea30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea36:	f003 0320 	and.w	r3, r3, #32
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00a      	beq.n	800ea54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	430a      	orrs	r2, r1
 800ea52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d01a      	beq.n	800ea96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	430a      	orrs	r2, r1
 800ea74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea7e:	d10a      	bne.n	800ea96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	430a      	orrs	r2, r1
 800ea94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00a      	beq.n	800eab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	430a      	orrs	r2, r1
 800eab6:	605a      	str	r2, [r3, #4]
  }
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af02      	add	r7, sp, #8
 800eaca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ead4:	f7f3 fef4 	bl	80028c0 <HAL_GetTick>
 800ead8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f003 0308 	and.w	r3, r3, #8
 800eae4:	2b08      	cmp	r3, #8
 800eae6:	d10e      	bne.n	800eb06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f82f 	bl	800eb5a <UART_WaitOnFlagUntilTimeout>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb02:	2303      	movs	r3, #3
 800eb04:	e025      	b.n	800eb52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f003 0304 	and.w	r3, r3, #4
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d10e      	bne.n	800eb32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 f819 	bl	800eb5a <UART_WaitOnFlagUntilTimeout>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e00f      	b.n	800eb52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2220      	movs	r2, #32
 800eb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2220      	movs	r2, #32
 800eb3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b09c      	sub	sp, #112	; 0x70
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	60f8      	str	r0, [r7, #12]
 800eb62:	60b9      	str	r1, [r7, #8]
 800eb64:	603b      	str	r3, [r7, #0]
 800eb66:	4613      	mov	r3, r2
 800eb68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb6a:	e0a9      	b.n	800ecc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb72:	f000 80a5 	beq.w	800ecc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb76:	f7f3 fea3 	bl	80028c0 <HAL_GetTick>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d302      	bcc.n	800eb8c <UART_WaitOnFlagUntilTimeout+0x32>
 800eb86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d140      	bne.n	800ec0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb94:	e853 3f00 	ldrex	r3, [r3]
 800eb98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eba0:	667b      	str	r3, [r7, #100]	; 0x64
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebb2:	e841 2300 	strex	r3, r2, [r1]
 800ebb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ebb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1e6      	bne.n	800eb8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc8:	e853 3f00 	ldrex	r3, [r3]
 800ebcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd0:	f023 0301 	bic.w	r3, r3, #1
 800ebd4:	663b      	str	r3, [r7, #96]	; 0x60
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	3308      	adds	r3, #8
 800ebdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebde:	64ba      	str	r2, [r7, #72]	; 0x48
 800ebe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebe6:	e841 2300 	strex	r3, r2, [r1]
 800ebea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ebec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e5      	bne.n	800ebbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2220      	movs	r2, #32
 800ebf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2220      	movs	r2, #32
 800ebfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	e069      	b.n	800ece2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f003 0304 	and.w	r3, r3, #4
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d051      	beq.n	800ecc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	69db      	ldr	r3, [r3, #28]
 800ec22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec2a:	d149      	bne.n	800ecc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	e853 3f00 	ldrex	r3, [r3]
 800ec42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	461a      	mov	r2, r3
 800ec52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec54:	637b      	str	r3, [r7, #52]	; 0x34
 800ec56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec5c:	e841 2300 	strex	r3, r2, [r1]
 800ec60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1e6      	bne.n	800ec36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	e853 3f00 	ldrex	r3, [r3]
 800ec76:	613b      	str	r3, [r7, #16]
   return(result);
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	f023 0301 	bic.w	r3, r3, #1
 800ec7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3308      	adds	r3, #8
 800ec86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec88:	623a      	str	r2, [r7, #32]
 800ec8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8c:	69f9      	ldr	r1, [r7, #28]
 800ec8e:	6a3a      	ldr	r2, [r7, #32]
 800ec90:	e841 2300 	strex	r3, r2, [r1]
 800ec94:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1e5      	bne.n	800ec68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2220      	movs	r2, #32
 800eca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2220      	movs	r2, #32
 800eca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2220      	movs	r2, #32
 800ecb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e010      	b.n	800ece2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	69da      	ldr	r2, [r3, #28]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	4013      	ands	r3, r2
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	bf0c      	ite	eq
 800ecd0:	2301      	moveq	r3, #1
 800ecd2:	2300      	movne	r3, #0
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	79fb      	ldrb	r3, [r7, #7]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	f43f af46 	beq.w	800eb6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3770      	adds	r7, #112	; 0x70
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
	...

0800ecec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b0a3      	sub	sp, #140	; 0x8c
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	88fa      	ldrh	r2, [r7, #6]
 800ed04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	88fa      	ldrh	r2, [r7, #6]
 800ed0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2200      	movs	r2, #0
 800ed14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed1e:	d10e      	bne.n	800ed3e <UART_Start_Receive_IT+0x52>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d105      	bne.n	800ed34 <UART_Start_Receive_IT+0x48>
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed32:	e02d      	b.n	800ed90 <UART_Start_Receive_IT+0xa4>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	22ff      	movs	r2, #255	; 0xff
 800ed38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed3c:	e028      	b.n	800ed90 <UART_Start_Receive_IT+0xa4>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10d      	bne.n	800ed62 <UART_Start_Receive_IT+0x76>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d104      	bne.n	800ed58 <UART_Start_Receive_IT+0x6c>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	22ff      	movs	r2, #255	; 0xff
 800ed52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed56:	e01b      	b.n	800ed90 <UART_Start_Receive_IT+0xa4>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	227f      	movs	r2, #127	; 0x7f
 800ed5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed60:	e016      	b.n	800ed90 <UART_Start_Receive_IT+0xa4>
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed6a:	d10d      	bne.n	800ed88 <UART_Start_Receive_IT+0x9c>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d104      	bne.n	800ed7e <UART_Start_Receive_IT+0x92>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	227f      	movs	r2, #127	; 0x7f
 800ed78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed7c:	e008      	b.n	800ed90 <UART_Start_Receive_IT+0xa4>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	223f      	movs	r2, #63	; 0x3f
 800ed82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed86:	e003      	b.n	800ed90 <UART_Start_Receive_IT+0xa4>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2222      	movs	r2, #34	; 0x22
 800ed9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3308      	adds	r3, #8
 800eda6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edaa:	e853 3f00 	ldrex	r3, [r3]
 800edae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800edb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edb2:	f043 0301 	orr.w	r3, r3, #1
 800edb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	3308      	adds	r3, #8
 800edc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800edc4:	673a      	str	r2, [r7, #112]	; 0x70
 800edc6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800edca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edcc:	e841 2300 	strex	r3, r2, [r1]
 800edd0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800edd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1e3      	bne.n	800eda0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ede0:	d153      	bne.n	800ee8a <UART_Start_Receive_IT+0x19e>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ede8:	88fa      	ldrh	r2, [r7, #6]
 800edea:	429a      	cmp	r2, r3
 800edec:	d34d      	bcc.n	800ee8a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edf6:	d107      	bne.n	800ee08 <UART_Start_Receive_IT+0x11c>
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d103      	bne.n	800ee08 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	4a4b      	ldr	r2, [pc, #300]	; (800ef30 <UART_Start_Receive_IT+0x244>)
 800ee04:	671a      	str	r2, [r3, #112]	; 0x70
 800ee06:	e002      	b.n	800ee0e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	4a4a      	ldr	r2, [pc, #296]	; (800ef34 <UART_Start_Receive_IT+0x248>)
 800ee0c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	691b      	ldr	r3, [r3, #16]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d01a      	beq.n	800ee54 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee26:	e853 3f00 	ldrex	r3, [r3]
 800ee2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee40:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee42:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee48:	e841 2300 	strex	r3, r2, [r1]
 800ee4c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1e4      	bne.n	800ee1e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3308      	adds	r3, #8
 800ee5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	3308      	adds	r3, #8
 800ee72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ee74:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee7c:	e841 2300 	strex	r3, r2, [r1]
 800ee80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e5      	bne.n	800ee54 <UART_Start_Receive_IT+0x168>
 800ee88:	e04a      	b.n	800ef20 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee92:	d107      	bne.n	800eea4 <UART_Start_Receive_IT+0x1b8>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	691b      	ldr	r3, [r3, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d103      	bne.n	800eea4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	4a26      	ldr	r2, [pc, #152]	; (800ef38 <UART_Start_Receive_IT+0x24c>)
 800eea0:	671a      	str	r2, [r3, #112]	; 0x70
 800eea2:	e002      	b.n	800eeaa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	4a25      	ldr	r2, [pc, #148]	; (800ef3c <UART_Start_Receive_IT+0x250>)
 800eea8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d019      	beq.n	800eeee <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	e853 3f00 	ldrex	r3, [r3]
 800eec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eece:	677b      	str	r3, [r7, #116]	; 0x74
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eed8:	637b      	str	r3, [r7, #52]	; 0x34
 800eeda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eedc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eee0:	e841 2300 	strex	r3, r2, [r1]
 800eee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1e6      	bne.n	800eeba <UART_Start_Receive_IT+0x1ce>
 800eeec:	e018      	b.n	800ef20 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	e853 3f00 	ldrex	r3, [r3]
 800eefa:	613b      	str	r3, [r7, #16]
   return(result);
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	f043 0320 	orr.w	r3, r3, #32
 800ef02:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	461a      	mov	r2, r3
 800ef0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0c:	623b      	str	r3, [r7, #32]
 800ef0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef10:	69f9      	ldr	r1, [r7, #28]
 800ef12:	6a3a      	ldr	r2, [r7, #32]
 800ef14:	e841 2300 	strex	r3, r2, [r1]
 800ef18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1e6      	bne.n	800eeee <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	378c      	adds	r7, #140	; 0x8c
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	0800f649 	.word	0x0800f649
 800ef34:	0800f351 	.word	0x0800f351
 800ef38:	0800f1ef 	.word	0x0800f1ef
 800ef3c:	0800f08f 	.word	0x0800f08f

0800ef40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b095      	sub	sp, #84	; 0x54
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef66:	643b      	str	r3, [r7, #64]	; 0x40
 800ef68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef6e:	e841 2300 	strex	r3, r2, [r1]
 800ef72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1e6      	bne.n	800ef48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	3308      	adds	r3, #8
 800ef80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	e853 3f00 	ldrex	r3, [r3]
 800ef88:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef8a:	69fa      	ldr	r2, [r7, #28]
 800ef8c:	4b1e      	ldr	r3, [pc, #120]	; (800f008 <UART_EndRxTransfer+0xc8>)
 800ef8e:	4013      	ands	r3, r2
 800ef90:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3308      	adds	r3, #8
 800ef98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efa2:	e841 2300 	strex	r3, r2, [r1]
 800efa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1e5      	bne.n	800ef7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d118      	bne.n	800efe8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	e853 3f00 	ldrex	r3, [r3]
 800efc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	f023 0310 	bic.w	r3, r3, #16
 800efca:	647b      	str	r3, [r7, #68]	; 0x44
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	461a      	mov	r2, r3
 800efd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efd4:	61bb      	str	r3, [r7, #24]
 800efd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd8:	6979      	ldr	r1, [r7, #20]
 800efda:	69ba      	ldr	r2, [r7, #24]
 800efdc:	e841 2300 	strex	r3, r2, [r1]
 800efe0:	613b      	str	r3, [r7, #16]
   return(result);
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1e6      	bne.n	800efb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2220      	movs	r2, #32
 800efec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800effc:	bf00      	nop
 800effe:	3754      	adds	r7, #84	; 0x54
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	effffffe 	.word	0xeffffffe

0800f00c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2200      	movs	r2, #0
 800f026:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f7fe ff2a 	bl	800de84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f030:	bf00      	nop
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b088      	sub	sp, #32
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	e853 3f00 	ldrex	r3, [r3]
 800f04c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f054:	61fb      	str	r3, [r7, #28]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	461a      	mov	r2, r3
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	61bb      	str	r3, [r7, #24]
 800f060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f062:	6979      	ldr	r1, [r7, #20]
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	e841 2300 	strex	r3, r2, [r1]
 800f06a:	613b      	str	r3, [r7, #16]
   return(result);
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1e6      	bne.n	800f040 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2220      	movs	r2, #32
 800f076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7fe fef5 	bl	800de70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f086:	bf00      	nop
 800f088:	3720      	adds	r7, #32
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b096      	sub	sp, #88	; 0x58
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f09c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0a6:	2b22      	cmp	r3, #34	; 0x22
 800f0a8:	f040 8095 	bne.w	800f1d6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f0ba:	b2d9      	uxtb	r1, r3
 800f0bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0c6:	400a      	ands	r2, r1
 800f0c8:	b2d2      	uxtb	r2, r2
 800f0ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d178      	bne.n	800f1e6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fc:	e853 3f00 	ldrex	r3, [r3]
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f108:	653b      	str	r3, [r7, #80]	; 0x50
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f112:	647b      	str	r3, [r7, #68]	; 0x44
 800f114:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f11a:	e841 2300 	strex	r3, r2, [r1]
 800f11e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1e6      	bne.n	800f0f4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	3308      	adds	r3, #8
 800f12c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	e853 3f00 	ldrex	r3, [r3]
 800f134:	623b      	str	r3, [r7, #32]
   return(result);
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	f023 0301 	bic.w	r3, r3, #1
 800f13c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	3308      	adds	r3, #8
 800f144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f146:	633a      	str	r2, [r7, #48]	; 0x30
 800f148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f14c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f14e:	e841 2300 	strex	r3, r2, [r1]
 800f152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	2b00      	cmp	r3, #0
 800f158:	d1e5      	bne.n	800f126 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2220      	movs	r2, #32
 800f15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d12e      	bne.n	800f1ce <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	e853 3f00 	ldrex	r3, [r3]
 800f182:	60fb      	str	r3, [r7, #12]
   return(result);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f023 0310 	bic.w	r3, r3, #16
 800f18a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	461a      	mov	r2, r3
 800f192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f194:	61fb      	str	r3, [r7, #28]
 800f196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f198:	69b9      	ldr	r1, [r7, #24]
 800f19a:	69fa      	ldr	r2, [r7, #28]
 800f19c:	e841 2300 	strex	r3, r2, [r1]
 800f1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d1e6      	bne.n	800f176 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	f003 0310 	and.w	r3, r3, #16
 800f1b2:	2b10      	cmp	r3, #16
 800f1b4:	d103      	bne.n	800f1be <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2210      	movs	r2, #16
 800f1bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7fe fe66 	bl	800de98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1cc:	e00b      	b.n	800f1e6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7f1 fdfa 	bl	8000dc8 <HAL_UART_RxCpltCallback>
}
 800f1d4:	e007      	b.n	800f1e6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	699a      	ldr	r2, [r3, #24]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f042 0208 	orr.w	r2, r2, #8
 800f1e4:	619a      	str	r2, [r3, #24]
}
 800f1e6:	bf00      	nop
 800f1e8:	3758      	adds	r7, #88	; 0x58
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b096      	sub	sp, #88	; 0x58
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f206:	2b22      	cmp	r3, #34	; 0x22
 800f208:	f040 8095 	bne.w	800f336 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f21a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f21c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f220:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f224:	4013      	ands	r3, r2
 800f226:	b29a      	uxth	r2, r3
 800f228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f22a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f230:	1c9a      	adds	r2, r3, #2
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	3b01      	subs	r3, #1
 800f240:	b29a      	uxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f24e:	b29b      	uxth	r3, r3
 800f250:	2b00      	cmp	r3, #0
 800f252:	d178      	bne.n	800f346 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f25c:	e853 3f00 	ldrex	r3, [r3]
 800f260:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	461a      	mov	r2, r3
 800f270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f272:	643b      	str	r3, [r7, #64]	; 0x40
 800f274:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f276:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f27a:	e841 2300 	strex	r3, r2, [r1]
 800f27e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1e6      	bne.n	800f254 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3308      	adds	r3, #8
 800f28c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28e:	6a3b      	ldr	r3, [r7, #32]
 800f290:	e853 3f00 	ldrex	r3, [r3]
 800f294:	61fb      	str	r3, [r7, #28]
   return(result);
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	f023 0301 	bic.w	r3, r3, #1
 800f29c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3308      	adds	r3, #8
 800f2a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e5      	bne.n	800f286 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2220      	movs	r2, #32
 800f2be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d12e      	bne.n	800f32e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	e853 3f00 	ldrex	r3, [r3]
 800f2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	f023 0310 	bic.w	r3, r3, #16
 800f2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2f4:	61bb      	str	r3, [r7, #24]
 800f2f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f8:	6979      	ldr	r1, [r7, #20]
 800f2fa:	69ba      	ldr	r2, [r7, #24]
 800f2fc:	e841 2300 	strex	r3, r2, [r1]
 800f300:	613b      	str	r3, [r7, #16]
   return(result);
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d1e6      	bne.n	800f2d6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	69db      	ldr	r3, [r3, #28]
 800f30e:	f003 0310 	and.w	r3, r3, #16
 800f312:	2b10      	cmp	r3, #16
 800f314:	d103      	bne.n	800f31e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2210      	movs	r2, #16
 800f31c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7fe fdb6 	bl	800de98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f32c:	e00b      	b.n	800f346 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f7f1 fd4a 	bl	8000dc8 <HAL_UART_RxCpltCallback>
}
 800f334:	e007      	b.n	800f346 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	699a      	ldr	r2, [r3, #24]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f042 0208 	orr.w	r2, r2, #8
 800f344:	619a      	str	r2, [r3, #24]
}
 800f346:	bf00      	nop
 800f348:	3758      	adds	r7, #88	; 0x58
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b0a6      	sub	sp, #152	; 0x98
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f35e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	69db      	ldr	r3, [r3, #28]
 800f368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f386:	2b22      	cmp	r3, #34	; 0x22
 800f388:	f040 814d 	bne.w	800f626 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f392:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f396:	e0f4      	b.n	800f582 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f3a2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f3a6:	b2d9      	uxtb	r1, r3
 800f3a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b2:	400a      	ands	r2, r1
 800f3b4:	b2d2      	uxtb	r2, r2
 800f3b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3bc:	1c5a      	adds	r2, r3, #1
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	b29a      	uxth	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	69db      	ldr	r3, [r3, #28]
 800f3da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3e2:	f003 0307 	and.w	r3, r3, #7
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d053      	beq.n	800f492 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d011      	beq.n	800f41a <UART_RxISR_8BIT_FIFOEN+0xca>
 800f3f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00b      	beq.n	800f41a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2201      	movs	r2, #1
 800f408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f410:	f043 0201 	orr.w	r2, r3, #1
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f41a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f41e:	f003 0302 	and.w	r3, r3, #2
 800f422:	2b00      	cmp	r3, #0
 800f424:	d011      	beq.n	800f44a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00b      	beq.n	800f44a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2202      	movs	r2, #2
 800f438:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f440:	f043 0204 	orr.w	r2, r3, #4
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f44a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f44e:	f003 0304 	and.w	r3, r3, #4
 800f452:	2b00      	cmp	r3, #0
 800f454:	d011      	beq.n	800f47a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f45a:	f003 0301 	and.w	r3, r3, #1
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00b      	beq.n	800f47a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2204      	movs	r2, #4
 800f468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f470:	f043 0202 	orr.w	r2, r3, #2
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f480:	2b00      	cmp	r3, #0
 800f482:	d006      	beq.n	800f492 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7fe fcfd 	bl	800de84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f498:	b29b      	uxth	r3, r3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d171      	bne.n	800f582 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4a6:	e853 3f00 	ldrex	r3, [r3]
 800f4aa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f4ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4c2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f4c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4c8:	e841 2300 	strex	r3, r2, [r1]
 800f4cc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f4ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1e4      	bne.n	800f49e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	3308      	adds	r3, #8
 800f4da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4de:	e853 3f00 	ldrex	r3, [r3]
 800f4e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4e6:	4b56      	ldr	r3, [pc, #344]	; (800f640 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	3308      	adds	r3, #8
 800f4f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4f4:	657a      	str	r2, [r7, #84]	; 0x54
 800f4f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4fc:	e841 2300 	strex	r3, r2, [r1]
 800f500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e5      	bne.n	800f4d4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2220      	movs	r2, #32
 800f50c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d12e      	bne.n	800f57c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52c:	e853 3f00 	ldrex	r3, [r3]
 800f530:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	f023 0310 	bic.w	r3, r3, #16
 800f538:	67bb      	str	r3, [r7, #120]	; 0x78
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	461a      	mov	r2, r3
 800f540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f542:	643b      	str	r3, [r7, #64]	; 0x40
 800f544:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f546:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e6      	bne.n	800f524 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	69db      	ldr	r3, [r3, #28]
 800f55c:	f003 0310 	and.w	r3, r3, #16
 800f560:	2b10      	cmp	r3, #16
 800f562:	d103      	bne.n	800f56c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2210      	movs	r2, #16
 800f56a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f572:	4619      	mov	r1, r3
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7fe fc8f 	bl	800de98 <HAL_UARTEx_RxEventCallback>
 800f57a:	e002      	b.n	800f582 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7f1 fc23 	bl	8000dc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f582:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f586:	2b00      	cmp	r3, #0
 800f588:	d006      	beq.n	800f598 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f58a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f58e:	f003 0320 	and.w	r3, r3, #32
 800f592:	2b00      	cmp	r3, #0
 800f594:	f47f af00 	bne.w	800f398 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f59e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f5a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d045      	beq.n	800f636 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d23e      	bcs.n	800f636 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	3308      	adds	r3, #8
 800f5be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	e853 3f00 	ldrex	r3, [r3]
 800f5c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5ce:	673b      	str	r3, [r7, #112]	; 0x70
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	3308      	adds	r3, #8
 800f5d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f5d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5e0:	e841 2300 	strex	r3, r2, [r1]
 800f5e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1e5      	bne.n	800f5b8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a15      	ldr	r2, [pc, #84]	; (800f644 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f5f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	e853 3f00 	ldrex	r3, [r3]
 800f5fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	f043 0320 	orr.w	r3, r3, #32
 800f606:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f610:	61bb      	str	r3, [r7, #24]
 800f612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	6979      	ldr	r1, [r7, #20]
 800f616:	69ba      	ldr	r2, [r7, #24]
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	613b      	str	r3, [r7, #16]
   return(result);
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e6      	bne.n	800f5f2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f624:	e007      	b.n	800f636 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	699a      	ldr	r2, [r3, #24]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f042 0208 	orr.w	r2, r2, #8
 800f634:	619a      	str	r2, [r3, #24]
}
 800f636:	bf00      	nop
 800f638:	3798      	adds	r7, #152	; 0x98
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	effffffe 	.word	0xeffffffe
 800f644:	0800f08f 	.word	0x0800f08f

0800f648 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b0a8      	sub	sp, #160	; 0xa0
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f656:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	69db      	ldr	r3, [r3, #28]
 800f660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f67e:	2b22      	cmp	r3, #34	; 0x22
 800f680:	f040 8151 	bne.w	800f926 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f68a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f68e:	e0f8      	b.n	800f882 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f69e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f6a2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f6a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6b8:	1c9a      	adds	r2, r3, #2
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	69db      	ldr	r3, [r3, #28]
 800f6d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f6da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6de:	f003 0307 	and.w	r3, r3, #7
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d053      	beq.n	800f78e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6ea:	f003 0301 	and.w	r3, r3, #1
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d011      	beq.n	800f716 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f6f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00b      	beq.n	800f716 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2201      	movs	r2, #1
 800f704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f70c:	f043 0201 	orr.w	r2, r3, #1
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f71a:	f003 0302 	and.w	r3, r3, #2
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d011      	beq.n	800f746 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f726:	f003 0301 	and.w	r3, r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00b      	beq.n	800f746 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2202      	movs	r2, #2
 800f734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f73c:	f043 0204 	orr.w	r2, r3, #4
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f74a:	f003 0304 	and.w	r3, r3, #4
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d011      	beq.n	800f776 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f756:	f003 0301 	and.w	r3, r3, #1
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00b      	beq.n	800f776 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2204      	movs	r2, #4
 800f764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f76c:	f043 0202 	orr.w	r2, r3, #2
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d006      	beq.n	800f78e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7fe fb7f 	bl	800de84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f794:	b29b      	uxth	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d173      	bne.n	800f882 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7a2:	e853 3f00 	ldrex	r3, [r3]
 800f7a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7be:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7c4:	e841 2300 	strex	r3, r2, [r1]
 800f7c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1e4      	bne.n	800f79a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3308      	adds	r3, #8
 800f7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7da:	e853 3f00 	ldrex	r3, [r3]
 800f7de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7e2:	4b57      	ldr	r3, [pc, #348]	; (800f940 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3308      	adds	r3, #8
 800f7f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7f4:	65ba      	str	r2, [r7, #88]	; 0x58
 800f7f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7fc:	e841 2300 	strex	r3, r2, [r1]
 800f800:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1e3      	bne.n	800f7d0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2220      	movs	r2, #32
 800f80c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d12e      	bne.n	800f87c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2200      	movs	r2, #0
 800f822:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	e853 3f00 	ldrex	r3, [r3]
 800f830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	f023 0310 	bic.w	r3, r3, #16
 800f838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f842:	647b      	str	r3, [r7, #68]	; 0x44
 800f844:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84a:	e841 2300 	strex	r3, r2, [r1]
 800f84e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1e6      	bne.n	800f824 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	69db      	ldr	r3, [r3, #28]
 800f85c:	f003 0310 	and.w	r3, r3, #16
 800f860:	2b10      	cmp	r3, #16
 800f862:	d103      	bne.n	800f86c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2210      	movs	r2, #16
 800f86a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f872:	4619      	mov	r1, r3
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7fe fb0f 	bl	800de98 <HAL_UARTEx_RxEventCallback>
 800f87a:	e002      	b.n	800f882 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7f1 faa3 	bl	8000dc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f882:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f886:	2b00      	cmp	r3, #0
 800f888:	d006      	beq.n	800f898 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f88a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f88e:	f003 0320 	and.w	r3, r3, #32
 800f892:	2b00      	cmp	r3, #0
 800f894:	f47f aefc 	bne.w	800f690 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f89e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f8a2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d045      	beq.n	800f936 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8b0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d23e      	bcs.n	800f936 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3308      	adds	r3, #8
 800f8be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c2:	e853 3f00 	ldrex	r3, [r3]
 800f8c6:	623b      	str	r3, [r7, #32]
   return(result);
 800f8c8:	6a3b      	ldr	r3, [r7, #32]
 800f8ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f8ce:	677b      	str	r3, [r7, #116]	; 0x74
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3308      	adds	r3, #8
 800f8d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f8d8:	633a      	str	r2, [r7, #48]	; 0x30
 800f8da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e0:	e841 2300 	strex	r3, r2, [r1]
 800f8e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1e5      	bne.n	800f8b8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a15      	ldr	r2, [pc, #84]	; (800f944 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f8f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	e853 3f00 	ldrex	r3, [r3]
 800f8fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f043 0320 	orr.w	r3, r3, #32
 800f906:	673b      	str	r3, [r7, #112]	; 0x70
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	461a      	mov	r2, r3
 800f90e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f910:	61fb      	str	r3, [r7, #28]
 800f912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f914:	69b9      	ldr	r1, [r7, #24]
 800f916:	69fa      	ldr	r2, [r7, #28]
 800f918:	e841 2300 	strex	r3, r2, [r1]
 800f91c:	617b      	str	r3, [r7, #20]
   return(result);
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1e6      	bne.n	800f8f2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f924:	e007      	b.n	800f936 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	699a      	ldr	r2, [r3, #24]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f042 0208 	orr.w	r2, r2, #8
 800f934:	619a      	str	r2, [r3, #24]
}
 800f936:	bf00      	nop
 800f938:	37a0      	adds	r7, #160	; 0xa0
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	effffffe 	.word	0xeffffffe
 800f944:	0800f1ef 	.word	0x0800f1ef

0800f948 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f978:	bf00      	nop
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f984:	b480      	push	{r7}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f992:	2b01      	cmp	r3, #1
 800f994:	d101      	bne.n	800f99a <HAL_UARTEx_DisableFifoMode+0x16>
 800f996:	2302      	movs	r3, #2
 800f998:	e027      	b.n	800f9ea <HAL_UARTEx_DisableFifoMode+0x66>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2224      	movs	r2, #36	; 0x24
 800f9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f022 0201 	bic.w	r2, r2, #1
 800f9c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f9c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2220      	movs	r2, #32
 800f9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
 800f9fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d101      	bne.n	800fa0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa0a:	2302      	movs	r3, #2
 800fa0c:	e02d      	b.n	800fa6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2201      	movs	r2, #1
 800fa12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2224      	movs	r2, #36	; 0x24
 800fa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f022 0201 	bic.w	r2, r2, #1
 800fa34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	430a      	orrs	r2, r1
 800fa48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f850 	bl	800faf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2220      	movs	r2, #32
 800fa5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d101      	bne.n	800fa8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa86:	2302      	movs	r3, #2
 800fa88:	e02d      	b.n	800fae6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2224      	movs	r2, #36	; 0x24
 800fa96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f022 0201 	bic.w	r2, r2, #1
 800fab0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	683a      	ldr	r2, [r7, #0]
 800fac2:	430a      	orrs	r2, r1
 800fac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f812 	bl	800faf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2220      	movs	r2, #32
 800fad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
	...

0800faf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d108      	bne.n	800fb12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2201      	movs	r2, #1
 800fb04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb10:	e031      	b.n	800fb76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb12:	2310      	movs	r3, #16
 800fb14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb16:	2310      	movs	r3, #16
 800fb18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	0e5b      	lsrs	r3, r3, #25
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	f003 0307 	and.w	r3, r3, #7
 800fb28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	0f5b      	lsrs	r3, r3, #29
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	f003 0307 	and.w	r3, r3, #7
 800fb38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb3a:	7bbb      	ldrb	r3, [r7, #14]
 800fb3c:	7b3a      	ldrb	r2, [r7, #12]
 800fb3e:	4911      	ldr	r1, [pc, #68]	; (800fb84 <UARTEx_SetNbDataToProcess+0x94>)
 800fb40:	5c8a      	ldrb	r2, [r1, r2]
 800fb42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb46:	7b3a      	ldrb	r2, [r7, #12]
 800fb48:	490f      	ldr	r1, [pc, #60]	; (800fb88 <UARTEx_SetNbDataToProcess+0x98>)
 800fb4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
 800fb5a:	7b7a      	ldrb	r2, [r7, #13]
 800fb5c:	4909      	ldr	r1, [pc, #36]	; (800fb84 <UARTEx_SetNbDataToProcess+0x94>)
 800fb5e:	5c8a      	ldrb	r2, [r1, r2]
 800fb60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb64:	7b7a      	ldrb	r2, [r7, #13]
 800fb66:	4908      	ldr	r1, [pc, #32]	; (800fb88 <UARTEx_SetNbDataToProcess+0x98>)
 800fb68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fb76:	bf00      	nop
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	0800fe88 	.word	0x0800fe88
 800fb88:	0800fe90 	.word	0x0800fe90

0800fb8c <__errno>:
 800fb8c:	4b01      	ldr	r3, [pc, #4]	; (800fb94 <__errno+0x8>)
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	24000040 	.word	0x24000040

0800fb98 <__libc_init_array>:
 800fb98:	b570      	push	{r4, r5, r6, lr}
 800fb9a:	4d0d      	ldr	r5, [pc, #52]	; (800fbd0 <__libc_init_array+0x38>)
 800fb9c:	4c0d      	ldr	r4, [pc, #52]	; (800fbd4 <__libc_init_array+0x3c>)
 800fb9e:	1b64      	subs	r4, r4, r5
 800fba0:	10a4      	asrs	r4, r4, #2
 800fba2:	2600      	movs	r6, #0
 800fba4:	42a6      	cmp	r6, r4
 800fba6:	d109      	bne.n	800fbbc <__libc_init_array+0x24>
 800fba8:	4d0b      	ldr	r5, [pc, #44]	; (800fbd8 <__libc_init_array+0x40>)
 800fbaa:	4c0c      	ldr	r4, [pc, #48]	; (800fbdc <__libc_init_array+0x44>)
 800fbac:	f000 f93c 	bl	800fe28 <_init>
 800fbb0:	1b64      	subs	r4, r4, r5
 800fbb2:	10a4      	asrs	r4, r4, #2
 800fbb4:	2600      	movs	r6, #0
 800fbb6:	42a6      	cmp	r6, r4
 800fbb8:	d105      	bne.n	800fbc6 <__libc_init_array+0x2e>
 800fbba:	bd70      	pop	{r4, r5, r6, pc}
 800fbbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbc0:	4798      	blx	r3
 800fbc2:	3601      	adds	r6, #1
 800fbc4:	e7ee      	b.n	800fba4 <__libc_init_array+0xc>
 800fbc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbca:	4798      	blx	r3
 800fbcc:	3601      	adds	r6, #1
 800fbce:	e7f2      	b.n	800fbb6 <__libc_init_array+0x1e>
 800fbd0:	0800fea0 	.word	0x0800fea0
 800fbd4:	0800fea0 	.word	0x0800fea0
 800fbd8:	0800fea0 	.word	0x0800fea0
 800fbdc:	0800fea4 	.word	0x0800fea4

0800fbe0 <malloc>:
 800fbe0:	4b02      	ldr	r3, [pc, #8]	; (800fbec <malloc+0xc>)
 800fbe2:	4601      	mov	r1, r0
 800fbe4:	6818      	ldr	r0, [r3, #0]
 800fbe6:	f000 b88d 	b.w	800fd04 <_malloc_r>
 800fbea:	bf00      	nop
 800fbec:	24000040 	.word	0x24000040

0800fbf0 <free>:
 800fbf0:	4b02      	ldr	r3, [pc, #8]	; (800fbfc <free+0xc>)
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	6818      	ldr	r0, [r3, #0]
 800fbf6:	f000 b819 	b.w	800fc2c <_free_r>
 800fbfa:	bf00      	nop
 800fbfc:	24000040 	.word	0x24000040

0800fc00 <memcpy>:
 800fc00:	440a      	add	r2, r1
 800fc02:	4291      	cmp	r1, r2
 800fc04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc08:	d100      	bne.n	800fc0c <memcpy+0xc>
 800fc0a:	4770      	bx	lr
 800fc0c:	b510      	push	{r4, lr}
 800fc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc16:	4291      	cmp	r1, r2
 800fc18:	d1f9      	bne.n	800fc0e <memcpy+0xe>
 800fc1a:	bd10      	pop	{r4, pc}

0800fc1c <memset>:
 800fc1c:	4402      	add	r2, r0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d100      	bne.n	800fc26 <memset+0xa>
 800fc24:	4770      	bx	lr
 800fc26:	f803 1b01 	strb.w	r1, [r3], #1
 800fc2a:	e7f9      	b.n	800fc20 <memset+0x4>

0800fc2c <_free_r>:
 800fc2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc2e:	2900      	cmp	r1, #0
 800fc30:	d044      	beq.n	800fcbc <_free_r+0x90>
 800fc32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc36:	9001      	str	r0, [sp, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f1a1 0404 	sub.w	r4, r1, #4
 800fc3e:	bfb8      	it	lt
 800fc40:	18e4      	addlt	r4, r4, r3
 800fc42:	f000 f8e3 	bl	800fe0c <__malloc_lock>
 800fc46:	4a1e      	ldr	r2, [pc, #120]	; (800fcc0 <_free_r+0x94>)
 800fc48:	9801      	ldr	r0, [sp, #4]
 800fc4a:	6813      	ldr	r3, [r2, #0]
 800fc4c:	b933      	cbnz	r3, 800fc5c <_free_r+0x30>
 800fc4e:	6063      	str	r3, [r4, #4]
 800fc50:	6014      	str	r4, [r2, #0]
 800fc52:	b003      	add	sp, #12
 800fc54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc58:	f000 b8de 	b.w	800fe18 <__malloc_unlock>
 800fc5c:	42a3      	cmp	r3, r4
 800fc5e:	d908      	bls.n	800fc72 <_free_r+0x46>
 800fc60:	6825      	ldr	r5, [r4, #0]
 800fc62:	1961      	adds	r1, r4, r5
 800fc64:	428b      	cmp	r3, r1
 800fc66:	bf01      	itttt	eq
 800fc68:	6819      	ldreq	r1, [r3, #0]
 800fc6a:	685b      	ldreq	r3, [r3, #4]
 800fc6c:	1949      	addeq	r1, r1, r5
 800fc6e:	6021      	streq	r1, [r4, #0]
 800fc70:	e7ed      	b.n	800fc4e <_free_r+0x22>
 800fc72:	461a      	mov	r2, r3
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	b10b      	cbz	r3, 800fc7c <_free_r+0x50>
 800fc78:	42a3      	cmp	r3, r4
 800fc7a:	d9fa      	bls.n	800fc72 <_free_r+0x46>
 800fc7c:	6811      	ldr	r1, [r2, #0]
 800fc7e:	1855      	adds	r5, r2, r1
 800fc80:	42a5      	cmp	r5, r4
 800fc82:	d10b      	bne.n	800fc9c <_free_r+0x70>
 800fc84:	6824      	ldr	r4, [r4, #0]
 800fc86:	4421      	add	r1, r4
 800fc88:	1854      	adds	r4, r2, r1
 800fc8a:	42a3      	cmp	r3, r4
 800fc8c:	6011      	str	r1, [r2, #0]
 800fc8e:	d1e0      	bne.n	800fc52 <_free_r+0x26>
 800fc90:	681c      	ldr	r4, [r3, #0]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	6053      	str	r3, [r2, #4]
 800fc96:	4421      	add	r1, r4
 800fc98:	6011      	str	r1, [r2, #0]
 800fc9a:	e7da      	b.n	800fc52 <_free_r+0x26>
 800fc9c:	d902      	bls.n	800fca4 <_free_r+0x78>
 800fc9e:	230c      	movs	r3, #12
 800fca0:	6003      	str	r3, [r0, #0]
 800fca2:	e7d6      	b.n	800fc52 <_free_r+0x26>
 800fca4:	6825      	ldr	r5, [r4, #0]
 800fca6:	1961      	adds	r1, r4, r5
 800fca8:	428b      	cmp	r3, r1
 800fcaa:	bf04      	itt	eq
 800fcac:	6819      	ldreq	r1, [r3, #0]
 800fcae:	685b      	ldreq	r3, [r3, #4]
 800fcb0:	6063      	str	r3, [r4, #4]
 800fcb2:	bf04      	itt	eq
 800fcb4:	1949      	addeq	r1, r1, r5
 800fcb6:	6021      	streq	r1, [r4, #0]
 800fcb8:	6054      	str	r4, [r2, #4]
 800fcba:	e7ca      	b.n	800fc52 <_free_r+0x26>
 800fcbc:	b003      	add	sp, #12
 800fcbe:	bd30      	pop	{r4, r5, pc}
 800fcc0:	240005ec 	.word	0x240005ec

0800fcc4 <sbrk_aligned>:
 800fcc4:	b570      	push	{r4, r5, r6, lr}
 800fcc6:	4e0e      	ldr	r6, [pc, #56]	; (800fd00 <sbrk_aligned+0x3c>)
 800fcc8:	460c      	mov	r4, r1
 800fcca:	6831      	ldr	r1, [r6, #0]
 800fccc:	4605      	mov	r5, r0
 800fcce:	b911      	cbnz	r1, 800fcd6 <sbrk_aligned+0x12>
 800fcd0:	f000 f88c 	bl	800fdec <_sbrk_r>
 800fcd4:	6030      	str	r0, [r6, #0]
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	4628      	mov	r0, r5
 800fcda:	f000 f887 	bl	800fdec <_sbrk_r>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	d00a      	beq.n	800fcf8 <sbrk_aligned+0x34>
 800fce2:	1cc4      	adds	r4, r0, #3
 800fce4:	f024 0403 	bic.w	r4, r4, #3
 800fce8:	42a0      	cmp	r0, r4
 800fcea:	d007      	beq.n	800fcfc <sbrk_aligned+0x38>
 800fcec:	1a21      	subs	r1, r4, r0
 800fcee:	4628      	mov	r0, r5
 800fcf0:	f000 f87c 	bl	800fdec <_sbrk_r>
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d101      	bne.n	800fcfc <sbrk_aligned+0x38>
 800fcf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
 800fd00:	240005f0 	.word	0x240005f0

0800fd04 <_malloc_r>:
 800fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd08:	1ccd      	adds	r5, r1, #3
 800fd0a:	f025 0503 	bic.w	r5, r5, #3
 800fd0e:	3508      	adds	r5, #8
 800fd10:	2d0c      	cmp	r5, #12
 800fd12:	bf38      	it	cc
 800fd14:	250c      	movcc	r5, #12
 800fd16:	2d00      	cmp	r5, #0
 800fd18:	4607      	mov	r7, r0
 800fd1a:	db01      	blt.n	800fd20 <_malloc_r+0x1c>
 800fd1c:	42a9      	cmp	r1, r5
 800fd1e:	d905      	bls.n	800fd2c <_malloc_r+0x28>
 800fd20:	230c      	movs	r3, #12
 800fd22:	603b      	str	r3, [r7, #0]
 800fd24:	2600      	movs	r6, #0
 800fd26:	4630      	mov	r0, r6
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2c:	4e2e      	ldr	r6, [pc, #184]	; (800fde8 <_malloc_r+0xe4>)
 800fd2e:	f000 f86d 	bl	800fe0c <__malloc_lock>
 800fd32:	6833      	ldr	r3, [r6, #0]
 800fd34:	461c      	mov	r4, r3
 800fd36:	bb34      	cbnz	r4, 800fd86 <_malloc_r+0x82>
 800fd38:	4629      	mov	r1, r5
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	f7ff ffc2 	bl	800fcc4 <sbrk_aligned>
 800fd40:	1c43      	adds	r3, r0, #1
 800fd42:	4604      	mov	r4, r0
 800fd44:	d14d      	bne.n	800fde2 <_malloc_r+0xde>
 800fd46:	6834      	ldr	r4, [r6, #0]
 800fd48:	4626      	mov	r6, r4
 800fd4a:	2e00      	cmp	r6, #0
 800fd4c:	d140      	bne.n	800fdd0 <_malloc_r+0xcc>
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	4631      	mov	r1, r6
 800fd52:	4638      	mov	r0, r7
 800fd54:	eb04 0803 	add.w	r8, r4, r3
 800fd58:	f000 f848 	bl	800fdec <_sbrk_r>
 800fd5c:	4580      	cmp	r8, r0
 800fd5e:	d13a      	bne.n	800fdd6 <_malloc_r+0xd2>
 800fd60:	6821      	ldr	r1, [r4, #0]
 800fd62:	3503      	adds	r5, #3
 800fd64:	1a6d      	subs	r5, r5, r1
 800fd66:	f025 0503 	bic.w	r5, r5, #3
 800fd6a:	3508      	adds	r5, #8
 800fd6c:	2d0c      	cmp	r5, #12
 800fd6e:	bf38      	it	cc
 800fd70:	250c      	movcc	r5, #12
 800fd72:	4629      	mov	r1, r5
 800fd74:	4638      	mov	r0, r7
 800fd76:	f7ff ffa5 	bl	800fcc4 <sbrk_aligned>
 800fd7a:	3001      	adds	r0, #1
 800fd7c:	d02b      	beq.n	800fdd6 <_malloc_r+0xd2>
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	442b      	add	r3, r5
 800fd82:	6023      	str	r3, [r4, #0]
 800fd84:	e00e      	b.n	800fda4 <_malloc_r+0xa0>
 800fd86:	6822      	ldr	r2, [r4, #0]
 800fd88:	1b52      	subs	r2, r2, r5
 800fd8a:	d41e      	bmi.n	800fdca <_malloc_r+0xc6>
 800fd8c:	2a0b      	cmp	r2, #11
 800fd8e:	d916      	bls.n	800fdbe <_malloc_r+0xba>
 800fd90:	1961      	adds	r1, r4, r5
 800fd92:	42a3      	cmp	r3, r4
 800fd94:	6025      	str	r5, [r4, #0]
 800fd96:	bf18      	it	ne
 800fd98:	6059      	strne	r1, [r3, #4]
 800fd9a:	6863      	ldr	r3, [r4, #4]
 800fd9c:	bf08      	it	eq
 800fd9e:	6031      	streq	r1, [r6, #0]
 800fda0:	5162      	str	r2, [r4, r5]
 800fda2:	604b      	str	r3, [r1, #4]
 800fda4:	4638      	mov	r0, r7
 800fda6:	f104 060b 	add.w	r6, r4, #11
 800fdaa:	f000 f835 	bl	800fe18 <__malloc_unlock>
 800fdae:	f026 0607 	bic.w	r6, r6, #7
 800fdb2:	1d23      	adds	r3, r4, #4
 800fdb4:	1af2      	subs	r2, r6, r3
 800fdb6:	d0b6      	beq.n	800fd26 <_malloc_r+0x22>
 800fdb8:	1b9b      	subs	r3, r3, r6
 800fdba:	50a3      	str	r3, [r4, r2]
 800fdbc:	e7b3      	b.n	800fd26 <_malloc_r+0x22>
 800fdbe:	6862      	ldr	r2, [r4, #4]
 800fdc0:	42a3      	cmp	r3, r4
 800fdc2:	bf0c      	ite	eq
 800fdc4:	6032      	streq	r2, [r6, #0]
 800fdc6:	605a      	strne	r2, [r3, #4]
 800fdc8:	e7ec      	b.n	800fda4 <_malloc_r+0xa0>
 800fdca:	4623      	mov	r3, r4
 800fdcc:	6864      	ldr	r4, [r4, #4]
 800fdce:	e7b2      	b.n	800fd36 <_malloc_r+0x32>
 800fdd0:	4634      	mov	r4, r6
 800fdd2:	6876      	ldr	r6, [r6, #4]
 800fdd4:	e7b9      	b.n	800fd4a <_malloc_r+0x46>
 800fdd6:	230c      	movs	r3, #12
 800fdd8:	603b      	str	r3, [r7, #0]
 800fdda:	4638      	mov	r0, r7
 800fddc:	f000 f81c 	bl	800fe18 <__malloc_unlock>
 800fde0:	e7a1      	b.n	800fd26 <_malloc_r+0x22>
 800fde2:	6025      	str	r5, [r4, #0]
 800fde4:	e7de      	b.n	800fda4 <_malloc_r+0xa0>
 800fde6:	bf00      	nop
 800fde8:	240005ec 	.word	0x240005ec

0800fdec <_sbrk_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4d06      	ldr	r5, [pc, #24]	; (800fe08 <_sbrk_r+0x1c>)
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	602b      	str	r3, [r5, #0]
 800fdf8:	f7f2 fbf4 	bl	80025e4 <_sbrk>
 800fdfc:	1c43      	adds	r3, r0, #1
 800fdfe:	d102      	bne.n	800fe06 <_sbrk_r+0x1a>
 800fe00:	682b      	ldr	r3, [r5, #0]
 800fe02:	b103      	cbz	r3, 800fe06 <_sbrk_r+0x1a>
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	240005f4 	.word	0x240005f4

0800fe0c <__malloc_lock>:
 800fe0c:	4801      	ldr	r0, [pc, #4]	; (800fe14 <__malloc_lock+0x8>)
 800fe0e:	f000 b809 	b.w	800fe24 <__retarget_lock_acquire_recursive>
 800fe12:	bf00      	nop
 800fe14:	240005f8 	.word	0x240005f8

0800fe18 <__malloc_unlock>:
 800fe18:	4801      	ldr	r0, [pc, #4]	; (800fe20 <__malloc_unlock+0x8>)
 800fe1a:	f000 b804 	b.w	800fe26 <__retarget_lock_release_recursive>
 800fe1e:	bf00      	nop
 800fe20:	240005f8 	.word	0x240005f8

0800fe24 <__retarget_lock_acquire_recursive>:
 800fe24:	4770      	bx	lr

0800fe26 <__retarget_lock_release_recursive>:
 800fe26:	4770      	bx	lr

0800fe28 <_init>:
 800fe28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe2a:	bf00      	nop
 800fe2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe2e:	bc08      	pop	{r3}
 800fe30:	469e      	mov	lr, r3
 800fe32:	4770      	bx	lr

0800fe34 <_fini>:
 800fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe36:	bf00      	nop
 800fe38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe3a:	bc08      	pop	{r3}
 800fe3c:	469e      	mov	lr, r3
 800fe3e:	4770      	bx	lr
