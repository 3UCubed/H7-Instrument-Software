
H7-LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010244  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080104dc  080104dc  000204dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010534  08010534  00020534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801053c  0801053c  0002053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010540  08010540  00020540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08010544  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000674  240000a0  080105d4  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000714  080105d4  00030714  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002254e  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003866  00000000  00000000  0005264f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b60  00000000  00000000  00055eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001594  00000000  00000000  00057a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b2ea  00000000  00000000  00058fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023f4b  00000000  00000000  00094296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180a16  00000000  00000000  000b81e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007a9c  00000000  00000000  00238bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00240694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080104c4 	.word	0x080104c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	080104c4 	.word	0x080104c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_SystemReset+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <__NVIC_SystemReset+0x20>
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	05fa0004 	.word	0x05fa0004

08000600 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	b299      	uxth	r1, r3
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <poll_i2c_sensor+0x94>)
 8000620:	f007 f978 	bl	8007914 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <poll_i2c_sensor+0x98>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e022      	b.n	8000688 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b299      	uxth	r1, r3
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <poll_i2c_sensor+0x94>)
 8000654:	f007 fa52 	bl	8007afc <HAL_I2C_Master_Receive>
 8000658:	4603      	mov	r3, r0
 800065a:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <poll_i2c_sensor+0x9c>)
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	c303      	stmia	r3!, {r0, r1}
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 800067c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000680:	7a7a      	ldrb	r2, [r7, #9]
 8000682:	4313      	orrs	r3, r2
 8000684:	10db      	asrs	r3, r3, #3
 8000686:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000288 	.word	0x24000288
 8000698:	080104dc 	.word	0x080104dc
 800069c:	080104e8 	.word	0x080104e8

080006a0 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa9 	bl	8000600 <poll_i2c_sensor>
 80006ae:	4603      	mov	r3, r0
 80006b0:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006b2:	2394      	movs	r3, #148	; 0x94
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffa3 	bl	8000600 <poll_i2c_sensor>
 80006ba:	4603      	mov	r3, r0
 80006bc:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006be:	2392      	movs	r3, #146	; 0x92
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff9d 	bl	8000600 <poll_i2c_sensor>
 80006c6:	4603      	mov	r3, r0
 80006c8:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006ca:	2396      	movs	r3, #150	; 0x96
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff97 	bl	8000600 <poll_i2c_sensor>
 80006d2:	4603      	mov	r3, r0
 80006d4:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006d6:	2008      	movs	r0, #8
 80006d8:	f00f fd9a 	bl	8010210 <malloc>
 80006dc:	4603      	mov	r3, r0
 80006de:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3304      	adds	r3, #4
 80006f2:	897a      	ldrh	r2, [r7, #10]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3306      	adds	r3, #6
 80006fa:	893a      	ldrh	r2, [r7, #8]
 80006fc:	801a      	strh	r2, [r3, #0]
  return results;
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	if (step == 9)
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <do_auto_sweep+0x80>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b09      	cmp	r3, #9
 8000712:	d109      	bne.n	8000728 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <do_auto_sweep+0x84>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		  step--;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <do_auto_sweep+0x80>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <do_auto_sweep+0x80>)
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e00c      	b.n	8000742 <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <do_auto_sweep+0x80>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d108      	bne.n	8000742 <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <do_auto_sweep+0x84>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
	    step++;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <do_auto_sweep+0x80>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <do_auto_sweep+0x80>)
 8000740:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <do_auto_sweep+0x84>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <do_auto_sweep+0x50>
	  {
	    step++;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <do_auto_sweep+0x80>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <do_auto_sweep+0x80>)
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e005      	b.n	8000764 <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <do_auto_sweep+0x80>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	3b01      	subs	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <do_auto_sweep+0x80>)
 8000762:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <do_auto_sweep+0x80>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x88>)
 800076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <do_auto_sweep+0x8c>)
 8000776:	f003 feca 	bl	800450e <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800077a:	2100      	movs	r1, #0
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <do_auto_sweep+0x8c>)
 800077e:	f003 fe74 	bl	800446a <HAL_DAC_Start>

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240005a8 	.word	0x240005a8
 800078c:	24000028 	.word	0x24000028
 8000790:	24000000 	.word	0x24000000
 8000794:	24000274 	.word	0x24000274

08000798 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 8000798:	b084      	sub	sp, #16
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	f107 0c18 	add.w	ip, r7, #24
 80007a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	2301      	movs	r3, #1
 80007ac:	2201      	movs	r2, #1
 80007ae:	f107 0018 	add.w	r0, r7, #24
 80007b2:	f00b f86b 	bl	800b88c <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007ba:	797b      	ldrb	r3, [r7, #5]
 80007bc:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007c8:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007ca:	2002      	movs	r0, #2
 80007cc:	f00f fd20 	bl	8010210 <malloc>
 80007d0:	4603      	mov	r3, r0
 80007d2:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	3301      	adds	r3, #1
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	701a      	strb	r2, [r3, #0]
	return results;
 80007e2:	68bb      	ldr	r3, [r7, #8]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ee:	b004      	add	sp, #16
 80007f0:	4770      	bx	lr
	...

080007f4 <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <set_erpa_sweep+0x28>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <set_erpa_sweep+0x2c>)
 8000800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <set_erpa_sweep+0x30>)
 800080a:	f003 fe80 	bl	800450e <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <set_erpa_sweep+0x30>)
 8000812:	f003 fe2a 	bl	800446a <HAL_DAC_Start>

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	240005a8 	.word	0x240005a8
 8000820:	24000000 	.word	0x24000000
 8000824:	24000274 	.word	0x24000274

08000828 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <erpa_adc+0x34>)
 8000830:	885b      	ldrh	r3, [r3, #2]
 8000832:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified doesn't need to change
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <erpa_adc+0x34>)
 8000836:	895b      	ldrh	r3, [r3, #10]
 8000838:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(2 * sizeof(uint16_t));
 800083a:	2004      	movs	r0, #4
 800083c:	f00f fce8 	bl	8010210 <malloc>
 8000840:	4603      	mov	r3, r0
 8000842:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3302      	adds	r3, #2
 800084e:	88ba      	ldrh	r2, [r7, #4]
 8000850:	801a      	strh	r2, [r3, #0]

	return results;
 8000852:	683b      	ldr	r3, [r7, #0]


}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	24000580 	.word	0x24000580

08000860 <hk_adc1>:

uint16_t* hk_adc1() {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];			// BUSVmon -- verified doesn't need to change
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <hk_adc1+0x98>)
 8000868:	8a9b      	ldrh	r3, [r3, #20]
 800086a:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];				// BUSImon -- verified doesn't need to change
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <hk_adc1+0x98>)
 800086e:	8a1b      	ldrh	r3, [r3, #16]
 8000870:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified doesn't need to change
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <hk_adc1+0x98>)
 8000874:	899b      	ldrh	r3, [r3, #12]
 8000876:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <hk_adc1+0x98>)
 800087a:	8a5b      	ldrh	r3, [r3, #18]
 800087c:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];				// n200v -- verified doesn't need to change
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <hk_adc1+0x98>)
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <hk_adc1+0x98>)
 8000886:	88db      	ldrh	r3, [r3, #6]
 8000888:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <hk_adc1+0x98>)
 800088c:	89db      	ldrh	r3, [r3, #14]
 800088e:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified doesn't need to change
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <hk_adc1+0x98>)
 8000892:	891b      	ldrh	r3, [r3, #8]
 8000894:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <hk_adc1+0x98>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 800089c:	2012      	movs	r0, #18
 800089e:	f00f fcb7 	bl	8010210 <malloc>
 80008a2:	4603      	mov	r3, r0
 80008a4:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	8afa      	ldrh	r2, [r7, #22]
 80008aa:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	3302      	adds	r3, #2
 80008b0:	8aba      	ldrh	r2, [r7, #20]
 80008b2:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	3304      	adds	r3, #4
 80008b8:	8a7a      	ldrh	r2, [r7, #18]
 80008ba:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3306      	adds	r3, #6
 80008c0:	8a3a      	ldrh	r2, [r7, #16]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3308      	adds	r3, #8
 80008c8:	89fa      	ldrh	r2, [r7, #14]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	330a      	adds	r3, #10
 80008d0:	89ba      	ldrh	r2, [r7, #12]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	330c      	adds	r3, #12
 80008d8:	897a      	ldrh	r2, [r7, #10]
 80008da:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	330e      	adds	r3, #14
 80008e0:	893a      	ldrh	r2, [r7, #8]
 80008e2:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	3310      	adds	r3, #16
 80008e8:	88fa      	ldrh	r2, [r7, #6]
 80008ea:	801a      	strh	r2, [r3, #0]

	return results;
 80008ec:	683b      	ldr	r3, [r7, #0]

}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	24000580 	.word	0x24000580

080008fc <hk_adc3>:

uint16_t* hk_adc3() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <hk_adc3+0x50>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <hk_adc3+0x50>)
 800090a:	885b      	ldrh	r3, [r3, #2]
 800090c:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <hk_adc3+0x50>)
 8000910:	889b      	ldrh	r3, [r3, #4]
 8000912:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <hk_adc3+0x50>)
 8000916:	88db      	ldrh	r3, [r3, #6]
 8000918:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 800091a:	2008      	movs	r0, #8
 800091c:	f00f fc78 	bl	8010210 <malloc>
 8000920:	4603      	mov	r3, r0
 8000922:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	89fa      	ldrh	r2, [r7, #14]
 8000928:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3302      	adds	r3, #2
 800092e:	89ba      	ldrh	r2, [r7, #12]
 8000930:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	897a      	ldrh	r2, [r7, #10]
 8000938:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3306      	adds	r3, #6
 800093e:	893a      	ldrh	r2, [r7, #8]
 8000940:	801a      	strh	r2, [r3, #0]

	return results;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	240005a0 	.word	0x240005a0

08000950 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 800095a:	23aa      	movs	r3, #170	; 0xaa
 800095c:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 800095e:	23aa      	movs	r3, #170	; 0xaa
 8000960:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <send_erpa_packet+0x90>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <send_erpa_packet+0x90>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  							// ENDmon MSB
 8000976:	2300      	movs	r3, #0
 8000978:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               						// ENDmon LSB
 800097a:	2300      	movs	r3, #0
 800097c:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);      		// SWP Monitored MSB
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);               		// SWP Monitored LSB
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	3302      	adds	r3, #2
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b29b      	uxth	r3, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);               		// TEMPURATURE 1 LSB
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	3302      	adds	r3, #2
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009aa:	2300      	movs	r3, #0
 80009ac:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009ae:	2300      	movs	r3, #0
 80009b0:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009be:	f107 0108 	add.w	r1, r7, #8
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	220e      	movs	r2, #14
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <send_erpa_packet+0x94>)
 80009c8:	f00d f90a 	bl	800dbe0 <HAL_UART_Transmit>
	erpa_seq++;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <send_erpa_packet+0x90>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <send_erpa_packet+0x90>)
 80009d6:	801a      	strh	r2, [r3, #0]

}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240005b8 	.word	0x240005b8
 80009e4:	2400047c 	.word	0x2400047c

080009e8 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 80009f4:	23cc      	movs	r3, #204	; 0xcc
 80009f6:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 80009f8:	23cc      	movs	r3, #204	; 0xcc
 80009fa:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 80009fc:	4b7d      	ldr	r3, [pc, #500]	; (8000bf4 <send_hk_packet+0x20c>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000a08:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <send_hk_packet+0x20c>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3302      	adds	r3, #2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3302      	adds	r3, #2
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a42:	121b      	asrs	r3, r3, #8
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3302      	adds	r3, #2
 8000a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5a:	121b      	asrs	r3, r3, #8
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3302      	adds	r3, #2
 8000a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a74:	121b      	asrs	r3, r3, #8
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3306      	adds	r3, #6
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	121b      	asrs	r3, r3, #8
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3306      	adds	r3, #6
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3302      	adds	r3, #2
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3302      	adds	r3, #2
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3306      	adds	r3, #6
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	0a1b      	lsrs	r3, r3, #8
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3306      	adds	r3, #6
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	330c      	adds	r3, #12
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	330c      	adds	r3, #12
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3306      	adds	r3, #6
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	3306      	adds	r3, #6
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3304      	adds	r3, #4
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3304      	adds	r3, #4
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	330e      	adds	r3, #14
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	0a1b      	lsrs	r3, r3, #8
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	330e      	adds	r3, #14
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	3310      	adds	r3, #16
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3310      	adds	r3, #16
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3308      	adds	r3, #8
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	330a      	adds	r3, #10
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	330a      	adds	r3, #10
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bd0:	f107 0110 	add.w	r1, r7, #16
 8000bd4:	2364      	movs	r3, #100	; 0x64
 8000bd6:	2226      	movs	r2, #38	; 0x26
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <send_hk_packet+0x210>)
 8000bda:	f00d f801 	bl	800dbe0 <HAL_UART_Transmit>
	hk_seq++;
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <send_hk_packet+0x20c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <send_hk_packet+0x20c>)
 8000be8:	801a      	strh	r2, [r3, #0]


}
 8000bea:	bf00      	nop
 8000bec:	3738      	adds	r7, #56	; 0x38
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	240005bc 	.word	0x240005bc
 8000bf8:	2400047c 	.word	0x2400047c

08000bfc <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000c04:	23bb      	movs	r3, #187	; 0xbb
 8000c06:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000c08:	23bb      	movs	r3, #187	; 0xbb
 8000c0a:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <send_pmt_packet+0x54>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <send_pmt_packet+0x54>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c2c:	f107 0108 	add.w	r1, r7, #8
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	2206      	movs	r2, #6
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <send_pmt_packet+0x58>)
 8000c36:	f00c ffd3 	bl	800dbe0 <HAL_UART_Transmit>
	pmt_seq++;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <send_pmt_packet+0x54>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <send_pmt_packet+0x54>)
 8000c44:	801a      	strh	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	240005ba 	.word	0x240005ba
 8000c54:	2400047c 	.word	0x2400047c

08000c58 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b0a9      	sub	sp, #164	; 0xa4
 8000c5c:	af1e      	add	r7, sp, #120	; 0x78
 8000c5e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a4d      	ldr	r2, [pc, #308]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d16e      	bne.n	8000d46 <HAL_TIM_OC_DelayElapsedCallback+0xee>
  {
	  FACTOR_COUNTER++;
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c70:	6013      	str	r3, [r2, #0]
	  SWP_FACTOR_COUNTER++;
 8000c72:	4b4b      	ldr	r3, [pc, #300]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000c7a:	6013      	str	r3, [r2, #0]
	  int samp_check = SAMPLING_FACTOR;
 8000c7c:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	623b      	str	r3, [r7, #32]
	  int fact_check = FACTOR_COUNTER;
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	61fb      	str	r3, [r7, #28]
	  if (FACTOR_COUNTER == SAMPLING_FACTOR) {
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d17c      	bne.n	8000d8e <HAL_TIM_OC_DelayElapsedCallback+0x136>
		  FACTOR_COUNTER = 0;
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
		  if (ERPA_ON)
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d035      	beq.n	8000d0e <HAL_TIM_OC_DelayElapsedCallback+0xb6>
		  {

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000ca2:	bf00      	nop
 8000ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca8:	4840      	ldr	r0, [pc, #256]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000caa:	f006 fd71 	bl	8007790 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f7      	bne.n	8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x4c>

			uint8_t* spi2_results = spi(hspi2);
 8000cb4:	4c3e      	ldr	r4, [pc, #248]	; (8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000cb6:	4668      	mov	r0, sp
 8000cb8:	f104 0310 	add.w	r3, r4, #16
 8000cbc:	2278      	movs	r2, #120	; 0x78
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f00f fba6 	bl	8010410 <memcpy>
 8000cc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cc8:	f7ff fd66 	bl	8000798 <spi>
 8000ccc:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000cce:	f7ff fdab 	bl	8000828 <erpa_adc>
 8000cd2:	6178      	str	r0, [r7, #20]

			if (SWP_FACTOR_COUNTER == (SAMPLING_FACTOR * 2)) {
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	005a      	lsls	r2, r3, #1
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d10b      	bne.n	8000cfa <HAL_TIM_OC_DelayElapsedCallback+0xa2>
				if (auto_sweep)
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x98>
				{
					do_auto_sweep();
 8000cea:	f7ff fd0d 	bl	8000708 <do_auto_sweep>
 8000cee:	e001      	b.n	8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>
				} else {
					set_erpa_sweep();
 8000cf0:	f7ff fd80 	bl	80007f4 <set_erpa_sweep>
				}
				SWP_FACTOR_COUNTER = 0;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
			}


			send_erpa_packet(spi2_results, erpa_adc_results);
 8000cfa:	6979      	ldr	r1, [r7, #20]
 8000cfc:	69b8      	ldr	r0, [r7, #24]
 8000cfe:	f7ff fe27 	bl	8000950 <send_erpa_packet>

			free(spi2_results);
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f00f fa8c 	bl	8010220 <free>
			free(erpa_adc_results);
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f00f fa89 	bl	8010220 <free>
		  }
		  if (HK_ON)
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d03b      	beq.n	8000d8e <HAL_TIM_OC_DelayElapsedCallback+0x136>
		  {
			  int16_t *i2c_values = i2c();
 8000d16:	f7ff fcc3 	bl	80006a0 <i2c>
 8000d1a:	6138      	str	r0, [r7, #16]
			  uint16_t* hk_adc1_results = hk_adc1();
 8000d1c:	f7ff fda0 	bl	8000860 <hk_adc1>
 8000d20:	60f8      	str	r0, [r7, #12]
			  uint16_t* hk_adc3_results = hk_adc3();
 8000d22:	f7ff fdeb 	bl	80008fc <hk_adc3>
 8000d26:	60b8      	str	r0, [r7, #8]


			  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	68f9      	ldr	r1, [r7, #12]
 8000d2c:	6938      	ldr	r0, [r7, #16]
 8000d2e:	f7ff fe5b 	bl	80009e8 <send_hk_packet>


			  free(i2c_values);
 8000d32:	6938      	ldr	r0, [r7, #16]
 8000d34:	f00f fa74 	bl	8010220 <free>
			  free(hk_adc1_results);
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f00f fa71 	bl	8010220 <free>
			  free(hk_adc3_results);
 8000d3e:	68b8      	ldr	r0, [r7, #8]
 8000d40:	f00f fa6e 	bl	8010220 <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d44:	e023      	b.n	8000d8e <HAL_TIM_OC_DelayElapsedCallback+0x136>
  else if (htim == &htim1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d11f      	bne.n	8000d8e <HAL_TIM_OC_DelayElapsedCallback+0x136>
      if (PMT_ON)
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01b      	beq.n	8000d8e <HAL_TIM_OC_DelayElapsedCallback+0x136>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d56:	bf00      	nop
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000d5e:	f006 fd17 	bl	8007790 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f7      	bne.n	8000d58 <HAL_TIM_OC_DelayElapsedCallback+0x100>
  		uint8_t* spi1_results = spi(hspi1);
 8000d68:	4c17      	ldr	r4, [pc, #92]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000d6a:	4668      	mov	r0, sp
 8000d6c:	f104 0310 	add.w	r3, r4, #16
 8000d70:	2278      	movs	r2, #120	; 0x78
 8000d72:	4619      	mov	r1, r3
 8000d74:	f00f fb4c 	bl	8010410 <memcpy>
 8000d78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d7c:	f7ff fd0c 	bl	8000798 <spi>
 8000d80:	6278      	str	r0, [r7, #36]	; 0x24
  		send_pmt_packet(spi1_results);
 8000d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d84:	f7ff ff3a 	bl	8000bfc <send_pmt_packet>
		free(spi1_results);
 8000d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d8a:	f00f fa49 	bl	8010220 <free>
}
 8000d8e:	bf00      	nop
 8000d90:	372c      	adds	r7, #44	; 0x2c
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24000430 	.word	0x24000430
 8000d9c:	240005b0 	.word	0x240005b0
 8000da0:	240005b4 	.word	0x240005b4
 8000da4:	2400002c 	.word	0x2400002c
 8000da8:	240005bf 	.word	0x240005bf
 8000dac:	58020400 	.word	0x58020400
 8000db0:	2400035c 	.word	0x2400035c
 8000db4:	240005ac 	.word	0x240005ac
 8000db8:	240005c0 	.word	0x240005c0
 8000dbc:	240003e4 	.word	0x240003e4
 8000dc0:	240005be 	.word	0x240005be
 8000dc4:	58020000 	.word	0x58020000
 8000dc8:	240002d4 	.word	0x240002d4

08000dcc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	49b6      	ldr	r1, [pc, #728]	; (80010b0 <HAL_UART_RxCpltCallback+0x2e4>)
 8000dd8:	48b6      	ldr	r0, [pc, #728]	; (80010b4 <HAL_UART_RxCpltCallback+0x2e8>)
 8000dda:	f00c ff97 	bl	800dd0c <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000dde:	4bb4      	ldr	r3, [pc, #720]	; (80010b0 <HAL_UART_RxCpltCallback+0x2e4>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b25      	cmp	r3, #37	; 0x25
 8000de8:	f200 815d 	bhi.w	80010a6 <HAL_UART_RxCpltCallback+0x2da>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <HAL_UART_RxCpltCallback+0x28>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000f49 	.word	0x08000f49
 8000df8:	08000f65 	.word	0x08000f65
 8000dfc:	08000f81 	.word	0x08000f81
 8000e00:	08000fa1 	.word	0x08000fa1
 8000e04:	08000fc1 	.word	0x08000fc1
 8000e08:	08000fdd 	.word	0x08000fdd
 8000e0c:	08000ffd 	.word	0x08000ffd
 8000e10:	0800101d 	.word	0x0800101d
 8000e14:	080010a7 	.word	0x080010a7
 8000e18:	080010a7 	.word	0x080010a7
 8000e1c:	08000e9b 	.word	0x08000e9b
 8000e20:	08000e8d 	.word	0x08000e8d
 8000e24:	08001039 	.word	0x08001039
 8000e28:	08001049 	.word	0x08001049
 8000e2c:	08001069 	.word	0x08001069
 8000e30:	08001089 	.word	0x08001089
 8000e34:	08001059 	.word	0x08001059
 8000e38:	08001079 	.word	0x08001079
 8000e3c:	08001091 	.word	0x08001091
 8000e40:	08000f57 	.word	0x08000f57
 8000e44:	08000f73 	.word	0x08000f73
 8000e48:	08000f91 	.word	0x08000f91
 8000e4c:	08000fb1 	.word	0x08000fb1
 8000e50:	08000fcf 	.word	0x08000fcf
 8000e54:	08000fed 	.word	0x08000fed
 8000e58:	0800100d 	.word	0x0800100d
 8000e5c:	0800102b 	.word	0x0800102b
 8000e60:	08000ea9 	.word	0x08000ea9
 8000e64:	08000ec1 	.word	0x08000ec1
 8000e68:	08000ed9 	.word	0x08000ed9
 8000e6c:	080010a7 	.word	0x080010a7
 8000e70:	080010a7 	.word	0x080010a7
 8000e74:	080010a7 	.word	0x080010a7
 8000e78:	080010a7 	.word	0x080010a7
 8000e7c:	080010a7 	.word	0x080010a7
 8000e80:	080010a7 	.word	0x080010a7
 8000e84:	08000efd 	.word	0x08000efd
 8000e88:	08000f1f 	.word	0x08000f1f
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e8c:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e8e:	2104      	movs	r1, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	4618      	mov	r0, r3
 8000e94:	f006 fc94 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000e98:	e105      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e9a:	4b87      	ldr	r3, [pc, #540]	; (80010b8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fc8d 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000ea6:	e0fe      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000ea8:	4b84      	ldr	r3, [pc, #528]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	f200 80f3 	bhi.w	8001098 <HAL_UART_RxCpltCallback+0x2cc>
	  {
		step++;
 8000eb2:	4b82      	ldr	r3, [pc, #520]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b80      	ldr	r3, [pc, #512]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000ebe:	e0eb      	b.n	8001098 <HAL_UART_RxCpltCallback+0x2cc>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ec0:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80e9 	beq.w	800109c <HAL_UART_RxCpltCallback+0x2d0>
    {
      step--;
 8000eca:	4b7c      	ldr	r3, [pc, #496]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b7a      	ldr	r3, [pc, #488]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000ed4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ed6:	e0e1      	b.n	800109c <HAL_UART_RxCpltCallback+0x2d0>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ed8:	4b79      	ldr	r3, [pc, #484]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d106      	bne.n	8000eee <HAL_UART_RxCpltCallback+0x122>
		auto_sweep = 1;
 8000ee0:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ee6:	4b75      	ldr	r3, [pc, #468]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000eec:	e0db      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
		auto_sweep = 0;
 8000eee:	4b74      	ldr	r3, [pc, #464]	; (80010c0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ef4:	4b71      	ldr	r3, [pc, #452]	; (80010bc <HAL_UART_RxCpltCallback+0x2f0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
  	break;
 8000efa:	e0d4      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
   }
  case 0x24:
  {
	  if (SAMPLING_FACTOR < 32)
 8000efc:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b1f      	cmp	r3, #31
 8000f02:	f300 80cd 	bgt.w	80010a0 <HAL_UART_RxCpltCallback+0x2d4>
	  {
		  SAMPLING_FACTOR *= 2;
 8000f06:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4a6d      	ldr	r2, [pc, #436]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f0e:	6013      	str	r3, [r2, #0]
		  FACTOR_COUNTER = 0;
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f16:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <HAL_UART_RxCpltCallback+0x300>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f1c:	e0c0      	b.n	80010a0 <HAL_UART_RxCpltCallback+0x2d4>
  }
  case 0x25:
  {
	  if (SAMPLING_FACTOR > 1)
 8000f1e:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	f340 80be 	ble.w	80010a4 <HAL_UART_RxCpltCallback+0x2d8>
	  {
		  SAMPLING_FACTOR /= 2;
 8000f28:	4b66      	ldr	r3, [pc, #408]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da00      	bge.n	8000f32 <HAL_UART_RxCpltCallback+0x166>
 8000f30:	3301      	adds	r3, #1
 8000f32:	105b      	asrs	r3, r3, #1
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f38:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f40:	4b62      	ldr	r3, [pc, #392]	; (80010cc <HAL_UART_RxCpltCallback+0x300>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f46:	e0ad      	b.n	80010a4 <HAL_UART_RxCpltCallback+0x2d8>
  }
  case 0x00:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f48:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f006 fc36 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000f54:	e0a7      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f56:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f58:	2120      	movs	r1, #32
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fc2f 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000f62:	e0a0      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x01:
  {

    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f64:	4b54      	ldr	r3, [pc, #336]	; (80010b8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fc28 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000f70:	e099      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f72:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	2200      	movs	r2, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fc21 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000f7e:	e092      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	2201      	movs	r2, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 fc19 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000f8e:	e08a      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f96:	2200      	movs	r2, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 fc11 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000f9e:	e082      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 fc09 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000fae:	e07a      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000fb0:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fc01 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000fbe:	e072      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000fc0:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 fbfa 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000fcc:	e06b      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fce:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fbf3 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000fda:	e064      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fbeb 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000fea:	e05c      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000fec:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f006 fbe3 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8000ffa:	e054      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 8000ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001002:	2201      	movs	r2, #1
 8001004:	4618      	mov	r0, r3
 8001006:	f006 fbdb 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 800100a:	e04c      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	2200      	movs	r2, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fbd3 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 800101a:	e044      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	2201      	movs	r2, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f006 fbcc 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8001028:	e03d      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <HAL_UART_RxCpltCallback+0x304>)
 800102c:	2140      	movs	r1, #64	; 0x40
 800102e:	2200      	movs	r2, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f006 fbc5 	bl	80077c0 <HAL_GPIO_WritePin>
    break;
 8001036:	e036      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001038:	f001 fcb8 	bl	80029ac <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800103c:	2101      	movs	r1, #1
 800103e:	2001      	movs	r0, #1
 8001040:	f007 f962 	bl	8008308 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8001044:	f7ff fac6 	bl	80005d4 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_UART_RxCpltCallback+0x308>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	4821      	ldr	r0, [pc, #132]	; (80010d8 <HAL_UART_RxCpltCallback+0x30c>)
 8001052:	f00b f91f 	bl	800c294 <HAL_TIM_OC_Start_IT>
    break;
 8001056:	e026      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_UART_RxCpltCallback+0x308>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	481d      	ldr	r0, [pc, #116]	; (80010d8 <HAL_UART_RxCpltCallback+0x30c>)
 8001062:	f00b fa71 	bl	800c548 <HAL_TIM_OC_Stop_IT>

    break;
 8001066:	e01e      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_UART_RxCpltCallback+0x310>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800106e:	210c      	movs	r1, #12
 8001070:	481b      	ldr	r0, [pc, #108]	; (80010e0 <HAL_UART_RxCpltCallback+0x314>)
 8001072:	f00b f90f 	bl	800c294 <HAL_TIM_OC_Start_IT>
    break;
 8001076:	e016      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_UART_RxCpltCallback+0x310>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800107e:	210c      	movs	r1, #12
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <HAL_UART_RxCpltCallback+0x314>)
 8001082:	f00b fa61 	bl	800c548 <HAL_TIM_OC_Stop_IT>

    break;
 8001086:	e00e      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_UART_RxCpltCallback+0x318>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
    break;
 800108e:	e00a      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_RxCpltCallback+0x318>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
    break;
 8001096:	e006      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
    break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a4:	bf00      	nop
  }
  }
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2400050c 	.word	0x2400050c
 80010b4:	2400047c 	.word	0x2400047c
 80010b8:	58020400 	.word	0x58020400
 80010bc:	240005a8 	.word	0x240005a8
 80010c0:	240005ac 	.word	0x240005ac
 80010c4:	2400002c 	.word	0x2400002c
 80010c8:	240005b0 	.word	0x240005b0
 80010cc:	240005b4 	.word	0x240005b4
 80010d0:	58020800 	.word	0x58020800
 80010d4:	240005be 	.word	0x240005be
 80010d8:	240003e4 	.word	0x240003e4
 80010dc:	240005bf 	.word	0x240005bf
 80010e0:	24000430 	.word	0x24000430
 80010e4:	240005c0 	.word	0x240005c0

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f001 fba8 	bl	8002840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f888 	bl	8001204 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010f4:	f000 f90c 	bl	8001310 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80010f8:	f000 fd8c 	bl	8001c14 <MX_GPIO_Init>
   MX_DAC1_Init();
 80010fc:	f000 faee 	bl	80016dc <MX_DAC1_Init>
   MX_TIM1_Init();
 8001100:	f000 fc0e 	bl	8001920 <MX_TIM1_Init>
   MX_TIM2_Init();
 8001104:	f000 fc9c 	bl	8001a40 <MX_TIM2_Init>
   MX_I2C1_Init();
 8001108:	f000 fb1a 	bl	8001740 <MX_I2C1_Init>
   MX_SPI1_Init();
 800110c:	f000 fb58 	bl	80017c0 <MX_SPI1_Init>
   MX_DMA_Init();
 8001110:	f000 fd58 	bl	8001bc4 <MX_DMA_Init>
   MX_ADC1_Init();
 8001114:	f000 f92a 	bl	800136c <MX_ADC1_Init>
   MX_USART1_UART_Init();
 8001118:	f000 fd08 	bl	8001b2c <MX_USART1_UART_Init>
   MX_ADC3_Init();
 800111c:	f000 fa48 	bl	80015b0 <MX_ADC3_Init>
   MX_SPI2_Init();
 8001120:	f000 fba6 	bl	8001870 <MX_SPI2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f000 fd76 	bl	8001c14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001128:	f000 fd4c 	bl	8001bc4 <MX_DMA_Init>
  MX_ADC1_Init();
 800112c:	f000 f91e 	bl	800136c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001130:	f000 fa3e 	bl	80015b0 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001134:	f000 fad2 	bl	80016dc <MX_DAC1_Init>
  MX_I2C1_Init();
 8001138:	f000 fb02 	bl	8001740 <MX_I2C1_Init>
  MX_SPI1_Init();
 800113c:	f000 fb40 	bl	80017c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001140:	f000 fb96 	bl	8001870 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001144:	f000 fbec 	bl	8001920 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001148:	f000 fcf0 	bl	8001b2c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800114c:	f000 fc78 	bl	8001a40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM2->CCR4 = 10;
 8001150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001154:	220a      	movs	r2, #10
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001158:	210c      	movs	r1, #12
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <main+0x100>)
 800115c:	f00b fb30 	bl	800c7c0 <HAL_TIM_PWM_Start>

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001160:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001168:	4820      	ldr	r0, [pc, #128]	; (80011ec <main+0x104>)
 800116a:	f002 ff0b 	bl	8003f84 <HAL_ADCEx_Calibration_Start>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <main+0x90>
  {
    /* Calibration Error */
    Error_Handler();
 8001174:	f000 fe34 	bl	8001de0 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 8001178:	220b      	movs	r2, #11
 800117a:	491d      	ldr	r1, [pc, #116]	; (80011f0 <main+0x108>)
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <main+0x104>)
 800117e:	f001 fff7 	bl	8003170 <HAL_ADC_Start_DMA>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <main+0xa4>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 8001188:	f000 fe2a 	bl	8001de0 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800118c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <main+0x10c>)
 8001196:	f002 fef5 	bl	8003f84 <HAL_ADCEx_Calibration_Start>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <main+0xbc>
  {
	/* Calibration Error */
	Error_Handler();
 80011a0:	f000 fe1e 	bl	8001de0 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 80011a4:	2204      	movs	r2, #4
 80011a6:	4914      	ldr	r1, [pc, #80]	; (80011f8 <main+0x110>)
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <main+0x10c>)
 80011aa:	f001 ffe1 	bl	8003170 <HAL_ADC_Start_DMA>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <main+0xd0>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 80011b4:	f000 fe14 	bl	8001de0 <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80011b8:	bf00      	nop
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <main+0x114>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d0f7      	beq.n	80011ba <main+0xd2>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80011ca:	bf00      	nop
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <main+0x114>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011da:	d1f7      	bne.n	80011cc <main+0xe4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <main+0x118>)
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <main+0x114>)
 80011e2:	f00c fd93 	bl	800dd0c <HAL_UART_Receive_IT>
 80011e6:	e7f9      	b.n	80011dc <main+0xf4>
 80011e8:	24000430 	.word	0x24000430
 80011ec:	240000bc 	.word	0x240000bc
 80011f0:	24000580 	.word	0x24000580
 80011f4:	24000120 	.word	0x24000120
 80011f8:	240005a0 	.word	0x240005a0
 80011fc:	2400047c 	.word	0x2400047c
 8001200:	2400050c 	.word	0x2400050c

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09c      	sub	sp, #112	; 0x70
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	224c      	movs	r2, #76	; 0x4c
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f00f f8b8 	bl	8010388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2220      	movs	r2, #32
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f00f f8b2 	bl	8010388 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001224:	2002      	movs	r0, #2
 8001226:	f007 f8ab 	bl	8008380 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <SystemClock_Config+0x100>)
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	4a34      	ldr	r2, [pc, #208]	; (8001304 <SystemClock_Config+0x100>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	62d3      	str	r3, [r2, #44]	; 0x2c
 800123a:	4b32      	ldr	r3, [pc, #200]	; (8001304 <SystemClock_Config+0x100>)
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <SystemClock_Config+0x104>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <SystemClock_Config+0x104>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <SystemClock_Config+0x104>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001260:	bf00      	nop
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <SystemClock_Config+0x104>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800126a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800126e:	d1f8      	bne.n	8001262 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <SystemClock_Config+0x108>)
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <SystemClock_Config+0x108>)
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001280:	2301      	movs	r3, #1
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2340      	movs	r3, #64	; 0x40
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001290:	2304      	movs	r3, #4
 8001292:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001294:	230c      	movs	r3, #12
 8001296:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012a4:	230c      	movs	r3, #12
 80012a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f007 f89d 	bl	80083f4 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012c0:	f000 fd8e 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	233f      	movs	r3, #63	; 0x3f
 80012c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2303      	movs	r3, #3
 80012ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012d8:	2340      	movs	r3, #64	; 0x40
 80012da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 fcb0 	bl	8008c50 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80012f6:	f000 fd73 	bl	8001de0 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3770      	adds	r7, #112	; 0x70
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	58000400 	.word	0x58000400
 8001308:	58024800 	.word	0x58024800
 800130c:	58024400 	.word	0x58024400

08001310 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0b0      	sub	sp, #192	; 0xc0
 8001314:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	22bc      	movs	r2, #188	; 0xbc
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00f f833 	bl	8010388 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001322:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001326:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001328:	2304      	movs	r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800132c:	2309      	movs	r3, #9
 800132e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800133c:	23c0      	movs	r3, #192	; 0xc0
 800133e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001340:	2320      	movs	r3, #32
 8001342:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001344:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f008 f808 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800135e:	f000 fd3f 	bl	8001de0 <Error_Handler>
  }
}
 8001362:	bf00      	nop
 8001364:	37c0      	adds	r7, #192	; 0xc0
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001390:	4b7a      	ldr	r3, [pc, #488]	; (800157c <MX_ADC1_Init+0x210>)
 8001392:	4a7b      	ldr	r2, [pc, #492]	; (8001580 <MX_ADC1_Init+0x214>)
 8001394:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001396:	4b79      	ldr	r3, [pc, #484]	; (800157c <MX_ADC1_Init+0x210>)
 8001398:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800139c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <MX_ADC1_Init+0x210>)
 80013a0:	2208      	movs	r2, #8
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013a4:	4b75      	ldr	r3, [pc, #468]	; (800157c <MX_ADC1_Init+0x210>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013aa:	4b74      	ldr	r3, [pc, #464]	; (800157c <MX_ADC1_Init+0x210>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013b0:	4b72      	ldr	r3, [pc, #456]	; (800157c <MX_ADC1_Init+0x210>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b6:	4b71      	ldr	r3, [pc, #452]	; (800157c <MX_ADC1_Init+0x210>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <MX_ADC1_Init+0x210>)
 80013be:	220b      	movs	r2, #11
 80013c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b6e      	ldr	r3, [pc, #440]	; (800157c <MX_ADC1_Init+0x210>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c8:	4b6c      	ldr	r3, [pc, #432]	; (800157c <MX_ADC1_Init+0x210>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b6b      	ldr	r3, [pc, #428]	; (800157c <MX_ADC1_Init+0x210>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <MX_ADC1_Init+0x210>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013da:	4b68      	ldr	r3, [pc, #416]	; (800157c <MX_ADC1_Init+0x210>)
 80013dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013e2:	4b66      	ldr	r3, [pc, #408]	; (800157c <MX_ADC1_Init+0x210>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <MX_ADC1_Init+0x210>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	4862      	ldr	r0, [pc, #392]	; (800157c <MX_ADC1_Init+0x210>)
 80013f2:	f001 fd1b 	bl	8002e2c <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013fc:	f000 fcf0 	bl	8001de0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	485c      	ldr	r0, [pc, #368]	; (800157c <MX_ADC1_Init+0x210>)
 800140c:	f002 fe1e 	bl	800404c <HAL_ADCEx_MultiModeConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001416:	f000 fce3 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <MX_ADC1_Init+0x218>)
 800141c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141e:	2306      	movs	r3, #6
 8001420:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001422:	2307      	movs	r3, #7
 8001424:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001426:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800142a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142c:	2304      	movs	r3, #4
 800142e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	484f      	ldr	r0, [pc, #316]	; (800157c <MX_ADC1_Init+0x210>)
 800143e:	f001 ff6f 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001448:	f000 fcca 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800144c:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <MX_ADC1_Init+0x21c>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001450:	230c      	movs	r3, #12
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4848      	ldr	r0, [pc, #288]	; (800157c <MX_ADC1_Init+0x210>)
 800145a:	f001 ff61 	bl	8003320 <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001464:	f000 fcbc 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <MX_ADC1_Init+0x220>)
 800146a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800146c:	2312      	movs	r3, #18
 800146e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	4619      	mov	r1, r3
 8001474:	4841      	ldr	r0, [pc, #260]	; (800157c <MX_ADC1_Init+0x210>)
 8001476:	f001 ff53 	bl	8003320 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001480:	f000 fcae 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <MX_ADC1_Init+0x224>)
 8001486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001488:	2318      	movs	r3, #24
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	483a      	ldr	r0, [pc, #232]	; (800157c <MX_ADC1_Init+0x210>)
 8001492:	f001 ff45 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800149c:	f000 fca0 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014a0:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <MX_ADC1_Init+0x228>)
 80014a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4833      	ldr	r0, [pc, #204]	; (800157c <MX_ADC1_Init+0x210>)
 80014b0:	f001 ff36 	bl	8003320 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80014ba:	f000 fc91 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_ADC1_Init+0x22c>)
 80014c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80014c2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80014c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	482b      	ldr	r0, [pc, #172]	; (800157c <MX_ADC1_Init+0x210>)
 80014ce:	f001 ff27 	bl	8003320 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80014d8:	f000 fc82 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <MX_ADC1_Init+0x230>)
 80014de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014e0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	4824      	ldr	r0, [pc, #144]	; (800157c <MX_ADC1_Init+0x210>)
 80014ec:	f001 ff18 	bl	8003320 <HAL_ADC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80014f6:	f000 fc73 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_ADC1_Init+0x234>)
 80014fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014fe:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_ADC1_Init+0x210>)
 800150a:	f001 ff09 	bl	8003320 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001514:	f000 fc64 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_ADC1_Init+0x238>)
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800151c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <MX_ADC1_Init+0x210>)
 8001528:	f001 fefa 	bl	8003320 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001532:	f000 fc55 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_ADC1_Init+0x23c>)
 8001538:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800153a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_ADC1_Init+0x210>)
 8001546:	f001 feeb 	bl	8003320 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001550:	f000 fc46 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_ADC1_Init+0x240>)
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001558:	f240 2306 	movw	r3, #518	; 0x206
 800155c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0x210>)
 8001564:	f001 fedc 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800156e:	f000 fc37 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240000bc 	.word	0x240000bc
 8001580:	40022000 	.word	0x40022000
 8001584:	0c900008 	.word	0x0c900008
 8001588:	10c00010 	.word	0x10c00010
 800158c:	14f00020 	.word	0x14f00020
 8001590:	1d500080 	.word	0x1d500080
 8001594:	21800100 	.word	0x21800100
 8001598:	25b00200 	.word	0x25b00200
 800159c:	2a000400 	.word	0x2a000400
 80015a0:	2e300800 	.word	0x2e300800
 80015a4:	3ac04000 	.word	0x3ac04000
 80015a8:	3ef08000 	.word	0x3ef08000
 80015ac:	47520000 	.word	0x47520000

080015b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015ca:	4a40      	ldr	r2, [pc, #256]	; (80016cc <MX_ADC3_Init+0x11c>)
 80015cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015d8:	2208      	movs	r2, #8
 80015da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015dc:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015de:	2201      	movs	r2, #1
 80015e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e2:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <MX_ADC3_Init+0x118>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_ADC3_Init+0x118>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <MX_ADC3_Init+0x118>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_ADC3_Init+0x118>)
 800160e:	2203      	movs	r2, #3
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <MX_ADC3_Init+0x118>)
 8001614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_ADC3_Init+0x118>)
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <MX_ADC3_Init+0x118>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001628:	4827      	ldr	r0, [pc, #156]	; (80016c8 <MX_ADC3_Init+0x118>)
 800162a:	f001 fbff 	bl	8002e2c <HAL_ADC_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8001634:	f000 fbd4 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <MX_ADC3_Init+0x120>)
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800163c:	2306      	movs	r3, #6
 800163e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001640:	2307      	movs	r3, #7
 8001642:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001644:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001648:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800164a:	2304      	movs	r3, #4
 800164c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	481b      	ldr	r0, [pc, #108]	; (80016c8 <MX_ADC3_Init+0x118>)
 800165c:	f001 fe60 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8001666:	f000 fbbb 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_ADC3_Init+0x124>)
 800166c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800166e:	230c      	movs	r3, #12
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <MX_ADC3_Init+0x118>)
 8001678:	f001 fe52 	bl	8003320 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8001682:	f000 fbad 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800168a:	2312      	movs	r3, #18
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_ADC3_Init+0x118>)
 8001694:	f001 fe44 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 800169e:	f000 fb9f 	bl	8001de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <MX_ADC3_Init+0x128>)
 80016a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016a6:	2318      	movs	r3, #24
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_ADC3_Init+0x118>)
 80016b0:	f001 fe36 	bl	8003320 <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 80016ba:	f000 fb91 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	24000120 	.word	0x24000120
 80016cc:	58026000 	.word	0x58026000
 80016d0:	cb840000 	.word	0xcb840000
 80016d4:	cfb80000 	.word	0xcfb80000
 80016d8:	04300002 	.word	0x04300002

080016dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2224      	movs	r2, #36	; 0x24
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00e fe4d 	bl	8010388 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_DAC1_Init+0x5c>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_DAC1_Init+0x60>)
 80016f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016f4:	4810      	ldr	r0, [pc, #64]	; (8001738 <MX_DAC1_Init+0x5c>)
 80016f6:	f002 fe96 	bl	8004426 <HAL_DAC_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001700:	f000 fb6e 	bl	8001de0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_DAC1_Init+0x5c>)
 8001720:	f002 ff1a 	bl	8004558 <HAL_DAC_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 fb59 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000274 	.word	0x24000274
 800173c:	40007400 	.word	0x40007400

08001740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_I2C1_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_I2C1_Init+0x74>)
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MX_I2C1_Init+0x7c>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001758:	2201      	movs	r2, #1
 800175a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <MX_I2C1_Init+0x74>)
 800177c:	f006 f83a 	bl	80077f4 <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001786:	f000 fb2b 	bl	8001de0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <MX_I2C1_Init+0x74>)
 800178e:	f006 fd23 	bl	80081d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001798:	f000 fb22 	bl	8001de0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800179c:	2100      	movs	r1, #0
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_I2C1_Init+0x74>)
 80017a0:	f006 fd65 	bl	800826e <HAL_I2CEx_ConfigDigitalFilter>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 fb19 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000288 	.word	0x24000288
 80017b8:	40005400 	.word	0x40005400
 80017bc:	00506682 	.word	0x00506682

080017c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <MX_SPI1_Init+0xac>)
 80017c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017dc:	220f      	movs	r2, #15
 80017de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017f6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_SPI1_Init+0xa8>)
 800181e:	2200      	movs	r2, #0
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI1_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_SPI1_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI1_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_SPI1_Init+0xa8>)
 8001854:	f009 ff14 	bl	800b680 <HAL_SPI_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800185e:	f000 fabf 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	240002d4 	.word	0x240002d4
 800186c:	40013000 	.word	0x40013000

08001870 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_SPI2_Init+0xa8>)
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <MX_SPI2_Init+0xac>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_SPI2_Init+0xa8>)
 800187c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001880:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_SPI2_Init+0xa8>)
 8001884:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001888:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_SPI2_Init+0xa8>)
 800188c:	220f      	movs	r2, #15
 800188e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_SPI2_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_SPI2_Init+0xa8>)
 800189e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018a6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80018aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_SPI2_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_SPI2_Init+0xa8>)
 8001904:	f009 febc 	bl	800b680 <HAL_SPI_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800190e:	f000 fa67 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2400035c 	.word	0x2400035c
 800191c:	40003800 	.word	0x40003800

08001920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b096      	sub	sp, #88	; 0x58
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	222c      	movs	r2, #44	; 0x2c
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f00e fd1b 	bl	8010388 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001954:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <MX_TIM1_Init+0x11c>)
 8001956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <MX_TIM1_Init+0x118>)
 800195a:	2263      	movs	r2, #99	; 0x63
 800195c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001966:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <MX_TIM1_Init+0x118>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_TIM1_Init+0x118>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197e:	482e      	ldr	r0, [pc, #184]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001980:	f00a fec6 	bl	800c710 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800198a:	f000 fa29 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800199a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800199e:	4619      	mov	r1, r3
 80019a0:	4825      	ldr	r0, [pc, #148]	; (8001a38 <MX_TIM1_Init+0x118>)
 80019a2:	f00b ffa3 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019ac:	f000 fa18 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b0:	2360      	movs	r3, #96	; 0x60
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 - 1;
 80019b4:	f240 13df 	movw	r3, #479	; 0x1df
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x118>)
 80019d8:	f00b f920 	bl	800cc1c <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019e2:	f000 f9fd 	bl	8001de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001a1c:	f00b fff4 	bl	800da08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a26:	f000 f9db 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x118>)
 8001a2c:	f000 fcd4 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3758      	adds	r7, #88	; 0x58
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	240003e4 	.word	0x240003e4
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150 - 1;
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a8a:	2295      	movs	r2, #149	; 0x95
 8001a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a9c:	f00a fba3 	bl	800c1e6 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f000 f99b 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481c      	ldr	r0, [pc, #112]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ab8:	f00b f9c4 	bl	800ce44 <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ac2:	f000 f98d 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ac8:	f00a fe22 	bl	800c710 <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ad2:	f000 f985 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ae6:	f00b ff01 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001af0:	f000 f976 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	220c      	movs	r2, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b0c:	f00b f886 	bl	800cc1c <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b16:	f000 f963 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b1c:	f000 fc5c 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	24000430 	.word	0x24000430

08001b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <MX_USART1_UART_Init+0x94>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b38:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b74:	4811      	ldr	r0, [pc, #68]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b76:	f00b ffe3 	bl	800db40 <HAL_UART_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b80:	f000 f92e 	bl	8001de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b84:	2100      	movs	r1, #0
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b88:	f00e fa77 	bl	801007a <HAL_UARTEx_SetTxFifoThreshold>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b92:	f000 f925 	bl	8001de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b96:	2100      	movs	r1, #0
 8001b98:	4808      	ldr	r0, [pc, #32]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001b9a:	f00e faac 	bl	80100f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ba4:	f000 f91c 	bl	8001de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <MX_USART1_UART_Init+0x90>)
 8001baa:	f00e fa2d 	bl	8010008 <HAL_UARTEx_DisableFifoMode>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bb4:	f000 f914 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2400047c 	.word	0x2400047c
 8001bc0:	40011000 	.word	0x40011000

08001bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_DMA_Init+0x4c>)
 8001bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <MX_DMA_Init+0x4c>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <MX_DMA_Init+0x4c>)
 8001bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	200b      	movs	r0, #11
 8001bee:	f002 fbe6 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bf2:	200b      	movs	r0, #11
 8001bf4:	f002 fbfd 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	200c      	movs	r0, #12
 8001bfe:	f002 fbde 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c02:	200c      	movs	r0, #12
 8001c04:	f002 fbf5 	bl	80043f2 <HAL_NVIC_EnableIRQ>

}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58024400 	.word	0x58024400

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <MX_GPIO_Init+0xe8>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001ca8:	4815      	ldr	r0, [pc, #84]	; (8001d00 <MX_GPIO_Init+0xec>)
 8001caa:	f005 fd89 	bl	80077c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2164      	movs	r1, #100	; 0x64
 8001cb2:	4814      	ldr	r0, [pc, #80]	; (8001d04 <MX_GPIO_Init+0xf0>)
 8001cb4:	f005 fd84 	bl	80077c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001cb8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001cbc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <MX_GPIO_Init+0xec>)
 8001cd2:	f005 fbad 	bl	8007430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_GPIO_Init+0xf0>)
 8001cee:	f005 fb9f 	bl	8007430 <HAL_GPIO_Init>

}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58020800 	.word	0x58020800
 8001d04:	58020400 	.word	0x58020400

08001d08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <HAL_ADC_ConvCpltCallback+0xc4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d125      	bne.n	8001d64 <HAL_ADC_ConvCpltCallback+0x5c>
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	230b      	movs	r3, #11
 8001d1e:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dd48      	ble.n	8001db8 <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	4413      	add	r3, r2
 8001d30:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d36:	f3bf 8f4f 	dsb	sy
}
 8001d3a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3320      	adds	r3, #32
 8001d48:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b20      	subs	r3, #32
 8001d4e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dcf2      	bgt.n	8001d3c <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d56:	f3bf 8f4f 	dsb	sy
}
 8001d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d5c:	f3bf 8f6f 	isb	sy
}
 8001d60:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d62:	e029      	b.n	8001db8 <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d128      	bne.n	8001dbe <HAL_ADC_ConvCpltCallback+0xb6>
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	2304      	movs	r3, #4
 8001d72:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	dd20      	ble.n	8001dbc <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8a:	f3bf 8f4f 	dsb	sy
}
 8001d8e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3b20      	subs	r3, #32
 8001da2:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dcf2      	bgt.n	8001d90 <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001daa:	f3bf 8f4f 	dsb	sy
}
 8001dae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001db0:	f3bf 8f6f 	isb	sy
}
 8001db4:	bf00      	nop
}
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_ConvCpltCallback+0xb4>
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <HAL_ADC_ConvCpltCallback+0xb6>
 8001dbc:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001dbe:	bf00      	nop
 8001dc0:	372c      	adds	r7, #44	; 0x2c
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	240000bc 	.word	0x240000bc
 8001dd0:	2400058a 	.word	0x2400058a
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	24000120 	.word	0x24000120
 8001ddc:	240005a4 	.word	0x240005a4

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
	...

08001dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_MspInit+0x30>)
 8001df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x30>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x30>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	58024400 	.word	0x58024400

08001e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7b      	ldr	r2, [pc, #492]	; (800202c <HAL_ADC_MspInit+0x20c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f040 8091 	bne.w	8001f66 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e44:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e4a:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	623b      	str	r3, [r7, #32]
 8001e60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	4a71      	ldr	r2, [pc, #452]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e72:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b6b      	ldr	r3, [pc, #428]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	4a6a      	ldr	r2, [pc, #424]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e90:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	4a62      	ldr	r2, [pc, #392]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eae:	4b60      	ldr	r3, [pc, #384]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ebc:	2333      	movs	r3, #51	; 0x33
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4859      	ldr	r0, [pc, #356]	; (8002034 <HAL_ADC_MspInit+0x214>)
 8001ed0:	f005 faae 	bl	8007430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001ed4:	23ce      	movs	r3, #206	; 0xce
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4854      	ldr	r0, [pc, #336]	; (8002038 <HAL_ADC_MspInit+0x218>)
 8001ee8:	f005 faa2 	bl	8007430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eec:	2303      	movs	r3, #3
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	484f      	ldr	r0, [pc, #316]	; (800203c <HAL_ADC_MspInit+0x21c>)
 8001f00:	f005 fa96 	bl	8007430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f06:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <HAL_ADC_MspInit+0x224>)
 8001f08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f0a:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f0c:	2209      	movs	r2, #9
 8001f0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f10:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f16:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f1c:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f2c:	4b44      	ldr	r3, [pc, #272]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f34:	4b42      	ldr	r3, [pc, #264]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f3c:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f48:	483d      	ldr	r0, [pc, #244]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f4a:	f002 fc35 	bl	80047b8 <HAL_DMA_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001f54:	f7ff ff44 	bl	8001de0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f5e:	4a38      	ldr	r2, [pc, #224]	; (8002040 <HAL_ADC_MspInit+0x220>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f64:	e05e      	b.n	8002024 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a37      	ldr	r2, [pc, #220]	; (8002048 <HAL_ADC_MspInit+0x228>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d159      	bne.n	8002024 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f70:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_ADC_MspInit+0x210>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001fac:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001fb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001fb4:	f000 fd16 	bl	80029e4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001fb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001fbc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001fc0:	f000 fd10 	bl	80029e4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_ADC_MspInit+0x230>)
 8001fc8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fcc:	2273      	movs	r2, #115	; 0x73
 8001fce:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ffa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002008:	4810      	ldr	r0, [pc, #64]	; (800204c <HAL_ADC_MspInit+0x22c>)
 800200a:	f002 fbd5 	bl	80047b8 <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002014:	f7ff fee4 	bl	8001de0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_ADC_MspInit+0x22c>)
 800201c:	64da      	str	r2, [r3, #76]	; 0x4c
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_ADC_MspInit+0x22c>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002024:	bf00      	nop
 8002026:	3738      	adds	r7, #56	; 0x38
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40022000 	.word	0x40022000
 8002030:	58024400 	.word	0x58024400
 8002034:	58020800 	.word	0x58020800
 8002038:	58020000 	.word	0x58020000
 800203c:	58020400 	.word	0x58020400
 8002040:	24000184 	.word	0x24000184
 8002044:	40020010 	.word	0x40020010
 8002048:	58026000 	.word	0x58026000
 800204c:	240001fc 	.word	0x240001fc
 8002050:	40020028 	.word	0x40020028

08002054 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_DAC_MspInit+0x80>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d129      	bne.n	80020ca <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_DAC_MspInit+0x84>)
 8002078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_DAC_MspInit+0x84>)
 800207e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_DAC_MspInit+0x84>)
 8002088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_DAC_MspInit+0x84>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_DAC_MspInit+0x84>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_DAC_MspInit+0x84>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b2:	2310      	movs	r3, #16
 80020b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b6:	2303      	movs	r3, #3
 80020b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_DAC_MspInit+0x88>)
 80020c6:	f005 f9b3 	bl	8007430 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40007400 	.word	0x40007400
 80020d8:	58024400 	.word	0x58024400
 80020dc:	58020000 	.word	0x58020000

080020e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0b8      	sub	sp, #224	; 0xe0
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	22bc      	movs	r2, #188	; 0xbc
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f00e f941 	bl	8010388 <memset>
  if(hi2c->Instance==I2C1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <HAL_I2C_MspInit+0xc0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d142      	bne.n	8002196 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002110:	2308      	movs	r3, #8
 8002112:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4618      	mov	r0, r3
 8002120:	f007 f922 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800212a:	f7ff fe59 	bl	8001de0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_I2C_MspInit+0xc4>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <HAL_I2C_MspInit+0xc4>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_I2C_MspInit+0xc4>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800214c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002154:	2312      	movs	r3, #18
 8002156:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002166:	2304      	movs	r3, #4
 8002168:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	; (80021a8 <HAL_I2C_MspInit+0xc8>)
 8002174:	f005 f95c 	bl	8007430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_I2C_MspInit+0xc4>)
 800217a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_I2C_MspInit+0xc4>)
 8002180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002184:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_I2C_MspInit+0xc4>)
 800218a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002196:	bf00      	nop
 8002198:	37e0      	adds	r7, #224	; 0xe0
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40005400 	.word	0x40005400
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58020400 	.word	0x58020400

080021ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0ba      	sub	sp, #232	; 0xe8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	22bc      	movs	r2, #188	; 0xbc
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00e f8db 	bl	8010388 <memset>
  if(hspi->Instance==SPI1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_SPI_MspInit+0x150>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d142      	bne.n	8002262 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f007 f8bc 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021f6:	f7ff fdf3 	bl	8001de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_SPI_MspInit+0x154>)
 80021fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002200:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_SPI_MspInit+0x154>)
 8002202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002206:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_SPI_MspInit+0x154>)
 800220c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_SPI_MspInit+0x154>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221e:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_SPI_MspInit+0x154>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_SPI_MspInit+0x154>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002236:	2318      	movs	r3, #24
 8002238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224e:	2305      	movs	r3, #5
 8002250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002258:	4619      	mov	r1, r3
 800225a:	482a      	ldr	r0, [pc, #168]	; (8002304 <HAL_SPI_MspInit+0x158>)
 800225c:	f005 f8e8 	bl	8007430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002260:	e047      	b.n	80022f2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_SPI_MspInit+0x15c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d142      	bne.n	80022f2 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800226c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002270:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002272:	2300      	movs	r3, #0
 8002274:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	4618      	mov	r0, r3
 800227c:	f007 f874 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002286:	f7ff fdab 	bl	8001de0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_SPI_MspInit+0x154>)
 800228c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_SPI_MspInit+0x154>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_SPI_MspInit+0x154>)
 800229c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_SPI_MspInit+0x154>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_SPI_MspInit+0x154>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_SPI_MspInit+0x154>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80022c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e0:	2305      	movs	r3, #5
 80022e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_SPI_MspInit+0x158>)
 80022ee:	f005 f89f 	bl	8007430 <HAL_GPIO_Init>
}
 80022f2:	bf00      	nop
 80022f4:	37e8      	adds	r7, #232	; 0xe8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40013000 	.word	0x40013000
 8002300:	58024400 	.word	0x58024400
 8002304:	58020400 	.word	0x58020400
 8002308:	40003800 	.word	0x40003800

0800230c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <HAL_TIM_PWM_MspInit+0x78>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12e      	bne.n	800237c <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_TIM_PWM_MspInit+0x7c>)
 8002320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_TIM_PWM_MspInit+0x7c>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_TIM_PWM_MspInit+0x7c>)
 8002330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2018      	movs	r0, #24
 8002342:	f002 f83c 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002346:	2018      	movs	r0, #24
 8002348:	f002 f853 	bl	80043f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	2019      	movs	r0, #25
 8002352:	f002 f834 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002356:	2019      	movs	r0, #25
 8002358:	f002 f84b 	bl	80043f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	201a      	movs	r0, #26
 8002362:	f002 f82c 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002366:	201a      	movs	r0, #26
 8002368:	f002 f843 	bl	80043f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	201b      	movs	r0, #27
 8002372:	f002 f824 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002376:	201b      	movs	r0, #27
 8002378:	f002 f83b 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40010000 	.word	0x40010000
 8002388:	58024400 	.word	0x58024400

0800238c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239c:	d116      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_TIM_Base_MspInit+0x48>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_TIM_Base_MspInit+0x48>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_TIM_Base_MspInit+0x48>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2101      	movs	r1, #1
 80023c0:	201c      	movs	r0, #28
 80023c2:	f001 fffc 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c6:	201c      	movs	r0, #28
 80023c8:	f002 f813 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	58024400 	.word	0x58024400

080023d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <HAL_TIM_MspPostInit+0xb8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d120      	bne.n	800243c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_TIM_MspPostInit+0xbc>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	4a24      	ldr	r2, [pc, #144]	; (8002494 <HAL_TIM_MspPostInit+0xbc>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_TIM_MspPostInit+0xbc>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800242a:	2301      	movs	r3, #1
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4818      	ldr	r0, [pc, #96]	; (8002498 <HAL_TIM_MspPostInit+0xc0>)
 8002436:	f004 fffb 	bl	8007430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800243a:	e024      	b.n	8002486 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d11f      	bne.n	8002486 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_TIM_MspPostInit+0xbc>)
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_TIM_MspPostInit+0xbc>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_TIM_MspPostInit+0xbc>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4806      	ldr	r0, [pc, #24]	; (800249c <HAL_TIM_MspPostInit+0xc4>)
 8002482:	f004 ffd5 	bl	8007430 <HAL_GPIO_Init>
}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	58024400 	.word	0x58024400
 8002498:	58020000 	.word	0x58020000
 800249c:	58020400 	.word	0x58020400

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0b8      	sub	sp, #224	; 0xe0
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	22bc      	movs	r2, #188	; 0xbc
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00d ff61 	bl	8010388 <memset>
  if(huart->Instance==USART1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <HAL_UART_MspInit+0xd0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d14a      	bne.n	8002566 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f006 ff42 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ea:	f7ff fc79 	bl	8001de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_UART_MspInit+0xd4>)
 80024f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_UART_MspInit+0xd4>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_UART_MspInit+0xd4>)
 8002500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_UART_MspInit+0xd4>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002512:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_UART_MspInit+0xd4>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_UART_MspInit+0xd4>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800252a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800252e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002544:	2307      	movs	r3, #7
 8002546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800254e:	4619      	mov	r1, r3
 8002550:	4809      	ldr	r0, [pc, #36]	; (8002578 <HAL_UART_MspInit+0xd8>)
 8002552:	f004 ff6d 	bl	8007430 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2025      	movs	r0, #37	; 0x25
 800255c:	f001 ff2f 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002560:	2025      	movs	r0, #37	; 0x25
 8002562:	f001 ff46 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	37e0      	adds	r7, #224	; 0xe0
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40011000 	.word	0x40011000
 8002574:	58024400 	.word	0x58024400
 8002578:	58020000 	.word	0x58020000

0800257c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <NMI_Handler+0x4>

08002582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <HardFault_Handler+0x4>

08002588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <MemManage_Handler+0x4>

0800258e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <BusFault_Handler+0x4>

08002594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <UsageFault_Handler+0x4>

0800259a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c8:	f000 f9ac 	bl	8002924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <DMA1_Stream0_IRQHandler+0x10>)
 80025d6:	f003 fc19 	bl	8005e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	24000184 	.word	0x24000184

080025e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA1_Stream1_IRQHandler+0x10>)
 80025ea:	f003 fc0f 	bl	8005e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	240001fc 	.word	0x240001fc

080025f8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM1_BRK_IRQHandler+0x10>)
 80025fe:	f00a f9ed 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	240003e4 	.word	0x240003e4

0800260c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM1_UP_IRQHandler+0x10>)
 8002612:	f00a f9e3 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	240003e4 	.word	0x240003e4

08002620 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002626:	f00a f9d9 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	240003e4 	.word	0x240003e4

08002634 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <TIM1_CC_IRQHandler+0x10>)
 800263a:	f00a f9cf 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240003e4 	.word	0x240003e4

08002648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <TIM2_IRQHandler+0x10>)
 800264e:	f00a f9c5 	bl	800c9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	24000430 	.word	0x24000430

0800265c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <USART1_IRQHandler+0x10>)
 8002662:	f00b fba9 	bl	800ddb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2400047c 	.word	0x2400047c

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f00d fe8a 	bl	80103b8 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	24080000 	.word	0x24080000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	240005c4 	.word	0x240005c4
 80026d8:	24000718 	.word	0x24000718

080026dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026e0:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <SystemInit+0xe4>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a36      	ldr	r2, [pc, #216]	; (80027c0 <SystemInit+0xe4>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <SystemInit+0xe8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d807      	bhi.n	800270c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <SystemInit+0xe8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <SystemInit+0xe8>)
 8002706:	f043 0307 	orr.w	r3, r3, #7
 800270a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <SystemInit+0xec>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <SystemInit+0xec>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <SystemInit+0xec>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <SystemInit+0xec>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4929      	ldr	r1, [pc, #164]	; (80027c8 <SystemInit+0xec>)
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <SystemInit+0xf0>)
 8002726:	4013      	ands	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <SystemInit+0xe8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <SystemInit+0xe8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 030f 	bic.w	r3, r3, #15
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <SystemInit+0xe8>)
 8002740:	f043 0307 	orr.w	r3, r3, #7
 8002744:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <SystemInit+0xec>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <SystemInit+0xec>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <SystemInit+0xec>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <SystemInit+0xec>)
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <SystemInit+0xf4>)
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <SystemInit+0xec>)
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <SystemInit+0xf8>)
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <SystemInit+0xec>)
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <SystemInit+0xfc>)
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <SystemInit+0xec>)
 800276c:	2200      	movs	r2, #0
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <SystemInit+0xec>)
 8002772:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <SystemInit+0xfc>)
 8002774:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <SystemInit+0xec>)
 8002778:	2200      	movs	r2, #0
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <SystemInit+0xec>)
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <SystemInit+0xfc>)
 8002780:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <SystemInit+0xec>)
 8002784:	2200      	movs	r2, #0
 8002786:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <SystemInit+0xec>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <SystemInit+0xec>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <SystemInit+0xec>)
 8002796:	2200      	movs	r2, #0
 8002798:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <SystemInit+0x100>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <SystemInit+0x104>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a6:	d202      	bcs.n	80027ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <SystemInit+0x108>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <SystemInit+0x10c>)
 80027b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00
 80027c4:	52002000 	.word	0x52002000
 80027c8:	58024400 	.word	0x58024400
 80027cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80027d0:	02020200 	.word	0x02020200
 80027d4:	01ff0000 	.word	0x01ff0000
 80027d8:	01010280 	.word	0x01010280
 80027dc:	5c001000 	.word	0x5c001000
 80027e0:	ffff0000 	.word	0xffff0000
 80027e4:	51008108 	.word	0x51008108
 80027e8:	52004000 	.word	0x52004000

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f0:	f7ff ff74 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f4:	480c      	ldr	r0, [pc, #48]	; (8002828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027f6:	490d      	ldr	r1, [pc, #52]	; (800282c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027fc:	e002      	b.n	8002804 <LoopCopyDataInit>

080027fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002802:	3304      	adds	r3, #4

08002804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002808:	d3f9      	bcc.n	80027fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800280c:	4c0a      	ldr	r4, [pc, #40]	; (8002838 <LoopFillZerobss+0x22>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002810:	e001      	b.n	8002816 <LoopFillZerobss>

08002812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002814:	3204      	adds	r2, #4

08002816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002818:	d3fb      	bcc.n	8002812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800281a:	f00d fdd3 	bl	80103c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7fe fc63 	bl	80010e8 <main>
  bx  lr
 8002822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002828:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800282c:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8002830:	08010544 	.word	0x08010544
  ldr r2, =_sbss
 8002834:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8002838:	24000714 	.word	0x24000714

0800283c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC3_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002846:	2003      	movs	r0, #3
 8002848:	f001 fdae 	bl	80043a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800284c:	f006 fbb6 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_Init+0x68>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	4913      	ldr	r1, [pc, #76]	; (80028ac <HAL_Init+0x6c>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_Init+0x68>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_Init+0x6c>)
 8002874:	5cd3      	ldrb	r3, [r2, r3]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_Init+0x70>)
 8002882:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <HAL_Init+0x74>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800288a:	200f      	movs	r0, #15
 800288c:	f000 f814 	bl	80028b8 <HAL_InitTick>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e002      	b.n	80028a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800289a:	f7ff faa7 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	58024400 	.word	0x58024400
 80028ac:	080104f4 	.word	0x080104f4
 80028b0:	24000034 	.word	0x24000034
 80028b4:	24000030 	.word	0x24000030

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_InitTick+0x60>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e021      	b.n	8002910 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_InitTick+0x64>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_InitTick+0x60>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028da:	fbb3 f3f1 	udiv	r3, r3, r1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fd93 	bl	800440e <HAL_SYSTICK_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00e      	b.n	8002910 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d80a      	bhi.n	800290e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f8:	2200      	movs	r2, #0
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002900:	f001 fd5d 	bl	80043be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <HAL_InitTick+0x68>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2400003c 	.word	0x2400003c
 800291c:	24000030 	.word	0x24000030
 8002920:	24000038 	.word	0x24000038

08002924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_IncTick+0x20>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_IncTick+0x24>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_IncTick+0x24>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2400003c 	.word	0x2400003c
 8002948:	240005c8 	.word	0x240005c8

0800294c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_GetTick+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	240005c8 	.word	0x240005c8

08002964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff ffee 	bl	800294c <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297c:	d005      	beq.n	800298a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_Delay+0x44>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800298a:	bf00      	nop
 800298c:	f7ff ffde 	bl	800294c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8f7      	bhi.n	800298c <HAL_Delay+0x28>
  {
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2400003c 	.word	0x2400003c

080029ac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_SuspendTick+0x1c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_SuspendTick+0x1c>)
 80029b6:	f023 0302 	bic.w	r3, r3, #2
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_GetREVID+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0c1b      	lsrs	r3, r3, #16
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	5c001000 	.word	0x5c001000

080029e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	58000400 	.word	0x58000400

08002a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3360      	adds	r3, #96	; 0x60
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]
  }
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3330      	adds	r3, #48	; 0x30
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	211f      	movs	r1, #31
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	f003 011f 	and.w	r1, r3, #31
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f023 0203 	bic.w	r2, r3, #3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	0e5b      	lsrs	r3, r3, #25
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0d1b      	lsrs	r3, r3, #20
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0d1b      	lsrs	r3, r3, #20
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0318 	and.w	r3, r3, #24
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c40:	40d9      	lsrs	r1, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	400b      	ands	r3, r1
 8002c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	000fffff 	.word	0x000fffff

08002c64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 031f 	and.w	r3, r3, #31
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6093      	str	r3, [r2, #8]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	5fffffc0 	.word	0x5fffffc0

08002ca4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d101      	bne.n	8002cbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	6fffffc0 	.word	0x6fffffc0

08002cf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <LL_ADC_Enable+0x24>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	7fffffc0 	.word	0x7fffffc0

08002d44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <LL_ADC_Disable+0x24>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	7fffffc0 	.word	0x7fffffc0

08002d6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <LL_ADC_IsEnabled+0x18>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <LL_ADC_IsEnabled+0x1a>
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d101      	bne.n	8002daa <LL_ADC_IsDisableOngoing+0x18>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_ADC_IsDisableOngoing+0x1a>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <LL_ADC_REG_StartConversion+0x24>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	7fffffc0 	.word	0x7fffffc0

08002de0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e18f      	b.n	8003166 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe ffe3 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff19 	bl	8002ca4 <LL_ADC_IsDeepPowerDownEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff feff 	bl	8002c80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff34 	bl	8002cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d114      	bne.n	8002ebc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff18 	bl	8002ccc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9c:	4b87      	ldr	r3, [pc, #540]	; (80030bc <HAL_ADC_Init+0x290>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	4a87      	ldr	r2, [pc, #540]	; (80030c0 <HAL_ADC_Init+0x294>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eae:	e002      	b.n	8002eb6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f9      	bne.n	8002eb0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff17 	bl	8002cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff77 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8129 	bne.w	8003154 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8125 	bne.w	8003154 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff24 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d136      	bne.n	8002f98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a65      	ldr	r2, [pc, #404]	; (80030c4 <HAL_ADC_Init+0x298>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_Init+0x112>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a63      	ldr	r2, [pc, #396]	; (80030c8 <HAL_ADC_Init+0x29c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10e      	bne.n	8002f5c <HAL_ADC_Init+0x130>
 8002f3e:	4861      	ldr	r0, [pc, #388]	; (80030c4 <HAL_ADC_Init+0x298>)
 8002f40:	f7ff ff14 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f44:	4604      	mov	r4, r0
 8002f46:	4860      	ldr	r0, [pc, #384]	; (80030c8 <HAL_ADC_Init+0x29c>)
 8002f48:	f7ff ff10 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <HAL_ADC_Init+0x142>
 8002f5c:	485b      	ldr	r0, [pc, #364]	; (80030cc <HAL_ADC_Init+0x2a0>)
 8002f5e:	f7ff ff05 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a53      	ldr	r2, [pc, #332]	; (80030c4 <HAL_ADC_Init+0x298>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_Init+0x15a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <HAL_ADC_Init+0x29c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Init+0x15e>
 8002f86:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_ADC_Init+0x2a4>)
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_Init+0x160>
 8002f8a:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_ADC_Init+0x2a8>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff fd3c 	bl	8002a10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f98:	f7ff fd18 	bl	80029cc <HAL_GetREVID>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d914      	bls.n	8002fd0 <HAL_ADC_Init+0x1a4>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d110      	bne.n	8002fd0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7d5b      	ldrb	r3, [r3, #21]
 8002fb2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fbe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7f1b      	ldrb	r3, [r3, #28]
 8002fc4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fc6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fc8:	f043 030c 	orr.w	r3, r3, #12
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	e00d      	b.n	8002fec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7d5b      	ldrb	r3, [r3, #21]
 8002fd4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fda:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fe0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f1b      	ldrb	r3, [r3, #28]
 8002fe6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7f1b      	ldrb	r3, [r3, #28]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	045b      	lsls	r3, r3, #17
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_ADC_Init+0x2ac>)
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	430b      	orrs	r3, r1
 8003030:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fed2 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 800303c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fedf 	bl	8002e06 <LL_ADC_INJ_IsConversionOngoing>
 8003048:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d15f      	bne.n	8003110 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d15c      	bne.n	8003110 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7d1b      	ldrb	r3, [r3, #20]
 800305a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_ADC_Init+0x2b0>)
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	430b      	orrs	r3, r1
 8003076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800307e:	2b01      	cmp	r3, #1
 8003080:	d130      	bne.n	80030e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_ADC_Init+0x2b4>)
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003096:	3a01      	subs	r2, #1
 8003098:	0411      	lsls	r1, r2, #16
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030aa:	430a      	orrs	r2, r1
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	e01c      	b.n	80030f4 <HAL_ADC_Init+0x2c8>
 80030ba:	bf00      	nop
 80030bc:	24000030 	.word	0x24000030
 80030c0:	053e2d63 	.word	0x053e2d63
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40022100 	.word	0x40022100
 80030cc:	58026000 	.word	0x58026000
 80030d0:	40022300 	.word	0x40022300
 80030d4:	58026300 	.word	0x58026300
 80030d8:	fff0c003 	.word	0xfff0c003
 80030dc:	ffffbffc 	.word	0xffffbffc
 80030e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fdd6 	bl	8003cbc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10c      	bne.n	8003132 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f023 010f 	bic.w	r1, r3, #15
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
 8003130:	e007      	b.n	8003142 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020f 	bic.w	r2, r2, #15
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
 8003152:	e007      	b.n	8003164 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003164:	7ffb      	ldrb	r3, [r7, #31]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop

08003170 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a55      	ldr	r2, [pc, #340]	; (80032d8 <HAL_ADC_Start_DMA+0x168>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_ADC_Start_DMA+0x20>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a54      	ldr	r2, [pc, #336]	; (80032dc <HAL_ADC_Start_DMA+0x16c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_ADC_Start_DMA+0x24>
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_ADC_Start_DMA+0x170>)
 8003192:	e000      	b.n	8003196 <HAL_ADC_Start_DMA+0x26>
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_ADC_Start_DMA+0x174>)
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fd64 	bl	8002c64 <LL_ADC_GetMultimode>
 800319c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe1c 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 808c 	bne.w	80032c8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start_DMA+0x4e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e087      	b.n	80032ce <HAL_ADC_Start_DMA+0x15e>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d002      	beq.n	80031d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d170      	bne.n	80032ba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fbf1 	bl	80039c0 <ADC_Enable>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d163      	bne.n	80032b0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_ADC_Start_DMA+0x178>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a37      	ldr	r2, [pc, #220]	; (80032dc <HAL_ADC_Start_DMA+0x16c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d002      	beq.n	8003208 <HAL_ADC_Start_DMA+0x98>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e000      	b.n	800320a <HAL_ADC_Start_DMA+0x9a>
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_ADC_Start_DMA+0x168>)
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4293      	cmp	r3, r2
 8003210:	d002      	beq.n	8003218 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f023 0206 	bic.w	r2, r3, #6
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	659a      	str	r2, [r3, #88]	; 0x58
 800323c:	e002      	b.n	8003244 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_ADC_Start_DMA+0x17c>)
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_ADC_Start_DMA+0x180>)
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_ADC_Start_DMA+0x184>)
 800325a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	221c      	movs	r2, #28
 8003262:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0210 	orr.w	r2, r2, #16
 800327a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f7ff fc89 	bl	8002b9e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3340      	adds	r3, #64	; 0x40
 8003296:	4619      	mov	r1, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f001 fde8 	bl	8004e70 <HAL_DMA_Start_IT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fd85 	bl	8002db8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032ae:	e00d      	b.n	80032cc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80032b8:	e008      	b.n	80032cc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032c6:	e001      	b.n	80032cc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40022100 	.word	0x40022100
 80032e0:	40022300 	.word	0x40022300
 80032e4:	58026300 	.word	0x58026300
 80032e8:	fffff0fe 	.word	0xfffff0fe
 80032ec:	08003b93 	.word	0x08003b93
 80032f0:	08003c6b 	.word	0x08003c6b
 80032f4:	08003c87 	.word	0x08003c87

080032f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b0a1      	sub	sp, #132	; 0x84
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a9d      	ldr	r2, [pc, #628]	; (80035b0 <HAL_ADC_ConfigChannel+0x290>)
 800333a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x2a>
 8003346:	2302      	movs	r3, #2
 8003348:	e321      	b.n	800398e <HAL_ADC_ConfigChannel+0x66e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fd42 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8306 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x62>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2201      	movs	r2, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	e016      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x90>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003392:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e003      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800339e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2201      	movs	r2, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	69d1      	ldr	r1, [r2, #28]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f7ff fbbb 	bl	8002b46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fd03 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 80033da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fd10 	bl	8002e06 <LL_ADC_INJ_IsConversionOngoing>
 80033e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 80b3 	bne.w	8003556 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80af 	bne.w	8003556 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	461a      	mov	r2, r3
 8003406:	f7ff fbdd 	bl	8002bc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800340a:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_ADC_ConfigChannel+0x294>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003416:	d10b      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x110>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	e01d      	b.n	800346c <HAL_ADC_ConfigChannel+0x14c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x136>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	e00a      	b.n	800346c <HAL_ADC_ConfigChannel+0x14c>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d027      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003484:	f7ff faf8 	bl	8002a78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6919      	ldr	r1, [r3, #16]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	7e5b      	ldrb	r3, [r3, #25]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <HAL_ADC_ConfigChannel+0x17e>
 8003498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800349c:	e000      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x180>
 800349e:	2300      	movs	r3, #0
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7ff fb22 	bl	8002aea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6919      	ldr	r1, [r3, #16]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7e1b      	ldrb	r3, [r3, #24]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d102      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x19c>
 80034b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ba:	e000      	b.n	80034be <HAL_ADC_ConfigChannel+0x19e>
 80034bc:	2300      	movs	r3, #0
 80034be:	461a      	mov	r2, r3
 80034c0:	f7ff fafa 	bl	8002ab8 <LL_ADC_SetDataRightShift>
 80034c4:	e047      	b.n	8003556 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	069b      	lsls	r3, r3, #26
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d107      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	069b      	lsls	r3, r3, #26
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d107      	bne.n	800350e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800350c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	069b      	lsls	r3, r3, #26
 800351e:	429a      	cmp	r2, r3
 8003520:	d107      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003530:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	069b      	lsls	r3, r3, #26
 8003542:	429a      	cmp	r2, r3
 8003544:	d107      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003554:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fc06 	bl	8002d6c <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 820d 	bne.w	8003982 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff fb51 	bl	8002c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4a0c      	ldr	r2, [pc, #48]	; (80035b0 <HAL_ADC_ConfigChannel+0x290>)
 8003580:	4293      	cmp	r3, r2
 8003582:	f040 8133 	bne.w	80037ec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003592:	2b00      	cmp	r3, #0
 8003594:	d110      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x298>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	3301      	adds	r3, #1
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	bf94      	ite	ls
 80035a6:	2301      	movls	r3, #1
 80035a8:	2300      	movhi	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e01e      	b.n	80035ec <HAL_ADC_ConfigChannel+0x2cc>
 80035ae:	bf00      	nop
 80035b0:	47ff0000 	.word	0x47ff0000
 80035b4:	5c001000 	.word	0x5c001000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80035d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2b09      	cmp	r3, #9
 80035e4:	bf94      	ite	ls
 80035e6:	2301      	movls	r3, #1
 80035e8:	2300      	movhi	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d079      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_ADC_ConfigChannel+0x2ec>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	3301      	adds	r3, #1
 8003604:	069b      	lsls	r3, r3, #26
 8003606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360a:	e015      	b.n	8003638 <HAL_ADC_ConfigChannel+0x318>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	fa93 f3a3 	rbit	r3, r3
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800361e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003624:	2320      	movs	r3, #32
 8003626:	e003      	b.n	8003630 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	3301      	adds	r3, #1
 8003632:	069b      	lsls	r3, r3, #26
 8003634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x338>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	e017      	b.n	8003688 <HAL_ADC_ConfigChannel+0x368>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800366a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e003      	b.n	800367c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	ea42 0103 	orr.w	r1, r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x38e>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0e9b      	lsrs	r3, r3, #26
 800369e:	3301      	adds	r3, #1
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	051b      	lsls	r3, r3, #20
 80036ac:	e018      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x3c0>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e003      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e0:	430b      	orrs	r3, r1
 80036e2:	e07e      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d107      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x3e0>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	3301      	adds	r3, #1
 80036f8:	069b      	lsls	r3, r3, #26
 80036fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fe:	e015      	b.n	800372c <HAL_ADC_ConfigChannel+0x40c>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	e003      	b.n	8003724 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	069b      	lsls	r3, r3, #26
 8003728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_ADC_ConfigChannel+0x42c>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	e017      	b.n	800377c <HAL_ADC_ConfigChannel+0x45c>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	61bb      	str	r3, [r7, #24]
  return result;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003764:	2320      	movs	r3, #32
 8003766:	e003      	b.n	8003770 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	ea42 0103 	orr.w	r1, r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x488>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	3b1e      	subs	r3, #30
 80037a0:	051b      	lsls	r3, r3, #20
 80037a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037a6:	e01b      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x4c0>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	60fb      	str	r3, [r7, #12]
  return result;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e003      	b.n	80037cc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f003 021f 	and.w	r2, r3, #31
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	3b1e      	subs	r3, #30
 80037da:	051b      	lsls	r3, r3, #20
 80037dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e0:	430b      	orrs	r3, r1
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6892      	ldr	r2, [r2, #8]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7ff f9ec 	bl	8002bc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f280 80c6 	bge.w	8003982 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a67      	ldr	r2, [pc, #412]	; (8003998 <HAL_ADC_ConfigChannel+0x678>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_ADC_ConfigChannel+0x4ea>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a65      	ldr	r2, [pc, #404]	; (800399c <HAL_ADC_ConfigChannel+0x67c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_ADC_ConfigChannel+0x4ee>
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_ADC_ConfigChannel+0x680>)
 800380c:	e000      	b.n	8003810 <HAL_ADC_ConfigChannel+0x4f0>
 800380e:	4b65      	ldr	r3, [pc, #404]	; (80039a4 <HAL_ADC_ConfigChannel+0x684>)
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f923 	bl	8002a5c <LL_ADC_GetCommonPathInternalCh>
 8003816:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a5e      	ldr	r2, [pc, #376]	; (8003998 <HAL_ADC_ConfigChannel+0x678>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_ADC_ConfigChannel+0x50c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a5d      	ldr	r2, [pc, #372]	; (800399c <HAL_ADC_ConfigChannel+0x67c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10e      	bne.n	800384a <HAL_ADC_ConfigChannel+0x52a>
 800382c:	485a      	ldr	r0, [pc, #360]	; (8003998 <HAL_ADC_ConfigChannel+0x678>)
 800382e:	f7ff fa9d 	bl	8002d6c <LL_ADC_IsEnabled>
 8003832:	4604      	mov	r4, r0
 8003834:	4859      	ldr	r0, [pc, #356]	; (800399c <HAL_ADC_ConfigChannel+0x67c>)
 8003836:	f7ff fa99 	bl	8002d6c <LL_ADC_IsEnabled>
 800383a:	4603      	mov	r3, r0
 800383c:	4323      	orrs	r3, r4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	e008      	b.n	800385c <HAL_ADC_ConfigChannel+0x53c>
 800384a:	4857      	ldr	r0, [pc, #348]	; (80039a8 <HAL_ADC_ConfigChannel+0x688>)
 800384c:	f7ff fa8e 	bl	8002d6c <LL_ADC_IsEnabled>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d07d      	beq.n	800395c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a51      	ldr	r2, [pc, #324]	; (80039ac <HAL_ADC_ConfigChannel+0x68c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d130      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x5ac>
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12b      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a4b      	ldr	r2, [pc, #300]	; (80039a8 <HAL_ADC_ConfigChannel+0x688>)
 800387a:	4293      	cmp	r3, r2
 800387c:	f040 8081 	bne.w	8003982 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a44      	ldr	r2, [pc, #272]	; (8003998 <HAL_ADC_ConfigChannel+0x678>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_ADC_ConfigChannel+0x574>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a43      	ldr	r2, [pc, #268]	; (800399c <HAL_ADC_ConfigChannel+0x67c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x578>
 8003894:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_ADC_ConfigChannel+0x680>)
 8003896:	e000      	b.n	800389a <HAL_ADC_ConfigChannel+0x57a>
 8003898:	4a42      	ldr	r2, [pc, #264]	; (80039a4 <HAL_ADC_ConfigChannel+0x684>)
 800389a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7ff f8c7 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038a8:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <HAL_ADC_ConfigChannel+0x690>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <HAL_ADC_ConfigChannel+0x694>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038bc:	e002      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f9      	bne.n	80038be <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ca:	e05a      	b.n	8003982 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_ADC_ConfigChannel+0x698>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d11e      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x5f4>
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d119      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a30      	ldr	r2, [pc, #192]	; (80039a8 <HAL_ADC_ConfigChannel+0x688>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d14b      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <HAL_ADC_ConfigChannel+0x678>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x5de>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <HAL_ADC_ConfigChannel+0x67c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x5e2>
 80038fe:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <HAL_ADC_ConfigChannel+0x680>)
 8003900:	e000      	b.n	8003904 <HAL_ADC_ConfigChannel+0x5e4>
 8003902:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_ADC_ConfigChannel+0x684>)
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7ff f892 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003912:	e036      	b.n	8003982 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	; (80039bc <HAL_ADC_ConfigChannel+0x69c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d131      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x662>
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d12c      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <HAL_ADC_ConfigChannel+0x688>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d127      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_ADC_ConfigChannel+0x678>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x626>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a16      	ldr	r2, [pc, #88]	; (800399c <HAL_ADC_ConfigChannel+0x67c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x62a>
 8003946:	4a16      	ldr	r2, [pc, #88]	; (80039a0 <HAL_ADC_ConfigChannel+0x680>)
 8003948:	e000      	b.n	800394c <HAL_ADC_ConfigChannel+0x62c>
 800394a:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_ADC_ConfigChannel+0x684>)
 800394c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f7ff f86e 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
 800395a:	e012      	b.n	8003982 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800396e:	e008      	b.n	8003982 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800398a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800398e:	4618      	mov	r0, r3
 8003990:	3784      	adds	r7, #132	; 0x84
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	bf00      	nop
 8003998:	40022000 	.word	0x40022000
 800399c:	40022100 	.word	0x40022100
 80039a0:	40022300 	.word	0x40022300
 80039a4:	58026300 	.word	0x58026300
 80039a8:	58026000 	.word	0x58026000
 80039ac:	cb840000 	.word	0xcb840000
 80039b0:	24000030 	.word	0x24000030
 80039b4:	053e2d63 	.word	0x053e2d63
 80039b8:	c7520000 	.word	0xc7520000
 80039bc:	cfb80000 	.word	0xcfb80000

080039c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f9cd 	bl	8002d6c <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d16e      	bne.n	8003ab6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <ADC_Enable+0x100>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	f043 0210 	orr.w	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e05a      	b.n	8003ab8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f988 	bl	8002d1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe ff9e 	bl	800294c <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <ADC_Enable+0x104>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <ADC_Enable+0x66>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <ADC_Enable+0x108>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <ADC_Enable+0x6a>
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <ADC_Enable+0x10c>)
 8003a28:	e000      	b.n	8003a2c <ADC_Enable+0x6c>
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <ADC_Enable+0x110>)
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff f919 	bl	8002c64 <LL_ADC_GetMultimode>
 8003a32:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <ADC_Enable+0x108>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d002      	beq.n	8003a44 <ADC_Enable+0x84>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	e000      	b.n	8003a46 <ADC_Enable+0x86>
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <ADC_Enable+0x104>)
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02c      	beq.n	8003aa8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d130      	bne.n	8003ab6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a54:	e028      	b.n	8003aa8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff f986 	bl	8002d6c <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff f956 	bl	8002d1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a70:	f7fe ff6c 	bl	800294c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d914      	bls.n	8003aa8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d00d      	beq.n	8003aa8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f043 0210 	orr.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d1cf      	bne.n	8003a56 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	8000003f 	.word	0x8000003f
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022100 	.word	0x40022100
 8003acc:	40022300 	.word	0x40022300
 8003ad0:	58026300 	.word	0x58026300

08003ad4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f956 	bl	8002d92 <LL_ADC_IsDisableOngoing>
 8003ae6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff f93d 	bl	8002d6c <LL_ADC_IsEnabled>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d047      	beq.n	8003b88 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d144      	bne.n	8003b88 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030d 	and.w	r3, r3, #13
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10c      	bne.n	8003b26 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f917 	bl	8002d44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b1e:	f7fe ff15 	bl	800294c <HAL_GetTick>
 8003b22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b24:	e029      	b.n	8003b7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e023      	b.n	8003b8a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b42:	f7fe ff03 	bl	800294c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d914      	bls.n	8003b7a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f043 0210 	orr.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e007      	b.n	8003b8a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1dc      	bne.n	8003b42 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d14b      	bne.n	8003c44 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d021      	beq.n	8003c0a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ffa8 	bl	8002b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d032      	beq.n	8003c3c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d12b      	bne.n	8003c3c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11f      	bne.n	8003c3c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
 8003c08:	e018      	b.n	8003c3c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7fe f863 	bl	8001d08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c42:	e00e      	b.n	8003c62 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fb5b 	bl	800330c <HAL_ADC_ErrorCallback>
}
 8003c56:	e004      	b.n	8003c62 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fb3d 	bl	80032f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff fb2d 	bl	800330c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a79      	ldr	r2, [pc, #484]	; (8003eb0 <ADC_ConfigureBoostMode+0x1f4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <ADC_ConfigureBoostMode+0x1c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a78      	ldr	r2, [pc, #480]	; (8003eb4 <ADC_ConfigureBoostMode+0x1f8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d109      	bne.n	8003cec <ADC_ConfigureBoostMode+0x30>
 8003cd8:	4b77      	ldr	r3, [pc, #476]	; (8003eb8 <ADC_ConfigureBoostMode+0x1fc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e008      	b.n	8003cfe <ADC_ConfigureBoostMode+0x42>
 8003cec:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <ADC_ConfigureBoostMode+0x200>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d02:	f005 fad5 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 8003d06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d10:	d010      	beq.n	8003d34 <ADC_ConfigureBoostMode+0x78>
 8003d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d16:	d871      	bhi.n	8003dfc <ADC_ConfigureBoostMode+0x140>
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d002      	beq.n	8003d24 <ADC_ConfigureBoostMode+0x68>
 8003d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d22:	d16b      	bne.n	8003dfc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	60fb      	str	r3, [r7, #12]
        break;
 8003d32:	e066      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	60fb      	str	r3, [r7, #12]
        break;
 8003d3a:	e062      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d40:	f006 fa58 	bl	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d4e:	d051      	beq.n	8003df4 <ADC_ConfigureBoostMode+0x138>
 8003d50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d54:	d854      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d5a:	d047      	beq.n	8003dec <ADC_ConfigureBoostMode+0x130>
 8003d5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d60:	d84e      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d66:	d03d      	beq.n	8003de4 <ADC_ConfigureBoostMode+0x128>
 8003d68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d6c:	d848      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d72:	d033      	beq.n	8003ddc <ADC_ConfigureBoostMode+0x120>
 8003d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d78:	d842      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d7e:	d029      	beq.n	8003dd4 <ADC_ConfigureBoostMode+0x118>
 8003d80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d84:	d83c      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d8a:	d01a      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x106>
 8003d8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d90:	d836      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d96:	d014      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x106>
 8003d98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d9c:	d830      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d00e      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x106>
 8003da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da8:	d82a      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003daa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dae:	d008      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x106>
 8003db0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003db4:	d824      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dba:	d002      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x106>
 8003dbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dc0:	d11e      	bne.n	8003e00 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
        break;
 8003dd2:	e016      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
        break;
 8003dda:	e012      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	e00e      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e00a      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	09db      	lsrs	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
        break;
 8003df2:	e006      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	60fb      	str	r3, [r7, #12]
        break;
 8003dfa:	e002      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003e00:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e02:	f7fe fde3 	bl	80029cc <HAL_GetREVID>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d815      	bhi.n	8003e3c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <ADC_ConfigureBoostMode+0x204>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d908      	bls.n	8003e2a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e28:	e03e      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e38:	609a      	str	r2, [r3, #8]
}
 8003e3a:	e035      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <ADC_ConfigureBoostMode+0x208>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d808      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	e025      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <ADC_ConfigureBoostMode+0x20c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d80a      	bhi.n	8003e7a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	e016      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <ADC_ConfigureBoostMode+0x210>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d80a      	bhi.n	8003e98 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	609a      	str	r2, [r3, #8]
}
 8003e96:	e007      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ea6:	609a      	str	r2, [r3, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40022000 	.word	0x40022000
 8003eb4:	40022100 	.word	0x40022100
 8003eb8:	40022300 	.word	0x40022300
 8003ebc:	58026300 	.word	0x58026300
 8003ec0:	01312d00 	.word	0x01312d00
 8003ec4:	005f5e10 	.word	0x005f5e10
 8003ec8:	00bebc20 	.word	0x00bebc20
 8003ecc:	017d7840 	.word	0x017d7840

08003ed0 <LL_ADC_IsEnabled>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <LL_ADC_IsEnabled+0x18>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <LL_ADC_IsEnabled+0x1a>
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <LL_ADC_StartCalibration>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <LL_ADC_StartCalibration+0x38>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	3ffeffc0 	.word	0x3ffeffc0

08003f34 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f48:	d101      	bne.n	8003f4e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_ADC_REG_IsConversionOngoing>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d101      	bne.n	8003f74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e04c      	b.n	800403c <HAL_ADCEx_Calibration_Start+0xb8>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff fd92 	bl	8003ad4 <ADC_Disable>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d135      	bne.n	8004026 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	f043 0202 	orr.w	r2, r3, #2
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff90 	bl	8003ef8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fd8:	e014      	b.n	8004004 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d30d      	bcc.n	8004004 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f023 0312 	bic.w	r3, r3, #18
 8003ff0:	f043 0210 	orr.w	r2, r3, #16
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e01b      	b.n	800403c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff93 	bl	8003f34 <LL_ADC_IsCalibrationOnGoing>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e2      	bne.n	8003fda <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f023 0303 	bic.w	r3, r3, #3
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
 8004024:	e005      	b.n	8004032 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f043 0210 	orr.w	r2, r3, #16
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	ffffeefd 	.word	0xffffeefd
 8004048:	25c3f800 	.word	0x25c3f800

0800404c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b09f      	sub	sp, #124	; 0x7c
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004066:	2302      	movs	r3, #2
 8004068:	e0be      	b.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004076:	2300      	movs	r3, #0
 8004078:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d102      	bne.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004084:	4b5b      	ldr	r3, [pc, #364]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	e001      	b.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e09d      	b.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ff54 	bl	8003f5c <LL_ADC_REG_IsConversionOngoing>
 80040b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff4e 	bl	8003f5c <LL_ADC_REG_IsConversionOngoing>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d17f      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d17c      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a47      	ldr	r2, [pc, #284]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a46      	ldr	r2, [pc, #280]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040e0:	4b45      	ldr	r3, [pc, #276]	; (80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040e2:	e000      	b.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040e4:	4b45      	ldr	r3, [pc, #276]	; (80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d039      	beq.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3a      	ldr	r2, [pc, #232]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a38      	ldr	r2, [pc, #224]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10e      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004116:	4836      	ldr	r0, [pc, #216]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004118:	f7ff feda 	bl	8003ed0 <LL_ADC_IsEnabled>
 800411c:	4604      	mov	r4, r0
 800411e:	4835      	ldr	r0, [pc, #212]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004120:	f7ff fed6 	bl	8003ed0 <LL_ADC_IsEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	4323      	orrs	r3, r4
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e008      	b.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004134:	4832      	ldr	r0, [pc, #200]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004136:	f7ff fecb 	bl	8003ed0 <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d047      	beq.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800414a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004150:	4013      	ands	r3, r2
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	6811      	ldr	r1, [r2, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6892      	ldr	r2, [r2, #8]
 800415a:	430a      	orrs	r2, r1
 800415c:	431a      	orrs	r2, r3
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004162:	e03a      	b.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10e      	bne.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004184:	481a      	ldr	r0, [pc, #104]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004186:	f7ff fea3 	bl	8003ed0 <LL_ADC_IsEnabled>
 800418a:	4604      	mov	r4, r0
 800418c:	4819      	ldr	r0, [pc, #100]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800418e:	f7ff fe9f 	bl	8003ed0 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	4323      	orrs	r3, r4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e008      	b.n	80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041a2:	4817      	ldr	r0, [pc, #92]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041a4:	f7ff fe94 	bl	8003ed0 <LL_ADC_IsEnabled>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041be:	4013      	ands	r3, r2
 80041c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041c4:	e009      	b.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041d8:	e000      	b.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	377c      	adds	r7, #124	; 0x7c
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	40022000 	.word	0x40022000
 80041f4:	40022100 	.word	0x40022100
 80041f8:	40022300 	.word	0x40022300
 80041fc:	58026300 	.word	0x58026300
 8004200:	58026000 	.word	0x58026000
 8004204:	fffff0e0 	.word	0xfffff0e0

08004208 <__NVIC_SetPriorityGrouping>:
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <__NVIC_SetPriorityGrouping+0x40>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <__NVIC_SetPriorityGrouping+0x44>)
 8004232:	4313      	orrs	r3, r2
 8004234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004236:	4a04      	ldr	r2, [pc, #16]	; (8004248 <__NVIC_SetPriorityGrouping+0x40>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	60d3      	str	r3, [r2, #12]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00
 800424c:	05fa0000 	.word	0x05fa0000

08004250 <__NVIC_GetPriorityGrouping>:
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_EnableIRQ>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	db0b      	blt.n	8004296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4907      	ldr	r1, [pc, #28]	; (80042a4 <__NVIC_EnableIRQ+0x38>)
 8004286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2001      	movs	r0, #1
 800428e:	fa00 f202 	lsl.w	r2, r0, r2
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <__NVIC_SetPriority>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	; (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	; (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <NVIC_EncodePriority>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf28      	it	cs
 800431a:	2304      	movcs	r3, #4
 800431c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	2b06      	cmp	r3, #6
 8004324:	d902      	bls.n	800432c <NVIC_EncodePriority+0x30>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3b03      	subs	r3, #3
 800432a:	e000      	b.n	800432e <NVIC_EncodePriority+0x32>
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43d9      	mvns	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	4313      	orrs	r3, r2
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004374:	d301      	bcc.n	800437a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <SysTick_Config+0x40>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004382:	210f      	movs	r1, #15
 8004384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004388:	f7ff ff8e 	bl	80042a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SysTick_Config+0x40>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <SysTick_Config+0x40>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff29 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043cc:	f7ff ff40 	bl	8004250 <__NVIC_GetPriorityGrouping>
 80043d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff90 	bl	80042fc <NVIC_EncodePriority>
 80043dc:	4602      	mov	r2, r0
 80043de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff5f 	bl	80042a8 <__NVIC_SetPriority>
}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff33 	bl	800426c <__NVIC_EnableIRQ>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ffa4 	bl	8004364 <SysTick_Config>
 800441c:	4603      	mov	r3, r0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e014      	b.n	8004462 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	791b      	ldrb	r3, [r3, #4]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd fe03 	bl	8002054 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	795b      	ldrb	r3, [r3, #5]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_DAC_Start+0x16>
 800447c:	2302      	movs	r3, #2
 800447e:	e040      	b.n	8004502 <HAL_DAC_Start+0x98>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11d      	bne.n	80044f4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	e014      	b.n	80044f4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2102      	movs	r1, #2
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0202 	orr.w	r2, r2, #2
 80044f2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	3308      	adds	r3, #8
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e004      	b.n	8004542 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	3314      	adds	r3, #20
 8004540:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	461a      	mov	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	795b      	ldrb	r3, [r3, #5]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_DAC_ConfigChannel+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e11d      	b.n	80047ac <HAL_DAC_ConfigChannel+0x254>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2202      	movs	r2, #2
 800457a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d174      	bne.n	800466e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004584:	f7fe f9e2 	bl	800294c <HAL_GetTick>
 8004588:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d134      	bne.n	80045fa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004590:	e011      	b.n	80045b6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004592:	f7fe f9db 	bl	800294c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d90a      	bls.n	80045b6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f043 0208 	orr.w	r2, r3, #8
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2203      	movs	r2, #3
 80045b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0fa      	b.n	80047ac <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045bc:	4b7d      	ldr	r3, [pc, #500]	; (80047b4 <HAL_DAC_ConfigChannel+0x25c>)
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e6      	bne.n	8004592 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7fe f9cd 	bl	8002964 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	6992      	ldr	r2, [r2, #24]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
 80045d4:	e01e      	b.n	8004614 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045d6:	f7fe f9b9 	bl	800294c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d90a      	bls.n	80045fa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f043 0208 	orr.w	r2, r3, #8
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2203      	movs	r2, #3
 80045f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0d8      	b.n	80047ac <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004600:	2b00      	cmp	r3, #0
 8004602:	dbe8      	blt.n	80045d6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004604:	2001      	movs	r0, #1
 8004606:	f7fe f9ad 	bl	8002964 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	6992      	ldr	r2, [r2, #24]
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	ea02 0103 	and.w	r1, r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	409a      	lsls	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	21ff      	movs	r1, #255	; 0xff
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	ea02 0103 	and.w	r1, r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	409a      	lsls	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d11d      	bne.n	80046b2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	221f      	movs	r2, #31
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4013      	ands	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2207      	movs	r2, #7
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d102      	bne.n	80046dc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e00f      	b.n	80046fc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d102      	bne.n	80046ea <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e008      	b.n	80046fc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80046f2:	2301      	movs	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	e001      	b.n	80046fc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4313      	orrs	r3, r2
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	400a      	ands	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4013      	ands	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	22c0      	movs	r2, #192	; 0xc0
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43da      	mvns	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	400a      	ands	r2, r1
 800479c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20008000 	.word	0x20008000

080047b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7fe f8c4 	bl	800294c <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e316      	b.n	8004dfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_DMA_Init+0x1b8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d04a      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_DMA_Init+0x1bc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d045      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a63      	ldr	r2, [pc, #396]	; (8004978 <HAL_DMA_Init+0x1c0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d040      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a62      	ldr	r2, [pc, #392]	; (800497c <HAL_DMA_Init+0x1c4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d03b      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a60      	ldr	r2, [pc, #384]	; (8004980 <HAL_DMA_Init+0x1c8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d036      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5f      	ldr	r2, [pc, #380]	; (8004984 <HAL_DMA_Init+0x1cc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d031      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_DMA_Init+0x1d0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02c      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5c      	ldr	r2, [pc, #368]	; (800498c <HAL_DMA_Init+0x1d4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d027      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_DMA_Init+0x1d8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a59      	ldr	r2, [pc, #356]	; (8004994 <HAL_DMA_Init+0x1dc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_DMA_Init+0x1e0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a56      	ldr	r2, [pc, #344]	; (800499c <HAL_DMA_Init+0x1e4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a54      	ldr	r2, [pc, #336]	; (80049a0 <HAL_DMA_Init+0x1e8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a53      	ldr	r2, [pc, #332]	; (80049a4 <HAL_DMA_Init+0x1ec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <HAL_DMA_Init+0x1f0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a50      	ldr	r2, [pc, #320]	; (80049ac <HAL_DMA_Init+0x1f4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_DMA_Init+0xbc>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_DMA_Init+0xbe>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 813b 	beq.w	8004af2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a37      	ldr	r2, [pc, #220]	; (8004970 <HAL_DMA_Init+0x1b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a36      	ldr	r2, [pc, #216]	; (8004974 <HAL_DMA_Init+0x1bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d045      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a34      	ldr	r2, [pc, #208]	; (8004978 <HAL_DMA_Init+0x1c0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d040      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a33      	ldr	r2, [pc, #204]	; (800497c <HAL_DMA_Init+0x1c4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03b      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a31      	ldr	r2, [pc, #196]	; (8004980 <HAL_DMA_Init+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d036      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_DMA_Init+0x1cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d031      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2e      	ldr	r2, [pc, #184]	; (8004988 <HAL_DMA_Init+0x1d0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02c      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HAL_DMA_Init+0x1d4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d027      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_DMA_Init+0x1d8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <HAL_DMA_Init+0x1dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a28      	ldr	r2, [pc, #160]	; (8004998 <HAL_DMA_Init+0x1e0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a27      	ldr	r2, [pc, #156]	; (800499c <HAL_DMA_Init+0x1e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_DMA_Init+0x1e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_DMA_Init+0x174>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <HAL_DMA_Init+0x1ec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_DMA_Init+0x1f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a21      	ldr	r2, [pc, #132]	; (80049ac <HAL_DMA_Init+0x1f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_DMA_Init+0x186>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e007      	b.n	800494e <HAL_DMA_Init+0x196>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800494e:	e02f      	b.n	80049b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004950:	f7fd fffc 	bl	800294c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b05      	cmp	r3, #5
 800495c:	d928      	bls.n	80049b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2203      	movs	r2, #3
 8004968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e246      	b.n	8004dfe <HAL_DMA_Init+0x646>
 8004970:	40020010 	.word	0x40020010
 8004974:	40020028 	.word	0x40020028
 8004978:	40020040 	.word	0x40020040
 800497c:	40020058 	.word	0x40020058
 8004980:	40020070 	.word	0x40020070
 8004984:	40020088 	.word	0x40020088
 8004988:	400200a0 	.word	0x400200a0
 800498c:	400200b8 	.word	0x400200b8
 8004990:	40020410 	.word	0x40020410
 8004994:	40020428 	.word	0x40020428
 8004998:	40020440 	.word	0x40020440
 800499c:	40020458 	.word	0x40020458
 80049a0:	40020470 	.word	0x40020470
 80049a4:	40020488 	.word	0x40020488
 80049a8:	400204a0 	.word	0x400204a0
 80049ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c8      	bne.n	8004950 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4b83      	ldr	r3, [pc, #524]	; (8004bd8 <HAL_DMA_Init+0x420>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d107      	bne.n	8004a14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a14:	4b71      	ldr	r3, [pc, #452]	; (8004bdc <HAL_DMA_Init+0x424>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b71      	ldr	r3, [pc, #452]	; (8004be0 <HAL_DMA_Init+0x428>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d328      	bcc.n	8004a74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b28      	cmp	r3, #40	; 0x28
 8004a28:	d903      	bls.n	8004a32 <HAL_DMA_Init+0x27a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a30:	d917      	bls.n	8004a62 <HAL_DMA_Init+0x2aa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b3e      	cmp	r3, #62	; 0x3e
 8004a38:	d903      	bls.n	8004a42 <HAL_DMA_Init+0x28a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b42      	cmp	r3, #66	; 0x42
 8004a40:	d90f      	bls.n	8004a62 <HAL_DMA_Init+0x2aa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b46      	cmp	r3, #70	; 0x46
 8004a48:	d903      	bls.n	8004a52 <HAL_DMA_Init+0x29a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b48      	cmp	r3, #72	; 0x48
 8004a50:	d907      	bls.n	8004a62 <HAL_DMA_Init+0x2aa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b4e      	cmp	r3, #78	; 0x4e
 8004a58:	d905      	bls.n	8004a66 <HAL_DMA_Init+0x2ae>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b52      	cmp	r3, #82	; 0x52
 8004a60:	d801      	bhi.n	8004a66 <HAL_DMA_Init+0x2ae>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_DMA_Init+0x2b0>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d117      	bne.n	8004ace <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f002 fb33 	bl	800711c <DMA_CheckFifoParam>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e197      	b.n	8004dfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f002 fa6e 	bl	8006fb8 <DMA_CalcBaseAndBitshift>
 8004adc:	4603      	mov	r3, r0
 8004ade:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	223f      	movs	r2, #63	; 0x3f
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	e0cd      	b.n	8004c8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <HAL_DMA_Init+0x42c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a39      	ldr	r2, [pc, #228]	; (8004be8 <HAL_DMA_Init+0x430>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a38      	ldr	r2, [pc, #224]	; (8004bec <HAL_DMA_Init+0x434>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <HAL_DMA_Init+0x438>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <HAL_DMA_Init+0x43c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a33      	ldr	r2, [pc, #204]	; (8004bf8 <HAL_DMA_Init+0x440>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a32      	ldr	r2, [pc, #200]	; (8004bfc <HAL_DMA_Init+0x444>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <HAL_DMA_Init+0x448>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_DMA_Init+0x38e>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_DMA_Init+0x390>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8097 	beq.w	8004c7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <HAL_DMA_Init+0x42c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d021      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <HAL_DMA_Init+0x430>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01c      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_DMA_Init+0x434>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d017      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_DMA_Init+0x438>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d012      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <HAL_DMA_Init+0x43c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00d      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_DMA_Init+0x440>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d008      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_DMA_Init+0x444>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_DMA_Init+0x448>)
 8004b9a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <HAL_DMA_Init+0x44c>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d021      	beq.n	8004c08 <HAL_DMA_Init+0x450>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d102      	bne.n	8004bd2 <HAL_DMA_Init+0x41a>
 8004bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bd0:	e01b      	b.n	8004c0a <HAL_DMA_Init+0x452>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e019      	b.n	8004c0a <HAL_DMA_Init+0x452>
 8004bd6:	bf00      	nop
 8004bd8:	fe10803f 	.word	0xfe10803f
 8004bdc:	5c001000 	.word	0x5c001000
 8004be0:	ffff0000 	.word	0xffff0000
 8004be4:	58025408 	.word	0x58025408
 8004be8:	5802541c 	.word	0x5802541c
 8004bec:	58025430 	.word	0x58025430
 8004bf0:	58025444 	.word	0x58025444
 8004bf4:	58025458 	.word	0x58025458
 8004bf8:	5802546c 	.word	0x5802546c
 8004bfc:	58025480 	.word	0x58025480
 8004c00:	58025494 	.word	0x58025494
 8004c04:	fffe000f 	.word	0xfffe000f
 8004c08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <HAL_DMA_Init+0x650>)
 8004c50:	4413      	add	r3, r2
 8004c52:	4a6e      	ldr	r2, [pc, #440]	; (8004e0c <HAL_DMA_Init+0x654>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f002 f9a9 	bl	8006fb8 <DMA_CalcBaseAndBitshift>
 8004c66:	4603      	mov	r3, r0
 8004c68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e008      	b.n	8004c8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0b7      	b.n	8004dfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5f      	ldr	r2, [pc, #380]	; (8004e10 <HAL_DMA_Init+0x658>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d072      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	; (8004e14 <HAL_DMA_Init+0x65c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d06d      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5c      	ldr	r2, [pc, #368]	; (8004e18 <HAL_DMA_Init+0x660>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d068      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5a      	ldr	r2, [pc, #360]	; (8004e1c <HAL_DMA_Init+0x664>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d063      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a59      	ldr	r2, [pc, #356]	; (8004e20 <HAL_DMA_Init+0x668>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d05e      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_DMA_Init+0x66c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d059      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a56      	ldr	r2, [pc, #344]	; (8004e28 <HAL_DMA_Init+0x670>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d054      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a54      	ldr	r2, [pc, #336]	; (8004e2c <HAL_DMA_Init+0x674>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <HAL_DMA_Init+0x678>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <HAL_DMA_Init+0x67c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a50      	ldr	r2, [pc, #320]	; (8004e38 <HAL_DMA_Init+0x680>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a4e      	ldr	r2, [pc, #312]	; (8004e3c <HAL_DMA_Init+0x684>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a4d      	ldr	r2, [pc, #308]	; (8004e40 <HAL_DMA_Init+0x688>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a4b      	ldr	r2, [pc, #300]	; (8004e44 <HAL_DMA_Init+0x68c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_DMA_Init+0x690>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_DMA_Init+0x694>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a47      	ldr	r2, [pc, #284]	; (8004e50 <HAL_DMA_Init+0x698>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a45      	ldr	r2, [pc, #276]	; (8004e54 <HAL_DMA_Init+0x69c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a44      	ldr	r2, [pc, #272]	; (8004e58 <HAL_DMA_Init+0x6a0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a42      	ldr	r2, [pc, #264]	; (8004e5c <HAL_DMA_Init+0x6a4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <HAL_DMA_Init+0x6a8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3f      	ldr	r2, [pc, #252]	; (8004e64 <HAL_DMA_Init+0x6ac>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	; (8004e68 <HAL_DMA_Init+0x6b0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <HAL_DMA_Init+0x6b4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_DMA_Init+0x5ca>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_Init+0x5cc>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d032      	beq.n	8004dee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f002 fa43 	bl	8007214 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d102      	bne.n	8004d9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004db0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <HAL_DMA_Init+0x624>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d80c      	bhi.n	8004ddc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f002 fac0 	bl	8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e008      	b.n	8004dee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	a7fdabf8 	.word	0xa7fdabf8
 8004e0c:	cccccccd 	.word	0xcccccccd
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020058 	.word	0x40020058
 8004e20:	40020070 	.word	0x40020070
 8004e24:	40020088 	.word	0x40020088
 8004e28:	400200a0 	.word	0x400200a0
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020410 	.word	0x40020410
 8004e34:	40020428 	.word	0x40020428
 8004e38:	40020440 	.word	0x40020440
 8004e3c:	40020458 	.word	0x40020458
 8004e40:	40020470 	.word	0x40020470
 8004e44:	40020488 	.word	0x40020488
 8004e48:	400204a0 	.word	0x400204a0
 8004e4c:	400204b8 	.word	0x400204b8
 8004e50:	58025408 	.word	0x58025408
 8004e54:	5802541c 	.word	0x5802541c
 8004e58:	58025430 	.word	0x58025430
 8004e5c:	58025444 	.word	0x58025444
 8004e60:	58025458 	.word	0x58025458
 8004e64:	5802546c 	.word	0x5802546c
 8004e68:	58025480 	.word	0x58025480
 8004e6c:	58025494 	.word	0x58025494

08004e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e226      	b.n	80052da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_DMA_Start_IT+0x2a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e21f      	b.n	80052da <HAL_DMA_Start_IT+0x46a>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	f040 820a 	bne.w	80052c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a68      	ldr	r2, [pc, #416]	; (8005064 <HAL_DMA_Start_IT+0x1f4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a66      	ldr	r2, [pc, #408]	; (8005068 <HAL_DMA_Start_IT+0x1f8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a65      	ldr	r2, [pc, #404]	; (800506c <HAL_DMA_Start_IT+0x1fc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a63      	ldr	r2, [pc, #396]	; (8005070 <HAL_DMA_Start_IT+0x200>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a62      	ldr	r2, [pc, #392]	; (8005074 <HAL_DMA_Start_IT+0x204>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a60      	ldr	r2, [pc, #384]	; (8005078 <HAL_DMA_Start_IT+0x208>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a5f      	ldr	r2, [pc, #380]	; (800507c <HAL_DMA_Start_IT+0x20c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5d      	ldr	r2, [pc, #372]	; (8005080 <HAL_DMA_Start_IT+0x210>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5c      	ldr	r2, [pc, #368]	; (8005084 <HAL_DMA_Start_IT+0x214>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5a      	ldr	r2, [pc, #360]	; (8005088 <HAL_DMA_Start_IT+0x218>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a59      	ldr	r2, [pc, #356]	; (800508c <HAL_DMA_Start_IT+0x21c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a57      	ldr	r2, [pc, #348]	; (8005090 <HAL_DMA_Start_IT+0x220>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a56      	ldr	r2, [pc, #344]	; (8005094 <HAL_DMA_Start_IT+0x224>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a54      	ldr	r2, [pc, #336]	; (8005098 <HAL_DMA_Start_IT+0x228>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a53      	ldr	r2, [pc, #332]	; (800509c <HAL_DMA_Start_IT+0x22c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a51      	ldr	r2, [pc, #324]	; (80050a0 <HAL_DMA_Start_IT+0x230>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <HAL_DMA_Start_IT+0x100>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e007      	b.n	8004f80 <HAL_DMA_Start_IT+0x110>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f001 fe6a 	bl	8006c60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a34      	ldr	r2, [pc, #208]	; (8005064 <HAL_DMA_Start_IT+0x1f4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d04a      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a33      	ldr	r2, [pc, #204]	; (8005068 <HAL_DMA_Start_IT+0x1f8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d045      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a31      	ldr	r2, [pc, #196]	; (800506c <HAL_DMA_Start_IT+0x1fc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d040      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a30      	ldr	r2, [pc, #192]	; (8005070 <HAL_DMA_Start_IT+0x200>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d03b      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2e      	ldr	r2, [pc, #184]	; (8005074 <HAL_DMA_Start_IT+0x204>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d036      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2d      	ldr	r2, [pc, #180]	; (8005078 <HAL_DMA_Start_IT+0x208>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d031      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2b      	ldr	r2, [pc, #172]	; (800507c <HAL_DMA_Start_IT+0x20c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02c      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2a      	ldr	r2, [pc, #168]	; (8005080 <HAL_DMA_Start_IT+0x210>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d027      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a28      	ldr	r2, [pc, #160]	; (8005084 <HAL_DMA_Start_IT+0x214>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_DMA_Start_IT+0x218>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a25      	ldr	r2, [pc, #148]	; (800508c <HAL_DMA_Start_IT+0x21c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_DMA_Start_IT+0x220>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a22      	ldr	r2, [pc, #136]	; (8005094 <HAL_DMA_Start_IT+0x224>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a21      	ldr	r2, [pc, #132]	; (8005098 <HAL_DMA_Start_IT+0x228>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1f      	ldr	r2, [pc, #124]	; (800509c <HAL_DMA_Start_IT+0x22c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <HAL_DMA_Start_IT+0x230>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_DMA_Start_IT+0x1c0>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_DMA_Start_IT+0x1c2>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 021e 	bic.w	r2, r3, #30
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0216 	orr.w	r2, r2, #22
 8005048:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d03e      	beq.n	80050d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0208 	orr.w	r2, r2, #8
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e035      	b.n	80050d0 <HAL_DMA_Start_IT+0x260>
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 020e 	bic.w	r2, r3, #14
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 020a 	orr.w	r2, r2, #10
 80050b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0204 	orr.w	r2, r2, #4
 80050ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a83      	ldr	r2, [pc, #524]	; (80052e4 <HAL_DMA_Start_IT+0x474>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d072      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a82      	ldr	r2, [pc, #520]	; (80052e8 <HAL_DMA_Start_IT+0x478>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d06d      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a80      	ldr	r2, [pc, #512]	; (80052ec <HAL_DMA_Start_IT+0x47c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d068      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7f      	ldr	r2, [pc, #508]	; (80052f0 <HAL_DMA_Start_IT+0x480>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d063      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a7d      	ldr	r2, [pc, #500]	; (80052f4 <HAL_DMA_Start_IT+0x484>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d05e      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7c      	ldr	r2, [pc, #496]	; (80052f8 <HAL_DMA_Start_IT+0x488>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d059      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a7a      	ldr	r2, [pc, #488]	; (80052fc <HAL_DMA_Start_IT+0x48c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d054      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a79      	ldr	r2, [pc, #484]	; (8005300 <HAL_DMA_Start_IT+0x490>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d04f      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a77      	ldr	r2, [pc, #476]	; (8005304 <HAL_DMA_Start_IT+0x494>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d04a      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a76      	ldr	r2, [pc, #472]	; (8005308 <HAL_DMA_Start_IT+0x498>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d045      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a74      	ldr	r2, [pc, #464]	; (800530c <HAL_DMA_Start_IT+0x49c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d040      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a73      	ldr	r2, [pc, #460]	; (8005310 <HAL_DMA_Start_IT+0x4a0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d03b      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a71      	ldr	r2, [pc, #452]	; (8005314 <HAL_DMA_Start_IT+0x4a4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d036      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a70      	ldr	r2, [pc, #448]	; (8005318 <HAL_DMA_Start_IT+0x4a8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d031      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6e      	ldr	r2, [pc, #440]	; (800531c <HAL_DMA_Start_IT+0x4ac>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02c      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6d      	ldr	r2, [pc, #436]	; (8005320 <HAL_DMA_Start_IT+0x4b0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a6b      	ldr	r2, [pc, #428]	; (8005324 <HAL_DMA_Start_IT+0x4b4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6a      	ldr	r2, [pc, #424]	; (8005328 <HAL_DMA_Start_IT+0x4b8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a68      	ldr	r2, [pc, #416]	; (800532c <HAL_DMA_Start_IT+0x4bc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a67      	ldr	r2, [pc, #412]	; (8005330 <HAL_DMA_Start_IT+0x4c0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a65      	ldr	r2, [pc, #404]	; (8005334 <HAL_DMA_Start_IT+0x4c4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a64      	ldr	r2, [pc, #400]	; (8005338 <HAL_DMA_Start_IT+0x4c8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a62      	ldr	r2, [pc, #392]	; (800533c <HAL_DMA_Start_IT+0x4cc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a61      	ldr	r2, [pc, #388]	; (8005340 <HAL_DMA_Start_IT+0x4d0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Start_IT+0x354>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_Start_IT+0x356>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01a      	beq.n	8005200 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <HAL_DMA_Start_IT+0x474>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d04a      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a36      	ldr	r2, [pc, #216]	; (80052e8 <HAL_DMA_Start_IT+0x478>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d045      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a34      	ldr	r2, [pc, #208]	; (80052ec <HAL_DMA_Start_IT+0x47c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d040      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <HAL_DMA_Start_IT+0x480>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d03b      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a31      	ldr	r2, [pc, #196]	; (80052f4 <HAL_DMA_Start_IT+0x484>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d036      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a30      	ldr	r2, [pc, #192]	; (80052f8 <HAL_DMA_Start_IT+0x488>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d031      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <HAL_DMA_Start_IT+0x48c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02c      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_DMA_Start_IT+0x490>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d027      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <HAL_DMA_Start_IT+0x494>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <HAL_DMA_Start_IT+0x498>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d01d      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <HAL_DMA_Start_IT+0x49c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a27      	ldr	r2, [pc, #156]	; (8005310 <HAL_DMA_Start_IT+0x4a0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <HAL_DMA_Start_IT+0x4a4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_DMA_Start_IT+0x4a8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_DMA_Start_IT+0x4ac>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_DMA_Start_IT+0x4b0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d108      	bne.n	80052b2 <HAL_DMA_Start_IT+0x442>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e012      	b.n	80052d8 <HAL_DMA_Start_IT+0x468>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e009      	b.n	80052d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
 8005324:	58025408 	.word	0x58025408
 8005328:	5802541c 	.word	0x5802541c
 800532c:	58025430 	.word	0x58025430
 8005330:	58025444 	.word	0x58025444
 8005334:	58025458 	.word	0x58025458
 8005338:	5802546c 	.word	0x5802546c
 800533c:	58025480 	.word	0x58025480
 8005340:	58025494 	.word	0x58025494

08005344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800534c:	f7fd fafe 	bl	800294c <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e2dc      	b.n	8005916 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d008      	beq.n	800537a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2280      	movs	r2, #128	; 0x80
 800536c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e2cd      	b.n	8005916 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a76      	ldr	r2, [pc, #472]	; (8005558 <HAL_DMA_Abort+0x214>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04a      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a74      	ldr	r2, [pc, #464]	; (800555c <HAL_DMA_Abort+0x218>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d045      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a73      	ldr	r2, [pc, #460]	; (8005560 <HAL_DMA_Abort+0x21c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d040      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a71      	ldr	r2, [pc, #452]	; (8005564 <HAL_DMA_Abort+0x220>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d03b      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a70      	ldr	r2, [pc, #448]	; (8005568 <HAL_DMA_Abort+0x224>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d036      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a6e      	ldr	r2, [pc, #440]	; (800556c <HAL_DMA_Abort+0x228>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d031      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6d      	ldr	r2, [pc, #436]	; (8005570 <HAL_DMA_Abort+0x22c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d02c      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6b      	ldr	r2, [pc, #428]	; (8005574 <HAL_DMA_Abort+0x230>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d027      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6a      	ldr	r2, [pc, #424]	; (8005578 <HAL_DMA_Abort+0x234>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a68      	ldr	r2, [pc, #416]	; (800557c <HAL_DMA_Abort+0x238>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01d      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a67      	ldr	r2, [pc, #412]	; (8005580 <HAL_DMA_Abort+0x23c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a65      	ldr	r2, [pc, #404]	; (8005584 <HAL_DMA_Abort+0x240>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a64      	ldr	r2, [pc, #400]	; (8005588 <HAL_DMA_Abort+0x244>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a62      	ldr	r2, [pc, #392]	; (800558c <HAL_DMA_Abort+0x248>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a61      	ldr	r2, [pc, #388]	; (8005590 <HAL_DMA_Abort+0x24c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_DMA_Abort+0xd6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5f      	ldr	r2, [pc, #380]	; (8005594 <HAL_DMA_Abort+0x250>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d101      	bne.n	800541e <HAL_DMA_Abort+0xda>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_DMA_Abort+0xdc>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 021e 	bic.w	r2, r2, #30
 8005432:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005442:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	e00a      	b.n	8005462 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 020e 	bic.w	r2, r2, #14
 800545a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <HAL_DMA_Abort+0x214>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d072      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3a      	ldr	r2, [pc, #232]	; (800555c <HAL_DMA_Abort+0x218>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d06d      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a39      	ldr	r2, [pc, #228]	; (8005560 <HAL_DMA_Abort+0x21c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d068      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a37      	ldr	r2, [pc, #220]	; (8005564 <HAL_DMA_Abort+0x220>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d063      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a36      	ldr	r2, [pc, #216]	; (8005568 <HAL_DMA_Abort+0x224>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d05e      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a34      	ldr	r2, [pc, #208]	; (800556c <HAL_DMA_Abort+0x228>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d059      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a33      	ldr	r2, [pc, #204]	; (8005570 <HAL_DMA_Abort+0x22c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d054      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_DMA_Abort+0x230>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04f      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a30      	ldr	r2, [pc, #192]	; (8005578 <HAL_DMA_Abort+0x234>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d04a      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2e      	ldr	r2, [pc, #184]	; (800557c <HAL_DMA_Abort+0x238>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d045      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_DMA_Abort+0x23c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d040      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <HAL_DMA_Abort+0x240>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d03b      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <HAL_DMA_Abort+0x244>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d036      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_DMA_Abort+0x248>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d031      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a27      	ldr	r2, [pc, #156]	; (8005590 <HAL_DMA_Abort+0x24c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d02c      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_DMA_Abort+0x250>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d027      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_DMA_Abort+0x254>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_DMA_Abort+0x258>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_DMA_Abort+0x25c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_DMA_Abort+0x260>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_DMA_Abort+0x264>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_DMA_Abort+0x268>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_DMA_Abort+0x26c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_DMA_Abort+0x20e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_DMA_Abort+0x270>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d132      	bne.n	80055b8 <HAL_DMA_Abort+0x274>
 8005552:	2301      	movs	r3, #1
 8005554:	e031      	b.n	80055ba <HAL_DMA_Abort+0x276>
 8005556:	bf00      	nop
 8005558:	40020010 	.word	0x40020010
 800555c:	40020028 	.word	0x40020028
 8005560:	40020040 	.word	0x40020040
 8005564:	40020058 	.word	0x40020058
 8005568:	40020070 	.word	0x40020070
 800556c:	40020088 	.word	0x40020088
 8005570:	400200a0 	.word	0x400200a0
 8005574:	400200b8 	.word	0x400200b8
 8005578:	40020410 	.word	0x40020410
 800557c:	40020428 	.word	0x40020428
 8005580:	40020440 	.word	0x40020440
 8005584:	40020458 	.word	0x40020458
 8005588:	40020470 	.word	0x40020470
 800558c:	40020488 	.word	0x40020488
 8005590:	400204a0 	.word	0x400204a0
 8005594:	400204b8 	.word	0x400204b8
 8005598:	58025408 	.word	0x58025408
 800559c:	5802541c 	.word	0x5802541c
 80055a0:	58025430 	.word	0x58025430
 80055a4:	58025444 	.word	0x58025444
 80055a8:	58025458 	.word	0x58025458
 80055ac:	5802546c 	.word	0x5802546c
 80055b0:	58025480 	.word	0x58025480
 80055b4:	58025494 	.word	0x58025494
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a6d      	ldr	r2, [pc, #436]	; (8005788 <HAL_DMA_Abort+0x444>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d04a      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a6b      	ldr	r2, [pc, #428]	; (800578c <HAL_DMA_Abort+0x448>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d045      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6a      	ldr	r2, [pc, #424]	; (8005790 <HAL_DMA_Abort+0x44c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d040      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a68      	ldr	r2, [pc, #416]	; (8005794 <HAL_DMA_Abort+0x450>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d03b      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a67      	ldr	r2, [pc, #412]	; (8005798 <HAL_DMA_Abort+0x454>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d036      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a65      	ldr	r2, [pc, #404]	; (800579c <HAL_DMA_Abort+0x458>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d031      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a64      	ldr	r2, [pc, #400]	; (80057a0 <HAL_DMA_Abort+0x45c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d02c      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a62      	ldr	r2, [pc, #392]	; (80057a4 <HAL_DMA_Abort+0x460>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d027      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a61      	ldr	r2, [pc, #388]	; (80057a8 <HAL_DMA_Abort+0x464>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d022      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5f      	ldr	r2, [pc, #380]	; (80057ac <HAL_DMA_Abort+0x468>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01d      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5e      	ldr	r2, [pc, #376]	; (80057b0 <HAL_DMA_Abort+0x46c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d018      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <HAL_DMA_Abort+0x470>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5b      	ldr	r2, [pc, #364]	; (80057b8 <HAL_DMA_Abort+0x474>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a59      	ldr	r2, [pc, #356]	; (80057bc <HAL_DMA_Abort+0x478>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a58      	ldr	r2, [pc, #352]	; (80057c0 <HAL_DMA_Abort+0x47c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_DMA_Abort+0x32a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a56      	ldr	r2, [pc, #344]	; (80057c4 <HAL_DMA_Abort+0x480>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <HAL_DMA_Abort+0x33c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0201 	bic.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e007      	b.n	8005690 <HAL_DMA_Abort+0x34c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005690:	e013      	b.n	80056ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005692:	f7fd f95b 	bl	800294c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b05      	cmp	r3, #5
 800569e:	d90c      	bls.n	80056ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e12d      	b.n	8005916 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <HAL_DMA_Abort+0x444>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	; (800578c <HAL_DMA_Abort+0x448>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <HAL_DMA_Abort+0x44c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <HAL_DMA_Abort+0x450>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a29      	ldr	r2, [pc, #164]	; (8005798 <HAL_DMA_Abort+0x454>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a27      	ldr	r2, [pc, #156]	; (800579c <HAL_DMA_Abort+0x458>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <HAL_DMA_Abort+0x45c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <HAL_DMA_Abort+0x460>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a23      	ldr	r2, [pc, #140]	; (80057a8 <HAL_DMA_Abort+0x464>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a21      	ldr	r2, [pc, #132]	; (80057ac <HAL_DMA_Abort+0x468>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <HAL_DMA_Abort+0x46c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_DMA_Abort+0x470>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_DMA_Abort+0x474>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <HAL_DMA_Abort+0x478>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_DMA_Abort+0x47c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_DMA_Abort+0x422>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_DMA_Abort+0x480>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <HAL_DMA_Abort+0x426>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_DMA_Abort+0x428>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02b      	beq.n	80057c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	223f      	movs	r2, #63	; 0x3f
 8005780:	409a      	lsls	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	e02a      	b.n	80057de <HAL_DMA_Abort+0x49a>
 8005788:	40020010 	.word	0x40020010
 800578c:	40020028 	.word	0x40020028
 8005790:	40020040 	.word	0x40020040
 8005794:	40020058 	.word	0x40020058
 8005798:	40020070 	.word	0x40020070
 800579c:	40020088 	.word	0x40020088
 80057a0:	400200a0 	.word	0x400200a0
 80057a4:	400200b8 	.word	0x400200b8
 80057a8:	40020410 	.word	0x40020410
 80057ac:	40020428 	.word	0x40020428
 80057b0:	40020440 	.word	0x40020440
 80057b4:	40020458 	.word	0x40020458
 80057b8:	40020470 	.word	0x40020470
 80057bc:	40020488 	.word	0x40020488
 80057c0:	400204a0 	.word	0x400204a0
 80057c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	2201      	movs	r2, #1
 80057d8:	409a      	lsls	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a4f      	ldr	r2, [pc, #316]	; (8005920 <HAL_DMA_Abort+0x5dc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d072      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a4d      	ldr	r2, [pc, #308]	; (8005924 <HAL_DMA_Abort+0x5e0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d06d      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a4c      	ldr	r2, [pc, #304]	; (8005928 <HAL_DMA_Abort+0x5e4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d068      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a4a      	ldr	r2, [pc, #296]	; (800592c <HAL_DMA_Abort+0x5e8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d063      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a49      	ldr	r2, [pc, #292]	; (8005930 <HAL_DMA_Abort+0x5ec>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d05e      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a47      	ldr	r2, [pc, #284]	; (8005934 <HAL_DMA_Abort+0x5f0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d059      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a46      	ldr	r2, [pc, #280]	; (8005938 <HAL_DMA_Abort+0x5f4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d054      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a44      	ldr	r2, [pc, #272]	; (800593c <HAL_DMA_Abort+0x5f8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d04f      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a43      	ldr	r2, [pc, #268]	; (8005940 <HAL_DMA_Abort+0x5fc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d04a      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a41      	ldr	r2, [pc, #260]	; (8005944 <HAL_DMA_Abort+0x600>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d045      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <HAL_DMA_Abort+0x604>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d040      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a3e      	ldr	r2, [pc, #248]	; (800594c <HAL_DMA_Abort+0x608>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d03b      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a3d      	ldr	r2, [pc, #244]	; (8005950 <HAL_DMA_Abort+0x60c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d036      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <HAL_DMA_Abort+0x610>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d031      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <HAL_DMA_Abort+0x614>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d02c      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a38      	ldr	r2, [pc, #224]	; (800595c <HAL_DMA_Abort+0x618>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d027      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a37      	ldr	r2, [pc, #220]	; (8005960 <HAL_DMA_Abort+0x61c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a35      	ldr	r2, [pc, #212]	; (8005964 <HAL_DMA_Abort+0x620>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01d      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a34      	ldr	r2, [pc, #208]	; (8005968 <HAL_DMA_Abort+0x624>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a32      	ldr	r2, [pc, #200]	; (800596c <HAL_DMA_Abort+0x628>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a31      	ldr	r2, [pc, #196]	; (8005970 <HAL_DMA_Abort+0x62c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <HAL_DMA_Abort+0x630>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2e      	ldr	r2, [pc, #184]	; (8005978 <HAL_DMA_Abort+0x634>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_DMA_Abort+0x58a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_DMA_Abort+0x638>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_DMA_Abort+0x58e>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_DMA_Abort+0x590>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005902:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40020010 	.word	0x40020010
 8005924:	40020028 	.word	0x40020028
 8005928:	40020040 	.word	0x40020040
 800592c:	40020058 	.word	0x40020058
 8005930:	40020070 	.word	0x40020070
 8005934:	40020088 	.word	0x40020088
 8005938:	400200a0 	.word	0x400200a0
 800593c:	400200b8 	.word	0x400200b8
 8005940:	40020410 	.word	0x40020410
 8005944:	40020428 	.word	0x40020428
 8005948:	40020440 	.word	0x40020440
 800594c:	40020458 	.word	0x40020458
 8005950:	40020470 	.word	0x40020470
 8005954:	40020488 	.word	0x40020488
 8005958:	400204a0 	.word	0x400204a0
 800595c:	400204b8 	.word	0x400204b8
 8005960:	58025408 	.word	0x58025408
 8005964:	5802541c 	.word	0x5802541c
 8005968:	58025430 	.word	0x58025430
 800596c:	58025444 	.word	0x58025444
 8005970:	58025458 	.word	0x58025458
 8005974:	5802546c 	.word	0x5802546c
 8005978:	58025480 	.word	0x58025480
 800597c:	58025494 	.word	0x58025494

08005980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e237      	b.n	8005e02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d004      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e22c      	b.n	8005e02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5c      	ldr	r2, [pc, #368]	; (8005b20 <HAL_DMA_Abort_IT+0x1a0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d04a      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a5b      	ldr	r2, [pc, #364]	; (8005b24 <HAL_DMA_Abort_IT+0x1a4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d045      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a59      	ldr	r2, [pc, #356]	; (8005b28 <HAL_DMA_Abort_IT+0x1a8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d040      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a58      	ldr	r2, [pc, #352]	; (8005b2c <HAL_DMA_Abort_IT+0x1ac>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d03b      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a56      	ldr	r2, [pc, #344]	; (8005b30 <HAL_DMA_Abort_IT+0x1b0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d036      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a55      	ldr	r2, [pc, #340]	; (8005b34 <HAL_DMA_Abort_IT+0x1b4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a53      	ldr	r2, [pc, #332]	; (8005b38 <HAL_DMA_Abort_IT+0x1b8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d02c      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a52      	ldr	r2, [pc, #328]	; (8005b3c <HAL_DMA_Abort_IT+0x1bc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d027      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a50      	ldr	r2, [pc, #320]	; (8005b40 <HAL_DMA_Abort_IT+0x1c0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a4f      	ldr	r2, [pc, #316]	; (8005b44 <HAL_DMA_Abort_IT+0x1c4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a4d      	ldr	r2, [pc, #308]	; (8005b48 <HAL_DMA_Abort_IT+0x1c8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a4c      	ldr	r2, [pc, #304]	; (8005b4c <HAL_DMA_Abort_IT+0x1cc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a4a      	ldr	r2, [pc, #296]	; (8005b50 <HAL_DMA_Abort_IT+0x1d0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a49      	ldr	r2, [pc, #292]	; (8005b54 <HAL_DMA_Abort_IT+0x1d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a47      	ldr	r2, [pc, #284]	; (8005b58 <HAL_DMA_Abort_IT+0x1d8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a46      	ldr	r2, [pc, #280]	; (8005b5c <HAL_DMA_Abort_IT+0x1dc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_DMA_Abort_IT+0xcc>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_DMA_Abort_IT+0xce>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8086 	beq.w	8005b60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2204      	movs	r2, #4
 8005a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2f      	ldr	r2, [pc, #188]	; (8005b20 <HAL_DMA_Abort_IT+0x1a0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d04a      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2e      	ldr	r2, [pc, #184]	; (8005b24 <HAL_DMA_Abort_IT+0x1a4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d045      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	; (8005b28 <HAL_DMA_Abort_IT+0x1a8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d040      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <HAL_DMA_Abort_IT+0x1ac>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d03b      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <HAL_DMA_Abort_IT+0x1b0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d036      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <HAL_DMA_Abort_IT+0x1b4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d031      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <HAL_DMA_Abort_IT+0x1b8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d02c      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_DMA_Abort_IT+0x1bc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d027      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a23      	ldr	r2, [pc, #140]	; (8005b40 <HAL_DMA_Abort_IT+0x1c0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d022      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_DMA_Abort_IT+0x1c4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d01d      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <HAL_DMA_Abort_IT+0x1c8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d018      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <HAL_DMA_Abort_IT+0x1cc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <HAL_DMA_Abort_IT+0x1d0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00e      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_DMA_Abort_IT+0x1d4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d009      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1a      	ldr	r2, [pc, #104]	; (8005b58 <HAL_DMA_Abort_IT+0x1d8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d004      	beq.n	8005afc <HAL_DMA_Abort_IT+0x17c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <HAL_DMA_Abort_IT+0x1dc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d108      	bne.n	8005b0e <HAL_DMA_Abort_IT+0x18e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e178      	b.n	8005e00 <HAL_DMA_Abort_IT+0x480>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e16f      	b.n	8005e00 <HAL_DMA_Abort_IT+0x480>
 8005b20:	40020010 	.word	0x40020010
 8005b24:	40020028 	.word	0x40020028
 8005b28:	40020040 	.word	0x40020040
 8005b2c:	40020058 	.word	0x40020058
 8005b30:	40020070 	.word	0x40020070
 8005b34:	40020088 	.word	0x40020088
 8005b38:	400200a0 	.word	0x400200a0
 8005b3c:	400200b8 	.word	0x400200b8
 8005b40:	40020410 	.word	0x40020410
 8005b44:	40020428 	.word	0x40020428
 8005b48:	40020440 	.word	0x40020440
 8005b4c:	40020458 	.word	0x40020458
 8005b50:	40020470 	.word	0x40020470
 8005b54:	40020488 	.word	0x40020488
 8005b58:	400204a0 	.word	0x400204a0
 8005b5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 020e 	bic.w	r2, r2, #14
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a6c      	ldr	r2, [pc, #432]	; (8005d28 <HAL_DMA_Abort_IT+0x3a8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d04a      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a6b      	ldr	r2, [pc, #428]	; (8005d2c <HAL_DMA_Abort_IT+0x3ac>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d045      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a69      	ldr	r2, [pc, #420]	; (8005d30 <HAL_DMA_Abort_IT+0x3b0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d040      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a68      	ldr	r2, [pc, #416]	; (8005d34 <HAL_DMA_Abort_IT+0x3b4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d03b      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a66      	ldr	r2, [pc, #408]	; (8005d38 <HAL_DMA_Abort_IT+0x3b8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d036      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a65      	ldr	r2, [pc, #404]	; (8005d3c <HAL_DMA_Abort_IT+0x3bc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d031      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a63      	ldr	r2, [pc, #396]	; (8005d40 <HAL_DMA_Abort_IT+0x3c0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02c      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a62      	ldr	r2, [pc, #392]	; (8005d44 <HAL_DMA_Abort_IT+0x3c4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d027      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a60      	ldr	r2, [pc, #384]	; (8005d48 <HAL_DMA_Abort_IT+0x3c8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d022      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a5f      	ldr	r2, [pc, #380]	; (8005d4c <HAL_DMA_Abort_IT+0x3cc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01d      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a5d      	ldr	r2, [pc, #372]	; (8005d50 <HAL_DMA_Abort_IT+0x3d0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d018      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a5c      	ldr	r2, [pc, #368]	; (8005d54 <HAL_DMA_Abort_IT+0x3d4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d013      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a5a      	ldr	r2, [pc, #360]	; (8005d58 <HAL_DMA_Abort_IT+0x3d8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a59      	ldr	r2, [pc, #356]	; (8005d5c <HAL_DMA_Abort_IT+0x3dc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a57      	ldr	r2, [pc, #348]	; (8005d60 <HAL_DMA_Abort_IT+0x3e0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x290>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a56      	ldr	r2, [pc, #344]	; (8005d64 <HAL_DMA_Abort_IT+0x3e4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <HAL_DMA_Abort_IT+0x2a2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e007      	b.n	8005c32 <HAL_DMA_Abort_IT+0x2b2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3c      	ldr	r2, [pc, #240]	; (8005d28 <HAL_DMA_Abort_IT+0x3a8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d072      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <HAL_DMA_Abort_IT+0x3ac>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d06d      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a39      	ldr	r2, [pc, #228]	; (8005d30 <HAL_DMA_Abort_IT+0x3b0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d068      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a37      	ldr	r2, [pc, #220]	; (8005d34 <HAL_DMA_Abort_IT+0x3b4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d063      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a36      	ldr	r2, [pc, #216]	; (8005d38 <HAL_DMA_Abort_IT+0x3b8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d05e      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <HAL_DMA_Abort_IT+0x3bc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d059      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a33      	ldr	r2, [pc, #204]	; (8005d40 <HAL_DMA_Abort_IT+0x3c0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d054      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a31      	ldr	r2, [pc, #196]	; (8005d44 <HAL_DMA_Abort_IT+0x3c4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04f      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a30      	ldr	r2, [pc, #192]	; (8005d48 <HAL_DMA_Abort_IT+0x3c8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04a      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2e      	ldr	r2, [pc, #184]	; (8005d4c <HAL_DMA_Abort_IT+0x3cc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d045      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2d      	ldr	r2, [pc, #180]	; (8005d50 <HAL_DMA_Abort_IT+0x3d0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d040      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2b      	ldr	r2, [pc, #172]	; (8005d54 <HAL_DMA_Abort_IT+0x3d4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d03b      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2a      	ldr	r2, [pc, #168]	; (8005d58 <HAL_DMA_Abort_IT+0x3d8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d036      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a28      	ldr	r2, [pc, #160]	; (8005d5c <HAL_DMA_Abort_IT+0x3dc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d031      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <HAL_DMA_Abort_IT+0x3e0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d02c      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a25      	ldr	r2, [pc, #148]	; (8005d64 <HAL_DMA_Abort_IT+0x3e4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d027      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <HAL_DMA_Abort_IT+0x3e8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a22      	ldr	r2, [pc, #136]	; (8005d6c <HAL_DMA_Abort_IT+0x3ec>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a21      	ldr	r2, [pc, #132]	; (8005d70 <HAL_DMA_Abort_IT+0x3f0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <HAL_DMA_Abort_IT+0x3f4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <HAL_DMA_Abort_IT+0x3f8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <HAL_DMA_Abort_IT+0x3fc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <HAL_DMA_Abort_IT+0x400>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x3a2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <HAL_DMA_Abort_IT+0x404>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d132      	bne.n	8005d88 <HAL_DMA_Abort_IT+0x408>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e031      	b.n	8005d8a <HAL_DMA_Abort_IT+0x40a>
 8005d26:	bf00      	nop
 8005d28:	40020010 	.word	0x40020010
 8005d2c:	40020028 	.word	0x40020028
 8005d30:	40020040 	.word	0x40020040
 8005d34:	40020058 	.word	0x40020058
 8005d38:	40020070 	.word	0x40020070
 8005d3c:	40020088 	.word	0x40020088
 8005d40:	400200a0 	.word	0x400200a0
 8005d44:	400200b8 	.word	0x400200b8
 8005d48:	40020410 	.word	0x40020410
 8005d4c:	40020428 	.word	0x40020428
 8005d50:	40020440 	.word	0x40020440
 8005d54:	40020458 	.word	0x40020458
 8005d58:	40020470 	.word	0x40020470
 8005d5c:	40020488 	.word	0x40020488
 8005d60:	400204a0 	.word	0x400204a0
 8005d64:	400204b8 	.word	0x400204b8
 8005d68:	58025408 	.word	0x58025408
 8005d6c:	5802541c 	.word	0x5802541c
 8005d70:	58025430 	.word	0x58025430
 8005d74:	58025444 	.word	0x58025444
 8005d78:	58025458 	.word	0x58025458
 8005d7c:	5802546c 	.word	0x5802546c
 8005d80:	58025480 	.word	0x58025480
 8005d84:	58025494 	.word	0x58025494
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d028      	beq.n	8005de0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2201      	movs	r2, #1
 8005dae:	409a      	lsls	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00c      	beq.n	8005de0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop

08005e0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e18:	4b67      	ldr	r3, [pc, #412]	; (8005fb8 <HAL_DMA_IRQHandler+0x1ac>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a67      	ldr	r2, [pc, #412]	; (8005fbc <HAL_DMA_IRQHandler+0x1b0>)
 8005e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e22:	0a9b      	lsrs	r3, r3, #10
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a5f      	ldr	r2, [pc, #380]	; (8005fc0 <HAL_DMA_IRQHandler+0x1b4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d04a      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5d      	ldr	r2, [pc, #372]	; (8005fc4 <HAL_DMA_IRQHandler+0x1b8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d045      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a5c      	ldr	r2, [pc, #368]	; (8005fc8 <HAL_DMA_IRQHandler+0x1bc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d040      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a5a      	ldr	r2, [pc, #360]	; (8005fcc <HAL_DMA_IRQHandler+0x1c0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d03b      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a59      	ldr	r2, [pc, #356]	; (8005fd0 <HAL_DMA_IRQHandler+0x1c4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d036      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a57      	ldr	r2, [pc, #348]	; (8005fd4 <HAL_DMA_IRQHandler+0x1c8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d031      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a56      	ldr	r2, [pc, #344]	; (8005fd8 <HAL_DMA_IRQHandler+0x1cc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d02c      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a54      	ldr	r2, [pc, #336]	; (8005fdc <HAL_DMA_IRQHandler+0x1d0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d027      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a53      	ldr	r2, [pc, #332]	; (8005fe0 <HAL_DMA_IRQHandler+0x1d4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d022      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a51      	ldr	r2, [pc, #324]	; (8005fe4 <HAL_DMA_IRQHandler+0x1d8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01d      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a50      	ldr	r2, [pc, #320]	; (8005fe8 <HAL_DMA_IRQHandler+0x1dc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4e      	ldr	r2, [pc, #312]	; (8005fec <HAL_DMA_IRQHandler+0x1e0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a4d      	ldr	r2, [pc, #308]	; (8005ff0 <HAL_DMA_IRQHandler+0x1e4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a4b      	ldr	r2, [pc, #300]	; (8005ff4 <HAL_DMA_IRQHandler+0x1e8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a4a      	ldr	r2, [pc, #296]	; (8005ff8 <HAL_DMA_IRQHandler+0x1ec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_DMA_IRQHandler+0xd2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a48      	ldr	r2, [pc, #288]	; (8005ffc <HAL_DMA_IRQHandler+0x1f0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_DMA_IRQHandler+0xd6>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <HAL_DMA_IRQHandler+0xd8>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 842b 	beq.w	8006740 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80a2 	beq.w	8006044 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2e      	ldr	r2, [pc, #184]	; (8005fc0 <HAL_DMA_IRQHandler+0x1b4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d04a      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a2d      	ldr	r2, [pc, #180]	; (8005fc4 <HAL_DMA_IRQHandler+0x1b8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d045      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2b      	ldr	r2, [pc, #172]	; (8005fc8 <HAL_DMA_IRQHandler+0x1bc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d040      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2a      	ldr	r2, [pc, #168]	; (8005fcc <HAL_DMA_IRQHandler+0x1c0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d03b      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a28      	ldr	r2, [pc, #160]	; (8005fd0 <HAL_DMA_IRQHandler+0x1c4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d036      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a27      	ldr	r2, [pc, #156]	; (8005fd4 <HAL_DMA_IRQHandler+0x1c8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d031      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <HAL_DMA_IRQHandler+0x1cc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02c      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a24      	ldr	r2, [pc, #144]	; (8005fdc <HAL_DMA_IRQHandler+0x1d0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d027      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <HAL_DMA_IRQHandler+0x1d4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d022      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <HAL_DMA_IRQHandler+0x1d8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d01d      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <HAL_DMA_IRQHandler+0x1dc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d018      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1e      	ldr	r2, [pc, #120]	; (8005fec <HAL_DMA_IRQHandler+0x1e0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <HAL_DMA_IRQHandler+0x1e4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <HAL_DMA_IRQHandler+0x1e8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a19      	ldr	r2, [pc, #100]	; (8005ff8 <HAL_DMA_IRQHandler+0x1ec>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x194>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_DMA_IRQHandler+0x1f0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d12f      	bne.n	8006000 <HAL_DMA_IRQHandler+0x1f4>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bf14      	ite	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	2300      	moveq	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e02e      	b.n	8006014 <HAL_DMA_IRQHandler+0x208>
 8005fb6:	bf00      	nop
 8005fb8:	24000030 	.word	0x24000030
 8005fbc:	1b4e81b5 	.word	0x1b4e81b5
 8005fc0:	40020010 	.word	0x40020010
 8005fc4:	40020028 	.word	0x40020028
 8005fc8:	40020040 	.word	0x40020040
 8005fcc:	40020058 	.word	0x40020058
 8005fd0:	40020070 	.word	0x40020070
 8005fd4:	40020088 	.word	0x40020088
 8005fd8:	400200a0 	.word	0x400200a0
 8005fdc:	400200b8 	.word	0x400200b8
 8005fe0:	40020410 	.word	0x40020410
 8005fe4:	40020428 	.word	0x40020428
 8005fe8:	40020440 	.word	0x40020440
 8005fec:	40020458 	.word	0x40020458
 8005ff0:	40020470 	.word	0x40020470
 8005ff4:	40020488 	.word	0x40020488
 8005ff8:	400204a0 	.word	0x400204a0
 8005ffc:	400204b8 	.word	0x400204b8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d015      	beq.n	8006044 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0204 	bic.w	r2, r2, #4
 8006026:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2208      	movs	r2, #8
 8006032:	409a      	lsls	r2, r3
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f043 0201 	orr.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d06e      	beq.n	8006138 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a69      	ldr	r2, [pc, #420]	; (8006204 <HAL_DMA_IRQHandler+0x3f8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a67      	ldr	r2, [pc, #412]	; (8006208 <HAL_DMA_IRQHandler+0x3fc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a66      	ldr	r2, [pc, #408]	; (800620c <HAL_DMA_IRQHandler+0x400>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a64      	ldr	r2, [pc, #400]	; (8006210 <HAL_DMA_IRQHandler+0x404>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a63      	ldr	r2, [pc, #396]	; (8006214 <HAL_DMA_IRQHandler+0x408>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a61      	ldr	r2, [pc, #388]	; (8006218 <HAL_DMA_IRQHandler+0x40c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a60      	ldr	r2, [pc, #384]	; (800621c <HAL_DMA_IRQHandler+0x410>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5e      	ldr	r2, [pc, #376]	; (8006220 <HAL_DMA_IRQHandler+0x414>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a5d      	ldr	r2, [pc, #372]	; (8006224 <HAL_DMA_IRQHandler+0x418>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5b      	ldr	r2, [pc, #364]	; (8006228 <HAL_DMA_IRQHandler+0x41c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5a      	ldr	r2, [pc, #360]	; (800622c <HAL_DMA_IRQHandler+0x420>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a58      	ldr	r2, [pc, #352]	; (8006230 <HAL_DMA_IRQHandler+0x424>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a57      	ldr	r2, [pc, #348]	; (8006234 <HAL_DMA_IRQHandler+0x428>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a55      	ldr	r2, [pc, #340]	; (8006238 <HAL_DMA_IRQHandler+0x42c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a54      	ldr	r2, [pc, #336]	; (800623c <HAL_DMA_IRQHandler+0x430>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_IRQHandler+0x2ee>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_DMA_IRQHandler+0x434>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d10a      	bne.n	8006110 <HAL_DMA_IRQHandler+0x304>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	e003      	b.n	8006118 <HAL_DMA_IRQHandler+0x30c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00d      	beq.n	8006138 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f043 0202 	orr.w	r2, r3, #2
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	2204      	movs	r2, #4
 8006142:	409a      	lsls	r2, r3
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 808f 	beq.w	800626c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2c      	ldr	r2, [pc, #176]	; (8006204 <HAL_DMA_IRQHandler+0x3f8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d04a      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <HAL_DMA_IRQHandler+0x3fc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d045      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a29      	ldr	r2, [pc, #164]	; (800620c <HAL_DMA_IRQHandler+0x400>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d040      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a27      	ldr	r2, [pc, #156]	; (8006210 <HAL_DMA_IRQHandler+0x404>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d03b      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a26      	ldr	r2, [pc, #152]	; (8006214 <HAL_DMA_IRQHandler+0x408>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d036      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_DMA_IRQHandler+0x40c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d031      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a23      	ldr	r2, [pc, #140]	; (800621c <HAL_DMA_IRQHandler+0x410>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d02c      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <HAL_DMA_IRQHandler+0x414>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d027      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a20      	ldr	r2, [pc, #128]	; (8006224 <HAL_DMA_IRQHandler+0x418>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d022      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_DMA_IRQHandler+0x41c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01d      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	; (800622c <HAL_DMA_IRQHandler+0x420>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d018      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_DMA_IRQHandler+0x424>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	; (8006234 <HAL_DMA_IRQHandler+0x428>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_DMA_IRQHandler+0x42c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a17      	ldr	r2, [pc, #92]	; (800623c <HAL_DMA_IRQHandler+0x430>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_DMA_IRQHandler+0x3e2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <HAL_DMA_IRQHandler+0x434>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d12a      	bne.n	8006244 <HAL_DMA_IRQHandler+0x438>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e023      	b.n	800624c <HAL_DMA_IRQHandler+0x440>
 8006204:	40020010 	.word	0x40020010
 8006208:	40020028 	.word	0x40020028
 800620c:	40020040 	.word	0x40020040
 8006210:	40020058 	.word	0x40020058
 8006214:	40020070 	.word	0x40020070
 8006218:	40020088 	.word	0x40020088
 800621c:	400200a0 	.word	0x400200a0
 8006220:	400200b8 	.word	0x400200b8
 8006224:	40020410 	.word	0x40020410
 8006228:	40020428 	.word	0x40020428
 800622c:	40020440 	.word	0x40020440
 8006230:	40020458 	.word	0x40020458
 8006234:	40020470 	.word	0x40020470
 8006238:	40020488 	.word	0x40020488
 800623c:	400204a0 	.word	0x400204a0
 8006240:	400204b8 	.word	0x400204b8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2204      	movs	r2, #4
 800625a:	409a      	lsls	r2, r3
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	f043 0204 	orr.w	r2, r3, #4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2210      	movs	r2, #16
 8006276:	409a      	lsls	r2, r3
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80a6 	beq.w	80063ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a85      	ldr	r2, [pc, #532]	; (800649c <HAL_DMA_IRQHandler+0x690>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d04a      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a83      	ldr	r2, [pc, #524]	; (80064a0 <HAL_DMA_IRQHandler+0x694>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d045      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a82      	ldr	r2, [pc, #520]	; (80064a4 <HAL_DMA_IRQHandler+0x698>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d040      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a80      	ldr	r2, [pc, #512]	; (80064a8 <HAL_DMA_IRQHandler+0x69c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d03b      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7f      	ldr	r2, [pc, #508]	; (80064ac <HAL_DMA_IRQHandler+0x6a0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d036      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a7d      	ldr	r2, [pc, #500]	; (80064b0 <HAL_DMA_IRQHandler+0x6a4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d031      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a7c      	ldr	r2, [pc, #496]	; (80064b4 <HAL_DMA_IRQHandler+0x6a8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d02c      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a7a      	ldr	r2, [pc, #488]	; (80064b8 <HAL_DMA_IRQHandler+0x6ac>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d027      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a79      	ldr	r2, [pc, #484]	; (80064bc <HAL_DMA_IRQHandler+0x6b0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a77      	ldr	r2, [pc, #476]	; (80064c0 <HAL_DMA_IRQHandler+0x6b4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01d      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a76      	ldr	r2, [pc, #472]	; (80064c4 <HAL_DMA_IRQHandler+0x6b8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d018      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a74      	ldr	r2, [pc, #464]	; (80064c8 <HAL_DMA_IRQHandler+0x6bc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a73      	ldr	r2, [pc, #460]	; (80064cc <HAL_DMA_IRQHandler+0x6c0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a71      	ldr	r2, [pc, #452]	; (80064d0 <HAL_DMA_IRQHandler+0x6c4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a70      	ldr	r2, [pc, #448]	; (80064d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_DMA_IRQHandler+0x516>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a6e      	ldr	r2, [pc, #440]	; (80064d8 <HAL_DMA_IRQHandler+0x6cc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10a      	bne.n	8006338 <HAL_DMA_IRQHandler+0x52c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf14      	ite	ne
 8006330:	2301      	movne	r3, #1
 8006332:	2300      	moveq	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	e009      	b.n	800634c <HAL_DMA_IRQHandler+0x540>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d03e      	beq.n	80063ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2210      	movs	r2, #16
 800635a:	409a      	lsls	r2, r3
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d018      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d024      	beq.n	80063ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
 800638c:	e01f      	b.n	80063ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01b      	beq.n	80063ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	e016      	b.n	80063ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d107      	bne.n	80063be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0208 	bic.w	r2, r2, #8
 80063bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2220      	movs	r2, #32
 80063d8:	409a      	lsls	r2, r3
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8110 	beq.w	8006604 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2c      	ldr	r2, [pc, #176]	; (800649c <HAL_DMA_IRQHandler+0x690>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d04a      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <HAL_DMA_IRQHandler+0x694>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d045      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a29      	ldr	r2, [pc, #164]	; (80064a4 <HAL_DMA_IRQHandler+0x698>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d040      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a28      	ldr	r2, [pc, #160]	; (80064a8 <HAL_DMA_IRQHandler+0x69c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d03b      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a26      	ldr	r2, [pc, #152]	; (80064ac <HAL_DMA_IRQHandler+0x6a0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d036      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <HAL_DMA_IRQHandler+0x6a4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d031      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a23      	ldr	r2, [pc, #140]	; (80064b4 <HAL_DMA_IRQHandler+0x6a8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d02c      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <HAL_DMA_IRQHandler+0x6ac>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d027      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a20      	ldr	r2, [pc, #128]	; (80064bc <HAL_DMA_IRQHandler+0x6b0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d022      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <HAL_DMA_IRQHandler+0x6b4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d01d      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <HAL_DMA_IRQHandler+0x6b8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <HAL_DMA_IRQHandler+0x6bc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d013      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <HAL_DMA_IRQHandler+0x6c0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_DMA_IRQHandler+0x6c4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_DMA_IRQHandler+0x678>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <HAL_DMA_IRQHandler+0x6cc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d12b      	bne.n	80064dc <HAL_DMA_IRQHandler+0x6d0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf14      	ite	ne
 8006492:	2301      	movne	r3, #1
 8006494:	2300      	moveq	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	e02a      	b.n	80064f0 <HAL_DMA_IRQHandler+0x6e4>
 800649a:	bf00      	nop
 800649c:	40020010 	.word	0x40020010
 80064a0:	40020028 	.word	0x40020028
 80064a4:	40020040 	.word	0x40020040
 80064a8:	40020058 	.word	0x40020058
 80064ac:	40020070 	.word	0x40020070
 80064b0:	40020088 	.word	0x40020088
 80064b4:	400200a0 	.word	0x400200a0
 80064b8:	400200b8 	.word	0x400200b8
 80064bc:	40020410 	.word	0x40020410
 80064c0:	40020428 	.word	0x40020428
 80064c4:	40020440 	.word	0x40020440
 80064c8:	40020458 	.word	0x40020458
 80064cc:	40020470 	.word	0x40020470
 80064d0:	40020488 	.word	0x40020488
 80064d4:	400204a0 	.word	0x400204a0
 80064d8:	400204b8 	.word	0x400204b8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8087 	beq.w	8006604 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2220      	movs	r2, #32
 8006500:	409a      	lsls	r2, r3
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b04      	cmp	r3, #4
 8006510:	d139      	bne.n	8006586 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0216 	bic.w	r2, r2, #22
 8006520:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006530:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <HAL_DMA_IRQHandler+0x736>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0208 	bic.w	r2, r2, #8
 8006550:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	223f      	movs	r2, #63	; 0x3f
 800655c:	409a      	lsls	r2, r3
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 834a 	beq.w	8006c10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
          }
          return;
 8006584:	e344      	b.n	8006c10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d018      	beq.n	80065c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d108      	bne.n	80065b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d02c      	beq.n	8006604 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	e027      	b.n	8006604 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d023      	beq.n	8006604 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
 80065c4:	e01e      	b.n	8006604 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0210 	bic.w	r2, r2, #16
 80065e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8306 	beq.w	8006c1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8088 	beq.w	800672c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2204      	movs	r2, #4
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a7a      	ldr	r2, [pc, #488]	; (8006814 <HAL_DMA_IRQHandler+0xa08>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d04a      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a79      	ldr	r2, [pc, #484]	; (8006818 <HAL_DMA_IRQHandler+0xa0c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d045      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a77      	ldr	r2, [pc, #476]	; (800681c <HAL_DMA_IRQHandler+0xa10>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d040      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a76      	ldr	r2, [pc, #472]	; (8006820 <HAL_DMA_IRQHandler+0xa14>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d03b      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a74      	ldr	r2, [pc, #464]	; (8006824 <HAL_DMA_IRQHandler+0xa18>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d036      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a73      	ldr	r2, [pc, #460]	; (8006828 <HAL_DMA_IRQHandler+0xa1c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d031      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a71      	ldr	r2, [pc, #452]	; (800682c <HAL_DMA_IRQHandler+0xa20>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d02c      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a70      	ldr	r2, [pc, #448]	; (8006830 <HAL_DMA_IRQHandler+0xa24>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d027      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a6e      	ldr	r2, [pc, #440]	; (8006834 <HAL_DMA_IRQHandler+0xa28>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d022      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a6d      	ldr	r2, [pc, #436]	; (8006838 <HAL_DMA_IRQHandler+0xa2c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01d      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a6b      	ldr	r2, [pc, #428]	; (800683c <HAL_DMA_IRQHandler+0xa30>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6a      	ldr	r2, [pc, #424]	; (8006840 <HAL_DMA_IRQHandler+0xa34>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a68      	ldr	r2, [pc, #416]	; (8006844 <HAL_DMA_IRQHandler+0xa38>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a67      	ldr	r2, [pc, #412]	; (8006848 <HAL_DMA_IRQHandler+0xa3c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a65      	ldr	r2, [pc, #404]	; (800684c <HAL_DMA_IRQHandler+0xa40>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x8b8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a64      	ldr	r2, [pc, #400]	; (8006850 <HAL_DMA_IRQHandler+0xa44>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d108      	bne.n	80066d6 <HAL_DMA_IRQHandler+0x8ca>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e007      	b.n	80066e6 <HAL_DMA_IRQHandler+0x8da>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d307      	bcc.n	8006702 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f2      	bne.n	80066e6 <HAL_DMA_IRQHandler+0x8da>
 8006700:	e000      	b.n	8006704 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006702:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2203      	movs	r2, #3
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800671a:	e003      	b.n	8006724 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8272 	beq.w	8006c1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	e26c      	b.n	8006c1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a43      	ldr	r2, [pc, #268]	; (8006854 <HAL_DMA_IRQHandler+0xa48>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d022      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a42      	ldr	r2, [pc, #264]	; (8006858 <HAL_DMA_IRQHandler+0xa4c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d01d      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a40      	ldr	r2, [pc, #256]	; (800685c <HAL_DMA_IRQHandler+0xa50>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d018      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a3f      	ldr	r2, [pc, #252]	; (8006860 <HAL_DMA_IRQHandler+0xa54>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <HAL_DMA_IRQHandler+0xa58>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00e      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3c      	ldr	r2, [pc, #240]	; (8006868 <HAL_DMA_IRQHandler+0xa5c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a3a      	ldr	r2, [pc, #232]	; (800686c <HAL_DMA_IRQHandler+0xa60>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_DMA_IRQHandler+0x984>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a39      	ldr	r2, [pc, #228]	; (8006870 <HAL_DMA_IRQHandler+0xa64>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d101      	bne.n	8006794 <HAL_DMA_IRQHandler+0x988>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <HAL_DMA_IRQHandler+0x98a>
 8006794:	2300      	movs	r3, #0
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 823f 	beq.w	8006c1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2204      	movs	r2, #4
 80067ae:	409a      	lsls	r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80cd 	beq.w	8006954 <HAL_DMA_IRQHandler+0xb48>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80c7 	beq.w	8006954 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2204      	movs	r2, #4
 80067d0:	409a      	lsls	r2, r3
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d049      	beq.n	8006874 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8210 	beq.w	8006c14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067fc:	e20a      	b.n	8006c14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8206 	beq.w	8006c14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006810:	e200      	b.n	8006c14 <HAL_DMA_IRQHandler+0xe08>
 8006812:	bf00      	nop
 8006814:	40020010 	.word	0x40020010
 8006818:	40020028 	.word	0x40020028
 800681c:	40020040 	.word	0x40020040
 8006820:	40020058 	.word	0x40020058
 8006824:	40020070 	.word	0x40020070
 8006828:	40020088 	.word	0x40020088
 800682c:	400200a0 	.word	0x400200a0
 8006830:	400200b8 	.word	0x400200b8
 8006834:	40020410 	.word	0x40020410
 8006838:	40020428 	.word	0x40020428
 800683c:	40020440 	.word	0x40020440
 8006840:	40020458 	.word	0x40020458
 8006844:	40020470 	.word	0x40020470
 8006848:	40020488 	.word	0x40020488
 800684c:	400204a0 	.word	0x400204a0
 8006850:	400204b8 	.word	0x400204b8
 8006854:	58025408 	.word	0x58025408
 8006858:	5802541c 	.word	0x5802541c
 800685c:	58025430 	.word	0x58025430
 8006860:	58025444 	.word	0x58025444
 8006864:	58025458 	.word	0x58025458
 8006868:	5802546c 	.word	0x5802546c
 800686c:	58025480 	.word	0x58025480
 8006870:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d160      	bne.n	8006940 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a7f      	ldr	r2, [pc, #508]	; (8006a80 <HAL_DMA_IRQHandler+0xc74>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04a      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a7d      	ldr	r2, [pc, #500]	; (8006a84 <HAL_DMA_IRQHandler+0xc78>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d045      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a7c      	ldr	r2, [pc, #496]	; (8006a88 <HAL_DMA_IRQHandler+0xc7c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d040      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a7a      	ldr	r2, [pc, #488]	; (8006a8c <HAL_DMA_IRQHandler+0xc80>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d03b      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a79      	ldr	r2, [pc, #484]	; (8006a90 <HAL_DMA_IRQHandler+0xc84>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d036      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a77      	ldr	r2, [pc, #476]	; (8006a94 <HAL_DMA_IRQHandler+0xc88>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d031      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a76      	ldr	r2, [pc, #472]	; (8006a98 <HAL_DMA_IRQHandler+0xc8c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d02c      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a74      	ldr	r2, [pc, #464]	; (8006a9c <HAL_DMA_IRQHandler+0xc90>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d027      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a73      	ldr	r2, [pc, #460]	; (8006aa0 <HAL_DMA_IRQHandler+0xc94>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a71      	ldr	r2, [pc, #452]	; (8006aa4 <HAL_DMA_IRQHandler+0xc98>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a70      	ldr	r2, [pc, #448]	; (8006aa8 <HAL_DMA_IRQHandler+0xc9c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a6e      	ldr	r2, [pc, #440]	; (8006aac <HAL_DMA_IRQHandler+0xca0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a6d      	ldr	r2, [pc, #436]	; (8006ab0 <HAL_DMA_IRQHandler+0xca4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a6b      	ldr	r2, [pc, #428]	; (8006ab4 <HAL_DMA_IRQHandler+0xca8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6a      	ldr	r2, [pc, #424]	; (8006ab8 <HAL_DMA_IRQHandler+0xcac>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_DMA_IRQHandler+0xb12>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a68      	ldr	r2, [pc, #416]	; (8006abc <HAL_DMA_IRQHandler+0xcb0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <HAL_DMA_IRQHandler+0xb24>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0208 	bic.w	r2, r2, #8
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e007      	b.n	8006940 <HAL_DMA_IRQHandler+0xb34>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8165 	beq.w	8006c14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006952:	e15f      	b.n	8006c14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	2202      	movs	r2, #2
 800695e:	409a      	lsls	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	4013      	ands	r3, r2
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80c5 	beq.w	8006af4 <HAL_DMA_IRQHandler+0xce8>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80bf 	beq.w	8006af4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2202      	movs	r2, #2
 8006980:	409a      	lsls	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d018      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 813a 	beq.w	8006c18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069ac:	e134      	b.n	8006c18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8130 	beq.w	8006c18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069c0:	e12a      	b.n	8006c18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8089 	bne.w	8006ae0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <HAL_DMA_IRQHandler+0xc74>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d04a      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <HAL_DMA_IRQHandler+0xc78>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d045      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <HAL_DMA_IRQHandler+0xc7c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d040      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <HAL_DMA_IRQHandler+0xc80>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d03b      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a25      	ldr	r2, [pc, #148]	; (8006a90 <HAL_DMA_IRQHandler+0xc84>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d036      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_DMA_IRQHandler+0xc88>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d031      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <HAL_DMA_IRQHandler+0xc8c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d02c      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a20      	ldr	r2, [pc, #128]	; (8006a9c <HAL_DMA_IRQHandler+0xc90>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d027      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <HAL_DMA_IRQHandler+0xc94>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d022      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_DMA_IRQHandler+0xc98>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01d      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <HAL_DMA_IRQHandler+0xc9c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_DMA_IRQHandler+0xca0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <HAL_DMA_IRQHandler+0xca4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_DMA_IRQHandler+0xca8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a16      	ldr	r2, [pc, #88]	; (8006ab8 <HAL_DMA_IRQHandler+0xcac>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_DMA_IRQHandler+0xc62>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a14      	ldr	r2, [pc, #80]	; (8006abc <HAL_DMA_IRQHandler+0xcb0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d128      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0xcb4>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0214 	bic.w	r2, r2, #20
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e027      	b.n	8006ad0 <HAL_DMA_IRQHandler+0xcc4>
 8006a80:	40020010 	.word	0x40020010
 8006a84:	40020028 	.word	0x40020028
 8006a88:	40020040 	.word	0x40020040
 8006a8c:	40020058 	.word	0x40020058
 8006a90:	40020070 	.word	0x40020070
 8006a94:	40020088 	.word	0x40020088
 8006a98:	400200a0 	.word	0x400200a0
 8006a9c:	400200b8 	.word	0x400200b8
 8006aa0:	40020410 	.word	0x40020410
 8006aa4:	40020428 	.word	0x40020428
 8006aa8:	40020440 	.word	0x40020440
 8006aac:	40020458 	.word	0x40020458
 8006ab0:	40020470 	.word	0x40020470
 8006ab4:	40020488 	.word	0x40020488
 8006ab8:	400204a0 	.word	0x400204a0
 8006abc:	400204b8 	.word	0x400204b8
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 020a 	bic.w	r2, r2, #10
 8006ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8097 	beq.w	8006c18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006af2:	e091      	b.n	8006c18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2208      	movs	r2, #8
 8006afe:	409a      	lsls	r2, r3
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8088 	beq.w	8006c1a <HAL_DMA_IRQHandler+0xe0e>
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8082 	beq.w	8006c1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a41      	ldr	r2, [pc, #260]	; (8006c20 <HAL_DMA_IRQHandler+0xe14>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d04a      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <HAL_DMA_IRQHandler+0xe18>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d045      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3e      	ldr	r2, [pc, #248]	; (8006c28 <HAL_DMA_IRQHandler+0xe1c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d040      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <HAL_DMA_IRQHandler+0xe20>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d03b      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <HAL_DMA_IRQHandler+0xe24>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d036      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a39      	ldr	r2, [pc, #228]	; (8006c34 <HAL_DMA_IRQHandler+0xe28>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d031      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a38      	ldr	r2, [pc, #224]	; (8006c38 <HAL_DMA_IRQHandler+0xe2c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d02c      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a36      	ldr	r2, [pc, #216]	; (8006c3c <HAL_DMA_IRQHandler+0xe30>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d027      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a35      	ldr	r2, [pc, #212]	; (8006c40 <HAL_DMA_IRQHandler+0xe34>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <HAL_DMA_IRQHandler+0xe38>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01d      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <HAL_DMA_IRQHandler+0xe3c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a30      	ldr	r2, [pc, #192]	; (8006c4c <HAL_DMA_IRQHandler+0xe40>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <HAL_DMA_IRQHandler+0xe44>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2d      	ldr	r2, [pc, #180]	; (8006c54 <HAL_DMA_IRQHandler+0xe48>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <HAL_DMA_IRQHandler+0xe4c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xdaa>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <HAL_DMA_IRQHandler+0xe50>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d108      	bne.n	8006bc8 <HAL_DMA_IRQHandler+0xdbc>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 021c 	bic.w	r2, r2, #28
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e007      	b.n	8006bd8 <HAL_DMA_IRQHandler+0xdcc>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 020e 	bic.w	r2, r2, #14
 8006bd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	2201      	movs	r2, #1
 8006be2:	409a      	lsls	r2, r3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
 8006c0e:	e004      	b.n	8006c1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006c10:	bf00      	nop
 8006c12:	e002      	b.n	8006c1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c14:	bf00      	nop
 8006c16:	e000      	b.n	8006c1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c1a:	3728      	adds	r7, #40	; 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8

08006c60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a7f      	ldr	r2, [pc, #508]	; (8006e7c <DMA_SetConfig+0x21c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d072      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a7d      	ldr	r2, [pc, #500]	; (8006e80 <DMA_SetConfig+0x220>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d06d      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7c      	ldr	r2, [pc, #496]	; (8006e84 <DMA_SetConfig+0x224>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d068      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a7a      	ldr	r2, [pc, #488]	; (8006e88 <DMA_SetConfig+0x228>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d063      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a79      	ldr	r2, [pc, #484]	; (8006e8c <DMA_SetConfig+0x22c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d05e      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a77      	ldr	r2, [pc, #476]	; (8006e90 <DMA_SetConfig+0x230>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d059      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a76      	ldr	r2, [pc, #472]	; (8006e94 <DMA_SetConfig+0x234>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d054      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a74      	ldr	r2, [pc, #464]	; (8006e98 <DMA_SetConfig+0x238>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d04f      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a73      	ldr	r2, [pc, #460]	; (8006e9c <DMA_SetConfig+0x23c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d04a      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a71      	ldr	r2, [pc, #452]	; (8006ea0 <DMA_SetConfig+0x240>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d045      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a70      	ldr	r2, [pc, #448]	; (8006ea4 <DMA_SetConfig+0x244>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d040      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6e      	ldr	r2, [pc, #440]	; (8006ea8 <DMA_SetConfig+0x248>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d03b      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a6d      	ldr	r2, [pc, #436]	; (8006eac <DMA_SetConfig+0x24c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d036      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a6b      	ldr	r2, [pc, #428]	; (8006eb0 <DMA_SetConfig+0x250>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d031      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6a      	ldr	r2, [pc, #424]	; (8006eb4 <DMA_SetConfig+0x254>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d02c      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a68      	ldr	r2, [pc, #416]	; (8006eb8 <DMA_SetConfig+0x258>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d027      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a67      	ldr	r2, [pc, #412]	; (8006ebc <DMA_SetConfig+0x25c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d022      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a65      	ldr	r2, [pc, #404]	; (8006ec0 <DMA_SetConfig+0x260>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d01d      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a64      	ldr	r2, [pc, #400]	; (8006ec4 <DMA_SetConfig+0x264>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d018      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a62      	ldr	r2, [pc, #392]	; (8006ec8 <DMA_SetConfig+0x268>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a61      	ldr	r2, [pc, #388]	; (8006ecc <DMA_SetConfig+0x26c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00e      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a5f      	ldr	r2, [pc, #380]	; (8006ed0 <DMA_SetConfig+0x270>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d009      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a5e      	ldr	r2, [pc, #376]	; (8006ed4 <DMA_SetConfig+0x274>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <DMA_SetConfig+0x10a>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a5c      	ldr	r2, [pc, #368]	; (8006ed8 <DMA_SetConfig+0x278>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d101      	bne.n	8006d6e <DMA_SetConfig+0x10e>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <DMA_SetConfig+0x110>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00d      	beq.n	8006d90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a39      	ldr	r2, [pc, #228]	; (8006e7c <DMA_SetConfig+0x21c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d04a      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a38      	ldr	r2, [pc, #224]	; (8006e80 <DMA_SetConfig+0x220>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d045      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a36      	ldr	r2, [pc, #216]	; (8006e84 <DMA_SetConfig+0x224>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d040      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a35      	ldr	r2, [pc, #212]	; (8006e88 <DMA_SetConfig+0x228>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d03b      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a33      	ldr	r2, [pc, #204]	; (8006e8c <DMA_SetConfig+0x22c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d036      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a32      	ldr	r2, [pc, #200]	; (8006e90 <DMA_SetConfig+0x230>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d031      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a30      	ldr	r2, [pc, #192]	; (8006e94 <DMA_SetConfig+0x234>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d02c      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a2f      	ldr	r2, [pc, #188]	; (8006e98 <DMA_SetConfig+0x238>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d027      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <DMA_SetConfig+0x23c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d022      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2c      	ldr	r2, [pc, #176]	; (8006ea0 <DMA_SetConfig+0x240>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d01d      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <DMA_SetConfig+0x244>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d018      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <DMA_SetConfig+0x248>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a27      	ldr	r2, [pc, #156]	; (8006eac <DMA_SetConfig+0x24c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00e      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <DMA_SetConfig+0x250>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <DMA_SetConfig+0x254>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <DMA_SetConfig+0x1d0>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a23      	ldr	r2, [pc, #140]	; (8006eb8 <DMA_SetConfig+0x258>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d101      	bne.n	8006e34 <DMA_SetConfig+0x1d4>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <DMA_SetConfig+0x1d6>
 8006e34:	2300      	movs	r3, #0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d059      	beq.n	8006eee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	223f      	movs	r2, #63	; 0x3f
 8006e44:	409a      	lsls	r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d138      	bne.n	8006edc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e7a:	e086      	b.n	8006f8a <DMA_SetConfig+0x32a>
 8006e7c:	40020010 	.word	0x40020010
 8006e80:	40020028 	.word	0x40020028
 8006e84:	40020040 	.word	0x40020040
 8006e88:	40020058 	.word	0x40020058
 8006e8c:	40020070 	.word	0x40020070
 8006e90:	40020088 	.word	0x40020088
 8006e94:	400200a0 	.word	0x400200a0
 8006e98:	400200b8 	.word	0x400200b8
 8006e9c:	40020410 	.word	0x40020410
 8006ea0:	40020428 	.word	0x40020428
 8006ea4:	40020440 	.word	0x40020440
 8006ea8:	40020458 	.word	0x40020458
 8006eac:	40020470 	.word	0x40020470
 8006eb0:	40020488 	.word	0x40020488
 8006eb4:	400204a0 	.word	0x400204a0
 8006eb8:	400204b8 	.word	0x400204b8
 8006ebc:	58025408 	.word	0x58025408
 8006ec0:	5802541c 	.word	0x5802541c
 8006ec4:	58025430 	.word	0x58025430
 8006ec8:	58025444 	.word	0x58025444
 8006ecc:	58025458 	.word	0x58025458
 8006ed0:	5802546c 	.word	0x5802546c
 8006ed4:	58025480 	.word	0x58025480
 8006ed8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]
}
 8006eec:	e04d      	b.n	8006f8a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a29      	ldr	r2, [pc, #164]	; (8006f98 <DMA_SetConfig+0x338>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d022      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <DMA_SetConfig+0x33c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01d      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <DMA_SetConfig+0x340>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a24      	ldr	r2, [pc, #144]	; (8006fa4 <DMA_SetConfig+0x344>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <DMA_SetConfig+0x348>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a21      	ldr	r2, [pc, #132]	; (8006fac <DMA_SetConfig+0x34c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a20      	ldr	r2, [pc, #128]	; (8006fb0 <DMA_SetConfig+0x350>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <DMA_SetConfig+0x2de>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <DMA_SetConfig+0x354>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <DMA_SetConfig+0x2e2>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <DMA_SetConfig+0x2e4>
 8006f42:	2300      	movs	r3, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d020      	beq.n	8006f8a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2201      	movs	r2, #1
 8006f52:	409a      	lsls	r2, r3
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d108      	bne.n	8006f7a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	60da      	str	r2, [r3, #12]
}
 8006f78:	e007      	b.n	8006f8a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	60da      	str	r2, [r3, #12]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	58025408 	.word	0x58025408
 8006f9c:	5802541c 	.word	0x5802541c
 8006fa0:	58025430 	.word	0x58025430
 8006fa4:	58025444 	.word	0x58025444
 8006fa8:	58025458 	.word	0x58025458
 8006fac:	5802546c 	.word	0x5802546c
 8006fb0:	58025480 	.word	0x58025480
 8006fb4:	58025494 	.word	0x58025494

08006fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a42      	ldr	r2, [pc, #264]	; (80070d0 <DMA_CalcBaseAndBitshift+0x118>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d04a      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a41      	ldr	r2, [pc, #260]	; (80070d4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d045      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a3f      	ldr	r2, [pc, #252]	; (80070d8 <DMA_CalcBaseAndBitshift+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d040      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a3e      	ldr	r2, [pc, #248]	; (80070dc <DMA_CalcBaseAndBitshift+0x124>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d03b      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a3c      	ldr	r2, [pc, #240]	; (80070e0 <DMA_CalcBaseAndBitshift+0x128>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d036      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a3b      	ldr	r2, [pc, #236]	; (80070e4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d031      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a39      	ldr	r2, [pc, #228]	; (80070e8 <DMA_CalcBaseAndBitshift+0x130>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d02c      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a38      	ldr	r2, [pc, #224]	; (80070ec <DMA_CalcBaseAndBitshift+0x134>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d027      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a36      	ldr	r2, [pc, #216]	; (80070f0 <DMA_CalcBaseAndBitshift+0x138>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a35      	ldr	r2, [pc, #212]	; (80070f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d01d      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a33      	ldr	r2, [pc, #204]	; (80070f8 <DMA_CalcBaseAndBitshift+0x140>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a32      	ldr	r2, [pc, #200]	; (80070fc <DMA_CalcBaseAndBitshift+0x144>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a30      	ldr	r2, [pc, #192]	; (8007100 <DMA_CalcBaseAndBitshift+0x148>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a2f      	ldr	r2, [pc, #188]	; (8007104 <DMA_CalcBaseAndBitshift+0x14c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a2d      	ldr	r2, [pc, #180]	; (8007108 <DMA_CalcBaseAndBitshift+0x150>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xa8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2c      	ldr	r2, [pc, #176]	; (800710c <DMA_CalcBaseAndBitshift+0x154>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d101      	bne.n	8007064 <DMA_CalcBaseAndBitshift+0xac>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <DMA_CalcBaseAndBitshift+0xae>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d024      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	3b10      	subs	r3, #16
 8007072:	4a27      	ldr	r2, [pc, #156]	; (8007110 <DMA_CalcBaseAndBitshift+0x158>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	4a24      	ldr	r2, [pc, #144]	; (8007114 <DMA_CalcBaseAndBitshift+0x15c>)
 8007084:	5cd3      	ldrb	r3, [r2, r3]
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d908      	bls.n	80070a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <DMA_CalcBaseAndBitshift+0x160>)
 800709a:	4013      	ands	r3, r2
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	659a      	str	r2, [r3, #88]	; 0x58
 80070a2:	e00d      	b.n	80070c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <DMA_CalcBaseAndBitshift+0x160>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6593      	str	r3, [r2, #88]	; 0x58
 80070b2:	e005      	b.n	80070c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40020010 	.word	0x40020010
 80070d4:	40020028 	.word	0x40020028
 80070d8:	40020040 	.word	0x40020040
 80070dc:	40020058 	.word	0x40020058
 80070e0:	40020070 	.word	0x40020070
 80070e4:	40020088 	.word	0x40020088
 80070e8:	400200a0 	.word	0x400200a0
 80070ec:	400200b8 	.word	0x400200b8
 80070f0:	40020410 	.word	0x40020410
 80070f4:	40020428 	.word	0x40020428
 80070f8:	40020440 	.word	0x40020440
 80070fc:	40020458 	.word	0x40020458
 8007100:	40020470 	.word	0x40020470
 8007104:	40020488 	.word	0x40020488
 8007108:	400204a0 	.word	0x400204a0
 800710c:	400204b8 	.word	0x400204b8
 8007110:	aaaaaaab 	.word	0xaaaaaaab
 8007114:	08010504 	.word	0x08010504
 8007118:	fffffc00 	.word	0xfffffc00

0800711c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d120      	bne.n	8007172 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007134:	2b03      	cmp	r3, #3
 8007136:	d858      	bhi.n	80071ea <DMA_CheckFifoParam+0xce>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <DMA_CheckFifoParam+0x24>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007151 	.word	0x08007151
 8007144:	08007163 	.word	0x08007163
 8007148:	08007151 	.word	0x08007151
 800714c:	080071eb 	.word	0x080071eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d048      	beq.n	80071ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007160:	e045      	b.n	80071ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800716a:	d142      	bne.n	80071f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007170:	e03f      	b.n	80071f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717a:	d123      	bne.n	80071c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	2b03      	cmp	r3, #3
 8007182:	d838      	bhi.n	80071f6 <DMA_CheckFifoParam+0xda>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <DMA_CheckFifoParam+0x70>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	0800719d 	.word	0x0800719d
 8007190:	080071a3 	.word	0x080071a3
 8007194:	0800719d 	.word	0x0800719d
 8007198:	080071b5 	.word	0x080071b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	73fb      	strb	r3, [r7, #15]
        break;
 80071a0:	e030      	b.n	8007204 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d025      	beq.n	80071fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071b2:	e022      	b.n	80071fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071bc:	d11f      	bne.n	80071fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071c2:	e01c      	b.n	80071fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d902      	bls.n	80071d2 <DMA_CheckFifoParam+0xb6>
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d003      	beq.n	80071d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80071d0:	e018      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
        break;
 80071d6:	e015      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00e      	beq.n	8007202 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
    break;
 80071e8:	e00b      	b.n	8007202 <DMA_CheckFifoParam+0xe6>
        break;
 80071ea:	bf00      	nop
 80071ec:	e00a      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        break;
 80071ee:	bf00      	nop
 80071f0:	e008      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        break;
 80071f2:	bf00      	nop
 80071f4:	e006      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        break;
 80071f6:	bf00      	nop
 80071f8:	e004      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        break;
 80071fa:	bf00      	nop
 80071fc:	e002      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
        break;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <DMA_CheckFifoParam+0xe8>
    break;
 8007202:	bf00      	nop
    }
  }

  return status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop

08007214 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a38      	ldr	r2, [pc, #224]	; (8007308 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d022      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a36      	ldr	r2, [pc, #216]	; (800730c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d01d      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a35      	ldr	r2, [pc, #212]	; (8007310 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d018      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a33      	ldr	r2, [pc, #204]	; (8007314 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a32      	ldr	r2, [pc, #200]	; (8007318 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00e      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a30      	ldr	r2, [pc, #192]	; (800731c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d009      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a2f      	ldr	r2, [pc, #188]	; (8007320 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d004      	beq.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a2d      	ldr	r2, [pc, #180]	; (8007324 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d101      	bne.n	8007276 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01a      	beq.n	80072b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	3b08      	subs	r3, #8
 8007284:	4a28      	ldr	r2, [pc, #160]	; (8007328 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	091b      	lsrs	r3, r3, #4
 800728c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4b26      	ldr	r3, [pc, #152]	; (800732c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	461a      	mov	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a24      	ldr	r2, [pc, #144]	; (8007330 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80072a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	2201      	movs	r2, #1
 80072aa:	409a      	lsls	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80072b0:	e024      	b.n	80072fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	3b10      	subs	r3, #16
 80072ba:	4a1e      	ldr	r2, [pc, #120]	; (8007334 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80072bc:	fba2 2303 	umull	r2, r3, r2, r3
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4a1c      	ldr	r2, [pc, #112]	; (8007338 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d806      	bhi.n	80072da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4a1b      	ldr	r2, [pc, #108]	; (800733c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d902      	bls.n	80072da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3308      	adds	r3, #8
 80072d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4b18      	ldr	r3, [pc, #96]	; (8007340 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	461a      	mov	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a16      	ldr	r2, [pc, #88]	; (8007344 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80072ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2201      	movs	r2, #1
 80072f6:	409a      	lsls	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	58025408 	.word	0x58025408
 800730c:	5802541c 	.word	0x5802541c
 8007310:	58025430 	.word	0x58025430
 8007314:	58025444 	.word	0x58025444
 8007318:	58025458 	.word	0x58025458
 800731c:	5802546c 	.word	0x5802546c
 8007320:	58025480 	.word	0x58025480
 8007324:	58025494 	.word	0x58025494
 8007328:	cccccccd 	.word	0xcccccccd
 800732c:	16009600 	.word	0x16009600
 8007330:	58025880 	.word	0x58025880
 8007334:	aaaaaaab 	.word	0xaaaaaaab
 8007338:	400204b8 	.word	0x400204b8
 800733c:	4002040f 	.word	0x4002040f
 8007340:	10008200 	.word	0x10008200
 8007344:	40020880 	.word	0x40020880

08007348 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d04a      	beq.n	80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b08      	cmp	r3, #8
 8007362:	d847      	bhi.n	80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a25      	ldr	r2, [pc, #148]	; (8007400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d022      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a24      	ldr	r2, [pc, #144]	; (8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d01d      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a22      	ldr	r2, [pc, #136]	; (8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d018      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a21      	ldr	r2, [pc, #132]	; (800740c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1f      	ldr	r2, [pc, #124]	; (8007410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00e      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d009      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1b      	ldr	r2, [pc, #108]	; (800741c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d101      	bne.n	80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80073b8:	2300      	movs	r3, #0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4b17      	ldr	r3, [pc, #92]	; (8007420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a15      	ldr	r2, [pc, #84]	; (8007424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80073d0:	671a      	str	r2, [r3, #112]	; 0x70
 80073d2:	e009      	b.n	80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a11      	ldr	r2, [pc, #68]	; (800742c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80073e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	2201      	movs	r2, #1
 80073ee:	409a      	lsls	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	58025408 	.word	0x58025408
 8007404:	5802541c 	.word	0x5802541c
 8007408:	58025430 	.word	0x58025430
 800740c:	58025444 	.word	0x58025444
 8007410:	58025458 	.word	0x58025458
 8007414:	5802546c 	.word	0x5802546c
 8007418:	58025480 	.word	0x58025480
 800741c:	58025494 	.word	0x58025494
 8007420:	1600963f 	.word	0x1600963f
 8007424:	58025940 	.word	0x58025940
 8007428:	1000823f 	.word	0x1000823f
 800742c:	40020940 	.word	0x40020940

08007430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800743e:	4b89      	ldr	r3, [pc, #548]	; (8007664 <HAL_GPIO_Init+0x234>)
 8007440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007442:	e194      	b.n	800776e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	2101      	movs	r1, #1
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	fa01 f303 	lsl.w	r3, r1, r3
 8007450:	4013      	ands	r3, r2
 8007452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8186 	beq.w	8007768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	2b01      	cmp	r3, #1
 8007466:	d005      	beq.n	8007474 <HAL_GPIO_Init+0x44>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d130      	bne.n	80074d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	2203      	movs	r2, #3
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4013      	ands	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4313      	orrs	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074aa:	2201      	movs	r2, #1
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	f003 0201 	and.w	r2, r3, #1
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d017      	beq.n	8007512 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	2203      	movs	r2, #3
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4013      	ands	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4313      	orrs	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d123      	bne.n	8007566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	08da      	lsrs	r2, r3, #3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3208      	adds	r2, #8
 8007526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	220f      	movs	r2, #15
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	08da      	lsrs	r2, r3, #3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3208      	adds	r2, #8
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	2203      	movs	r2, #3
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	4013      	ands	r3, r2
 800757c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0203 	and.w	r2, r3, #3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4313      	orrs	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80e0 	beq.w	8007768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075a8:	4b2f      	ldr	r3, [pc, #188]	; (8007668 <HAL_GPIO_Init+0x238>)
 80075aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ae:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <HAL_GPIO_Init+0x238>)
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <HAL_GPIO_Init+0x238>)
 80075ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075c6:	4a29      	ldr	r2, [pc, #164]	; (800766c <HAL_GPIO_Init+0x23c>)
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	089b      	lsrs	r3, r3, #2
 80075cc:	3302      	adds	r3, #2
 80075ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	220f      	movs	r2, #15
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43db      	mvns	r3, r3
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	4013      	ands	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a20      	ldr	r2, [pc, #128]	; (8007670 <HAL_GPIO_Init+0x240>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d052      	beq.n	8007698 <HAL_GPIO_Init+0x268>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <HAL_GPIO_Init+0x244>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d031      	beq.n	800765e <HAL_GPIO_Init+0x22e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <HAL_GPIO_Init+0x248>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d02b      	beq.n	800765a <HAL_GPIO_Init+0x22a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	; (800767c <HAL_GPIO_Init+0x24c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d025      	beq.n	8007656 <HAL_GPIO_Init+0x226>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1c      	ldr	r2, [pc, #112]	; (8007680 <HAL_GPIO_Init+0x250>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01f      	beq.n	8007652 <HAL_GPIO_Init+0x222>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1b      	ldr	r2, [pc, #108]	; (8007684 <HAL_GPIO_Init+0x254>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d019      	beq.n	800764e <HAL_GPIO_Init+0x21e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <HAL_GPIO_Init+0x258>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_GPIO_Init+0x21a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a19      	ldr	r2, [pc, #100]	; (800768c <HAL_GPIO_Init+0x25c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00d      	beq.n	8007646 <HAL_GPIO_Init+0x216>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a18      	ldr	r2, [pc, #96]	; (8007690 <HAL_GPIO_Init+0x260>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <HAL_GPIO_Init+0x212>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a17      	ldr	r2, [pc, #92]	; (8007694 <HAL_GPIO_Init+0x264>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d101      	bne.n	800763e <HAL_GPIO_Init+0x20e>
 800763a:	2309      	movs	r3, #9
 800763c:	e02d      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800763e:	230a      	movs	r3, #10
 8007640:	e02b      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007642:	2308      	movs	r3, #8
 8007644:	e029      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007646:	2307      	movs	r3, #7
 8007648:	e027      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800764a:	2306      	movs	r3, #6
 800764c:	e025      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800764e:	2305      	movs	r3, #5
 8007650:	e023      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007652:	2304      	movs	r3, #4
 8007654:	e021      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007656:	2303      	movs	r3, #3
 8007658:	e01f      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800765a:	2302      	movs	r3, #2
 800765c:	e01d      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800765e:	2301      	movs	r3, #1
 8007660:	e01b      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007662:	bf00      	nop
 8007664:	58000080 	.word	0x58000080
 8007668:	58024400 	.word	0x58024400
 800766c:	58000400 	.word	0x58000400
 8007670:	58020000 	.word	0x58020000
 8007674:	58020400 	.word	0x58020400
 8007678:	58020800 	.word	0x58020800
 800767c:	58020c00 	.word	0x58020c00
 8007680:	58021000 	.word	0x58021000
 8007684:	58021400 	.word	0x58021400
 8007688:	58021800 	.word	0x58021800
 800768c:	58021c00 	.word	0x58021c00
 8007690:	58022000 	.word	0x58022000
 8007694:	58022400 	.word	0x58022400
 8007698:	2300      	movs	r3, #0
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	f002 0203 	and.w	r2, r2, #3
 80076a0:	0092      	lsls	r2, r2, #2
 80076a2:	4093      	lsls	r3, r2
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076aa:	4938      	ldr	r1, [pc, #224]	; (800778c <HAL_GPIO_Init+0x35c>)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	089b      	lsrs	r3, r3, #2
 80076b0:	3302      	adds	r3, #2
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800770c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	43db      	mvns	r3, r3
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	4013      	ands	r3, r2
 8007722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	43db      	mvns	r3, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4013      	ands	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f ae63 	bne.w	8007444 <HAL_GPIO_Init+0x14>
  }
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	3724      	adds	r7, #36	; 0x24
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	58000400 	.word	0x58000400

08007790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	887b      	ldrh	r3, [r7, #2]
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	e001      	b.n	80077b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	807b      	strh	r3, [r7, #2]
 80077cc:	4613      	mov	r3, r2
 80077ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077d0:	787b      	ldrb	r3, [r7, #1]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077d6:	887a      	ldrh	r2, [r7, #2]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077dc:	e003      	b.n	80077e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077de:	887b      	ldrh	r3, [r7, #2]
 80077e0:	041a      	lsls	r2, r3, #16
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	619a      	str	r2, [r3, #24]
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e07f      	b.n	8007906 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fa fc60 	bl	80020e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2224      	movs	r2, #36	; 0x24
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d107      	bne.n	800786e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800786a:	609a      	str	r2, [r3, #8]
 800786c:	e006      	b.n	800787c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800787a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d104      	bne.n	800788e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800788c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <HAL_I2C_Init+0x11c>)
 800789a:	430b      	orrs	r3, r1
 800789c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69d9      	ldr	r1, [r3, #28]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a1a      	ldr	r2, [r3, #32]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	02008000 	.word	0x02008000

08007914 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af02      	add	r7, sp, #8
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	461a      	mov	r2, r3
 8007920:	460b      	mov	r3, r1
 8007922:	817b      	strh	r3, [r7, #10]
 8007924:	4613      	mov	r3, r2
 8007926:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b20      	cmp	r3, #32
 8007932:	f040 80da 	bne.w	8007aea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_I2C_Master_Transmit+0x30>
 8007940:	2302      	movs	r3, #2
 8007942:	e0d3      	b.n	8007aec <HAL_I2C_Master_Transmit+0x1d8>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800794c:	f7fa fffe 	bl	800294c <HAL_GetTick>
 8007950:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	2319      	movs	r3, #25
 8007958:	2201      	movs	r2, #1
 800795a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f9e6 	bl	8007d30 <I2C_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e0be      	b.n	8007aec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2221      	movs	r2, #33	; 0x21
 8007972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2210      	movs	r2, #16
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	893a      	ldrh	r2, [r7, #8]
 800798e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799a:	b29b      	uxth	r3, r3
 800799c:	2bff      	cmp	r3, #255	; 0xff
 800799e:	d90e      	bls.n	80079be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	22ff      	movs	r2, #255	; 0xff
 80079a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	8979      	ldrh	r1, [r7, #10]
 80079ae:	4b51      	ldr	r3, [pc, #324]	; (8007af4 <HAL_I2C_Master_Transmit+0x1e0>)
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 fbdc 	bl	8008174 <I2C_TransferConfig>
 80079bc:	e06c      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	8979      	ldrh	r1, [r7, #10]
 80079d0:	4b48      	ldr	r3, [pc, #288]	; (8007af4 <HAL_I2C_Master_Transmit+0x1e0>)
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 fbcb 	bl	8008174 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80079de:	e05b      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	6a39      	ldr	r1, [r7, #32]
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f9e3 	bl	8007db0 <I2C_WaitOnTXISFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e07b      	b.n	8007aec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d034      	beq.n	8007a98 <HAL_I2C_Master_Transmit+0x184>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d130      	bne.n	8007a98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2180      	movs	r1, #128	; 0x80
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f975 	bl	8007d30 <I2C_WaitOnFlagUntilTimeout>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e04d      	b.n	8007aec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2bff      	cmp	r3, #255	; 0xff
 8007a58:	d90e      	bls.n	8007a78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	8979      	ldrh	r1, [r7, #10]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fb7f 	bl	8008174 <I2C_TransferConfig>
 8007a76:	e00f      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	8979      	ldrh	r1, [r7, #10]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fb6e 	bl	8008174 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d19e      	bne.n	80079e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	6a39      	ldr	r1, [r7, #32]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 f9c2 	bl	8007e30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e01a      	b.n	8007aec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2220      	movs	r2, #32
 8007abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <HAL_I2C_Master_Transmit+0x1e4>)
 8007aca:	400b      	ands	r3, r1
 8007acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e000      	b.n	8007aec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007aea:	2302      	movs	r3, #2
  }
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	80002000 	.word	0x80002000
 8007af8:	fe00e800 	.word	0xfe00e800

08007afc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	461a      	mov	r2, r3
 8007b08:	460b      	mov	r3, r1
 8007b0a:	817b      	strh	r3, [r7, #10]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	f040 80db 	bne.w	8007cd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_I2C_Master_Receive+0x30>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e0d4      	b.n	8007cd6 <HAL_I2C_Master_Receive+0x1da>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b34:	f7fa ff0a 	bl	800294c <HAL_GetTick>
 8007b38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	2319      	movs	r3, #25
 8007b40:	2201      	movs	r2, #1
 8007b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 f8f2 	bl	8007d30 <I2C_WaitOnFlagUntilTimeout>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0bf      	b.n	8007cd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2222      	movs	r2, #34	; 0x22
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2210      	movs	r2, #16
 8007b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	893a      	ldrh	r2, [r7, #8]
 8007b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2bff      	cmp	r3, #255	; 0xff
 8007b86:	d90e      	bls.n	8007ba6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	22ff      	movs	r2, #255	; 0xff
 8007b8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	8979      	ldrh	r1, [r7, #10]
 8007b96:	4b52      	ldr	r3, [pc, #328]	; (8007ce0 <HAL_I2C_Master_Receive+0x1e4>)
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fae8 	bl	8008174 <I2C_TransferConfig>
 8007ba4:	e06d      	b.n	8007c82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	8979      	ldrh	r1, [r7, #10]
 8007bb8:	4b49      	ldr	r3, [pc, #292]	; (8007ce0 <HAL_I2C_Master_Receive+0x1e4>)
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fad7 	bl	8008174 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007bc6:	e05c      	b.n	8007c82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	6a39      	ldr	r1, [r7, #32]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f96b 	bl	8007ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e07c      	b.n	8007cd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d034      	beq.n	8007c82 <HAL_I2C_Master_Receive+0x186>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d130      	bne.n	8007c82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	2200      	movs	r2, #0
 8007c28:	2180      	movs	r1, #128	; 0x80
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 f880 	bl	8007d30 <I2C_WaitOnFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e04d      	b.n	8007cd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2bff      	cmp	r3, #255	; 0xff
 8007c42:	d90e      	bls.n	8007c62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	22ff      	movs	r2, #255	; 0xff
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	8979      	ldrh	r1, [r7, #10]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fa8a 	bl	8008174 <I2C_TransferConfig>
 8007c60:	e00f      	b.n	8007c82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	8979      	ldrh	r1, [r7, #10]
 8007c74:	2300      	movs	r3, #0
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fa79 	bl	8008174 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d19d      	bne.n	8007bc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	6a39      	ldr	r1, [r7, #32]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f8cd 	bl	8007e30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e01a      	b.n	8007cd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <HAL_I2C_Master_Receive+0x1e8>)
 8007cb4:	400b      	ands	r3, r1
 8007cb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	80002400 	.word	0x80002400
 8007ce4:	fe00e800 	.word	0xfe00e800

08007ce8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d103      	bne.n	8007d06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d007      	beq.n	8007d24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	619a      	str	r2, [r3, #24]
  }
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d40:	e022      	b.n	8007d88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d48:	d01e      	beq.n	8007d88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4a:	f7fa fdff 	bl	800294c <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d302      	bcc.n	8007d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d113      	bne.n	8007d88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d64:	f043 0220 	orr.w	r2, r3, #32
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e00f      	b.n	8007da8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4013      	ands	r3, r2
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	bf0c      	ite	eq
 8007d98:	2301      	moveq	r3, #1
 8007d9a:	2300      	movne	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d0cd      	beq.n	8007d42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dbc:	e02c      	b.n	8007e18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f8ea 	bl	8007f9c <I2C_IsErrorOccurred>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e02a      	b.n	8007e28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dd8:	d01e      	beq.n	8007e18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dda:	f7fa fdb7 	bl	800294c <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d302      	bcc.n	8007df0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d113      	bne.n	8007e18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df4:	f043 0220 	orr.w	r2, r3, #32
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e007      	b.n	8007e28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d1cb      	bne.n	8007dbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e3c:	e028      	b.n	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 f8aa 	bl	8007f9c <I2C_IsErrorOccurred>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e026      	b.n	8007ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e52:	f7fa fd7b 	bl	800294c <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d113      	bne.n	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e007      	b.n	8007ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d1cf      	bne.n	8007e3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007eb4:	e064      	b.n	8007f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f86e 	bl	8007f9c <I2C_IsErrorOccurred>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e062      	b.n	8007f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d138      	bne.n	8007f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d105      	bne.n	8007ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e04e      	b.n	8007f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d107      	bne.n	8007f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2210      	movs	r2, #16
 8007f06:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8007f0e:	e002      	b.n	8007f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007f2a:	400b      	ands	r3, r1
 8007f2c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e022      	b.n	8007f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f4a:	f7fa fcff 	bl	800294c <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d302      	bcc.n	8007f60 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10f      	bne.n	8007f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f64:	f043 0220 	orr.w	r2, r3, #32
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e007      	b.n	8007f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d193      	bne.n	8007eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	fe00e800 	.word	0xfe00e800

08007f9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08a      	sub	sp, #40	; 0x28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d075      	beq.n	80080b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2210      	movs	r2, #16
 8007fce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fd0:	e056      	b.n	8008080 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd8:	d052      	beq.n	8008080 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fda:	f7fa fcb7 	bl	800294c <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d302      	bcc.n	8007ff0 <I2C_IsErrorOccurred+0x54>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d147      	bne.n	8008080 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ffa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008002:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800800e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008012:	d12e      	bne.n	8008072 <I2C_IsErrorOccurred+0xd6>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800801a:	d02a      	beq.n	8008072 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800801c:	7cfb      	ldrb	r3, [r7, #19]
 800801e:	2b20      	cmp	r3, #32
 8008020:	d027      	beq.n	8008072 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008030:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008032:	f7fa fc8b 	bl	800294c <HAL_GetTick>
 8008036:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008038:	e01b      	b.n	8008072 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800803a:	f7fa fc87 	bl	800294c <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b19      	cmp	r3, #25
 8008046:	d914      	bls.n	8008072 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804c:	f043 0220 	orr.w	r2, r3, #32
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b20      	cmp	r3, #32
 800807e:	d1dc      	bne.n	800803a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b20      	cmp	r3, #32
 800808c:	d003      	beq.n	8008096 <I2C_IsErrorOccurred+0xfa>
 800808e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008092:	2b00      	cmp	r3, #0
 8008094:	d09d      	beq.n	8007fd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2220      	movs	r2, #32
 80080a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f043 0304 	orr.w	r3, r3, #4
 80080ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	f043 0308 	orr.w	r3, r3, #8
 80080ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	f043 0302 	orr.w	r3, r3, #2
 8008110:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800811a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01c      	beq.n	8008164 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff fddc 	bl	8007ce8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6859      	ldr	r1, [r3, #4]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <I2C_IsErrorOccurred+0x1d4>)
 800813c:	400b      	ands	r3, r1
 800813e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	431a      	orrs	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2220      	movs	r2, #32
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	fe00e800 	.word	0xfe00e800

08008174 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	817b      	strh	r3, [r7, #10]
 8008182:	4613      	mov	r3, r2
 8008184:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008186:	897b      	ldrh	r3, [r7, #10]
 8008188:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800818c:	7a7b      	ldrb	r3, [r7, #9]
 800818e:	041b      	lsls	r3, r3, #16
 8008190:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008194:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	4313      	orrs	r3, r2
 800819e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081a2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	0d5b      	lsrs	r3, r3, #21
 80081ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80081b2:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <I2C_TransferConfig+0x60>)
 80081b4:	430b      	orrs	r3, r1
 80081b6:	43db      	mvns	r3, r3
 80081b8:	ea02 0103 	and.w	r1, r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	03ff63ff 	.word	0x03ff63ff

080081d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d138      	bne.n	8008260 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e032      	b.n	8008262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2224      	movs	r2, #36	; 0x24
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800822a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	e000      	b.n	8008262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008260:	2302      	movs	r3, #2
  }
}
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b20      	cmp	r3, #32
 8008282:	d139      	bne.n	80082f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800828e:	2302      	movs	r3, #2
 8008290:	e033      	b.n	80082fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2224      	movs	r2, #36	; 0x24
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082f8:	2302      	movs	r3, #2
  }
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008314:	4b18      	ldr	r3, [pc, #96]	; (8008378 <HAL_PWR_EnterSTOPMode+0x70>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f023 0201 	bic.w	r2, r3, #1
 800831c:	4916      	ldr	r1, [pc, #88]	; (8008378 <HAL_PWR_EnterSTOPMode+0x70>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4313      	orrs	r3, r2
 8008322:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008324:	4b14      	ldr	r3, [pc, #80]	; (8008378 <HAL_PWR_EnterSTOPMode+0x70>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a13      	ldr	r2, [pc, #76]	; (8008378 <HAL_PWR_EnterSTOPMode+0x70>)
 800832a:	f023 0305 	bic.w	r3, r3, #5
 800832e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <HAL_PWR_EnterSTOPMode+0x70>)
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	4a10      	ldr	r2, [pc, #64]	; (8008378 <HAL_PWR_EnterSTOPMode+0x70>)
 8008336:	f023 0302 	bic.w	r3, r3, #2
 800833a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800833c:	4b0f      	ldr	r3, [pc, #60]	; (800837c <HAL_PWR_EnterSTOPMode+0x74>)
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <HAL_PWR_EnterSTOPMode+0x74>)
 8008342:	f043 0304 	orr.w	r3, r3, #4
 8008346:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008348:	f3bf 8f4f 	dsb	sy
}
 800834c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800834e:	f3bf 8f6f 	isb	sy
}
 8008352:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800835a:	bf30      	wfi
 800835c:	e000      	b.n	8008360 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800835e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008360:	4b06      	ldr	r3, [pc, #24]	; (800837c <HAL_PWR_EnterSTOPMode+0x74>)
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	4a05      	ldr	r2, [pc, #20]	; (800837c <HAL_PWR_EnterSTOPMode+0x74>)
 8008366:	f023 0304 	bic.w	r3, r3, #4
 800836a:	6113      	str	r3, [r2, #16]
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	58024800 	.word	0x58024800
 800837c:	e000ed00 	.word	0xe000ed00

08008380 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008388:	4b19      	ldr	r3, [pc, #100]	; (80083f0 <HAL_PWREx_ConfigSupply+0x70>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b04      	cmp	r3, #4
 8008392:	d00a      	beq.n	80083aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008394:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <HAL_PWREx_ConfigSupply+0x70>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d001      	beq.n	80083a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e01f      	b.n	80083e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e01d      	b.n	80083e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80083aa:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <HAL_PWREx_ConfigSupply+0x70>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f023 0207 	bic.w	r2, r3, #7
 80083b2:	490f      	ldr	r1, [pc, #60]	; (80083f0 <HAL_PWREx_ConfigSupply+0x70>)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083ba:	f7fa fac7 	bl	800294c <HAL_GetTick>
 80083be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083c0:	e009      	b.n	80083d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083c2:	f7fa fac3 	bl	800294c <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083d0:	d901      	bls.n	80083d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e007      	b.n	80083e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_PWREx_ConfigSupply+0x70>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e2:	d1ee      	bne.n	80083c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	58024800 	.word	0x58024800

080083f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f000 bc1d 	b.w	8008c42 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8087 	beq.w	8008524 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008416:	4b99      	ldr	r3, [pc, #612]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008420:	4b96      	ldr	r3, [pc, #600]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	2b10      	cmp	r3, #16
 800842a:	d007      	beq.n	800843c <HAL_RCC_OscConfig+0x48>
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b18      	cmp	r3, #24
 8008430:	d110      	bne.n	8008454 <HAL_RCC_OscConfig+0x60>
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d10b      	bne.n	8008454 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800843c:	4b8f      	ldr	r3, [pc, #572]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d06c      	beq.n	8008522 <HAL_RCC_OscConfig+0x12e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d168      	bne.n	8008522 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e3f6      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845c:	d106      	bne.n	800846c <HAL_RCC_OscConfig+0x78>
 800845e:	4b87      	ldr	r3, [pc, #540]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a86      	ldr	r2, [pc, #536]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	e02e      	b.n	80084ca <HAL_RCC_OscConfig+0xd6>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10c      	bne.n	800848e <HAL_RCC_OscConfig+0x9a>
 8008474:	4b81      	ldr	r3, [pc, #516]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a80      	ldr	r2, [pc, #512]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800847a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	4b7e      	ldr	r3, [pc, #504]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a7d      	ldr	r2, [pc, #500]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	e01d      	b.n	80084ca <HAL_RCC_OscConfig+0xd6>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008496:	d10c      	bne.n	80084b2 <HAL_RCC_OscConfig+0xbe>
 8008498:	4b78      	ldr	r3, [pc, #480]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a77      	ldr	r2, [pc, #476]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800849e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	4b75      	ldr	r3, [pc, #468]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a74      	ldr	r2, [pc, #464]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	e00b      	b.n	80084ca <HAL_RCC_OscConfig+0xd6>
 80084b2:	4b72      	ldr	r3, [pc, #456]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a71      	ldr	r2, [pc, #452]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	4b6f      	ldr	r3, [pc, #444]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a6e      	ldr	r2, [pc, #440]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d013      	beq.n	80084fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d2:	f7fa fa3b 	bl	800294c <HAL_GetTick>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084d8:	e008      	b.n	80084ec <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084da:	f7fa fa37 	bl	800294c <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b64      	cmp	r3, #100	; 0x64
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e3aa      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084ec:	4b63      	ldr	r3, [pc, #396]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0f0      	beq.n	80084da <HAL_RCC_OscConfig+0xe6>
 80084f8:	e014      	b.n	8008524 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fa:	f7fa fa27 	bl	800294c <HAL_GetTick>
 80084fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008500:	e008      	b.n	8008514 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008502:	f7fa fa23 	bl	800294c <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b64      	cmp	r3, #100	; 0x64
 800850e:	d901      	bls.n	8008514 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e396      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008514:	4b59      	ldr	r3, [pc, #356]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f0      	bne.n	8008502 <HAL_RCC_OscConfig+0x10e>
 8008520:	e000      	b.n	8008524 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008522:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 80cb 	beq.w	80086c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008532:	4b52      	ldr	r3, [pc, #328]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800853a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800853c:	4b4f      	ldr	r3, [pc, #316]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HAL_RCC_OscConfig+0x164>
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	2b18      	cmp	r3, #24
 800854c:	d156      	bne.n	80085fc <HAL_RCC_OscConfig+0x208>
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d151      	bne.n	80085fc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008558:	4b48      	ldr	r3, [pc, #288]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_RCC_OscConfig+0x17c>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e368      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008570:	4b42      	ldr	r3, [pc, #264]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f023 0219 	bic.w	r2, r3, #25
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	493f      	ldr	r1, [pc, #252]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800857e:	4313      	orrs	r3, r2
 8008580:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008582:	f7fa f9e3 	bl	800294c <HAL_GetTick>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008588:	e008      	b.n	800859c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800858a:	f7fa f9df 	bl	800294c <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d901      	bls.n	800859c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e352      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800859c:	4b37      	ldr	r3, [pc, #220]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0f0      	beq.n	800858a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a8:	f7fa fa10 	bl	80029cc <HAL_GetREVID>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d817      	bhi.n	80085e6 <HAL_RCC_OscConfig+0x1f2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d108      	bne.n	80085d0 <HAL_RCC_OscConfig+0x1dc>
 80085be:	4b2f      	ldr	r3, [pc, #188]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085c6:	4a2d      	ldr	r2, [pc, #180]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80085c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085ce:	e07b      	b.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085d0:	4b2a      	ldr	r3, [pc, #168]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	031b      	lsls	r3, r3, #12
 80085de:	4927      	ldr	r1, [pc, #156]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085e4:	e070      	b.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e6:	4b25      	ldr	r3, [pc, #148]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	061b      	lsls	r3, r3, #24
 80085f4:	4921      	ldr	r1, [pc, #132]	; (800867c <HAL_RCC_OscConfig+0x288>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085fa:	e065      	b.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d048      	beq.n	8008696 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008604:	4b1d      	ldr	r3, [pc, #116]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f023 0219 	bic.w	r2, r3, #25
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	491a      	ldr	r1, [pc, #104]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008612:	4313      	orrs	r3, r2
 8008614:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008616:	f7fa f999 	bl	800294c <HAL_GetTick>
 800861a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800861e:	f7fa f995 	bl	800294c <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e308      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008630:	4b12      	ldr	r3, [pc, #72]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800863c:	f7fa f9c6 	bl	80029cc <HAL_GetREVID>
 8008640:	4603      	mov	r3, r0
 8008642:	f241 0203 	movw	r2, #4099	; 0x1003
 8008646:	4293      	cmp	r3, r2
 8008648:	d81a      	bhi.n	8008680 <HAL_RCC_OscConfig+0x28c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b40      	cmp	r3, #64	; 0x40
 8008650:	d108      	bne.n	8008664 <HAL_RCC_OscConfig+0x270>
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800865a:	4a08      	ldr	r2, [pc, #32]	; (800867c <HAL_RCC_OscConfig+0x288>)
 800865c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008660:	6053      	str	r3, [r2, #4]
 8008662:	e031      	b.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	031b      	lsls	r3, r3, #12
 8008672:	4902      	ldr	r1, [pc, #8]	; (800867c <HAL_RCC_OscConfig+0x288>)
 8008674:	4313      	orrs	r3, r2
 8008676:	604b      	str	r3, [r1, #4]
 8008678:	e026      	b.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
 800867a:	bf00      	nop
 800867c:	58024400 	.word	0x58024400
 8008680:	4b9a      	ldr	r3, [pc, #616]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	4997      	ldr	r1, [pc, #604]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008690:	4313      	orrs	r3, r2
 8008692:	604b      	str	r3, [r1, #4]
 8008694:	e018      	b.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008696:	4b95      	ldr	r3, [pc, #596]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a94      	ldr	r2, [pc, #592]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 800869c:	f023 0301 	bic.w	r3, r3, #1
 80086a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a2:	f7fa f953 	bl	800294c <HAL_GetTick>
 80086a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086aa:	f7fa f94f 	bl	800294c <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e2c2      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086bc:	4b8b      	ldr	r3, [pc, #556]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f0      	bne.n	80086aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 80a9 	beq.w	8008828 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086d6:	4b85      	ldr	r3, [pc, #532]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086e0:	4b82      	ldr	r3, [pc, #520]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d007      	beq.n	80086fc <HAL_RCC_OscConfig+0x308>
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	2b18      	cmp	r3, #24
 80086f0:	d13a      	bne.n	8008768 <HAL_RCC_OscConfig+0x374>
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d135      	bne.n	8008768 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086fc:	4b7b      	ldr	r3, [pc, #492]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <HAL_RCC_OscConfig+0x320>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	2b80      	cmp	r3, #128	; 0x80
 800870e:	d001      	beq.n	8008714 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e296      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008714:	f7fa f95a 	bl	80029cc <HAL_GetREVID>
 8008718:	4603      	mov	r3, r0
 800871a:	f241 0203 	movw	r2, #4099	; 0x1003
 800871e:	4293      	cmp	r3, r2
 8008720:	d817      	bhi.n	8008752 <HAL_RCC_OscConfig+0x35e>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	2b20      	cmp	r3, #32
 8008728:	d108      	bne.n	800873c <HAL_RCC_OscConfig+0x348>
 800872a:	4b70      	ldr	r3, [pc, #448]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008732:	4a6e      	ldr	r2, [pc, #440]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008738:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800873a:	e075      	b.n	8008828 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800873c:	4b6b      	ldr	r3, [pc, #428]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	069b      	lsls	r3, r3, #26
 800874a:	4968      	ldr	r1, [pc, #416]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 800874c:	4313      	orrs	r3, r2
 800874e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008750:	e06a      	b.n	8008828 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008752:	4b66      	ldr	r3, [pc, #408]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	061b      	lsls	r3, r3, #24
 8008760:	4962      	ldr	r1, [pc, #392]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008762:	4313      	orrs	r3, r2
 8008764:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008766:	e05f      	b.n	8008828 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d042      	beq.n	80087f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008770:	4b5e      	ldr	r3, [pc, #376]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a5d      	ldr	r2, [pc, #372]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877c:	f7fa f8e6 	bl	800294c <HAL_GetTick>
 8008780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008784:	f7fa f8e2 	bl	800294c <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e255      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008796:	4b55      	ldr	r3, [pc, #340]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0f0      	beq.n	8008784 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087a2:	f7fa f913 	bl	80029cc <HAL_GetREVID>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d817      	bhi.n	80087e0 <HAL_RCC_OscConfig+0x3ec>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d108      	bne.n	80087ca <HAL_RCC_OscConfig+0x3d6>
 80087b8:	4b4c      	ldr	r3, [pc, #304]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80087c0:	4a4a      	ldr	r2, [pc, #296]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087c6:	6053      	str	r3, [r2, #4]
 80087c8:	e02e      	b.n	8008828 <HAL_RCC_OscConfig+0x434>
 80087ca:	4b48      	ldr	r3, [pc, #288]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	069b      	lsls	r3, r3, #26
 80087d8:	4944      	ldr	r1, [pc, #272]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	604b      	str	r3, [r1, #4]
 80087de:	e023      	b.n	8008828 <HAL_RCC_OscConfig+0x434>
 80087e0:	4b42      	ldr	r3, [pc, #264]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	061b      	lsls	r3, r3, #24
 80087ee:	493f      	ldr	r1, [pc, #252]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60cb      	str	r3, [r1, #12]
 80087f4:	e018      	b.n	8008828 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087f6:	4b3d      	ldr	r3, [pc, #244]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a3c      	ldr	r2, [pc, #240]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80087fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008802:	f7fa f8a3 	bl	800294c <HAL_GetTick>
 8008806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800880a:	f7fa f89f 	bl	800294c <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e212      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800881c:	4b33      	ldr	r3, [pc, #204]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f0      	bne.n	800880a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d036      	beq.n	80088a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d019      	beq.n	8008870 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800883c:	4b2b      	ldr	r3, [pc, #172]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 800883e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008840:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008848:	f7fa f880 	bl	800294c <HAL_GetTick>
 800884c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800884e:	e008      	b.n	8008862 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008850:	f7fa f87c 	bl	800294c <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e1ef      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008862:	4b22      	ldr	r3, [pc, #136]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f0      	beq.n	8008850 <HAL_RCC_OscConfig+0x45c>
 800886e:	e018      	b.n	80088a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008870:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008874:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008876:	f023 0301 	bic.w	r3, r3, #1
 800887a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887c:	f7fa f866 	bl	800294c <HAL_GetTick>
 8008880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008884:	f7fa f862 	bl	800294c <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e1d5      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008896:	4b15      	ldr	r3, [pc, #84]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 8008898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f0      	bne.n	8008884 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d039      	beq.n	8008922 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d01c      	beq.n	80088f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a0c      	ldr	r2, [pc, #48]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80088bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088c2:	f7fa f843 	bl	800294c <HAL_GetTick>
 80088c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088ca:	f7fa f83f 	bl	800294c <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e1b2      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088dc:	4b03      	ldr	r3, [pc, #12]	; (80088ec <HAL_RCC_OscConfig+0x4f8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f0      	beq.n	80088ca <HAL_RCC_OscConfig+0x4d6>
 80088e8:	e01b      	b.n	8008922 <HAL_RCC_OscConfig+0x52e>
 80088ea:	bf00      	nop
 80088ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088f0:	4b9b      	ldr	r3, [pc, #620]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a9a      	ldr	r2, [pc, #616]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088fc:	f7fa f826 	bl	800294c <HAL_GetTick>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008904:	f7fa f822 	bl	800294c <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e195      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008916:	4b92      	ldr	r3, [pc, #584]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f0      	bne.n	8008904 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 8081 	beq.w	8008a32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008930:	4b8c      	ldr	r3, [pc, #560]	; (8008b64 <HAL_RCC_OscConfig+0x770>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a8b      	ldr	r2, [pc, #556]	; (8008b64 <HAL_RCC_OscConfig+0x770>)
 8008936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800893a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800893c:	f7fa f806 	bl	800294c <HAL_GetTick>
 8008940:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008942:	e008      	b.n	8008956 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008944:	f7fa f802 	bl	800294c <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b64      	cmp	r3, #100	; 0x64
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e175      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008956:	4b83      	ldr	r3, [pc, #524]	; (8008b64 <HAL_RCC_OscConfig+0x770>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0f0      	beq.n	8008944 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d106      	bne.n	8008978 <HAL_RCC_OscConfig+0x584>
 800896a:	4b7d      	ldr	r3, [pc, #500]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 800896c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896e:	4a7c      	ldr	r2, [pc, #496]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	6713      	str	r3, [r2, #112]	; 0x70
 8008976:	e02d      	b.n	80089d4 <HAL_RCC_OscConfig+0x5e0>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10c      	bne.n	800899a <HAL_RCC_OscConfig+0x5a6>
 8008980:	4b77      	ldr	r3, [pc, #476]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008984:	4a76      	ldr	r2, [pc, #472]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	6713      	str	r3, [r2, #112]	; 0x70
 800898c:	4b74      	ldr	r3, [pc, #464]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 800898e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008990:	4a73      	ldr	r2, [pc, #460]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008992:	f023 0304 	bic.w	r3, r3, #4
 8008996:	6713      	str	r3, [r2, #112]	; 0x70
 8008998:	e01c      	b.n	80089d4 <HAL_RCC_OscConfig+0x5e0>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d10c      	bne.n	80089bc <HAL_RCC_OscConfig+0x5c8>
 80089a2:	4b6f      	ldr	r3, [pc, #444]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	4a6e      	ldr	r2, [pc, #440]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089a8:	f043 0304 	orr.w	r3, r3, #4
 80089ac:	6713      	str	r3, [r2, #112]	; 0x70
 80089ae:	4b6c      	ldr	r3, [pc, #432]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b2:	4a6b      	ldr	r2, [pc, #428]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089b4:	f043 0301 	orr.w	r3, r3, #1
 80089b8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ba:	e00b      	b.n	80089d4 <HAL_RCC_OscConfig+0x5e0>
 80089bc:	4b68      	ldr	r3, [pc, #416]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	4a67      	ldr	r2, [pc, #412]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089c2:	f023 0301 	bic.w	r3, r3, #1
 80089c6:	6713      	str	r3, [r2, #112]	; 0x70
 80089c8:	4b65      	ldr	r3, [pc, #404]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089cc:	4a64      	ldr	r2, [pc, #400]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089ce:	f023 0304 	bic.w	r3, r3, #4
 80089d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d015      	beq.n	8008a08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089dc:	f7f9 ffb6 	bl	800294c <HAL_GetTick>
 80089e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e2:	e00a      	b.n	80089fa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089e4:	f7f9 ffb2 	bl	800294c <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e123      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fa:	4b59      	ldr	r3, [pc, #356]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0ee      	beq.n	80089e4 <HAL_RCC_OscConfig+0x5f0>
 8008a06:	e014      	b.n	8008a32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a08:	f7f9 ffa0 	bl	800294c <HAL_GetTick>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a0e:	e00a      	b.n	8008a26 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a10:	f7f9 ff9c 	bl	800294c <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e10d      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a26:	4b4e      	ldr	r3, [pc, #312]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ee      	bne.n	8008a10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8102 	beq.w	8008c40 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a3c:	4b48      	ldr	r3, [pc, #288]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a44:	2b18      	cmp	r3, #24
 8008a46:	f000 80bd 	beq.w	8008bc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	f040 809e 	bne.w	8008b90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a54:	4b42      	ldr	r3, [pc, #264]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a41      	ldr	r2, [pc, #260]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7f9 ff74 	bl	800294c <HAL_GetTick>
 8008a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a68:	f7f9 ff70 	bl	800294c <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e0e3      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a7a:	4b39      	ldr	r3, [pc, #228]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a86:	4b36      	ldr	r3, [pc, #216]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a8a:	4b37      	ldr	r3, [pc, #220]	; (8008b68 <HAL_RCC_OscConfig+0x774>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a96:	0112      	lsls	r2, r2, #4
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	4931      	ldr	r1, [pc, #196]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	628b      	str	r3, [r1, #40]	; 0x28
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	025b      	lsls	r3, r3, #9
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	3b01      	subs	r3, #1
 8008abc:	041b      	lsls	r3, r3, #16
 8008abe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ad0:	4923      	ldr	r1, [pc, #140]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ad6:	4b22      	ldr	r3, [pc, #136]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	4a21      	ldr	r2, [pc, #132]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ae2:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae6:	4b21      	ldr	r3, [pc, #132]	; (8008b6c <HAL_RCC_OscConfig+0x778>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008aee:	00d2      	lsls	r2, r2, #3
 8008af0:	491b      	ldr	r1, [pc, #108]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008af6:	4b1a      	ldr	r3, [pc, #104]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	f023 020c 	bic.w	r2, r3, #12
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	4917      	ldr	r1, [pc, #92]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b08:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	f023 0202 	bic.w	r2, r3, #2
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b14:	4912      	ldr	r1, [pc, #72]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b1a:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1e:	4a10      	ldr	r2, [pc, #64]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b26:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4a0d      	ldr	r2, [pc, #52]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b3e:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	4a07      	ldr	r2, [pc, #28]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a04      	ldr	r2, [pc, #16]	; (8008b60 <HAL_RCC_OscConfig+0x76c>)
 8008b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b56:	f7f9 fef9 	bl	800294c <HAL_GetTick>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b5c:	e011      	b.n	8008b82 <HAL_RCC_OscConfig+0x78e>
 8008b5e:	bf00      	nop
 8008b60:	58024400 	.word	0x58024400
 8008b64:	58024800 	.word	0x58024800
 8008b68:	fffffc0c 	.word	0xfffffc0c
 8008b6c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b70:	f7f9 feec 	bl	800294c <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e05f      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b82:	4b32      	ldr	r3, [pc, #200]	; (8008c4c <HAL_RCC_OscConfig+0x858>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0f0      	beq.n	8008b70 <HAL_RCC_OscConfig+0x77c>
 8008b8e:	e057      	b.n	8008c40 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b90:	4b2e      	ldr	r3, [pc, #184]	; (8008c4c <HAL_RCC_OscConfig+0x858>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a2d      	ldr	r2, [pc, #180]	; (8008c4c <HAL_RCC_OscConfig+0x858>)
 8008b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9c:	f7f9 fed6 	bl	800294c <HAL_GetTick>
 8008ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ba4:	f7f9 fed2 	bl	800294c <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e045      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bb6:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <HAL_RCC_OscConfig+0x858>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f0      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x7b0>
 8008bc2:	e03d      	b.n	8008c40 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008bc4:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <HAL_RCC_OscConfig+0x858>)
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bca:	4b20      	ldr	r3, [pc, #128]	; (8008c4c <HAL_RCC_OscConfig+0x858>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d031      	beq.n	8008c3c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f003 0203 	and.w	r2, r3, #3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d12a      	bne.n	8008c3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	091b      	lsrs	r3, r3, #4
 8008bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d122      	bne.n	8008c3c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d11a      	bne.n	8008c3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	0a5b      	lsrs	r3, r3, #9
 8008c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d111      	bne.n	8008c3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	0c1b      	lsrs	r3, r3, #16
 8008c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d108      	bne.n	8008c3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	0e1b      	lsrs	r3, r3, #24
 8008c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d001      	beq.n	8008c40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e000      	b.n	8008c42 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3730      	adds	r7, #48	; 0x30
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400

08008c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e19c      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c64:	4b8a      	ldr	r3, [pc, #552]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d910      	bls.n	8008c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c72:	4b87      	ldr	r3, [pc, #540]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f023 020f 	bic.w	r2, r3, #15
 8008c7a:	4985      	ldr	r1, [pc, #532]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c82:	4b83      	ldr	r3, [pc, #524]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d001      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e184      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d010      	beq.n	8008cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	4b7b      	ldr	r3, [pc, #492]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d908      	bls.n	8008cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cb0:	4b78      	ldr	r3, [pc, #480]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	4975      	ldr	r1, [pc, #468]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d010      	beq.n	8008cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695a      	ldr	r2, [r3, #20]
 8008cd2:	4b70      	ldr	r3, [pc, #448]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d908      	bls.n	8008cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cde:	4b6d      	ldr	r3, [pc, #436]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	496a      	ldr	r1, [pc, #424]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d010      	beq.n	8008d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	4b64      	ldr	r3, [pc, #400]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d908      	bls.n	8008d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d0c:	4b61      	ldr	r3, [pc, #388]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	495e      	ldr	r1, [pc, #376]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d010      	beq.n	8008d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69da      	ldr	r2, [r3, #28]
 8008d2e:	4b59      	ldr	r3, [pc, #356]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d908      	bls.n	8008d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d3a:	4b56      	ldr	r3, [pc, #344]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	4953      	ldr	r1, [pc, #332]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d010      	beq.n	8008d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	4b4d      	ldr	r3, [pc, #308]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d908      	bls.n	8008d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d68:	4b4a      	ldr	r3, [pc, #296]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f023 020f 	bic.w	r2, r3, #15
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	4947      	ldr	r1, [pc, #284]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d055      	beq.n	8008e32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d86:	4b43      	ldr	r3, [pc, #268]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	4940      	ldr	r1, [pc, #256]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d107      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008da0:	4b3c      	ldr	r3, [pc, #240]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d121      	bne.n	8008df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e0f6      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d107      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008db8:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d115      	bne.n	8008df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e0ea      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d107      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dd0:	4b30      	ldr	r3, [pc, #192]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0de      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008de0:	4b2c      	ldr	r3, [pc, #176]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e0d6      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f023 0207 	bic.w	r2, r3, #7
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4925      	ldr	r1, [pc, #148]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e02:	f7f9 fda3 	bl	800294c <HAL_GetTick>
 8008e06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e08:	e00a      	b.n	8008e20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0a:	f7f9 fd9f 	bl	800294c <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e0be      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e20:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d1eb      	bne.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d010      	beq.n	8008e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d208      	bcs.n	8008e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e4e:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f023 020f 	bic.w	r2, r3, #15
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	490e      	ldr	r1, [pc, #56]	; (8008e94 <HAL_RCC_ClockConfig+0x244>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 030f 	and.w	r3, r3, #15
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d214      	bcs.n	8008e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e6e:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f023 020f 	bic.w	r2, r3, #15
 8008e76:	4906      	ldr	r1, [pc, #24]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <HAL_RCC_ClockConfig+0x240>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d005      	beq.n	8008e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e086      	b.n	8008f9e <HAL_RCC_ClockConfig+0x34e>
 8008e90:	52002000 	.word	0x52002000
 8008e94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d010      	beq.n	8008ec6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691a      	ldr	r2, [r3, #16]
 8008ea8:	4b3f      	ldr	r3, [pc, #252]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d208      	bcs.n	8008ec6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008eb4:	4b3c      	ldr	r3, [pc, #240]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	4939      	ldr	r1, [pc, #228]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d010      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	695a      	ldr	r2, [r3, #20]
 8008ed6:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d208      	bcs.n	8008ef4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ee2:	4b31      	ldr	r3, [pc, #196]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	492e      	ldr	r1, [pc, #184]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0310 	and.w	r3, r3, #16
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d010      	beq.n	8008f22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	699a      	ldr	r2, [r3, #24]
 8008f04:	4b28      	ldr	r3, [pc, #160]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d208      	bcs.n	8008f22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f10:	4b25      	ldr	r3, [pc, #148]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	4922      	ldr	r1, [pc, #136]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d010      	beq.n	8008f50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69da      	ldr	r2, [r3, #28]
 8008f32:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d208      	bcs.n	8008f50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	4917      	ldr	r1, [pc, #92]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f50:	f000 f834 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 8008f54:	4602      	mov	r2, r0
 8008f56:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	0a1b      	lsrs	r3, r3, #8
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	4912      	ldr	r1, [pc, #72]	; (8008fac <HAL_RCC_ClockConfig+0x35c>)
 8008f62:	5ccb      	ldrb	r3, [r1, r3]
 8008f64:	f003 031f 	and.w	r3, r3, #31
 8008f68:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <HAL_RCC_ClockConfig+0x358>)
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	4a0d      	ldr	r2, [pc, #52]	; (8008fac <HAL_RCC_ClockConfig+0x35c>)
 8008f78:	5cd3      	ldrb	r3, [r2, r3]
 8008f7a:	f003 031f 	and.w	r3, r3, #31
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <HAL_RCC_ClockConfig+0x360>)
 8008f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f88:	4a0a      	ldr	r2, [pc, #40]	; (8008fb4 <HAL_RCC_ClockConfig+0x364>)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <HAL_RCC_ClockConfig+0x368>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f9 fc90 	bl	80028b8 <HAL_InitTick>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	58024400 	.word	0x58024400
 8008fac:	080104f4 	.word	0x080104f4
 8008fb0:	24000034 	.word	0x24000034
 8008fb4:	24000030 	.word	0x24000030
 8008fb8:	24000038 	.word	0x24000038

08008fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fc2:	4bb3      	ldr	r3, [pc, #716]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fca:	2b18      	cmp	r3, #24
 8008fcc:	f200 8155 	bhi.w	800927a <HAL_RCC_GetSysClockFreq+0x2be>
 8008fd0:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	0800903d 	.word	0x0800903d
 8008fdc:	0800927b 	.word	0x0800927b
 8008fe0:	0800927b 	.word	0x0800927b
 8008fe4:	0800927b 	.word	0x0800927b
 8008fe8:	0800927b 	.word	0x0800927b
 8008fec:	0800927b 	.word	0x0800927b
 8008ff0:	0800927b 	.word	0x0800927b
 8008ff4:	0800927b 	.word	0x0800927b
 8008ff8:	08009063 	.word	0x08009063
 8008ffc:	0800927b 	.word	0x0800927b
 8009000:	0800927b 	.word	0x0800927b
 8009004:	0800927b 	.word	0x0800927b
 8009008:	0800927b 	.word	0x0800927b
 800900c:	0800927b 	.word	0x0800927b
 8009010:	0800927b 	.word	0x0800927b
 8009014:	0800927b 	.word	0x0800927b
 8009018:	08009069 	.word	0x08009069
 800901c:	0800927b 	.word	0x0800927b
 8009020:	0800927b 	.word	0x0800927b
 8009024:	0800927b 	.word	0x0800927b
 8009028:	0800927b 	.word	0x0800927b
 800902c:	0800927b 	.word	0x0800927b
 8009030:	0800927b 	.word	0x0800927b
 8009034:	0800927b 	.word	0x0800927b
 8009038:	0800906f 	.word	0x0800906f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800903c:	4b94      	ldr	r3, [pc, #592]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d009      	beq.n	800905c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009048:	4b91      	ldr	r3, [pc, #580]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	08db      	lsrs	r3, r3, #3
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	4a90      	ldr	r2, [pc, #576]	; (8009294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800905a:	e111      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800905c:	4b8d      	ldr	r3, [pc, #564]	; (8009294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800905e:	61bb      	str	r3, [r7, #24]
    break;
 8009060:	e10e      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009062:	4b8d      	ldr	r3, [pc, #564]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009064:	61bb      	str	r3, [r7, #24]
    break;
 8009066:	e10b      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009068:	4b8c      	ldr	r3, [pc, #560]	; (800929c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800906a:	61bb      	str	r3, [r7, #24]
    break;
 800906c:	e108      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800906e:	4b88      	ldr	r3, [pc, #544]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009078:	4b85      	ldr	r3, [pc, #532]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	091b      	lsrs	r3, r3, #4
 800907e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009082:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009084:	4b82      	ldr	r3, [pc, #520]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800908e:	4b80      	ldr	r3, [pc, #512]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009092:	08db      	lsrs	r3, r3, #3
 8009094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 80e1 	beq.w	8009274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	f000 8083 	beq.w	80091c0 <HAL_RCC_GetSysClockFreq+0x204>
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	f200 80a1 	bhi.w	8009204 <HAL_RCC_GetSysClockFreq+0x248>
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_RCC_GetSysClockFreq+0x114>
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d056      	beq.n	800917c <HAL_RCC_GetSysClockFreq+0x1c0>
 80090ce:	e099      	b.n	8009204 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d0:	4b6f      	ldr	r3, [pc, #444]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0320 	and.w	r3, r3, #32
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d02d      	beq.n	8009138 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090dc:	4b6c      	ldr	r3, [pc, #432]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	08db      	lsrs	r3, r3, #3
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	4a6b      	ldr	r2, [pc, #428]	; (8009294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	ee07 3a90 	vmov	s15, r3
 80090f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009106:	4b62      	ldr	r3, [pc, #392]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009116:	ed97 6a02 	vldr	s12, [r7, #8]
 800911a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800911e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800912a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009132:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009136:	e087      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	eddf 6a58 	vldr	s13, [pc, #352]	; 80092a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914a:	4b51      	ldr	r3, [pc, #324]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800914c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915a:	ed97 6a02 	vldr	s12, [r7, #8]
 800915e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917a:	e065      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009186:	eddf 6a48 	vldr	s13, [pc, #288]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800918a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918e:	4b40      	ldr	r3, [pc, #256]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919e:	ed97 6a02 	vldr	s12, [r7, #8]
 80091a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091be:	e043      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80092ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80091ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d2:	4b2f      	ldr	r3, [pc, #188]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009202:	e021      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009216:	4b1e      	ldr	r3, [pc, #120]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009226:	ed97 6a02 	vldr	s12, [r7, #8]
 800922a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800922e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800923a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009246:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009248:	4b11      	ldr	r3, [pc, #68]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	0a5b      	lsrs	r3, r3, #9
 800924e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009252:	3301      	adds	r3, #1
 8009254:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009260:	edd7 6a07 	vldr	s13, [r7, #28]
 8009264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800926c:	ee17 3a90 	vmov	r3, s15
 8009270:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009272:	e005      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	61bb      	str	r3, [r7, #24]
    break;
 8009278:	e002      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800927a:	4b07      	ldr	r3, [pc, #28]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800927c:	61bb      	str	r3, [r7, #24]
    break;
 800927e:	bf00      	nop
  }

  return sysclockfreq;
 8009280:	69bb      	ldr	r3, [r7, #24]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3724      	adds	r7, #36	; 0x24
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	58024400 	.word	0x58024400
 8009294:	03d09000 	.word	0x03d09000
 8009298:	003d0900 	.word	0x003d0900
 800929c:	017d7840 	.word	0x017d7840
 80092a0:	46000000 	.word	0x46000000
 80092a4:	4c742400 	.word	0x4c742400
 80092a8:	4a742400 	.word	0x4a742400
 80092ac:	4bbebc20 	.word	0x4bbebc20

080092b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092b6:	f7ff fe81 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <HAL_RCC_GetHCLKFreq+0x50>)
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	0a1b      	lsrs	r3, r3, #8
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	490f      	ldr	r1, [pc, #60]	; (8009304 <HAL_RCC_GetHCLKFreq+0x54>)
 80092c8:	5ccb      	ldrb	r3, [r1, r3]
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	fa22 f303 	lsr.w	r3, r2, r3
 80092d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <HAL_RCC_GetHCLKFreq+0x50>)
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	4a09      	ldr	r2, [pc, #36]	; (8009304 <HAL_RCC_GetHCLKFreq+0x54>)
 80092de:	5cd3      	ldrb	r3, [r2, r3]
 80092e0:	f003 031f 	and.w	r3, r3, #31
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ea:	4a07      	ldr	r2, [pc, #28]	; (8009308 <HAL_RCC_GetHCLKFreq+0x58>)
 80092ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092ee:	4a07      	ldr	r2, [pc, #28]	; (800930c <HAL_RCC_GetHCLKFreq+0x5c>)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092f4:	4b04      	ldr	r3, [pc, #16]	; (8009308 <HAL_RCC_GetHCLKFreq+0x58>)
 80092f6:	681b      	ldr	r3, [r3, #0]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	58024400 	.word	0x58024400
 8009304:	080104f4 	.word	0x080104f4
 8009308:	24000034 	.word	0x24000034
 800930c:	24000030 	.word	0x24000030

08009310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009314:	f7ff ffcc 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 8009318:	4602      	mov	r2, r0
 800931a:	4b06      	ldr	r3, [pc, #24]	; (8009334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	091b      	lsrs	r3, r3, #4
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	4904      	ldr	r1, [pc, #16]	; (8009338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009326:	5ccb      	ldrb	r3, [r1, r3]
 8009328:	f003 031f 	and.w	r3, r3, #31
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009330:	4618      	mov	r0, r3
 8009332:	bd80      	pop	{r7, pc}
 8009334:	58024400 	.word	0x58024400
 8009338:	080104f4 	.word	0x080104f4

0800933c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009340:	f7ff ffb6 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 8009344:	4602      	mov	r2, r0
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	0a1b      	lsrs	r3, r3, #8
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	4904      	ldr	r1, [pc, #16]	; (8009364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009352:	5ccb      	ldrb	r3, [r1, r3]
 8009354:	f003 031f 	and.w	r3, r3, #31
 8009358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800935c:	4618      	mov	r0, r3
 800935e:	bd80      	pop	{r7, pc}
 8009360:	58024400 	.word	0x58024400
 8009364:	080104f4 	.word	0x080104f4

08009368 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009370:	2300      	movs	r3, #0
 8009372:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009374:	2300      	movs	r3, #0
 8009376:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d03f      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800938c:	d02a      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800938e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009392:	d824      	bhi.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009398:	d018      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800939a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800939e:	d81e      	bhi.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80093a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093a8:	d007      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80093aa:	e018      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ac:	4ba3      	ldr	r3, [pc, #652]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	4aa2      	ldr	r2, [pc, #648]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093b8:	e015      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3304      	adds	r3, #4
 80093be:	2102      	movs	r1, #2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 fff9 	bl	800b3b8 <RCCEx_PLL2_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093ca:	e00c      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3324      	adds	r3, #36	; 0x24
 80093d0:	2102      	movs	r1, #2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f002 f8a2 	bl	800b51c <RCCEx_PLL3_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093dc:	e003      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	75fb      	strb	r3, [r7, #23]
      break;
 80093e2:	e000      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093ec:	4b93      	ldr	r3, [pc, #588]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093f8:	4990      	ldr	r1, [pc, #576]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	650b      	str	r3, [r1, #80]	; 0x50
 80093fe:	e001      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d03d      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009414:	2b04      	cmp	r3, #4
 8009416:	d826      	bhi.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009418:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	08009435 	.word	0x08009435
 8009424:	08009443 	.word	0x08009443
 8009428:	08009455 	.word	0x08009455
 800942c:	0800946d 	.word	0x0800946d
 8009430:	0800946d 	.word	0x0800946d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009434:	4b81      	ldr	r3, [pc, #516]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	4a80      	ldr	r2, [pc, #512]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800943a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800943e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009440:	e015      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3304      	adds	r3, #4
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f001 ffb5 	bl	800b3b8 <RCCEx_PLL2_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009452:	e00c      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3324      	adds	r3, #36	; 0x24
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f002 f85e 	bl	800b51c <RCCEx_PLL3_Config>
 8009460:	4603      	mov	r3, r0
 8009462:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009464:	e003      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	75fb      	strb	r3, [r7, #23]
      break;
 800946a:	e000      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800946c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d109      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009474:	4b71      	ldr	r3, [pc, #452]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009478:	f023 0207 	bic.w	r2, r3, #7
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009480:	496e      	ldr	r1, [pc, #440]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009482:	4313      	orrs	r3, r2
 8009484:	650b      	str	r3, [r1, #80]	; 0x50
 8009486:	e001      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009494:	2b00      	cmp	r3, #0
 8009496:	d042      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a0:	d02b      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80094a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a6:	d825      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80094a8:	2bc0      	cmp	r3, #192	; 0xc0
 80094aa:	d028      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80094ac:	2bc0      	cmp	r3, #192	; 0xc0
 80094ae:	d821      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80094b0:	2b80      	cmp	r3, #128	; 0x80
 80094b2:	d016      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80094b4:	2b80      	cmp	r3, #128	; 0x80
 80094b6:	d81d      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80094bc:	2b40      	cmp	r3, #64	; 0x40
 80094be:	d007      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80094c0:	e018      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c2:	4b5e      	ldr	r3, [pc, #376]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	4a5d      	ldr	r2, [pc, #372]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094ce:	e017      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3304      	adds	r3, #4
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 ff6e 	bl	800b3b8 <RCCEx_PLL2_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094e0:	e00e      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3324      	adds	r3, #36	; 0x24
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 f817 	bl	800b51c <RCCEx_PLL3_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094f2:	e005      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]
      break;
 80094f8:	e002      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80094fa:	bf00      	nop
 80094fc:	e000      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80094fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d109      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009506:	4b4d      	ldr	r3, [pc, #308]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009512:	494a      	ldr	r1, [pc, #296]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009514:	4313      	orrs	r3, r2
 8009516:	650b      	str	r3, [r1, #80]	; 0x50
 8009518:	e001      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009526:	2b00      	cmp	r3, #0
 8009528:	d049      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009534:	d030      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800953a:	d82a      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800953c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009540:	d02c      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009546:	d824      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800954c:	d018      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800954e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009552:	d81e      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800955c:	d007      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800955e:	e018      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009560:	4b36      	ldr	r3, [pc, #216]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	4a35      	ldr	r2, [pc, #212]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800956a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800956c:	e017      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3304      	adds	r3, #4
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f001 ff1f 	bl	800b3b8 <RCCEx_PLL2_Config>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800957e:	e00e      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3324      	adds	r3, #36	; 0x24
 8009584:	2100      	movs	r1, #0
 8009586:	4618      	mov	r0, r3
 8009588:	f001 ffc8 	bl	800b51c <RCCEx_PLL3_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009590:	e005      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
      break;
 8009596:	e002      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800959c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095a4:	4b25      	ldr	r3, [pc, #148]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095b2:	4922      	ldr	r1, [pc, #136]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	658b      	str	r3, [r1, #88]	; 0x58
 80095b8:	e001      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d04b      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095d4:	d030      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80095d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095da:	d82a      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095e0:	d02e      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80095e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095e6:	d824      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ec:	d018      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80095ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f2:	d81e      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80095f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095fc:	d007      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80095fe:	e018      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	4a0d      	ldr	r2, [pc, #52]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800960a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800960c:	e019      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3304      	adds	r3, #4
 8009612:	2100      	movs	r1, #0
 8009614:	4618      	mov	r0, r3
 8009616:	f001 fecf 	bl	800b3b8 <RCCEx_PLL2_Config>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800961e:	e010      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3324      	adds	r3, #36	; 0x24
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f001 ff78 	bl	800b51c <RCCEx_PLL3_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009630:	e007      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	75fb      	strb	r3, [r7, #23]
      break;
 8009636:	e004      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009638:	bf00      	nop
 800963a:	e002      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800963c:	58024400 	.word	0x58024400
      break;
 8009640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009648:	4b99      	ldr	r3, [pc, #612]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009656:	4996      	ldr	r1, [pc, #600]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009658:	4313      	orrs	r3, r2
 800965a:	658b      	str	r3, [r1, #88]	; 0x58
 800965c:	e001      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d032      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009672:	2b30      	cmp	r3, #48	; 0x30
 8009674:	d01c      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009676:	2b30      	cmp	r3, #48	; 0x30
 8009678:	d817      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x342>
 800967a:	2b20      	cmp	r3, #32
 800967c:	d00c      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800967e:	2b20      	cmp	r3, #32
 8009680:	d813      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d016      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009686:	2b10      	cmp	r3, #16
 8009688:	d10f      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968a:	4b89      	ldr	r3, [pc, #548]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	4a88      	ldr	r2, [pc, #544]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009696:	e00e      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	2102      	movs	r1, #2
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 fe8a 	bl	800b3b8 <RCCEx_PLL2_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80096a8:	e005      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
      break;
 80096ae:	e002      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80096b0:	bf00      	nop
 80096b2:	e000      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80096b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d109      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096bc:	4b7c      	ldr	r3, [pc, #496]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c8:	4979      	ldr	r1, [pc, #484]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80096ce:	e001      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d047      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e8:	d030      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ee:	d82a      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096f4:	d02c      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80096f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096fa:	d824      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009700:	d018      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009706:	d81e      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800970c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009710:	d007      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009712:	e018      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	4b66      	ldr	r3, [pc, #408]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4a65      	ldr	r2, [pc, #404]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800971a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009720:	e017      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3304      	adds	r3, #4
 8009726:	2100      	movs	r1, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f001 fe45 	bl	800b3b8 <RCCEx_PLL2_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009732:	e00e      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3324      	adds	r3, #36	; 0x24
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f001 feee 	bl	800b51c <RCCEx_PLL3_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009744:	e005      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]
      break;
 800974a:	e002      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800974c:	bf00      	nop
 800974e:	e000      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009758:	4b55      	ldr	r3, [pc, #340]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800975a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009764:	4952      	ldr	r1, [pc, #328]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009766:	4313      	orrs	r3, r2
 8009768:	650b      	str	r3, [r1, #80]	; 0x50
 800976a:	e001      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d049      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009784:	d02e      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800978a:	d828      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x476>
 800978c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009790:	d02a      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009796:	d822      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800979c:	d026      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x484>
 800979e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097a2:	d81c      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x476>
 80097a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097a8:	d010      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80097aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ae:	d816      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x476>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01d      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80097b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b8:	d111      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3304      	adds	r3, #4
 80097be:	2101      	movs	r1, #1
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fdf9 	bl	800b3b8 <RCCEx_PLL2_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097ca:	e012      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3324      	adds	r3, #36	; 0x24
 80097d0:	2101      	movs	r1, #1
 80097d2:	4618      	mov	r0, r3
 80097d4:	f001 fea2 	bl	800b51c <RCCEx_PLL3_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097dc:	e009      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	75fb      	strb	r3, [r7, #23]
      break;
 80097e2:	e006      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097e4:	bf00      	nop
 80097e6:	e004      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097e8:	bf00      	nop
 80097ea:	e002      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097ec:	bf00      	nop
 80097ee:	e000      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d109      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097f8:	4b2d      	ldr	r3, [pc, #180]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009804:	492a      	ldr	r1, [pc, #168]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009806:	4313      	orrs	r3, r2
 8009808:	650b      	str	r3, [r1, #80]	; 0x50
 800980a:	e001      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d04d      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009826:	d02e      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800982c:	d828      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800982e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009832:	d02a      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009838:	d822      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800983a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800983e:	d026      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009840:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009844:	d81c      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984a:	d010      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800984c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009850:	d816      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01d      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800985a:	d111      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	2101      	movs	r1, #1
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fda8 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800986c:	e012      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3324      	adds	r3, #36	; 0x24
 8009872:	2101      	movs	r1, #1
 8009874:	4618      	mov	r0, r3
 8009876:	f001 fe51 	bl	800b51c <RCCEx_PLL3_Config>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800987e:	e009      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	75fb      	strb	r3, [r7, #23]
      break;
 8009884:	e006      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009886:	bf00      	nop
 8009888:	e004      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800988a:	bf00      	nop
 800988c:	e002      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800988e:	bf00      	nop
 8009890:	e000      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10c      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800989c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098a8:	4901      	ldr	r1, [pc, #4]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	658b      	str	r3, [r1, #88]	; 0x58
 80098ae:	e003      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80098b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d02f      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098cc:	d00e      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x584>
 80098ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d2:	d814      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x596>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d015      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80098d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098dc:	d10f      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098de:	4baf      	ldr	r3, [pc, #700]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	4aae      	ldr	r2, [pc, #696]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098ea:	e00c      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3304      	adds	r3, #4
 80098f0:	2101      	movs	r1, #1
 80098f2:	4618      	mov	r0, r3
 80098f4:	f001 fd60 	bl	800b3b8 <RCCEx_PLL2_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098fc:	e003      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	75fb      	strb	r3, [r7, #23]
      break;
 8009902:	e000      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800990c:	4ba3      	ldr	r3, [pc, #652]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800990e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009910:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009918:	49a0      	ldr	r1, [pc, #640]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800991a:	4313      	orrs	r3, r2
 800991c:	650b      	str	r3, [r1, #80]	; 0x50
 800991e:	e001      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d032      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009934:	2b03      	cmp	r3, #3
 8009936:	d81b      	bhi.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009938:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800993a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993e:	bf00      	nop
 8009940:	08009977 	.word	0x08009977
 8009944:	08009951 	.word	0x08009951
 8009948:	0800995f 	.word	0x0800995f
 800994c:	08009977 	.word	0x08009977
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009950:	4b92      	ldr	r3, [pc, #584]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009954:	4a91      	ldr	r2, [pc, #580]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800995a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800995c:	e00c      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3304      	adds	r3, #4
 8009962:	2102      	movs	r1, #2
 8009964:	4618      	mov	r0, r3
 8009966:	f001 fd27 	bl	800b3b8 <RCCEx_PLL2_Config>
 800996a:	4603      	mov	r3, r0
 800996c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800996e:	e003      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	75fb      	strb	r3, [r7, #23]
      break;
 8009974:	e000      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800997e:	4b87      	ldr	r3, [pc, #540]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009982:	f023 0203 	bic.w	r2, r3, #3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998a:	4984      	ldr	r1, [pc, #528]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800998c:	4313      	orrs	r3, r2
 800998e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009990:	e001      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 8086 	beq.w	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099a4:	4b7e      	ldr	r3, [pc, #504]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a7d      	ldr	r2, [pc, #500]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80099aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099b0:	f7f8 ffcc 	bl	800294c <HAL_GetTick>
 80099b4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099b6:	e009      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099b8:	f7f8 ffc8 	bl	800294c <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	2b64      	cmp	r3, #100	; 0x64
 80099c4:	d902      	bls.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	75fb      	strb	r3, [r7, #23]
        break;
 80099ca:	e005      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099cc:	4b74      	ldr	r3, [pc, #464]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0ef      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d166      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099de:	4b6f      	ldr	r3, [pc, #444]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e8:	4053      	eors	r3, r2
 80099ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099f2:	4b6a      	ldr	r3, [pc, #424]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099fa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099fc:	4b67      	ldr	r3, [pc, #412]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a00:	4a66      	ldr	r2, [pc, #408]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a06:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a08:	4b64      	ldr	r3, [pc, #400]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0c:	4a63      	ldr	r2, [pc, #396]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a12:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a14:	4a61      	ldr	r2, [pc, #388]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a24:	d115      	bne.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a26:	f7f8 ff91 	bl	800294c <HAL_GetTick>
 8009a2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a2c:	e00b      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a2e:	f7f8 ff8d 	bl	800294c <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d902      	bls.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	75fb      	strb	r3, [r7, #23]
            break;
 8009a44:	e005      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a46:	4b55      	ldr	r3, [pc, #340]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0ed      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d126      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a66:	d10d      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009a68:	4b4c      	ldr	r3, [pc, #304]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a76:	0919      	lsrs	r1, r3, #4
 8009a78:	4b4a      	ldr	r3, [pc, #296]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	4947      	ldr	r1, [pc, #284]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	610b      	str	r3, [r1, #16]
 8009a82:	e005      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009a84:	4b45      	ldr	r3, [pc, #276]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	4a44      	ldr	r2, [pc, #272]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a8e:	6113      	str	r3, [r2, #16]
 8009a90:	4b42      	ldr	r3, [pc, #264]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a9e:	493f      	ldr	r1, [pc, #252]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	670b      	str	r3, [r1, #112]	; 0x70
 8009aa4:	e004      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	75bb      	strb	r3, [r7, #22]
 8009aaa:	e001      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8085 	beq.w	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac2:	2b28      	cmp	r3, #40	; 0x28
 8009ac4:	d866      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009ba9 	.word	0x08009ba9
 8009ad0:	08009b95 	.word	0x08009b95
 8009ad4:	08009b95 	.word	0x08009b95
 8009ad8:	08009b95 	.word	0x08009b95
 8009adc:	08009b95 	.word	0x08009b95
 8009ae0:	08009b95 	.word	0x08009b95
 8009ae4:	08009b95 	.word	0x08009b95
 8009ae8:	08009b95 	.word	0x08009b95
 8009aec:	08009b71 	.word	0x08009b71
 8009af0:	08009b95 	.word	0x08009b95
 8009af4:	08009b95 	.word	0x08009b95
 8009af8:	08009b95 	.word	0x08009b95
 8009afc:	08009b95 	.word	0x08009b95
 8009b00:	08009b95 	.word	0x08009b95
 8009b04:	08009b95 	.word	0x08009b95
 8009b08:	08009b95 	.word	0x08009b95
 8009b0c:	08009b83 	.word	0x08009b83
 8009b10:	08009b95 	.word	0x08009b95
 8009b14:	08009b95 	.word	0x08009b95
 8009b18:	08009b95 	.word	0x08009b95
 8009b1c:	08009b95 	.word	0x08009b95
 8009b20:	08009b95 	.word	0x08009b95
 8009b24:	08009b95 	.word	0x08009b95
 8009b28:	08009b95 	.word	0x08009b95
 8009b2c:	08009ba9 	.word	0x08009ba9
 8009b30:	08009b95 	.word	0x08009b95
 8009b34:	08009b95 	.word	0x08009b95
 8009b38:	08009b95 	.word	0x08009b95
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	08009b95 	.word	0x08009b95
 8009b4c:	08009ba9 	.word	0x08009ba9
 8009b50:	08009b95 	.word	0x08009b95
 8009b54:	08009b95 	.word	0x08009b95
 8009b58:	08009b95 	.word	0x08009b95
 8009b5c:	08009b95 	.word	0x08009b95
 8009b60:	08009b95 	.word	0x08009b95
 8009b64:	08009b95 	.word	0x08009b95
 8009b68:	08009b95 	.word	0x08009b95
 8009b6c:	08009ba9 	.word	0x08009ba9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	2101      	movs	r1, #1
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fc1e 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b80:	e013      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	2101      	movs	r1, #1
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fcc7 	bl	800b51c <RCCEx_PLL3_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b92:	e00a      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	e007      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b9a:	bf00      	nop
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	58024800 	.word	0x58024800
 8009ba4:	00ffffcf 	.word	0x00ffffcf
      break;
 8009ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d109      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009bb0:	4b96      	ldr	r3, [pc, #600]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bbc:	4993      	ldr	r1, [pc, #588]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	654b      	str	r3, [r1, #84]	; 0x54
 8009bc2:	e001      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d038      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd8:	2b05      	cmp	r3, #5
 8009bda:	d821      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009bdc:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009c27 	.word	0x08009c27
 8009be8:	08009bfd 	.word	0x08009bfd
 8009bec:	08009c0f 	.word	0x08009c0f
 8009bf0:	08009c27 	.word	0x08009c27
 8009bf4:	08009c27 	.word	0x08009c27
 8009bf8:	08009c27 	.word	0x08009c27
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 fbd8 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c0c:	e00c      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3324      	adds	r3, #36	; 0x24
 8009c12:	2101      	movs	r1, #1
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 fc81 	bl	800b51c <RCCEx_PLL3_Config>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c1e:	e003      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	e000      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c2e:	4b77      	ldr	r3, [pc, #476]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c32:	f023 0207 	bic.w	r2, r3, #7
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c3a:	4974      	ldr	r1, [pc, #464]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	654b      	str	r3, [r1, #84]	; 0x54
 8009c40:	e001      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0304 	and.w	r3, r3, #4
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d03a      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c58:	2b05      	cmp	r3, #5
 8009c5a:	d821      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009c5c:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009ca7 	.word	0x08009ca7
 8009c68:	08009c7d 	.word	0x08009c7d
 8009c6c:	08009c8f 	.word	0x08009c8f
 8009c70:	08009ca7 	.word	0x08009ca7
 8009c74:	08009ca7 	.word	0x08009ca7
 8009c78:	08009ca7 	.word	0x08009ca7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	2101      	movs	r1, #1
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 fb98 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c8c:	e00c      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3324      	adds	r3, #36	; 0x24
 8009c92:	2101      	movs	r1, #1
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 fc41 	bl	800b51c <RCCEx_PLL3_Config>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c9e:	e003      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca4:	e000      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009cae:	4b57      	ldr	r3, [pc, #348]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb2:	f023 0207 	bic.w	r2, r3, #7
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cbc:	4953      	ldr	r1, [pc, #332]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	658b      	str	r3, [r1, #88]	; 0x58
 8009cc2:	e001      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
 8009cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0320 	and.w	r3, r3, #32
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d04b      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cde:	d02e      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ce4:	d828      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cea:	d02a      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf0:	d822      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009cf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cf6:	d026      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009cf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cfc:	d81c      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d02:	d010      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d08:	d816      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01d      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d12:	d111      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	3304      	adds	r3, #4
 8009d18:	2100      	movs	r1, #0
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f001 fb4c 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009d20:	4603      	mov	r3, r0
 8009d22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d24:	e012      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3324      	adds	r3, #36	; 0x24
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 fbf5 	bl	800b51c <RCCEx_PLL3_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d36:	e009      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d3c:	e006      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d3e:	bf00      	nop
 8009d40:	e004      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d42:	bf00      	nop
 8009d44:	e002      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d46:	bf00      	nop
 8009d48:	e000      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d52:	4b2e      	ldr	r3, [pc, #184]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d60:	492a      	ldr	r1, [pc, #168]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	654b      	str	r3, [r1, #84]	; 0x54
 8009d66:	e001      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d04d      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d82:	d02e      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009d84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d88:	d828      	bhi.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	d02a      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d94:	d822      	bhi.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d9a:	d026      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009da0:	d81c      	bhi.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009da6:	d010      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dac:	d816      	bhi.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01d      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009db6:	d111      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f001 fafa 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009dc8:	e012      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3324      	adds	r3, #36	; 0x24
 8009dce:	2102      	movs	r1, #2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 fba3 	bl	800b51c <RCCEx_PLL3_Config>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009dda:	e009      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	75fb      	strb	r3, [r7, #23]
      break;
 8009de0:	e006      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009de2:	bf00      	nop
 8009de4:	e004      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009de6:	bf00      	nop
 8009de8:	e002      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009dea:	bf00      	nop
 8009dec:	e000      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10c      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e04:	4901      	ldr	r1, [pc, #4]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	658b      	str	r3, [r1, #88]	; 0x58
 8009e0a:	e003      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d04b      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e2a:	d02e      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009e2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e30:	d828      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e36:	d02a      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e3c:	d822      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e42:	d026      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009e44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e48:	d81c      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e4e:	d010      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e54:	d816      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01d      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5e:	d111      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	3304      	adds	r3, #4
 8009e64:	2100      	movs	r1, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 faa6 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e70:	e012      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3324      	adds	r3, #36	; 0x24
 8009e76:	2102      	movs	r1, #2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 fb4f 	bl	800b51c <RCCEx_PLL3_Config>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e82:	e009      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	75fb      	strb	r3, [r7, #23]
      break;
 8009e88:	e006      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e8a:	bf00      	nop
 8009e8c:	e004      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e8e:	bf00      	nop
 8009e90:	e002      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e92:	bf00      	nop
 8009e94:	e000      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e9e:	4b9d      	ldr	r3, [pc, #628]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eac:	4999      	ldr	r1, [pc, #612]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	658b      	str	r3, [r1, #88]	; 0x58
 8009eb2:	e001      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0308 	and.w	r3, r3, #8
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ece:	d10a      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	2102      	movs	r1, #2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 fb20 	bl	800b51c <RCCEx_PLL3_Config>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ee6:	4b8b      	ldr	r3, [pc, #556]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ef4:	4987      	ldr	r1, [pc, #540]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d01a      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f10:	d10a      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3324      	adds	r3, #36	; 0x24
 8009f16:	2102      	movs	r1, #2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 faff 	bl	800b51c <RCCEx_PLL3_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f28:	4b7a      	ldr	r3, [pc, #488]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f36:	4977      	ldr	r1, [pc, #476]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d034      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f52:	d01d      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f58:	d817      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f62:	d009      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009f64:	e011      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fa23 	bl	800b3b8 <RCCEx_PLL2_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f76:	e00c      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3324      	adds	r3, #36	; 0x24
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f001 facc 	bl	800b51c <RCCEx_PLL3_Config>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f88:	e003      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8e:	e000      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f98:	4b5e      	ldr	r3, [pc, #376]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009fa6:	495b      	ldr	r1, [pc, #364]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	658b      	str	r3, [r1, #88]	; 0x58
 8009fac:	e001      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d033      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fc8:	d01c      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009fca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fce:	d816      	bhi.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd4:	d003      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009fd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fda:	d007      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009fdc:	e00f      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fde:	4b4d      	ldr	r3, [pc, #308]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	4a4c      	ldr	r2, [pc, #304]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fea:	e00c      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3324      	adds	r3, #36	; 0x24
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f001 fa92 	bl	800b51c <RCCEx_PLL3_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ffc:	e003      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	75fb      	strb	r3, [r7, #23]
      break;
 800a002:	e000      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a004:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a00c:	4b41      	ldr	r3, [pc, #260]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a01a:	493e      	ldr	r1, [pc, #248]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	654b      	str	r3, [r1, #84]	; 0x54
 800a020:	e001      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d029      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03e:	d007      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a040:	e00f      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a042:	4b34      	ldr	r3, [pc, #208]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	4a33      	ldr	r2, [pc, #204]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a04c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a04e:	e00b      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3304      	adds	r3, #4
 800a054:	2102      	movs	r1, #2
 800a056:	4618      	mov	r0, r3
 800a058:	f001 f9ae 	bl	800b3b8 <RCCEx_PLL2_Config>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a060:	e002      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
      break;
 800a066:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a06e:	4b29      	ldr	r3, [pc, #164]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a072:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07a:	4926      	ldr	r1, [pc, #152]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a080:	e001      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3324      	adds	r3, #36	; 0x24
 800a096:	2102      	movs	r1, #2
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fa3f 	bl	800b51c <RCCEx_PLL3_Config>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d033      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0bc:	d017      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a0be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c2:	d811      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c8:	d013      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a0ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ce:	d80b      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d010      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d106      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0da:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0de:	4a0d      	ldr	r2, [pc, #52]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a0e6:	e007      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ec:	e004      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0ee:	bf00      	nop
 800a0f0:	e002      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10c      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10a:	4902      	ldr	r1, [pc, #8]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	654b      	str	r3, [r1, #84]	; 0x54
 800a110:	e004      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a128:	4b31      	ldr	r3, [pc, #196]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a134:	492e      	ldr	r1, [pc, #184]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a136:	4313      	orrs	r3, r2
 800a138:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a146:	4b2a      	ldr	r3, [pc, #168]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a154:	4926      	ldr	r1, [pc, #152]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a156:	4313      	orrs	r3, r2
 800a158:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a166:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a16a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a172:	491f      	ldr	r1, [pc, #124]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a174:	4313      	orrs	r3, r2
 800a176:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00d      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a184:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	4a19      	ldr	r2, [pc, #100]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a18a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a18e:	6113      	str	r3, [r2, #16]
 800a190:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a19a:	4915      	ldr	r1, [pc, #84]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	da08      	bge.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1a8:	4b11      	ldr	r3, [pc, #68]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b4:	490e      	ldr	r1, [pc, #56]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d009      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1c6:	4b0a      	ldr	r3, [pc, #40]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d4:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a1da:	7dbb      	ldrb	r3, [r7, #22]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e000      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	58024400 	.word	0x58024400

0800a1f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b090      	sub	sp, #64	; 0x40
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a202:	f040 8095 	bne.w	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a206:	4b97      	ldr	r3, [pc, #604]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	2b04      	cmp	r3, #4
 800a214:	f200 8088 	bhi.w	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a218:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a235 	.word	0x0800a235
 800a224:	0800a25d 	.word	0x0800a25d
 800a228:	0800a285 	.word	0x0800a285
 800a22c:	0800a321 	.word	0x0800a321
 800a230:	0800a2ad 	.word	0x0800a2ad
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a234:	4b8b      	ldr	r3, [pc, #556]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a240:	d108      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f000 ff64 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a250:	f000 bc94 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a258:	f000 bc90 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a25c:	4b81      	ldr	r3, [pc, #516]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a268:	d108      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a26a:	f107 0318 	add.w	r3, r7, #24
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fca8 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a278:	f000 bc80 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a280:	f000 bc7c 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a284:	4b77      	ldr	r3, [pc, #476]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a28c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a290:	d108      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a292:	f107 030c 	add.w	r3, r7, #12
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fde8 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2a0:	f000 bc6c 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a8:	f000 bc68 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2ac:	4b6d      	ldr	r3, [pc, #436]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2b6:	4b6b      	ldr	r3, [pc, #428]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0304 	and.w	r3, r3, #4
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d10c      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d109      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2c8:	4b66      	ldr	r3, [pc, #408]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	08db      	lsrs	r3, r3, #3
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	4a65      	ldr	r2, [pc, #404]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2da:	e01f      	b.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2dc:	4b61      	ldr	r3, [pc, #388]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e8:	d106      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2f0:	d102      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a2f2:	4b5e      	ldr	r3, [pc, #376]	; (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f6:	e011      	b.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2f8:	4b5a      	ldr	r3, [pc, #360]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a304:	d106      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a30c:	d102      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a30e:	4b58      	ldr	r3, [pc, #352]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a312:	e003      	b.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a318:	f000 bc30 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a31c:	f000 bc2e 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a320:	4b54      	ldr	r3, [pc, #336]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a324:	f000 bc2a 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a32c:	f000 bc26 	b.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a336:	f040 809f 	bne.w	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a33a:	4b4a      	ldr	r3, [pc, #296]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a342:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a34a:	d04d      	beq.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a352:	f200 8084 	bhi.w	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	2bc0      	cmp	r3, #192	; 0xc0
 800a35a:	d07d      	beq.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	2bc0      	cmp	r3, #192	; 0xc0
 800a360:	d87d      	bhi.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	2b80      	cmp	r3, #128	; 0x80
 800a366:	d02d      	beq.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	2b80      	cmp	r3, #128	; 0x80
 800a36c:	d877      	bhi.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	2b40      	cmp	r3, #64	; 0x40
 800a378:	d012      	beq.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a37a:	e070      	b.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a37c:	4b39      	ldr	r3, [pc, #228]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a388:	d107      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fec0 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a398:	e3f0      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a39e:	e3ed      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3a0:	4b30      	ldr	r3, [pc, #192]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ac:	d107      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ae:	f107 0318 	add.w	r3, r7, #24
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fc06 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3bc:	e3de      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c2:	e3db      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3c4:	4b27      	ldr	r3, [pc, #156]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d0:	d107      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3d2:	f107 030c 	add.w	r3, r7, #12
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fd48 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3e0:	e3cc      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e6:	e3c9      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a3e8:	4b1e      	ldr	r3, [pc, #120]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3f2:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0304 	and.w	r3, r3, #4
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	d10c      	bne.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a404:	4b17      	ldr	r3, [pc, #92]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	08db      	lsrs	r3, r3, #3
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	4a16      	ldr	r2, [pc, #88]	; (800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a410:	fa22 f303 	lsr.w	r3, r2, r3
 800a414:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a416:	e01e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a424:	d106      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42c:	d102      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a430:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a432:	e010      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a434:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a440:	d106      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a448:	d102      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a44a:	4b09      	ldr	r3, [pc, #36]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a44c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a44e:	e002      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a454:	e392      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a456:	e391      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a458:	4b06      	ldr	r3, [pc, #24]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a45c:	e38e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a462:	e38b      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a464:	58024400 	.word	0x58024400
 800a468:	03d09000 	.word	0x03d09000
 800a46c:	003d0900 	.word	0x003d0900
 800a470:	017d7840 	.word	0x017d7840
 800a474:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a47e:	f040 809c 	bne.w	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a482:	4b9d      	ldr	r3, [pc, #628]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a486:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a48a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a492:	d054      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a49a:	f200 808b 	bhi.w	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4a4:	f000 8083 	beq.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4ae:	f200 8081 	bhi.w	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4b8:	d02f      	beq.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4c0:	d878      	bhi.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4ce:	d012      	beq.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a4d0:	e070      	b.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4d2:	4b89      	ldr	r3, [pc, #548]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4de:	d107      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fe15 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4ee:	e345      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4f4:	e342      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4f6:	4b80      	ldr	r3, [pc, #512]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a502:	d107      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a504:	f107 0318 	add.w	r3, r7, #24
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fb5b 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a512:	e333      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a518:	e330      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a51a:	4b77      	ldr	r3, [pc, #476]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a526:	d107      	bne.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a528:	f107 030c 	add.w	r3, r7, #12
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 fc9d 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a536:	e321      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a53c:	e31e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a53e:	4b6e      	ldr	r3, [pc, #440]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a546:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a548:	4b6b      	ldr	r3, [pc, #428]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b04      	cmp	r3, #4
 800a552:	d10c      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a556:	2b00      	cmp	r3, #0
 800a558:	d109      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a55a:	4b67      	ldr	r3, [pc, #412]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	08db      	lsrs	r3, r3, #3
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	4a65      	ldr	r2, [pc, #404]	; (800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a566:	fa22 f303 	lsr.w	r3, r2, r3
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a56c:	e01e      	b.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a56e:	4b62      	ldr	r3, [pc, #392]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a57a:	d106      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a582:	d102      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a584:	4b5e      	ldr	r3, [pc, #376]	; (800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a588:	e010      	b.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a58a:	4b5b      	ldr	r3, [pc, #364]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a596:	d106      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a59e:	d102      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a5a0:	4b58      	ldr	r3, [pc, #352]	; (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a4:	e002      	b.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a5aa:	e2e7      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a5ac:	e2e6      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5ae:	4b56      	ldr	r3, [pc, #344]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b2:	e2e3      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b8:	e2e0      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5c0:	f040 80a7 	bne.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a5c4:	4b4c      	ldr	r3, [pc, #304]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a5cc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5d4:	d055      	beq.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5dc:	f200 8096 	bhi.w	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5e6:	f000 8084 	beq.w	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5f0:	f200 808c 	bhi.w	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5fa:	d030      	beq.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a602:	f200 8083 	bhi.w	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a612:	d012      	beq.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a614:	e07a      	b.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a616:	4b38      	ldr	r3, [pc, #224]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a61e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a622:	d107      	bne.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fd73 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a632:	e2a3      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a638:	e2a0      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a63a:	4b2f      	ldr	r3, [pc, #188]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a646:	d107      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a648:	f107 0318 	add.w	r3, r7, #24
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fab9 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a656:	e291      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65c:	e28e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a65e:	4b26      	ldr	r3, [pc, #152]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a66a:	d107      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a66c:	f107 030c 	add.w	r3, r7, #12
 800a670:	4618      	mov	r0, r3
 800a672:	f000 fbfb 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a67a:	e27f      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a680:	e27c      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a682:	4b1d      	ldr	r3, [pc, #116]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a686:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a68c:	4b1a      	ldr	r3, [pc, #104]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b04      	cmp	r3, #4
 800a696:	d10c      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a69e:	4b16      	ldr	r3, [pc, #88]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	08db      	lsrs	r3, r3, #3
 800a6a4:	f003 0303 	and.w	r3, r3, #3
 800a6a8:	4a14      	ldr	r2, [pc, #80]	; (800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6b0:	e01e      	b.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6b2:	4b11      	ldr	r3, [pc, #68]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6be:	d106      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c6:	d102      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a6c8:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6cc:	e010      	b.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6da:	d106      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6e2:	d102      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e8:	e002      	b.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6ee:	e245      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6f0:	e244      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f6:	e241      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6f8:	58024400 	.word	0x58024400
 800a6fc:	03d09000 	.word	0x03d09000
 800a700:	003d0900 	.word	0x003d0900
 800a704:	017d7840 	.word	0x017d7840
 800a708:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a710:	e234      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a718:	f040 809c 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a71c:	4b9b      	ldr	r3, [pc, #620]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a720:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a724:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a72c:	d054      	beq.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a734:	f200 808b 	bhi.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a73e:	f000 8083 	beq.w	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a748:	f200 8081 	bhi.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a752:	d02f      	beq.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75a:	d878      	bhi.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d004      	beq.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a768:	d012      	beq.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a76a:	e070      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a76c:	4b87      	ldr	r3, [pc, #540]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a778:	d107      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a77a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fcc8 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a788:	e1f8      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78e:	e1f5      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a790:	4b7e      	ldr	r3, [pc, #504]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a79c:	d107      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a79e:	f107 0318 	add.w	r3, r7, #24
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fa0e 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7ac:	e1e6      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b2:	e1e3      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7b4:	4b75      	ldr	r3, [pc, #468]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7c0:	d107      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7c2:	f107 030c 	add.w	r3, r7, #12
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fb50 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7d0:	e1d4      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d6:	e1d1      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7d8:	4b6c      	ldr	r3, [pc, #432]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7e2:	4b6a      	ldr	r3, [pc, #424]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d10c      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7f4:	4b65      	ldr	r3, [pc, #404]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	08db      	lsrs	r3, r3, #3
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	4a64      	ldr	r2, [pc, #400]	; (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a800:	fa22 f303 	lsr.w	r3, r2, r3
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a806:	e01e      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a808:	4b60      	ldr	r3, [pc, #384]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a814:	d106      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a81c:	d102      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a81e:	4b5d      	ldr	r3, [pc, #372]	; (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a822:	e010      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a824:	4b59      	ldr	r3, [pc, #356]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a830:	d106      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a838:	d102      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a83a:	4b57      	ldr	r3, [pc, #348]	; (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83e:	e002      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a844:	e19a      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a846:	e199      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a848:	4b54      	ldr	r3, [pc, #336]	; (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a84c:	e196      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a852:	e193      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a85a:	d173      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a85c:	4b4b      	ldr	r3, [pc, #300]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a864:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a86c:	d02f      	beq.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a874:	d863      	bhi.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a882:	d012      	beq.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a884:	e05b      	b.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a886:	4b41      	ldr	r3, [pc, #260]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a88e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a892:	d107      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a894:	f107 0318 	add.w	r3, r7, #24
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f993 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8a2:	e16b      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a8:	e168      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8aa:	4b38      	ldr	r3, [pc, #224]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b6:	d107      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fad5 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8c6:	e159      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8cc:	e156      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8ce:	4b2f      	ldr	r3, [pc, #188]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8d8:	4b2c      	ldr	r3, [pc, #176]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d10c      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8ea:	4b28      	ldr	r3, [pc, #160]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	08db      	lsrs	r3, r3, #3
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	4a26      	ldr	r2, [pc, #152]	; (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fc:	e01e      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8fe:	4b23      	ldr	r3, [pc, #140]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a90a:	d106      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a914:	4b1f      	ldr	r3, [pc, #124]	; (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	e010      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a91a:	4b1c      	ldr	r3, [pc, #112]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a926:	d106      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a92e:	d102      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a930:	4b19      	ldr	r3, [pc, #100]	; (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a934:	e002      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a93a:	e11f      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a93c:	e11e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a942:	e11b      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94a:	d13e      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a94c:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a954:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a962:	d01d      	beq.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a964:	e02e      	b.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a972:	d107      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fbcb 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a982:	e0fb      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a988:	e0f8      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a98a:	bf00      	nop
 800a98c:	58024400 	.word	0x58024400
 800a990:	03d09000 	.word	0x03d09000
 800a994:	003d0900 	.word	0x003d0900
 800a998:	017d7840 	.word	0x017d7840
 800a99c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a0:	4b79      	ldr	r3, [pc, #484]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ac:	d107      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ae:	f107 0318 	add.w	r3, r7, #24
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 f906 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9bc:	e0de      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c2:	e0db      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c8:	e0d8      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9d0:	f040 8085 	bne.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a9d4:	4b6c      	ldr	r3, [pc, #432]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a9dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9e4:	d06b      	beq.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ec:	d874      	bhi.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9f4:	d056      	beq.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fc:	d86c      	bhi.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa04:	d03b      	beq.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa0c:	d864      	bhi.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa14:	d021      	beq.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa1c:	d85c      	bhi.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d004      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa2a:	d004      	beq.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800aa2c:	e054      	b.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa2e:	f000 f8b3 	bl	800ab98 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa32:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aa34:	e0a2      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa36:	4b54      	ldr	r3, [pc, #336]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa42:	d107      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa44:	f107 0318 	add.w	r3, r7, #24
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f8bb 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa52:	e093      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa58:	e090      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa5a:	4b4b      	ldr	r3, [pc, #300]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa66:	d107      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa68:	f107 030c 	add.w	r3, r7, #12
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f9fd 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa76:	e081      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa7c:	e07e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa7e:	4b42      	ldr	r3, [pc, #264]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d109      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa8a:	4b3f      	ldr	r3, [pc, #252]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	4a3d      	ldr	r2, [pc, #244]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa96:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa9c:	e06e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa2:	e06b      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aaa4:	4b38      	ldr	r3, [pc, #224]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab0:	d102      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aab2:	4b37      	ldr	r3, [pc, #220]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aab6:	e061      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aabc:	e05e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aabe:	4b32      	ldr	r3, [pc, #200]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaca:	d102      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aacc:	4b31      	ldr	r3, [pc, #196]	; (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aad0:	e054      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad6:	e051      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aadc:	e04e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae4:	d148      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aae6:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aaee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf6:	d02a      	beq.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aafe:	d838      	bhi.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab0c:	d00d      	beq.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ab0e:	e030      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab10:	4b1d      	ldr	r3, [pc, #116]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab1c:	d102      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ab1e:	4b1d      	ldr	r3, [pc, #116]	; (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab22:	e02b      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab28:	e028      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab2a:	4b17      	ldr	r3, [pc, #92]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab36:	d107      	bne.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fae9 	bl	800b114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab46:	e019      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab4c:	e016      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab4e:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab5a:	d107      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab5c:	f107 0318 	add.w	r3, r7, #24
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 f82f 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab6a:	e007      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab70:	e004      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab76:	e001      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ab7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3740      	adds	r7, #64	; 0x40
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	58024400 	.word	0x58024400
 800ab8c:	03d09000 	.word	0x03d09000
 800ab90:	003d0900 	.word	0x003d0900
 800ab94:	017d7840 	.word	0x017d7840

0800ab98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab9c:	f7fe fb88 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 800aba0:	4602      	mov	r2, r0
 800aba2:	4b06      	ldr	r3, [pc, #24]	; (800abbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	091b      	lsrs	r3, r3, #4
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	4904      	ldr	r1, [pc, #16]	; (800abc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abae:	5ccb      	ldrb	r3, [r1, r3]
 800abb0:	f003 031f 	and.w	r3, r3, #31
 800abb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abb8:	4618      	mov	r0, r3
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	58024400 	.word	0x58024400
 800abc0:	080104f4 	.word	0x080104f4

0800abc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b089      	sub	sp, #36	; 0x24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abcc:	4ba1      	ldr	r3, [pc, #644]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	f003 0303 	and.w	r3, r3, #3
 800abd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800abd6:	4b9f      	ldr	r3, [pc, #636]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abda:	0b1b      	lsrs	r3, r3, #12
 800abdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abe2:	4b9c      	ldr	r3, [pc, #624]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	091b      	lsrs	r3, r3, #4
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800abee:	4b99      	ldr	r3, [pc, #612]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf2:	08db      	lsrs	r3, r3, #3
 800abf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	fb02 f303 	mul.w	r3, r2, r3
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 8111 	beq.w	800ae34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	f000 8083 	beq.w	800ad20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	f200 80a1 	bhi.w	800ad64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d056      	beq.n	800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac2e:	e099      	b.n	800ad64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac30:	4b88      	ldr	r3, [pc, #544]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d02d      	beq.n	800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac3c:	4b85      	ldr	r3, [pc, #532]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	08db      	lsrs	r3, r3, #3
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	4a84      	ldr	r2, [pc, #528]	; (800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac48:	fa22 f303 	lsr.w	r3, r2, r3
 800ac4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac66:	4b7b      	ldr	r3, [pc, #492]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac96:	e087      	b.n	800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acaa:	4b6a      	ldr	r3, [pc, #424]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acba:	ed97 6a03 	vldr	s12, [r7, #12]
 800acbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acda:	e065      	b.n	800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acee:	4b59      	ldr	r3, [pc, #356]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad1e:	e043      	b.n	800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad32:	4b48      	ldr	r3, [pc, #288]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad62:	e021      	b.n	800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad76:	4b37      	ldr	r3, [pc, #220]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ada6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ada8:	4b2a      	ldr	r3, [pc, #168]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	0a5b      	lsrs	r3, r3, #9
 800adae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adce:	ee17 2a90 	vmov	r2, s15
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800add6:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	0c1b      	lsrs	r3, r3, #16
 800addc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade0:	ee07 3a90 	vmov	s15, r3
 800ade4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800adf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adfc:	ee17 2a90 	vmov	r2, s15
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ae04:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	0e1b      	lsrs	r3, r3, #24
 800ae0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae2a:	ee17 2a90 	vmov	r2, s15
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae32:	e008      	b.n	800ae46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	609a      	str	r2, [r3, #8]
}
 800ae46:	bf00      	nop
 800ae48:	3724      	adds	r7, #36	; 0x24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	58024400 	.word	0x58024400
 800ae58:	03d09000 	.word	0x03d09000
 800ae5c:	46000000 	.word	0x46000000
 800ae60:	4c742400 	.word	0x4c742400
 800ae64:	4a742400 	.word	0x4a742400
 800ae68:	4bbebc20 	.word	0x4bbebc20

0800ae6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b089      	sub	sp, #36	; 0x24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae74:	4ba1      	ldr	r3, [pc, #644]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae78:	f003 0303 	and.w	r3, r3, #3
 800ae7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae7e:	4b9f      	ldr	r3, [pc, #636]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae8a:	4b9c      	ldr	r3, [pc, #624]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae96:	4b99      	ldr	r3, [pc, #612]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9a:	08db      	lsrs	r3, r3, #3
 800ae9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	fb02 f303 	mul.w	r3, r2, r3
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 8111 	beq.w	800b0dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	f000 8083 	beq.w	800afc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	f200 80a1 	bhi.w	800b00c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d003      	beq.n	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d056      	beq.n	800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aed6:	e099      	b.n	800b00c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aed8:	4b88      	ldr	r3, [pc, #544]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0320 	and.w	r3, r3, #32
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d02d      	beq.n	800af40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aee4:	4b85      	ldr	r3, [pc, #532]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	08db      	lsrs	r3, r3, #3
 800aeea:	f003 0303 	and.w	r3, r3, #3
 800aeee:	4a84      	ldr	r2, [pc, #528]	; (800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aef0:	fa22 f303 	lsr.w	r3, r2, r3
 800aef4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	ee07 3a90 	vmov	s15, r3
 800aefc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0e:	4b7b      	ldr	r3, [pc, #492]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af3e:	e087      	b.n	800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af52:	4b6a      	ldr	r3, [pc, #424]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	ed97 6a03 	vldr	s12, [r7, #12]
 800af66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af82:	e065      	b.n	800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b59      	ldr	r3, [pc, #356]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afc6:	e043      	b.n	800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afda:	4b48      	ldr	r3, [pc, #288]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afea:	ed97 6a03 	vldr	s12, [r7, #12]
 800afee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b00a:	e021      	b.n	800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01e:	4b37      	ldr	r3, [pc, #220]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b032:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b04e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b050:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	0a5b      	lsrs	r3, r3, #9
 800b056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b06a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b06e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b076:	ee17 2a90 	vmov	r2, s15
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b07e:	4b1f      	ldr	r3, [pc, #124]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	0c1b      	lsrs	r3, r3, #16
 800b084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b088:	ee07 3a90 	vmov	s15, r3
 800b08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b094:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b098:	edd7 6a07 	vldr	s13, [r7, #28]
 800b09c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0a4:	ee17 2a90 	vmov	r2, s15
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b0ac:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b0:	0e1b      	lsrs	r3, r3, #24
 800b0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d2:	ee17 2a90 	vmov	r2, s15
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0da:	e008      	b.n	800b0ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	609a      	str	r2, [r3, #8]
}
 800b0ee:	bf00      	nop
 800b0f0:	3724      	adds	r7, #36	; 0x24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	58024400 	.word	0x58024400
 800b100:	03d09000 	.word	0x03d09000
 800b104:	46000000 	.word	0x46000000
 800b108:	4c742400 	.word	0x4c742400
 800b10c:	4a742400 	.word	0x4a742400
 800b110:	4bbebc20 	.word	0x4bbebc20

0800b114 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b114:	b480      	push	{r7}
 800b116:	b089      	sub	sp, #36	; 0x24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b11c:	4ba0      	ldr	r3, [pc, #640]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b120:	f003 0303 	and.w	r3, r3, #3
 800b124:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b126:	4b9e      	ldr	r3, [pc, #632]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b12a:	091b      	lsrs	r3, r3, #4
 800b12c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b130:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b132:	4b9b      	ldr	r3, [pc, #620]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b13c:	4b98      	ldr	r3, [pc, #608]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b140:	08db      	lsrs	r3, r3, #3
 800b142:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	fb02 f303 	mul.w	r3, r2, r3
 800b14c:	ee07 3a90 	vmov	s15, r3
 800b150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b154:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 8111 	beq.w	800b382 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b02      	cmp	r3, #2
 800b164:	f000 8083 	beq.w	800b26e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	f200 80a1 	bhi.w	800b2b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d056      	beq.n	800b22a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b17c:	e099      	b.n	800b2b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b17e:	4b88      	ldr	r3, [pc, #544]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0320 	and.w	r3, r3, #32
 800b186:	2b00      	cmp	r3, #0
 800b188:	d02d      	beq.n	800b1e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b18a:	4b85      	ldr	r3, [pc, #532]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	08db      	lsrs	r3, r3, #3
 800b190:	f003 0303 	and.w	r3, r3, #3
 800b194:	4a83      	ldr	r2, [pc, #524]	; (800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b196:	fa22 f303 	lsr.w	r3, r2, r3
 800b19a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	ee07 3a90 	vmov	s15, r3
 800b1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b4:	4b7a      	ldr	r3, [pc, #488]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1bc:	ee07 3a90 	vmov	s15, r3
 800b1c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b1e4:	e087      	b.n	800b2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	ee07 3a90 	vmov	s15, r3
 800b1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b3ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f8:	4b69      	ldr	r3, [pc, #420]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b208:	ed97 6a03 	vldr	s12, [r7, #12]
 800b20c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b21c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b220:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b224:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b228:	e065      	b.n	800b2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b234:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23c:	4b58      	ldr	r3, [pc, #352]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b250:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b268:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b26c:	e043      	b.n	800b2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	ee07 3a90 	vmov	s15, r3
 800b274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b278:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b27c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b280:	4b47      	ldr	r3, [pc, #284]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b290:	ed97 6a03 	vldr	s12, [r7, #12]
 800b294:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2b0:	e021      	b.n	800b2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	ee07 3a90 	vmov	s15, r3
 800b2b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b3ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2c4:	4b36      	ldr	r3, [pc, #216]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2cc:	ee07 3a90 	vmov	s15, r3
 800b2d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b2f6:	4b2a      	ldr	r3, [pc, #168]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fa:	0a5b      	lsrs	r3, r3, #9
 800b2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b300:	ee07 3a90 	vmov	s15, r3
 800b304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b310:	edd7 6a07 	vldr	s13, [r7, #28]
 800b314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b31c:	ee17 2a90 	vmov	r2, s15
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b324:	4b1e      	ldr	r3, [pc, #120]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	0c1b      	lsrs	r3, r3, #16
 800b32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b33a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b33e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b34a:	ee17 2a90 	vmov	r2, s15
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b352:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b356:	0e1b      	lsrs	r3, r3, #24
 800b358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b35c:	ee07 3a90 	vmov	s15, r3
 800b360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b36c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b378:	ee17 2a90 	vmov	r2, s15
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b380:	e008      	b.n	800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	609a      	str	r2, [r3, #8]
}
 800b394:	bf00      	nop
 800b396:	3724      	adds	r7, #36	; 0x24
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	58024400 	.word	0x58024400
 800b3a4:	03d09000 	.word	0x03d09000
 800b3a8:	46000000 	.word	0x46000000
 800b3ac:	4c742400 	.word	0x4c742400
 800b3b0:	4a742400 	.word	0x4a742400
 800b3b4:	4bbebc20 	.word	0x4bbebc20

0800b3b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3c6:	4b53      	ldr	r3, [pc, #332]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d101      	bne.n	800b3d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e099      	b.n	800b50a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b3d6:	4b4f      	ldr	r3, [pc, #316]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a4e      	ldr	r2, [pc, #312]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b3dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3e2:	f7f7 fab3 	bl	800294c <HAL_GetTick>
 800b3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3e8:	e008      	b.n	800b3fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b3ea:	f7f7 faaf 	bl	800294c <HAL_GetTick>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d901      	bls.n	800b3fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e086      	b.n	800b50a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3fc:	4b45      	ldr	r3, [pc, #276]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1f0      	bne.n	800b3ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b408:	4b42      	ldr	r3, [pc, #264]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	031b      	lsls	r3, r3, #12
 800b416:	493f      	ldr	r1, [pc, #252]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	628b      	str	r3, [r1, #40]	; 0x28
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	3b01      	subs	r3, #1
 800b422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	025b      	lsls	r3, r3, #9
 800b42e:	b29b      	uxth	r3, r3
 800b430:	431a      	orrs	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	3b01      	subs	r3, #1
 800b438:	041b      	lsls	r3, r3, #16
 800b43a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b43e:	431a      	orrs	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	3b01      	subs	r3, #1
 800b446:	061b      	lsls	r3, r3, #24
 800b448:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b44c:	4931      	ldr	r1, [pc, #196]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b452:	4b30      	ldr	r3, [pc, #192]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b456:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	492d      	ldr	r1, [pc, #180]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b460:	4313      	orrs	r3, r2
 800b462:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b464:	4b2b      	ldr	r3, [pc, #172]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b468:	f023 0220 	bic.w	r2, r3, #32
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	4928      	ldr	r1, [pc, #160]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b472:	4313      	orrs	r3, r2
 800b474:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b476:	4b27      	ldr	r3, [pc, #156]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	4a26      	ldr	r2, [pc, #152]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	f023 0310 	bic.w	r3, r3, #16
 800b480:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b482:	4b24      	ldr	r3, [pc, #144]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b486:	4b24      	ldr	r3, [pc, #144]	; (800b518 <RCCEx_PLL2_Config+0x160>)
 800b488:	4013      	ands	r3, r2
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	69d2      	ldr	r2, [r2, #28]
 800b48e:	00d2      	lsls	r2, r2, #3
 800b490:	4920      	ldr	r1, [pc, #128]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b492:	4313      	orrs	r3, r2
 800b494:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b496:	4b1f      	ldr	r3, [pc, #124]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	4a1e      	ldr	r2, [pc, #120]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b49c:	f043 0310 	orr.w	r3, r3, #16
 800b4a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d106      	bne.n	800b4b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b4a8:	4b1a      	ldr	r3, [pc, #104]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	4a19      	ldr	r2, [pc, #100]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4b4:	e00f      	b.n	800b4d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d106      	bne.n	800b4ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4bc:	4b15      	ldr	r3, [pc, #84]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	4a14      	ldr	r2, [pc, #80]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4c8:	e005      	b.n	800b4d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b4ca:	4b12      	ldr	r3, [pc, #72]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ce:	4a11      	ldr	r2, [pc, #68]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b4d6:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a0e      	ldr	r2, [pc, #56]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4e2:	f7f7 fa33 	bl	800294c <HAL_GetTick>
 800b4e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4e8:	e008      	b.n	800b4fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b4ea:	f7f7 fa2f 	bl	800294c <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d901      	bls.n	800b4fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e006      	b.n	800b50a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <RCCEx_PLL2_Config+0x15c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b504:	2b00      	cmp	r3, #0
 800b506:	d0f0      	beq.n	800b4ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	58024400 	.word	0x58024400
 800b518:	ffff0007 	.word	0xffff0007

0800b51c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b52a:	4b53      	ldr	r3, [pc, #332]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b03      	cmp	r3, #3
 800b534:	d101      	bne.n	800b53a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e099      	b.n	800b66e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b53a:	4b4f      	ldr	r3, [pc, #316]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a4e      	ldr	r2, [pc, #312]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b546:	f7f7 fa01 	bl	800294c <HAL_GetTick>
 800b54a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b54c:	e008      	b.n	800b560 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b54e:	f7f7 f9fd 	bl	800294c <HAL_GetTick>
 800b552:	4602      	mov	r2, r0
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d901      	bls.n	800b560 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e086      	b.n	800b66e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b560:	4b45      	ldr	r3, [pc, #276]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f0      	bne.n	800b54e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b56c:	4b42      	ldr	r3, [pc, #264]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	051b      	lsls	r3, r3, #20
 800b57a:	493f      	ldr	r1, [pc, #252]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	628b      	str	r3, [r1, #40]	; 0x28
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	3b01      	subs	r3, #1
 800b586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	3b01      	subs	r3, #1
 800b590:	025b      	lsls	r3, r3, #9
 800b592:	b29b      	uxth	r3, r3
 800b594:	431a      	orrs	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	041b      	lsls	r3, r3, #16
 800b59e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	061b      	lsls	r3, r3, #24
 800b5ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5b0:	4931      	ldr	r1, [pc, #196]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5b6:	4b30      	ldr	r3, [pc, #192]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	492d      	ldr	r1, [pc, #180]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5c8:	4b2b      	ldr	r3, [pc, #172]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	4928      	ldr	r1, [pc, #160]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5da:	4b27      	ldr	r3, [pc, #156]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	4a26      	ldr	r2, [pc, #152]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5e6:	4b24      	ldr	r3, [pc, #144]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5ea:	4b24      	ldr	r3, [pc, #144]	; (800b67c <RCCEx_PLL3_Config+0x160>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	69d2      	ldr	r2, [r2, #28]
 800b5f2:	00d2      	lsls	r2, r2, #3
 800b5f4:	4920      	ldr	r1, [pc, #128]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5fa:	4b1f      	ldr	r3, [pc, #124]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	4a1e      	ldr	r2, [pc, #120]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b60c:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	4a19      	ldr	r2, [pc, #100]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b616:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b618:	e00f      	b.n	800b63a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d106      	bne.n	800b62e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b620:	4b15      	ldr	r3, [pc, #84]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	4a14      	ldr	r2, [pc, #80]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b626:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b62a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b62c:	e005      	b.n	800b63a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b62e:	4b12      	ldr	r3, [pc, #72]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	4a11      	ldr	r2, [pc, #68]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b638:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b63a:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a0e      	ldr	r2, [pc, #56]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b646:	f7f7 f981 	bl	800294c <HAL_GetTick>
 800b64a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b64c:	e008      	b.n	800b660 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b64e:	f7f7 f97d 	bl	800294c <HAL_GetTick>
 800b652:	4602      	mov	r2, r0
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d901      	bls.n	800b660 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e006      	b.n	800b66e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b660:	4b05      	ldr	r3, [pc, #20]	; (800b678 <RCCEx_PLL3_Config+0x15c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0f0      	beq.n	800b64e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	58024400 	.word	0x58024400
 800b67c:	ffff0007 	.word	0xffff0007

0800b680 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e0f1      	b.n	800b876 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a78      	ldr	r2, [pc, #480]	; (800b880 <HAL_SPI_Init+0x200>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d00f      	beq.n	800b6c2 <HAL_SPI_Init+0x42>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a77      	ldr	r2, [pc, #476]	; (800b884 <HAL_SPI_Init+0x204>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00a      	beq.n	800b6c2 <HAL_SPI_Init+0x42>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a75      	ldr	r2, [pc, #468]	; (800b888 <HAL_SPI_Init+0x208>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d005      	beq.n	800b6c2 <HAL_SPI_Init+0x42>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	2b0f      	cmp	r3, #15
 800b6bc:	d901      	bls.n	800b6c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e0d9      	b.n	800b876 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fd74 	bl	800c1b0 <SPI_GetPacketSize>
 800b6c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a6c      	ldr	r2, [pc, #432]	; (800b880 <HAL_SPI_Init+0x200>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00c      	beq.n	800b6ee <HAL_SPI_Init+0x6e>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a6a      	ldr	r2, [pc, #424]	; (800b884 <HAL_SPI_Init+0x204>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d007      	beq.n	800b6ee <HAL_SPI_Init+0x6e>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a69      	ldr	r2, [pc, #420]	; (800b888 <HAL_SPI_Init+0x208>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d002      	beq.n	800b6ee <HAL_SPI_Init+0x6e>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b08      	cmp	r3, #8
 800b6ec:	d811      	bhi.n	800b712 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6f2:	4a63      	ldr	r2, [pc, #396]	; (800b880 <HAL_SPI_Init+0x200>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d009      	beq.n	800b70c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a61      	ldr	r2, [pc, #388]	; (800b884 <HAL_SPI_Init+0x204>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d004      	beq.n	800b70c <HAL_SPI_Init+0x8c>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a60      	ldr	r2, [pc, #384]	; (800b888 <HAL_SPI_Init+0x208>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d104      	bne.n	800b716 <HAL_SPI_Init+0x96>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b10      	cmp	r3, #16
 800b710:	d901      	bls.n	800b716 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e0af      	b.n	800b876 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7f6 fd3e 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0201 	bic.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b752:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b75c:	d119      	bne.n	800b792 <HAL_SPI_Init+0x112>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b766:	d103      	bne.n	800b770 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d008      	beq.n	800b782 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10c      	bne.n	800b792 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b77c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b780:	d107      	bne.n	800b792 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b790:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	69da      	ldr	r2, [r3, #28]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79a:	431a      	orrs	r2, r3
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a4:	ea42 0103 	orr.w	r1, r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	431a      	orrs	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7f2:	ea42 0103 	orr.w	r1, r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d113      	bne.n	800b832 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b81c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b830:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f022 0201 	bic.w	r2, r2, #1
 800b840:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	40013000 	.word	0x40013000
 800b884:	40003800 	.word	0x40003800
 800b888:	40003c00 	.word	0x40003c00

0800b88c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08a      	sub	sp, #40	; 0x28
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	4613      	mov	r3, r2
 800b89a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3330      	adds	r3, #48	; 0x30
 800b8a6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8b0:	d112      	bne.n	800b8d8 <HAL_SPI_Receive+0x4c>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10e      	bne.n	800b8d8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2204      	movs	r2, #4
 800b8be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b8c2:	88fa      	ldrh	r2, [r7, #6]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	68b9      	ldr	r1, [r7, #8]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f978 	bl	800bbc4 <HAL_SPI_TransmitReceive>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	e16f      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d101      	bne.n	800b8e6 <HAL_SPI_Receive+0x5a>
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e168      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8ee:	f7f7 f82d 	bl	800294c <HAL_GetTick>
 800b8f2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d007      	beq.n	800b910 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b900:	2302      	movs	r3, #2
 800b902:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b90c:	7ffb      	ldrb	r3, [r7, #31]
 800b90e:	e153      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <HAL_SPI_Receive+0x90>
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d107      	bne.n	800b92c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b928:	7ffb      	ldrb	r3, [r7, #31]
 800b92a:	e145      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2204      	movs	r2, #4
 800b930:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	88fa      	ldrh	r2, [r7, #6]
 800b946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	88fa      	ldrh	r2, [r7, #6]
 800b94e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b97c:	d107      	bne.n	800b98e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b98c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	4b8a      	ldr	r3, [pc, #552]	; (800bbc0 <HAL_SPI_Receive+0x334>)
 800b996:	4013      	ands	r3, r2
 800b998:	88f9      	ldrh	r1, [r7, #6]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	6812      	ldr	r2, [r2, #0]
 800b99e:	430b      	orrs	r3, r1
 800b9a0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f042 0201 	orr.w	r2, r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9ba:	d107      	bne.n	800b9cc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	2b0f      	cmp	r3, #15
 800b9d2:	d948      	bls.n	800ba66 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9d4:	e040      	b.n	800ba58 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	695a      	ldr	r2, [r3, #20]
 800b9dc:	f248 0308 	movw	r3, #32776	; 0x8008
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d014      	beq.n	800ba10 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b9f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9f6:	1d1a      	adds	r2, r3, #4
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	3b01      	subs	r3, #1
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba0e:	e023      	b.n	800ba58 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba10:	f7f6 ff9c 	bl	800294c <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d803      	bhi.n	800ba28 <HAL_SPI_Receive+0x19c>
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba26:	d102      	bne.n	800ba2e <HAL_SPI_Receive+0x1a2>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d114      	bne.n	800ba58 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 faf0 	bl	800c014 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e0af      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1b8      	bne.n	800b9d6 <HAL_SPI_Receive+0x14a>
 800ba64:	e095      	b.n	800bb92 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	2b07      	cmp	r3, #7
 800ba6c:	f240 808b 	bls.w	800bb86 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ba70:	e03f      	b.n	800baf2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d114      	bne.n	800baaa <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba84:	69ba      	ldr	r2, [r7, #24]
 800ba86:	8812      	ldrh	r2, [r2, #0]
 800ba88:	b292      	uxth	r2, r2
 800ba8a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba90:	1c9a      	adds	r2, r3, #2
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800baa8:	e023      	b.n	800baf2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baaa:	f7f6 ff4f 	bl	800294c <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d803      	bhi.n	800bac2 <HAL_SPI_Receive+0x236>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bac0:	d102      	bne.n	800bac8 <HAL_SPI_Receive+0x23c>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d114      	bne.n	800baf2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 faa3 	bl	800c014 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800badc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e062      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1b9      	bne.n	800ba72 <HAL_SPI_Receive+0x1e6>
 800bafe:	e048      	b.n	800bb92 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d117      	bne.n	800bb3e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb1a:	7812      	ldrb	r2, [r2, #0]
 800bb1c:	b2d2      	uxtb	r2, r2
 800bb1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	3b01      	subs	r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb3c:	e023      	b.n	800bb86 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb3e:	f7f6 ff05 	bl	800294c <HAL_GetTick>
 800bb42:	4602      	mov	r2, r0
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d803      	bhi.n	800bb56 <HAL_SPI_Receive+0x2ca>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb54:	d102      	bne.n	800bb5c <HAL_SPI_Receive+0x2d0>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d114      	bne.n	800bb86 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f000 fa59 	bl	800c014 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e018      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1b6      	bne.n	800bb00 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 fa3e 	bl	800c014 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bbb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3720      	adds	r7, #32
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	ffff0000 	.word	0xffff0000

0800bbc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08e      	sub	sp, #56	; 0x38
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
 800bbd0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3320      	adds	r3, #32
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3330      	adds	r3, #48	; 0x30
 800bbe6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_SPI_TransmitReceive+0x32>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e209      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbfe:	f7f6 fea5 	bl	800294c <HAL_GetTick>
 800bc02:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bc04:	887b      	ldrh	r3, [r7, #2]
 800bc06:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bc08:	887b      	ldrh	r3, [r7, #2]
 800bc0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc12:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bc1a:	7efb      	ldrb	r3, [r7, #27]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d014      	beq.n	800bc4a <HAL_SPI_TransmitReceive+0x86>
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc26:	d106      	bne.n	800bc36 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bc30:	7efb      	ldrb	r3, [r7, #27]
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d009      	beq.n	800bc4a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bc36:	2302      	movs	r3, #2
 800bc38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc48:	e1df      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <HAL_SPI_TransmitReceive+0x98>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d002      	beq.n	800bc5c <HAL_SPI_TransmitReceive+0x98>
 800bc56:	887b      	ldrh	r3, [r7, #2]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d109      	bne.n	800bc70 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc6e:	e1cc      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b04      	cmp	r3, #4
 800bc7a:	d003      	beq.n	800bc84 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2205      	movs	r2, #5
 800bc80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	887a      	ldrh	r2, [r7, #2]
 800bc96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	887a      	ldrh	r2, [r7, #2]
 800bc9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	887a      	ldrh	r2, [r7, #2]
 800bcac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	887a      	ldrh	r2, [r7, #2]
 800bcb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	4b82      	ldr	r3, [pc, #520]	; (800bed4 <HAL_SPI_TransmitReceive+0x310>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	8879      	ldrh	r1, [r7, #2]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	6812      	ldr	r2, [r2, #0]
 800bcd4:	430b      	orrs	r3, r1
 800bcd6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f042 0201 	orr.w	r2, r2, #1
 800bce6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcf0:	d107      	bne.n	800bd02 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	2b0f      	cmp	r3, #15
 800bd08:	d970      	bls.n	800bdec <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd0a:	e068      	b.n	800bdde <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d11a      	bne.n	800bd50 <HAL_SPI_TransmitReceive+0x18c>
 800bd1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d017      	beq.n	800bd50 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6812      	ldr	r2, [r2, #0]
 800bd2a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd30:	1d1a      	adds	r2, r3, #4
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695a      	ldr	r2, [r3, #20]
 800bd56:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d01a      	beq.n	800bd96 <HAL_SPI_TransmitReceive+0x1d2>
 800bd60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d017      	beq.n	800bd96 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd70:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd94:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd96:	f7f6 fdd9 	bl	800294c <HAL_GetTick>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d803      	bhi.n	800bdae <HAL_SPI_TransmitReceive+0x1ea>
 800bda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdac:	d102      	bne.n	800bdb4 <HAL_SPI_TransmitReceive+0x1f0>
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d114      	bne.n	800bdde <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f000 f92d 	bl	800c014 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e115      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d193      	bne.n	800bd0c <HAL_SPI_TransmitReceive+0x148>
 800bde4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d190      	bne.n	800bd0c <HAL_SPI_TransmitReceive+0x148>
 800bdea:	e0e7      	b.n	800bfbc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	2b07      	cmp	r3, #7
 800bdf2:	f240 80dd 	bls.w	800bfb0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdf6:	e066      	b.n	800bec6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	f003 0302 	and.w	r3, r3, #2
 800be02:	2b02      	cmp	r3, #2
 800be04:	d119      	bne.n	800be3a <HAL_SPI_TransmitReceive+0x276>
 800be06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d016      	beq.n	800be3a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be10:	881a      	ldrh	r2, [r3, #0]
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be1a:	1c9a      	adds	r2, r3, #2
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be26:	b29b      	uxth	r3, r3
 800be28:	3b01      	subs	r3, #1
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be38:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b01      	cmp	r3, #1
 800be46:	d11a      	bne.n	800be7e <HAL_SPI_TransmitReceive+0x2ba>
 800be48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d017      	beq.n	800be7e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be52:	6a3a      	ldr	r2, [r7, #32]
 800be54:	8812      	ldrh	r2, [r2, #0]
 800be56:	b292      	uxth	r2, r2
 800be58:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be5e:	1c9a      	adds	r2, r3, #2
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be7e:	f7f6 fd65 	bl	800294c <HAL_GetTick>
 800be82:	4602      	mov	r2, r0
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d803      	bhi.n	800be96 <HAL_SPI_TransmitReceive+0x2d2>
 800be8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be94:	d102      	bne.n	800be9c <HAL_SPI_TransmitReceive+0x2d8>
 800be96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d114      	bne.n	800bec6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 f8b9 	bl	800c014 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e0a1      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d195      	bne.n	800bdf8 <HAL_SPI_TransmitReceive+0x234>
 800becc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d192      	bne.n	800bdf8 <HAL_SPI_TransmitReceive+0x234>
 800bed2:	e073      	b.n	800bfbc <HAL_SPI_TransmitReceive+0x3f8>
 800bed4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	f003 0302 	and.w	r3, r3, #2
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d11b      	bne.n	800bf1e <HAL_SPI_TransmitReceive+0x35a>
 800bee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d018      	beq.n	800bf1e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3320      	adds	r3, #32
 800bef6:	7812      	ldrb	r2, [r2, #0]
 800bef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d11d      	bne.n	800bf68 <HAL_SPI_TransmitReceive+0x3a4>
 800bf2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d01a      	beq.n	800bf68 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	b2d2      	uxtb	r2, r2
 800bf42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf66:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf68:	f7f6 fcf0 	bl	800294c <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d803      	bhi.n	800bf80 <HAL_SPI_TransmitReceive+0x3bc>
 800bf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf7e:	d102      	bne.n	800bf86 <HAL_SPI_TransmitReceive+0x3c2>
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d114      	bne.n	800bfb0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 f844 	bl	800c014 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e02c      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bfb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d190      	bne.n	800bed8 <HAL_SPI_TransmitReceive+0x314>
 800bfb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d18d      	bne.n	800bed8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2108      	movs	r1, #8
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 f8c4 	bl	800c154 <SPI_WaitOnFlagUntilTimeout>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfd8:	f043 0220 	orr.w	r2, r3, #32
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f000 f816 	bl	800c014 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e001      	b.n	800c00a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3730      	adds	r7, #48	; 0x30
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop

0800c014 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699a      	ldr	r2, [r3, #24]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f042 0208 	orr.w	r2, r2, #8
 800c032:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	699a      	ldr	r2, [r3, #24]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f042 0210 	orr.w	r2, r2, #16
 800c042:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 0201 	bic.w	r2, r2, #1
 800c052:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6919      	ldr	r1, [r3, #16]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b3c      	ldr	r3, [pc, #240]	; (800c150 <SPI_CloseTransfer+0x13c>)
 800c060:	400b      	ands	r3, r1
 800c062:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689a      	ldr	r2, [r3, #8]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c072:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b04      	cmp	r3, #4
 800c07e:	d014      	beq.n	800c0aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f003 0320 	and.w	r3, r3, #32
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00f      	beq.n	800c0aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	699a      	ldr	r2, [r3, #24]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f042 0220 	orr.w	r2, r2, #32
 800c0a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	d014      	beq.n	800c0e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00f      	beq.n	800c0e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0c6:	f043 0204 	orr.w	r2, r3, #4
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00f      	beq.n	800c10a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0f0:	f043 0201 	orr.w	r2, r3, #1
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	699a      	ldr	r2, [r3, #24]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c108:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00f      	beq.n	800c134 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c11a:	f043 0208 	orr.w	r2, r3, #8
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	699a      	ldr	r2, [r3, #24]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c132:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	fffffc90 	.word	0xfffffc90

0800c154 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	603b      	str	r3, [r7, #0]
 800c160:	4613      	mov	r3, r2
 800c162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c164:	e010      	b.n	800c188 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c166:	f7f6 fbf1 	bl	800294c <HAL_GetTick>
 800c16a:	4602      	mov	r2, r0
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	429a      	cmp	r2, r3
 800c174:	d803      	bhi.n	800c17e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c17c:	d102      	bne.n	800c184 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e00f      	b.n	800c1a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	695a      	ldr	r2, [r3, #20]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	4013      	ands	r3, r2
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	429a      	cmp	r2, r3
 800c196:	bf0c      	ite	eq
 800c198:	2301      	moveq	r3, #1
 800c19a:	2300      	movne	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d0df      	beq.n	800c166 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1bc:	095b      	lsrs	r3, r3, #5
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	3307      	adds	r3, #7
 800c1ce:	08db      	lsrs	r3, r3, #3
 800c1d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e049      	b.n	800c28c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7f6 f8bd 	bl	800238c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3304      	adds	r3, #4
 800c222:	4619      	mov	r1, r3
 800c224:	4610      	mov	r0, r2
 800c226:	f000 ff2d 	bl	800d084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <HAL_TIM_OC_Start_IT+0x28>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	bf14      	ite	ne
 800c2b4:	2301      	movne	r3, #1
 800c2b6:	2300      	moveq	r3, #0
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	e03c      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d109      	bne.n	800c2d6 <HAL_TIM_OC_Start_IT+0x42>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	bf14      	ite	ne
 800c2ce:	2301      	movne	r3, #1
 800c2d0:	2300      	moveq	r3, #0
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	e02f      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d109      	bne.n	800c2f0 <HAL_TIM_OC_Start_IT+0x5c>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
 800c2ea:	2300      	moveq	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	e022      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b0c      	cmp	r3, #12
 800c2f4:	d109      	bne.n	800c30a <HAL_TIM_OC_Start_IT+0x76>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	bf14      	ite	ne
 800c302:	2301      	movne	r3, #1
 800c304:	2300      	moveq	r3, #0
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e015      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b10      	cmp	r3, #16
 800c30e:	d109      	bne.n	800c324 <HAL_TIM_OC_Start_IT+0x90>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b01      	cmp	r3, #1
 800c31a:	bf14      	ite	ne
 800c31c:	2301      	movne	r3, #1
 800c31e:	2300      	moveq	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e008      	b.n	800c336 <HAL_TIM_OC_Start_IT+0xa2>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e0ec      	b.n	800c518 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <HAL_TIM_OC_Start_IT+0xba>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2202      	movs	r2, #2
 800c348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c34c:	e023      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b04      	cmp	r3, #4
 800c352:	d104      	bne.n	800c35e <HAL_TIM_OC_Start_IT+0xca>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2202      	movs	r2, #2
 800c358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c35c:	e01b      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b08      	cmp	r3, #8
 800c362:	d104      	bne.n	800c36e <HAL_TIM_OC_Start_IT+0xda>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c36c:	e013      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b0c      	cmp	r3, #12
 800c372:	d104      	bne.n	800c37e <HAL_TIM_OC_Start_IT+0xea>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c37c:	e00b      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b10      	cmp	r3, #16
 800c382:	d104      	bne.n	800c38e <HAL_TIM_OC_Start_IT+0xfa>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2202      	movs	r2, #2
 800c388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c38c:	e003      	b.n	800c396 <HAL_TIM_OC_Start_IT+0x102>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2202      	movs	r2, #2
 800c392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b0c      	cmp	r3, #12
 800c39a:	d841      	bhi.n	800c420 <HAL_TIM_OC_Start_IT+0x18c>
 800c39c:	a201      	add	r2, pc, #4	; (adr r2, 800c3a4 <HAL_TIM_OC_Start_IT+0x110>)
 800c39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a2:	bf00      	nop
 800c3a4:	0800c3d9 	.word	0x0800c3d9
 800c3a8:	0800c421 	.word	0x0800c421
 800c3ac:	0800c421 	.word	0x0800c421
 800c3b0:	0800c421 	.word	0x0800c421
 800c3b4:	0800c3eb 	.word	0x0800c3eb
 800c3b8:	0800c421 	.word	0x0800c421
 800c3bc:	0800c421 	.word	0x0800c421
 800c3c0:	0800c421 	.word	0x0800c421
 800c3c4:	0800c3fd 	.word	0x0800c3fd
 800c3c8:	0800c421 	.word	0x0800c421
 800c3cc:	0800c421 	.word	0x0800c421
 800c3d0:	0800c421 	.word	0x0800c421
 800c3d4:	0800c40f 	.word	0x0800c40f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0202 	orr.w	r2, r2, #2
 800c3e6:	60da      	str	r2, [r3, #12]
      break;
 800c3e8:	e01d      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f042 0204 	orr.w	r2, r2, #4
 800c3f8:	60da      	str	r2, [r3, #12]
      break;
 800c3fa:	e014      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68da      	ldr	r2, [r3, #12]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0208 	orr.w	r2, r2, #8
 800c40a:	60da      	str	r2, [r3, #12]
      break;
 800c40c:	e00b      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68da      	ldr	r2, [r3, #12]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f042 0210 	orr.w	r2, r2, #16
 800c41c:	60da      	str	r2, [r3, #12]
      break;
 800c41e:	e002      	b.n	800c426 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
      break;
 800c424:	bf00      	nop
  }

  if (status == HAL_OK)
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d174      	bne.n	800c516 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2201      	movs	r2, #1
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	4618      	mov	r0, r3
 800c436:	f001 fa33 	bl	800d8a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a38      	ldr	r2, [pc, #224]	; (800c520 <HAL_TIM_OC_Start_IT+0x28c>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d013      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a36      	ldr	r2, [pc, #216]	; (800c524 <HAL_TIM_OC_Start_IT+0x290>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d00e      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a35      	ldr	r2, [pc, #212]	; (800c528 <HAL_TIM_OC_Start_IT+0x294>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d009      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a33      	ldr	r2, [pc, #204]	; (800c52c <HAL_TIM_OC_Start_IT+0x298>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d004      	beq.n	800c46c <HAL_TIM_OC_Start_IT+0x1d8>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a32      	ldr	r2, [pc, #200]	; (800c530 <HAL_TIM_OC_Start_IT+0x29c>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d101      	bne.n	800c470 <HAL_TIM_OC_Start_IT+0x1dc>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e000      	b.n	800c472 <HAL_TIM_OC_Start_IT+0x1de>
 800c470:	2300      	movs	r3, #0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d007      	beq.n	800c486 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a25      	ldr	r2, [pc, #148]	; (800c520 <HAL_TIM_OC_Start_IT+0x28c>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d022      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c498:	d01d      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a25      	ldr	r2, [pc, #148]	; (800c534 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d018      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a23      	ldr	r2, [pc, #140]	; (800c538 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d013      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a22      	ldr	r2, [pc, #136]	; (800c53c <HAL_TIM_OC_Start_IT+0x2a8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00e      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a19      	ldr	r2, [pc, #100]	; (800c524 <HAL_TIM_OC_Start_IT+0x290>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d009      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1e      	ldr	r2, [pc, #120]	; (800c540 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d004      	beq.n	800c4d6 <HAL_TIM_OC_Start_IT+0x242>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a15      	ldr	r2, [pc, #84]	; (800c528 <HAL_TIM_OC_Start_IT+0x294>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d115      	bne.n	800c502 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689a      	ldr	r2, [r3, #8]
 800c4dc:	4b19      	ldr	r3, [pc, #100]	; (800c544 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c4de:	4013      	ands	r3, r2
 800c4e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b06      	cmp	r3, #6
 800c4e6:	d015      	beq.n	800c514 <HAL_TIM_OC_Start_IT+0x280>
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ee:	d011      	beq.n	800c514 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f042 0201 	orr.w	r2, r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c500:	e008      	b.n	800c514 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f042 0201 	orr.w	r2, r2, #1
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e000      	b.n	800c516 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c514:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c516:	7bfb      	ldrb	r3, [r7, #15]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	40010000 	.word	0x40010000
 800c524:	40010400 	.word	0x40010400
 800c528:	40014000 	.word	0x40014000
 800c52c:	40014400 	.word	0x40014400
 800c530:	40014800 	.word	0x40014800
 800c534:	40000400 	.word	0x40000400
 800c538:	40000800 	.word	0x40000800
 800c53c:	40000c00 	.word	0x40000c00
 800c540:	40001800 	.word	0x40001800
 800c544:	00010007 	.word	0x00010007

0800c548 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b0c      	cmp	r3, #12
 800c55a:	d841      	bhi.n	800c5e0 <HAL_TIM_OC_Stop_IT+0x98>
 800c55c:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c562:	bf00      	nop
 800c564:	0800c599 	.word	0x0800c599
 800c568:	0800c5e1 	.word	0x0800c5e1
 800c56c:	0800c5e1 	.word	0x0800c5e1
 800c570:	0800c5e1 	.word	0x0800c5e1
 800c574:	0800c5ab 	.word	0x0800c5ab
 800c578:	0800c5e1 	.word	0x0800c5e1
 800c57c:	0800c5e1 	.word	0x0800c5e1
 800c580:	0800c5e1 	.word	0x0800c5e1
 800c584:	0800c5bd 	.word	0x0800c5bd
 800c588:	0800c5e1 	.word	0x0800c5e1
 800c58c:	0800c5e1 	.word	0x0800c5e1
 800c590:	0800c5e1 	.word	0x0800c5e1
 800c594:	0800c5cf 	.word	0x0800c5cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68da      	ldr	r2, [r3, #12]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0202 	bic.w	r2, r2, #2
 800c5a6:	60da      	str	r2, [r3, #12]
      break;
 800c5a8:	e01d      	b.n	800c5e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f022 0204 	bic.w	r2, r2, #4
 800c5b8:	60da      	str	r2, [r3, #12]
      break;
 800c5ba:	e014      	b.n	800c5e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f022 0208 	bic.w	r2, r2, #8
 800c5ca:	60da      	str	r2, [r3, #12]
      break;
 800c5cc:	e00b      	b.n	800c5e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f022 0210 	bic.w	r2, r2, #16
 800c5dc:	60da      	str	r2, [r3, #12]
      break;
 800c5de:	e002      	b.n	800c5e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5e6:	7bfb      	ldrb	r3, [r7, #15]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f040 8081 	bne.w	800c6f0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 f952 	bl	800d8a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a3e      	ldr	r2, [pc, #248]	; (800c6fc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d013      	beq.n	800c62e <HAL_TIM_OC_Stop_IT+0xe6>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a3d      	ldr	r2, [pc, #244]	; (800c700 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d00e      	beq.n	800c62e <HAL_TIM_OC_Stop_IT+0xe6>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a3b      	ldr	r2, [pc, #236]	; (800c704 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d009      	beq.n	800c62e <HAL_TIM_OC_Stop_IT+0xe6>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a3a      	ldr	r2, [pc, #232]	; (800c708 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d004      	beq.n	800c62e <HAL_TIM_OC_Stop_IT+0xe6>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a38      	ldr	r2, [pc, #224]	; (800c70c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d101      	bne.n	800c632 <HAL_TIM_OC_Stop_IT+0xea>
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <HAL_TIM_OC_Stop_IT+0xec>
 800c632:	2300      	movs	r3, #0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d017      	beq.n	800c668 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6a1a      	ldr	r2, [r3, #32]
 800c63e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c642:	4013      	ands	r3, r2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10f      	bne.n	800c668 <HAL_TIM_OC_Stop_IT+0x120>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6a1a      	ldr	r2, [r3, #32]
 800c64e:	f240 4344 	movw	r3, #1092	; 0x444
 800c652:	4013      	ands	r3, r2
 800c654:	2b00      	cmp	r3, #0
 800c656:	d107      	bne.n	800c668 <HAL_TIM_OC_Stop_IT+0x120>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c666:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6a1a      	ldr	r2, [r3, #32]
 800c66e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c672:	4013      	ands	r3, r2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10f      	bne.n	800c698 <HAL_TIM_OC_Stop_IT+0x150>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6a1a      	ldr	r2, [r3, #32]
 800c67e:	f240 4344 	movw	r3, #1092	; 0x444
 800c682:	4013      	ands	r3, r2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d107      	bne.n	800c698 <HAL_TIM_OC_Stop_IT+0x150>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f022 0201 	bic.w	r2, r2, #1
 800c696:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d104      	bne.n	800c6a8 <HAL_TIM_OC_Stop_IT+0x160>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6a6:	e023      	b.n	800c6f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d104      	bne.n	800c6b8 <HAL_TIM_OC_Stop_IT+0x170>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6b6:	e01b      	b.n	800c6f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2b08      	cmp	r3, #8
 800c6bc:	d104      	bne.n	800c6c8 <HAL_TIM_OC_Stop_IT+0x180>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6c6:	e013      	b.n	800c6f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b0c      	cmp	r3, #12
 800c6cc:	d104      	bne.n	800c6d8 <HAL_TIM_OC_Stop_IT+0x190>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6d6:	e00b      	b.n	800c6f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b10      	cmp	r3, #16
 800c6dc:	d104      	bne.n	800c6e8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6e6:	e003      	b.n	800c6f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	40010000 	.word	0x40010000
 800c700:	40010400 	.word	0x40010400
 800c704:	40014000 	.word	0x40014000
 800c708:	40014400 	.word	0x40014400
 800c70c:	40014800 	.word	0x40014800

0800c710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e049      	b.n	800c7b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d106      	bne.n	800c73c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7f5 fde8 	bl	800230c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2202      	movs	r2, #2
 800c740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f000 fc98 	bl	800d084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d109      	bne.n	800c7e4 <HAL_TIM_PWM_Start+0x24>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	bf14      	ite	ne
 800c7dc:	2301      	movne	r3, #1
 800c7de:	2300      	moveq	r3, #0
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	e03c      	b.n	800c85e <HAL_TIM_PWM_Start+0x9e>
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b04      	cmp	r3, #4
 800c7e8:	d109      	bne.n	800c7fe <HAL_TIM_PWM_Start+0x3e>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	bf14      	ite	ne
 800c7f6:	2301      	movne	r3, #1
 800c7f8:	2300      	moveq	r3, #0
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	e02f      	b.n	800c85e <HAL_TIM_PWM_Start+0x9e>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b08      	cmp	r3, #8
 800c802:	d109      	bne.n	800c818 <HAL_TIM_PWM_Start+0x58>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	bf14      	ite	ne
 800c810:	2301      	movne	r3, #1
 800c812:	2300      	moveq	r3, #0
 800c814:	b2db      	uxtb	r3, r3
 800c816:	e022      	b.n	800c85e <HAL_TIM_PWM_Start+0x9e>
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	2b0c      	cmp	r3, #12
 800c81c:	d109      	bne.n	800c832 <HAL_TIM_PWM_Start+0x72>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b01      	cmp	r3, #1
 800c828:	bf14      	ite	ne
 800c82a:	2301      	movne	r3, #1
 800c82c:	2300      	moveq	r3, #0
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	e015      	b.n	800c85e <HAL_TIM_PWM_Start+0x9e>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b10      	cmp	r3, #16
 800c836:	d109      	bne.n	800c84c <HAL_TIM_PWM_Start+0x8c>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b01      	cmp	r3, #1
 800c842:	bf14      	ite	ne
 800c844:	2301      	movne	r3, #1
 800c846:	2300      	moveq	r3, #0
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	e008      	b.n	800c85e <HAL_TIM_PWM_Start+0x9e>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b01      	cmp	r3, #1
 800c856:	bf14      	ite	ne
 800c858:	2301      	movne	r3, #1
 800c85a:	2300      	moveq	r3, #0
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	e0a1      	b.n	800c9aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d104      	bne.n	800c876 <HAL_TIM_PWM_Start+0xb6>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2202      	movs	r2, #2
 800c870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c874:	e023      	b.n	800c8be <HAL_TIM_PWM_Start+0xfe>
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2b04      	cmp	r3, #4
 800c87a:	d104      	bne.n	800c886 <HAL_TIM_PWM_Start+0xc6>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2202      	movs	r2, #2
 800c880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c884:	e01b      	b.n	800c8be <HAL_TIM_PWM_Start+0xfe>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b08      	cmp	r3, #8
 800c88a:	d104      	bne.n	800c896 <HAL_TIM_PWM_Start+0xd6>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2202      	movs	r2, #2
 800c890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c894:	e013      	b.n	800c8be <HAL_TIM_PWM_Start+0xfe>
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	2b0c      	cmp	r3, #12
 800c89a:	d104      	bne.n	800c8a6 <HAL_TIM_PWM_Start+0xe6>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2202      	movs	r2, #2
 800c8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8a4:	e00b      	b.n	800c8be <HAL_TIM_PWM_Start+0xfe>
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b10      	cmp	r3, #16
 800c8aa:	d104      	bne.n	800c8b6 <HAL_TIM_PWM_Start+0xf6>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8b4:	e003      	b.n	800c8be <HAL_TIM_PWM_Start+0xfe>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2202      	movs	r2, #2
 800c8ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 ffea 	bl	800d8a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a38      	ldr	r2, [pc, #224]	; (800c9b4 <HAL_TIM_PWM_Start+0x1f4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d013      	beq.n	800c8fe <HAL_TIM_PWM_Start+0x13e>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a37      	ldr	r2, [pc, #220]	; (800c9b8 <HAL_TIM_PWM_Start+0x1f8>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00e      	beq.n	800c8fe <HAL_TIM_PWM_Start+0x13e>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a35      	ldr	r2, [pc, #212]	; (800c9bc <HAL_TIM_PWM_Start+0x1fc>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d009      	beq.n	800c8fe <HAL_TIM_PWM_Start+0x13e>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a34      	ldr	r2, [pc, #208]	; (800c9c0 <HAL_TIM_PWM_Start+0x200>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d004      	beq.n	800c8fe <HAL_TIM_PWM_Start+0x13e>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a32      	ldr	r2, [pc, #200]	; (800c9c4 <HAL_TIM_PWM_Start+0x204>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d101      	bne.n	800c902 <HAL_TIM_PWM_Start+0x142>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e000      	b.n	800c904 <HAL_TIM_PWM_Start+0x144>
 800c902:	2300      	movs	r3, #0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d007      	beq.n	800c918 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c916:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a25      	ldr	r2, [pc, #148]	; (800c9b4 <HAL_TIM_PWM_Start+0x1f4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d022      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c92a:	d01d      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a25      	ldr	r2, [pc, #148]	; (800c9c8 <HAL_TIM_PWM_Start+0x208>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d018      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a24      	ldr	r2, [pc, #144]	; (800c9cc <HAL_TIM_PWM_Start+0x20c>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d013      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a22      	ldr	r2, [pc, #136]	; (800c9d0 <HAL_TIM_PWM_Start+0x210>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d00e      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a1a      	ldr	r2, [pc, #104]	; (800c9b8 <HAL_TIM_PWM_Start+0x1f8>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d009      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a1e      	ldr	r2, [pc, #120]	; (800c9d4 <HAL_TIM_PWM_Start+0x214>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d004      	beq.n	800c968 <HAL_TIM_PWM_Start+0x1a8>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a16      	ldr	r2, [pc, #88]	; (800c9bc <HAL_TIM_PWM_Start+0x1fc>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d115      	bne.n	800c994 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <HAL_TIM_PWM_Start+0x218>)
 800c970:	4013      	ands	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b06      	cmp	r3, #6
 800c978:	d015      	beq.n	800c9a6 <HAL_TIM_PWM_Start+0x1e6>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c980:	d011      	beq.n	800c9a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f042 0201 	orr.w	r2, r2, #1
 800c990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c992:	e008      	b.n	800c9a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f042 0201 	orr.w	r2, r2, #1
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	e000      	b.n	800c9a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	40010000 	.word	0x40010000
 800c9b8:	40010400 	.word	0x40010400
 800c9bc:	40014000 	.word	0x40014000
 800c9c0:	40014400 	.word	0x40014400
 800c9c4:	40014800 	.word	0x40014800
 800c9c8:	40000400 	.word	0x40000400
 800c9cc:	40000800 	.word	0x40000800
 800c9d0:	40000c00 	.word	0x40000c00
 800c9d4:	40001800 	.word	0x40001800
 800c9d8:	00010007 	.word	0x00010007

0800c9dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d122      	bne.n	800ca38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d11b      	bne.n	800ca38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f06f 0202 	mvn.w	r2, #2
 800ca08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d003      	beq.n	800ca26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fb12 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800ca24:	e005      	b.n	800ca32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7f4 f916 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fb15 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	f003 0304 	and.w	r3, r3, #4
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	d122      	bne.n	800ca8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d11b      	bne.n	800ca8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f06f 0204 	mvn.w	r2, #4
 800ca5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2202      	movs	r2, #2
 800ca62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fae8 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800ca78:	e005      	b.n	800ca86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7f4 f8ec 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 faeb 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	f003 0308 	and.w	r3, r3, #8
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d122      	bne.n	800cae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	d11b      	bne.n	800cae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f06f 0208 	mvn.w	r2, #8
 800cab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2204      	movs	r2, #4
 800cab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	f003 0303 	and.w	r3, r3, #3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fabe 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800cacc:	e005      	b.n	800cada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7f4 f8c2 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fac1 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	f003 0310 	and.w	r3, r3, #16
 800caea:	2b10      	cmp	r3, #16
 800caec:	d122      	bne.n	800cb34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f003 0310 	and.w	r3, r3, #16
 800caf8:	2b10      	cmp	r3, #16
 800cafa:	d11b      	bne.n	800cb34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f06f 0210 	mvn.w	r2, #16
 800cb04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa94 	bl	800d048 <HAL_TIM_IC_CaptureCallback>
 800cb20:	e005      	b.n	800cb2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7f4 f898 	bl	8000c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fa97 	bl	800d05c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d10e      	bne.n	800cb60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d107      	bne.n	800cb60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f06f 0201 	mvn.w	r2, #1
 800cb58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fa6a 	bl	800d034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb6a:	2b80      	cmp	r3, #128	; 0x80
 800cb6c:	d10e      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb78:	2b80      	cmp	r3, #128	; 0x80
 800cb7a:	d107      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 ffc6 	bl	800db18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb9a:	d10e      	bne.n	800cbba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cba6:	2b80      	cmp	r3, #128	; 0x80
 800cba8:	d107      	bne.n	800cbba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cbb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 ffb9 	bl	800db2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d10e      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd2:	2b40      	cmp	r3, #64	; 0x40
 800cbd4:	d107      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fa45 	bl	800d070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	f003 0320 	and.w	r3, r3, #32
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d10e      	bne.n	800cc12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f003 0320 	and.w	r3, r3, #32
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d107      	bne.n	800cc12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f06f 0220 	mvn.w	r2, #32
 800cc0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 ff79 	bl	800db04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc12:	bf00      	nop
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d101      	bne.n	800cc3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cc36:	2302      	movs	r3, #2
 800cc38:	e0ff      	b.n	800ce3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b14      	cmp	r3, #20
 800cc46:	f200 80f0 	bhi.w	800ce2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cc4a:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc50:	0800cca5 	.word	0x0800cca5
 800cc54:	0800ce2b 	.word	0x0800ce2b
 800cc58:	0800ce2b 	.word	0x0800ce2b
 800cc5c:	0800ce2b 	.word	0x0800ce2b
 800cc60:	0800cce5 	.word	0x0800cce5
 800cc64:	0800ce2b 	.word	0x0800ce2b
 800cc68:	0800ce2b 	.word	0x0800ce2b
 800cc6c:	0800ce2b 	.word	0x0800ce2b
 800cc70:	0800cd27 	.word	0x0800cd27
 800cc74:	0800ce2b 	.word	0x0800ce2b
 800cc78:	0800ce2b 	.word	0x0800ce2b
 800cc7c:	0800ce2b 	.word	0x0800ce2b
 800cc80:	0800cd67 	.word	0x0800cd67
 800cc84:	0800ce2b 	.word	0x0800ce2b
 800cc88:	0800ce2b 	.word	0x0800ce2b
 800cc8c:	0800ce2b 	.word	0x0800ce2b
 800cc90:	0800cda9 	.word	0x0800cda9
 800cc94:	0800ce2b 	.word	0x0800ce2b
 800cc98:	0800ce2b 	.word	0x0800ce2b
 800cc9c:	0800ce2b 	.word	0x0800ce2b
 800cca0:	0800cde9 	.word	0x0800cde9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68b9      	ldr	r1, [r7, #8]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fa84 	bl	800d1b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699a      	ldr	r2, [r3, #24]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f042 0208 	orr.w	r2, r2, #8
 800ccbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	699a      	ldr	r2, [r3, #24]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f022 0204 	bic.w	r2, r2, #4
 800ccce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6999      	ldr	r1, [r3, #24]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	691a      	ldr	r2, [r3, #16]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	619a      	str	r2, [r3, #24]
      break;
 800cce2:	e0a5      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 faf4 	bl	800d2d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	699a      	ldr	r2, [r3, #24]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	699a      	ldr	r2, [r3, #24]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6999      	ldr	r1, [r3, #24]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	021a      	lsls	r2, r3, #8
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	619a      	str	r2, [r3, #24]
      break;
 800cd24:	e084      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 fb5d 	bl	800d3ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	69da      	ldr	r2, [r3, #28]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f042 0208 	orr.w	r2, r2, #8
 800cd40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	69da      	ldr	r2, [r3, #28]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f022 0204 	bic.w	r2, r2, #4
 800cd50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	69d9      	ldr	r1, [r3, #28]
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	691a      	ldr	r2, [r3, #16]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	430a      	orrs	r2, r1
 800cd62:	61da      	str	r2, [r3, #28]
      break;
 800cd64:	e064      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fbc5 	bl	800d4fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	69da      	ldr	r2, [r3, #28]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69da      	ldr	r2, [r3, #28]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69d9      	ldr	r1, [r3, #28]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	021a      	lsls	r2, r3, #8
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	61da      	str	r2, [r3, #28]
      break;
 800cda6:	e043      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68b9      	ldr	r1, [r7, #8]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 fc0e 	bl	800d5d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0208 	orr.w	r2, r2, #8
 800cdc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 0204 	bic.w	r2, r2, #4
 800cdd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	691a      	ldr	r2, [r3, #16]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cde6:	e023      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fc52 	bl	800d698 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	021a      	lsls	r2, r3, #8
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ce28:	e002      	b.n	800ce30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop

0800ce44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d101      	bne.n	800ce60 <HAL_TIM_ConfigClockSource+0x1c>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e0dc      	b.n	800d01a <HAL_TIM_ConfigClockSource+0x1d6>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	4b6a      	ldr	r3, [pc, #424]	; (800d024 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a64      	ldr	r2, [pc, #400]	; (800d028 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	f000 80a9 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800ce9c:	4a62      	ldr	r2, [pc, #392]	; (800d028 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	f200 80ae 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cea4:	4a61      	ldr	r2, [pc, #388]	; (800d02c <HAL_TIM_ConfigClockSource+0x1e8>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	f000 80a1 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800ceac:	4a5f      	ldr	r2, [pc, #380]	; (800d02c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	f200 80a6 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800ceb4:	4a5e      	ldr	r2, [pc, #376]	; (800d030 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	f000 8099 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cebc:	4a5c      	ldr	r2, [pc, #368]	; (800d030 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	f200 809e 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cec4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cec8:	f000 8091 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cecc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ced0:	f200 8096 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800ced4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ced8:	f000 8089 	beq.w	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cedc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cee0:	f200 808e 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cee8:	d03e      	beq.n	800cf68 <HAL_TIM_ConfigClockSource+0x124>
 800ceea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceee:	f200 8087 	bhi.w	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cef6:	f000 8086 	beq.w	800d006 <HAL_TIM_ConfigClockSource+0x1c2>
 800cefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cefe:	d87f      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf00:	2b70      	cmp	r3, #112	; 0x70
 800cf02:	d01a      	beq.n	800cf3a <HAL_TIM_ConfigClockSource+0xf6>
 800cf04:	2b70      	cmp	r3, #112	; 0x70
 800cf06:	d87b      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf08:	2b60      	cmp	r3, #96	; 0x60
 800cf0a:	d050      	beq.n	800cfae <HAL_TIM_ConfigClockSource+0x16a>
 800cf0c:	2b60      	cmp	r3, #96	; 0x60
 800cf0e:	d877      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf10:	2b50      	cmp	r3, #80	; 0x50
 800cf12:	d03c      	beq.n	800cf8e <HAL_TIM_ConfigClockSource+0x14a>
 800cf14:	2b50      	cmp	r3, #80	; 0x50
 800cf16:	d873      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf18:	2b40      	cmp	r3, #64	; 0x40
 800cf1a:	d058      	beq.n	800cfce <HAL_TIM_ConfigClockSource+0x18a>
 800cf1c:	2b40      	cmp	r3, #64	; 0x40
 800cf1e:	d86f      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf20:	2b30      	cmp	r3, #48	; 0x30
 800cf22:	d064      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf24:	2b30      	cmp	r3, #48	; 0x30
 800cf26:	d86b      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf28:	2b20      	cmp	r3, #32
 800cf2a:	d060      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d867      	bhi.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d05c      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf34:	2b10      	cmp	r3, #16
 800cf36:	d05a      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x1aa>
 800cf38:	e062      	b.n	800d000 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6818      	ldr	r0, [r3, #0]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	6899      	ldr	r1, [r3, #8]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	685a      	ldr	r2, [r3, #4]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	f000 fc89 	bl	800d860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	609a      	str	r2, [r3, #8]
      break;
 800cf66:	e04f      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	6899      	ldr	r1, [r3, #8]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	f000 fc72 	bl	800d860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689a      	ldr	r2, [r3, #8]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf8a:	609a      	str	r2, [r3, #8]
      break;
 800cf8c:	e03c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6818      	ldr	r0, [r3, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	6859      	ldr	r1, [r3, #4]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f000 fbe2 	bl	800d764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2150      	movs	r1, #80	; 0x50
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 fc3c 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cfac:	e02c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6818      	ldr	r0, [r3, #0]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	6859      	ldr	r1, [r3, #4]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f000 fc01 	bl	800d7c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2160      	movs	r1, #96	; 0x60
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 fc2c 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cfcc:	e01c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	6859      	ldr	r1, [r3, #4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f000 fbc2 	bl	800d764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2140      	movs	r1, #64	; 0x40
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fc1c 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cfec:	e00c      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4619      	mov	r1, r3
 800cff8:	4610      	mov	r0, r2
 800cffa:	f000 fc13 	bl	800d824 <TIM_ITRx_SetConfig>
      break;
 800cffe:	e003      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
      break;
 800d004:	e000      	b.n	800d008 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d018:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	ffceff88 	.word	0xffceff88
 800d028:	00100040 	.word	0x00100040
 800d02c:	00100030 	.word	0x00100030
 800d030:	00100020 	.word	0x00100020

0800d034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a40      	ldr	r2, [pc, #256]	; (800d198 <TIM_Base_SetConfig+0x114>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d013      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0a2:	d00f      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a3d      	ldr	r2, [pc, #244]	; (800d19c <TIM_Base_SetConfig+0x118>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d00b      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a3c      	ldr	r2, [pc, #240]	; (800d1a0 <TIM_Base_SetConfig+0x11c>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d007      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a3b      	ldr	r2, [pc, #236]	; (800d1a4 <TIM_Base_SetConfig+0x120>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d003      	beq.n	800d0c4 <TIM_Base_SetConfig+0x40>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a3a      	ldr	r2, [pc, #232]	; (800d1a8 <TIM_Base_SetConfig+0x124>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d108      	bne.n	800d0d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a2f      	ldr	r2, [pc, #188]	; (800d198 <TIM_Base_SetConfig+0x114>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d01f      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e4:	d01b      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a2c      	ldr	r2, [pc, #176]	; (800d19c <TIM_Base_SetConfig+0x118>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d017      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a2b      	ldr	r2, [pc, #172]	; (800d1a0 <TIM_Base_SetConfig+0x11c>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d013      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a2a      	ldr	r2, [pc, #168]	; (800d1a4 <TIM_Base_SetConfig+0x120>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d00f      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a29      	ldr	r2, [pc, #164]	; (800d1a8 <TIM_Base_SetConfig+0x124>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d00b      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a28      	ldr	r2, [pc, #160]	; (800d1ac <TIM_Base_SetConfig+0x128>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d007      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a27      	ldr	r2, [pc, #156]	; (800d1b0 <TIM_Base_SetConfig+0x12c>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d003      	beq.n	800d11e <TIM_Base_SetConfig+0x9a>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a26      	ldr	r2, [pc, #152]	; (800d1b4 <TIM_Base_SetConfig+0x130>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d108      	bne.n	800d130 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	689a      	ldr	r2, [r3, #8]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a10      	ldr	r2, [pc, #64]	; (800d198 <TIM_Base_SetConfig+0x114>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d00f      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a12      	ldr	r2, [pc, #72]	; (800d1a8 <TIM_Base_SetConfig+0x124>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d00b      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <TIM_Base_SetConfig+0x128>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d007      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a10      	ldr	r2, [pc, #64]	; (800d1b0 <TIM_Base_SetConfig+0x12c>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d003      	beq.n	800d17c <TIM_Base_SetConfig+0xf8>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a0f      	ldr	r2, [pc, #60]	; (800d1b4 <TIM_Base_SetConfig+0x130>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d103      	bne.n	800d184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	691a      	ldr	r2, [r3, #16]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	615a      	str	r2, [r3, #20]
}
 800d18a:	bf00      	nop
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	40010000 	.word	0x40010000
 800d19c:	40000400 	.word	0x40000400
 800d1a0:	40000800 	.word	0x40000800
 800d1a4:	40000c00 	.word	0x40000c00
 800d1a8:	40010400 	.word	0x40010400
 800d1ac:	40014000 	.word	0x40014000
 800d1b0:	40014400 	.word	0x40014400
 800d1b4:	40014800 	.word	0x40014800

0800d1b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	f023 0201 	bic.w	r2, r3, #1
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	4b37      	ldr	r3, [pc, #220]	; (800d2c0 <TIM_OC1_SetConfig+0x108>)
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f023 0302 	bic.w	r3, r3, #2
 800d200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4313      	orrs	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a2d      	ldr	r2, [pc, #180]	; (800d2c4 <TIM_OC1_SetConfig+0x10c>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d00f      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a2c      	ldr	r2, [pc, #176]	; (800d2c8 <TIM_OC1_SetConfig+0x110>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d00b      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a2b      	ldr	r2, [pc, #172]	; (800d2cc <TIM_OC1_SetConfig+0x114>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d007      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a2a      	ldr	r2, [pc, #168]	; (800d2d0 <TIM_OC1_SetConfig+0x118>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d003      	beq.n	800d234 <TIM_OC1_SetConfig+0x7c>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a29      	ldr	r2, [pc, #164]	; (800d2d4 <TIM_OC1_SetConfig+0x11c>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d10c      	bne.n	800d24e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f023 0308 	bic.w	r3, r3, #8
 800d23a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	697a      	ldr	r2, [r7, #20]
 800d242:	4313      	orrs	r3, r2
 800d244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f023 0304 	bic.w	r3, r3, #4
 800d24c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a1c      	ldr	r2, [pc, #112]	; (800d2c4 <TIM_OC1_SetConfig+0x10c>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d00f      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a1b      	ldr	r2, [pc, #108]	; (800d2c8 <TIM_OC1_SetConfig+0x110>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d00b      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a1a      	ldr	r2, [pc, #104]	; (800d2cc <TIM_OC1_SetConfig+0x114>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d007      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a19      	ldr	r2, [pc, #100]	; (800d2d0 <TIM_OC1_SetConfig+0x118>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d003      	beq.n	800d276 <TIM_OC1_SetConfig+0xbe>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a18      	ldr	r2, [pc, #96]	; (800d2d4 <TIM_OC1_SetConfig+0x11c>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d111      	bne.n	800d29a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d27c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	4313      	orrs	r3, r2
 800d298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	621a      	str	r2, [r3, #32]
}
 800d2b4:	bf00      	nop
 800d2b6:	371c      	adds	r7, #28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	fffeff8f 	.word	0xfffeff8f
 800d2c4:	40010000 	.word	0x40010000
 800d2c8:	40010400 	.word	0x40010400
 800d2cc:	40014000 	.word	0x40014000
 800d2d0:	40014400 	.word	0x40014400
 800d2d4:	40014800 	.word	0x40014800

0800d2d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	f023 0210 	bic.w	r2, r3, #16
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a1b      	ldr	r3, [r3, #32]
 800d2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	4b34      	ldr	r3, [pc, #208]	; (800d3d4 <TIM_OC2_SetConfig+0xfc>)
 800d304:	4013      	ands	r3, r2
 800d306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	021b      	lsls	r3, r3, #8
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f023 0320 	bic.w	r3, r3, #32
 800d322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	011b      	lsls	r3, r3, #4
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a29      	ldr	r2, [pc, #164]	; (800d3d8 <TIM_OC2_SetConfig+0x100>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d003      	beq.n	800d340 <TIM_OC2_SetConfig+0x68>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a28      	ldr	r2, [pc, #160]	; (800d3dc <TIM_OC2_SetConfig+0x104>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d10d      	bne.n	800d35c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	011b      	lsls	r3, r3, #4
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	4313      	orrs	r3, r2
 800d352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d35a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a1e      	ldr	r2, [pc, #120]	; (800d3d8 <TIM_OC2_SetConfig+0x100>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d00f      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a1d      	ldr	r2, [pc, #116]	; (800d3dc <TIM_OC2_SetConfig+0x104>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00b      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a1c      	ldr	r2, [pc, #112]	; (800d3e0 <TIM_OC2_SetConfig+0x108>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d007      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a1b      	ldr	r2, [pc, #108]	; (800d3e4 <TIM_OC2_SetConfig+0x10c>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_OC2_SetConfig+0xac>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a1a      	ldr	r2, [pc, #104]	; (800d3e8 <TIM_OC2_SetConfig+0x110>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d113      	bne.n	800d3ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d38a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	699b      	ldr	r3, [r3, #24]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	621a      	str	r2, [r3, #32]
}
 800d3c6:	bf00      	nop
 800d3c8:	371c      	adds	r7, #28
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	feff8fff 	.word	0xfeff8fff
 800d3d8:	40010000 	.word	0x40010000
 800d3dc:	40010400 	.word	0x40010400
 800d3e0:	40014000 	.word	0x40014000
 800d3e4:	40014400 	.word	0x40014400
 800d3e8:	40014800 	.word	0x40014800

0800d3ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	69db      	ldr	r3, [r3, #28]
 800d412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4b33      	ldr	r3, [pc, #204]	; (800d4e4 <TIM_OC3_SetConfig+0xf8>)
 800d418:	4013      	ands	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f023 0303 	bic.w	r3, r3, #3
 800d422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	021b      	lsls	r3, r3, #8
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	4313      	orrs	r3, r2
 800d440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a28      	ldr	r2, [pc, #160]	; (800d4e8 <TIM_OC3_SetConfig+0xfc>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d003      	beq.n	800d452 <TIM_OC3_SetConfig+0x66>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a27      	ldr	r2, [pc, #156]	; (800d4ec <TIM_OC3_SetConfig+0x100>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d10d      	bne.n	800d46e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	021b      	lsls	r3, r3, #8
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4313      	orrs	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a1d      	ldr	r2, [pc, #116]	; (800d4e8 <TIM_OC3_SetConfig+0xfc>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d00f      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a1c      	ldr	r2, [pc, #112]	; (800d4ec <TIM_OC3_SetConfig+0x100>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00b      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a1b      	ldr	r2, [pc, #108]	; (800d4f0 <TIM_OC3_SetConfig+0x104>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d007      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a1a      	ldr	r2, [pc, #104]	; (800d4f4 <TIM_OC3_SetConfig+0x108>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d003      	beq.n	800d496 <TIM_OC3_SetConfig+0xaa>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a19      	ldr	r2, [pc, #100]	; (800d4f8 <TIM_OC3_SetConfig+0x10c>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d113      	bne.n	800d4be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d49c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	621a      	str	r2, [r3, #32]
}
 800d4d8:	bf00      	nop
 800d4da:	371c      	adds	r7, #28
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	fffeff8f 	.word	0xfffeff8f
 800d4e8:	40010000 	.word	0x40010000
 800d4ec:	40010400 	.word	0x40010400
 800d4f0:	40014000 	.word	0x40014000
 800d4f4:	40014400 	.word	0x40014400
 800d4f8:	40014800 	.word	0x40014800

0800d4fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4b24      	ldr	r3, [pc, #144]	; (800d5b8 <TIM_OC4_SetConfig+0xbc>)
 800d528:	4013      	ands	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	021b      	lsls	r3, r3, #8
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	031b      	lsls	r3, r3, #12
 800d54e:	693a      	ldr	r2, [r7, #16]
 800d550:	4313      	orrs	r3, r2
 800d552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a19      	ldr	r2, [pc, #100]	; (800d5bc <TIM_OC4_SetConfig+0xc0>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d00f      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a18      	ldr	r2, [pc, #96]	; (800d5c0 <TIM_OC4_SetConfig+0xc4>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d00b      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a17      	ldr	r2, [pc, #92]	; (800d5c4 <TIM_OC4_SetConfig+0xc8>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d007      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a16      	ldr	r2, [pc, #88]	; (800d5c8 <TIM_OC4_SetConfig+0xcc>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d003      	beq.n	800d57c <TIM_OC4_SetConfig+0x80>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a15      	ldr	r2, [pc, #84]	; (800d5cc <TIM_OC4_SetConfig+0xd0>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d109      	bne.n	800d590 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	019b      	lsls	r3, r3, #6
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	621a      	str	r2, [r3, #32]
}
 800d5aa:	bf00      	nop
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	feff8fff 	.word	0xfeff8fff
 800d5bc:	40010000 	.word	0x40010000
 800d5c0:	40010400 	.word	0x40010400
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	40014400 	.word	0x40014400
 800d5cc:	40014800 	.word	0x40014800

0800d5d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4b21      	ldr	r3, [pc, #132]	; (800d680 <TIM_OC5_SetConfig+0xb0>)
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4313      	orrs	r3, r2
 800d608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d610:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	041b      	lsls	r3, r3, #16
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a18      	ldr	r2, [pc, #96]	; (800d684 <TIM_OC5_SetConfig+0xb4>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d00f      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a17      	ldr	r2, [pc, #92]	; (800d688 <TIM_OC5_SetConfig+0xb8>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00b      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a16      	ldr	r2, [pc, #88]	; (800d68c <TIM_OC5_SetConfig+0xbc>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d007      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a15      	ldr	r2, [pc, #84]	; (800d690 <TIM_OC5_SetConfig+0xc0>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d003      	beq.n	800d646 <TIM_OC5_SetConfig+0x76>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a14      	ldr	r2, [pc, #80]	; (800d694 <TIM_OC5_SetConfig+0xc4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d109      	bne.n	800d65a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d64c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	4313      	orrs	r3, r2
 800d658:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	621a      	str	r2, [r3, #32]
}
 800d674:	bf00      	nop
 800d676:	371c      	adds	r7, #28
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	fffeff8f 	.word	0xfffeff8f
 800d684:	40010000 	.word	0x40010000
 800d688:	40010400 	.word	0x40010400
 800d68c:	40014000 	.word	0x40014000
 800d690:	40014400 	.word	0x40014400
 800d694:	40014800 	.word	0x40014800

0800d698 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d698:	b480      	push	{r7}
 800d69a:	b087      	sub	sp, #28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	4b22      	ldr	r3, [pc, #136]	; (800d74c <TIM_OC6_SetConfig+0xb4>)
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	021b      	lsls	r3, r3, #8
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	051b      	lsls	r3, r3, #20
 800d6e2:	693a      	ldr	r2, [r7, #16]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a19      	ldr	r2, [pc, #100]	; (800d750 <TIM_OC6_SetConfig+0xb8>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d00f      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a18      	ldr	r2, [pc, #96]	; (800d754 <TIM_OC6_SetConfig+0xbc>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d00b      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a17      	ldr	r2, [pc, #92]	; (800d758 <TIM_OC6_SetConfig+0xc0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d007      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a16      	ldr	r2, [pc, #88]	; (800d75c <TIM_OC6_SetConfig+0xc4>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d003      	beq.n	800d710 <TIM_OC6_SetConfig+0x78>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a15      	ldr	r2, [pc, #84]	; (800d760 <TIM_OC6_SetConfig+0xc8>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d109      	bne.n	800d724 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	029b      	lsls	r3, r3, #10
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	4313      	orrs	r3, r2
 800d722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	685a      	ldr	r2, [r3, #4]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	621a      	str	r2, [r3, #32]
}
 800d73e:	bf00      	nop
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	feff8fff 	.word	0xfeff8fff
 800d750:	40010000 	.word	0x40010000
 800d754:	40010400 	.word	0x40010400
 800d758:	40014000 	.word	0x40014000
 800d75c:	40014400 	.word	0x40014400
 800d760:	40014800 	.word	0x40014800

0800d764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d764:	b480      	push	{r7}
 800d766:	b087      	sub	sp, #28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6a1b      	ldr	r3, [r3, #32]
 800d774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	f023 0201 	bic.w	r2, r3, #1
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	699b      	ldr	r3, [r3, #24]
 800d786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	011b      	lsls	r3, r3, #4
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	4313      	orrs	r3, r2
 800d798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f023 030a 	bic.w	r3, r3, #10
 800d7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	621a      	str	r2, [r3, #32]
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b087      	sub	sp, #28
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	60f8      	str	r0, [r7, #12]
 800d7ca:	60b9      	str	r1, [r7, #8]
 800d7cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	f023 0210 	bic.w	r2, r3, #16
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	699b      	ldr	r3, [r3, #24]
 800d7de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	031b      	lsls	r3, r3, #12
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	011b      	lsls	r3, r3, #4
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4313      	orrs	r3, r2
 800d808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	621a      	str	r2, [r3, #32]
}
 800d816:	bf00      	nop
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4b09      	ldr	r3, [pc, #36]	; (800d85c <TIM_ITRx_SetConfig+0x38>)
 800d838:	4013      	ands	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	4313      	orrs	r3, r2
 800d842:	f043 0307 	orr.w	r3, r3, #7
 800d846:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	609a      	str	r2, [r3, #8]
}
 800d84e:	bf00      	nop
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	ffcfff8f 	.word	0xffcfff8f

0800d860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d860:	b480      	push	{r7}
 800d862:	b087      	sub	sp, #28
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d87a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	021a      	lsls	r2, r3, #8
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	431a      	orrs	r2, r3
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	4313      	orrs	r3, r2
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	609a      	str	r2, [r3, #8]
}
 800d894:	bf00      	nop
 800d896:	371c      	adds	r7, #28
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f003 031f 	and.w	r3, r3, #31
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6a1a      	ldr	r2, [r3, #32]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	43db      	mvns	r3, r3
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6a1a      	ldr	r2, [r3, #32]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	f003 031f 	and.w	r3, r3, #31
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	621a      	str	r2, [r3, #32]
}
 800d8de:	bf00      	nop
 800d8e0:	371c      	adds	r7, #28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
	...

0800d8ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d101      	bne.n	800d904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d900:	2302      	movs	r3, #2
 800d902:	e06d      	b.n	800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2202      	movs	r2, #2
 800d910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a30      	ldr	r2, [pc, #192]	; (800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d004      	beq.n	800d938 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a2f      	ldr	r2, [pc, #188]	; (800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d108      	bne.n	800d94a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d93e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	4313      	orrs	r3, r2
 800d948:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d950:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	4313      	orrs	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a20      	ldr	r2, [pc, #128]	; (800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d022      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d976:	d01d      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1d      	ldr	r2, [pc, #116]	; (800d9f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d018      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a1c      	ldr	r2, [pc, #112]	; (800d9f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d013      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a1a      	ldr	r2, [pc, #104]	; (800d9fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d00e      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a15      	ldr	r2, [pc, #84]	; (800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d009      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a16      	ldr	r2, [pc, #88]	; (800da00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d004      	beq.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a15      	ldr	r2, [pc, #84]	; (800da04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d10c      	bne.n	800d9ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	40010000 	.word	0x40010000
 800d9f0:	40010400 	.word	0x40010400
 800d9f4:	40000400 	.word	0x40000400
 800d9f8:	40000800 	.word	0x40000800
 800d9fc:	40000c00 	.word	0x40000c00
 800da00:	40001800 	.word	0x40001800
 800da04:	40014000 	.word	0x40014000

0800da08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da12:	2300      	movs	r3, #0
 800da14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d101      	bne.n	800da24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da20:	2302      	movs	r3, #2
 800da22:	e065      	b.n	800daf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	4313      	orrs	r3, r2
 800da38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	4313      	orrs	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4313      	orrs	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	4313      	orrs	r3, r2
 800da70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	695b      	ldr	r3, [r3, #20]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da8a:	4313      	orrs	r3, r2
 800da8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	041b      	lsls	r3, r3, #16
 800da9a:	4313      	orrs	r3, r2
 800da9c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a16      	ldr	r2, [pc, #88]	; (800dafc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d004      	beq.n	800dab2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a14      	ldr	r2, [pc, #80]	; (800db00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d115      	bne.n	800dade <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabc:	051b      	lsls	r3, r3, #20
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	69db      	ldr	r3, [r3, #28]
 800dacc:	4313      	orrs	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	4313      	orrs	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3714      	adds	r7, #20
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr
 800dafc:	40010000 	.word	0x40010000
 800db00:	40010400 	.word	0x40010400

0800db04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db34:	bf00      	nop
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e042      	b.n	800dbd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d106      	bne.n	800db6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7f4 fc9b 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2224      	movs	r2, #36	; 0x24
 800db6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f022 0201 	bic.w	r2, r2, #1
 800db80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 fcd6 	bl	800e534 <UART_SetConfig>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d101      	bne.n	800db92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	e022      	b.n	800dbd8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f001 fa32 	bl	800f004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dbae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	689a      	ldr	r2, [r3, #8]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dbbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0201 	orr.w	r2, r2, #1
 800dbce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f001 fab9 	bl	800f148 <UART_CheckIdleState>
 800dbd6:	4603      	mov	r3, r0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b08a      	sub	sp, #40	; 0x28
 800dbe4:	af02      	add	r7, sp, #8
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	603b      	str	r3, [r7, #0]
 800dbec:	4613      	mov	r3, r2
 800dbee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	f040 8083 	bne.w	800dd02 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <HAL_UART_Transmit+0x28>
 800dc02:	88fb      	ldrh	r3, [r7, #6]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e07b      	b.n	800dd04 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d101      	bne.n	800dc1a <HAL_UART_Transmit+0x3a>
 800dc16:	2302      	movs	r3, #2
 800dc18:	e074      	b.n	800dd04 <HAL_UART_Transmit+0x124>
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2221      	movs	r2, #33	; 0x21
 800dc2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc32:	f7f4 fe8b 	bl	800294c <HAL_GetTick>
 800dc36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	88fa      	ldrh	r2, [r7, #6]
 800dc3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	88fa      	ldrh	r2, [r7, #6]
 800dc44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc50:	d108      	bne.n	800dc64 <HAL_UART_Transmit+0x84>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d104      	bne.n	800dc64 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	61bb      	str	r3, [r7, #24]
 800dc62:	e003      	b.n	800dc6c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dc74:	e02c      	b.n	800dcd0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2180      	movs	r1, #128	; 0x80
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f001 faac 	bl	800f1de <UART_WaitOnFlagUntilTimeout>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d001      	beq.n	800dc90 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e039      	b.n	800dd04 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10b      	bne.n	800dcae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	881b      	ldrh	r3, [r3, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dca4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	3302      	adds	r3, #2
 800dcaa:	61bb      	str	r3, [r7, #24]
 800dcac:	e007      	b.n	800dcbe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	781a      	ldrb	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1cc      	bne.n	800dc76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	2200      	movs	r2, #0
 800dce4:	2140      	movs	r1, #64	; 0x40
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f001 fa79 	bl	800f1de <UART_WaitOnFlagUntilTimeout>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e006      	b.n	800dd04 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2220      	movs	r2, #32
 800dcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e000      	b.n	800dd04 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800dd02:	2302      	movs	r3, #2
  }
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08a      	sub	sp, #40	; 0x28
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd20:	2b20      	cmp	r3, #32
 800dd22:	d142      	bne.n	800ddaa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <HAL_UART_Receive_IT+0x24>
 800dd2a:	88fb      	ldrh	r3, [r7, #6]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e03b      	b.n	800ddac <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d101      	bne.n	800dd42 <HAL_UART_Receive_IT+0x36>
 800dd3e:	2302      	movs	r3, #2
 800dd40:	e034      	b.n	800ddac <HAL_UART_Receive_IT+0xa0>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a17      	ldr	r2, [pc, #92]	; (800ddb4 <HAL_UART_Receive_IT+0xa8>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d01f      	beq.n	800dd9a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d018      	beq.n	800dd9a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	e853 3f00 	ldrex	r3, [r3]
 800dd74:	613b      	str	r3, [r7, #16]
   return(result);
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	461a      	mov	r2, r3
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	623b      	str	r3, [r7, #32]
 800dd88:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8a:	69f9      	ldr	r1, [r7, #28]
 800dd8c:	6a3a      	ldr	r2, [r7, #32]
 800dd8e:	e841 2300 	strex	r3, r2, [r1]
 800dd92:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1e6      	bne.n	800dd68 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dd9a:	88fb      	ldrh	r3, [r7, #6]
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	68b9      	ldr	r1, [r7, #8]
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f001 fae5 	bl	800f370 <UART_Start_Receive_IT>
 800dda6:	4603      	mov	r3, r0
 800dda8:	e000      	b.n	800ddac <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ddaa:	2302      	movs	r3, #2
  }
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3728      	adds	r7, #40	; 0x28
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	58000c00 	.word	0x58000c00

0800ddb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b0ba      	sub	sp, #232	; 0xe8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	69db      	ldr	r3, [r3, #28]
 800ddc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	689b      	ldr	r3, [r3, #8]
 800ddda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dde2:	f640 030f 	movw	r3, #2063	; 0x80f
 800dde6:	4013      	ands	r3, r2
 800dde8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ddec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d11b      	bne.n	800de2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf8:	f003 0320 	and.w	r3, r3, #32
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d015      	beq.n	800de2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d105      	bne.n	800de18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d009      	beq.n	800de2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 835a 	beq.w	800e4d6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	4798      	blx	r3
      }
      return;
 800de2a:	e354      	b.n	800e4d6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 811f 	beq.w	800e074 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de3a:	4b8b      	ldr	r3, [pc, #556]	; (800e068 <HAL_UART_IRQHandler+0x2b0>)
 800de3c:	4013      	ands	r3, r2
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de46:	4b89      	ldr	r3, [pc, #548]	; (800e06c <HAL_UART_IRQHandler+0x2b4>)
 800de48:	4013      	ands	r3, r2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 8112 	beq.w	800e074 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d011      	beq.n	800de80 <HAL_UART_IRQHandler+0xc8>
 800de5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00b      	beq.n	800de80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2201      	movs	r2, #1
 800de6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de76:	f043 0201 	orr.w	r2, r3, #1
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d011      	beq.n	800deb0 <HAL_UART_IRQHandler+0xf8>
 800de8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00b      	beq.n	800deb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2202      	movs	r2, #2
 800de9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dea6:	f043 0204 	orr.w	r2, r3, #4
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800deb4:	f003 0304 	and.w	r3, r3, #4
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d011      	beq.n	800dee0 <HAL_UART_IRQHandler+0x128>
 800debc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00b      	beq.n	800dee0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2204      	movs	r2, #4
 800dece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ded6:	f043 0202 	orr.w	r2, r3, #2
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dee4:	f003 0308 	and.w	r3, r3, #8
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d017      	beq.n	800df1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800deec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800def0:	f003 0320 	and.w	r3, r3, #32
 800def4:	2b00      	cmp	r3, #0
 800def6:	d105      	bne.n	800df04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800def8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800defc:	4b5a      	ldr	r3, [pc, #360]	; (800e068 <HAL_UART_IRQHandler+0x2b0>)
 800defe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00b      	beq.n	800df1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2208      	movs	r2, #8
 800df0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df12:	f043 0208 	orr.w	r2, r3, #8
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df24:	2b00      	cmp	r3, #0
 800df26:	d012      	beq.n	800df4e <HAL_UART_IRQHandler+0x196>
 800df28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00c      	beq.n	800df4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df44:	f043 0220 	orr.w	r2, r3, #32
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 82c0 	beq.w	800e4da <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df5e:	f003 0320 	and.w	r3, r3, #32
 800df62:	2b00      	cmp	r3, #0
 800df64:	d013      	beq.n	800df8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df6a:	f003 0320 	and.w	r3, r3, #32
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d105      	bne.n	800df7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d007      	beq.n	800df8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfa2:	2b40      	cmp	r3, #64	; 0x40
 800dfa4:	d005      	beq.n	800dfb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dfa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d04f      	beq.n	800e052 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f001 fb06 	bl	800f5c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc2:	2b40      	cmp	r3, #64	; 0x40
 800dfc4:	d141      	bne.n	800e04a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfd4:	e853 3f00 	ldrex	r3, [r3]
 800dfd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dfdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	3308      	adds	r3, #8
 800dfee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e002:	e841 2300 	strex	r3, r2, [r1]
 800e006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e00a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d1d9      	bne.n	800dfc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d013      	beq.n	800e042 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01e:	4a14      	ldr	r2, [pc, #80]	; (800e070 <HAL_UART_IRQHandler+0x2b8>)
 800e020:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e026:	4618      	mov	r0, r3
 800e028:	f7f7 fcaa 	bl	8005980 <HAL_DMA_Abort_IT>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d017      	beq.n	800e062 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e03c:	4610      	mov	r0, r2
 800e03e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e040:	e00f      	b.n	800e062 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fa60 	bl	800e508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e048:	e00b      	b.n	800e062 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fa5c 	bl	800e508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e050:	e007      	b.n	800e062 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fa58 	bl	800e508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e060:	e23b      	b.n	800e4da <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e062:	bf00      	nop
    return;
 800e064:	e239      	b.n	800e4da <HAL_UART_IRQHandler+0x722>
 800e066:	bf00      	nop
 800e068:	10000001 	.word	0x10000001
 800e06c:	04000120 	.word	0x04000120
 800e070:	0800f691 	.word	0x0800f691

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e078:	2b01      	cmp	r3, #1
 800e07a:	f040 81ce 	bne.w	800e41a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e082:	f003 0310 	and.w	r3, r3, #16
 800e086:	2b00      	cmp	r3, #0
 800e088:	f000 81c7 	beq.w	800e41a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e090:	f003 0310 	and.w	r3, r3, #16
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 81c0 	beq.w	800e41a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2210      	movs	r2, #16
 800e0a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ac:	2b40      	cmp	r3, #64	; 0x40
 800e0ae:	f040 813b 	bne.w	800e328 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a8b      	ldr	r2, [pc, #556]	; (800e2e8 <HAL_UART_IRQHandler+0x530>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d059      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a89      	ldr	r2, [pc, #548]	; (800e2ec <HAL_UART_IRQHandler+0x534>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d053      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a87      	ldr	r2, [pc, #540]	; (800e2f0 <HAL_UART_IRQHandler+0x538>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d04d      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a85      	ldr	r2, [pc, #532]	; (800e2f4 <HAL_UART_IRQHandler+0x53c>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d047      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a83      	ldr	r2, [pc, #524]	; (800e2f8 <HAL_UART_IRQHandler+0x540>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d041      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a81      	ldr	r2, [pc, #516]	; (800e2fc <HAL_UART_IRQHandler+0x544>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d03b      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a7f      	ldr	r2, [pc, #508]	; (800e300 <HAL_UART_IRQHandler+0x548>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d035      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a7d      	ldr	r2, [pc, #500]	; (800e304 <HAL_UART_IRQHandler+0x54c>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d02f      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a7b      	ldr	r2, [pc, #492]	; (800e308 <HAL_UART_IRQHandler+0x550>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d029      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a79      	ldr	r2, [pc, #484]	; (800e30c <HAL_UART_IRQHandler+0x554>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d023      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a77      	ldr	r2, [pc, #476]	; (800e310 <HAL_UART_IRQHandler+0x558>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d01d      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a75      	ldr	r2, [pc, #468]	; (800e314 <HAL_UART_IRQHandler+0x55c>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d017      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a73      	ldr	r2, [pc, #460]	; (800e318 <HAL_UART_IRQHandler+0x560>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d011      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a71      	ldr	r2, [pc, #452]	; (800e31c <HAL_UART_IRQHandler+0x564>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d00b      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a6f      	ldr	r2, [pc, #444]	; (800e320 <HAL_UART_IRQHandler+0x568>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d005      	beq.n	800e172 <HAL_UART_IRQHandler+0x3ba>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a6d      	ldr	r2, [pc, #436]	; (800e324 <HAL_UART_IRQHandler+0x56c>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d105      	bne.n	800e17e <HAL_UART_IRQHandler+0x3c6>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	e004      	b.n	800e188 <HAL_UART_IRQHandler+0x3d0>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	b29b      	uxth	r3, r3
 800e188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e18c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 81a4 	beq.w	800e4de <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e19c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	f080 819c 	bcs.w	800e4de <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1ba:	f000 8086 	beq.w	800e2ca <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1ca:	e853 3f00 	ldrex	r3, [r3]
 800e1ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1f8:	e841 2300 	strex	r3, r2, [r1]
 800e1fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1da      	bne.n	800e1be <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3308      	adds	r3, #8
 800e20e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e212:	e853 3f00 	ldrex	r3, [r3]
 800e216:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e21a:	f023 0301 	bic.w	r3, r3, #1
 800e21e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3308      	adds	r3, #8
 800e228:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e22c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e230:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e232:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e234:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e238:	e841 2300 	strex	r3, r2, [r1]
 800e23c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e23e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e1      	bne.n	800e208 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	3308      	adds	r3, #8
 800e24a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e24e:	e853 3f00 	ldrex	r3, [r3]
 800e252:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e25a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3308      	adds	r3, #8
 800e264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e268:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e26a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e26e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e270:	e841 2300 	strex	r3, r2, [r1]
 800e274:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e3      	bne.n	800e244 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2220      	movs	r2, #32
 800e280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e292:	e853 3f00 	ldrex	r3, [r3]
 800e296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e29a:	f023 0310 	bic.w	r3, r3, #16
 800e29e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2b4:	e841 2300 	strex	r3, r2, [r1]
 800e2b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1e4      	bne.n	800e28a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7f7 f83d 	bl	8005344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 f91c 	bl	800e51c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2e4:	e0fb      	b.n	800e4de <HAL_UART_IRQHandler+0x726>
 800e2e6:	bf00      	nop
 800e2e8:	40020010 	.word	0x40020010
 800e2ec:	40020028 	.word	0x40020028
 800e2f0:	40020040 	.word	0x40020040
 800e2f4:	40020058 	.word	0x40020058
 800e2f8:	40020070 	.word	0x40020070
 800e2fc:	40020088 	.word	0x40020088
 800e300:	400200a0 	.word	0x400200a0
 800e304:	400200b8 	.word	0x400200b8
 800e308:	40020410 	.word	0x40020410
 800e30c:	40020428 	.word	0x40020428
 800e310:	40020440 	.word	0x40020440
 800e314:	40020458 	.word	0x40020458
 800e318:	40020470 	.word	0x40020470
 800e31c:	40020488 	.word	0x40020488
 800e320:	400204a0 	.word	0x400204a0
 800e324:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e334:	b29b      	uxth	r3, r3
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e342:	b29b      	uxth	r3, r3
 800e344:	2b00      	cmp	r3, #0
 800e346:	f000 80cc 	beq.w	800e4e2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e34a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f000 80c7 	beq.w	800e4e2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	e853 3f00 	ldrex	r3, [r3]
 800e360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	461a      	mov	r2, r3
 800e372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e376:	647b      	str	r3, [r7, #68]	; 0x44
 800e378:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e37c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e37e:	e841 2300 	strex	r3, r2, [r1]
 800e382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e4      	bne.n	800e354 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3308      	adds	r3, #8
 800e390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	e853 3f00 	ldrex	r3, [r3]
 800e398:	623b      	str	r3, [r7, #32]
   return(result);
 800e39a:	6a3a      	ldr	r2, [r7, #32]
 800e39c:	4b54      	ldr	r3, [pc, #336]	; (800e4f0 <HAL_UART_IRQHandler+0x738>)
 800e39e:	4013      	ands	r3, r2
 800e3a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e3ae:	633a      	str	r2, [r7, #48]	; 0x30
 800e3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b6:	e841 2300 	strex	r3, r2, [r1]
 800e3ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1e3      	bne.n	800e38a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	e853 3f00 	ldrex	r3, [r3]
 800e3e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f023 0310 	bic.w	r3, r3, #16
 800e3ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3f8:	61fb      	str	r3, [r7, #28]
 800e3fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fc:	69b9      	ldr	r1, [r7, #24]
 800e3fe:	69fa      	ldr	r2, [r7, #28]
 800e400:	e841 2300 	strex	r3, r2, [r1]
 800e404:	617b      	str	r3, [r7, #20]
   return(result);
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1e4      	bne.n	800e3d6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e40c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e410:	4619      	mov	r1, r3
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f882 	bl	800e51c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e418:	e063      	b.n	800e4e2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e41e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00e      	beq.n	800e444 <HAL_UART_IRQHandler+0x68c>
 800e426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e42a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d008      	beq.n	800e444 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e43a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 fdc5 	bl	800ffcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e442:	e051      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d014      	beq.n	800e47a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d105      	bne.n	800e468 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e45c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d008      	beq.n	800e47a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d03a      	beq.n	800e4e6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	4798      	blx	r3
    }
    return;
 800e478:	e035      	b.n	800e4e6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e482:	2b00      	cmp	r3, #0
 800e484:	d009      	beq.n	800e49a <HAL_UART_IRQHandler+0x6e2>
 800e486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f001 f912 	bl	800f6bc <UART_EndTransmit_IT>
    return;
 800e498:	e026      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e49e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d009      	beq.n	800e4ba <HAL_UART_IRQHandler+0x702>
 800e4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 fd9e 	bl	800fff4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4b8:	e016      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d010      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x730>
 800e4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	da0c      	bge.n	800e4e8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f001 fd86 	bl	800ffe0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4d4:	e008      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
      return;
 800e4d6:	bf00      	nop
 800e4d8:	e006      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
    return;
 800e4da:	bf00      	nop
 800e4dc:	e004      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
      return;
 800e4de:	bf00      	nop
 800e4e0:	e002      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
      return;
 800e4e2:	bf00      	nop
 800e4e4:	e000      	b.n	800e4e8 <HAL_UART_IRQHandler+0x730>
    return;
 800e4e6:	bf00      	nop
  }
}
 800e4e8:	37e8      	adds	r7, #232	; 0xe8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	effffffe 	.word	0xeffffffe

0800e4f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	460b      	mov	r3, r1
 800e526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e538:	b092      	sub	sp, #72	; 0x48
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e53e:	2300      	movs	r3, #0
 800e540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	689a      	ldr	r2, [r3, #8]
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	691b      	ldr	r3, [r3, #16]
 800e54c:	431a      	orrs	r2, r3
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	431a      	orrs	r2, r3
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	69db      	ldr	r3, [r3, #28]
 800e558:	4313      	orrs	r3, r2
 800e55a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	4bbe      	ldr	r3, [pc, #760]	; (800e85c <UART_SetConfig+0x328>)
 800e564:	4013      	ands	r3, r2
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	6812      	ldr	r2, [r2, #0]
 800e56a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e56c:	430b      	orrs	r3, r1
 800e56e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	68da      	ldr	r2, [r3, #12]
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	430a      	orrs	r2, r1
 800e584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4ab3      	ldr	r2, [pc, #716]	; (800e860 <UART_SetConfig+0x32c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d004      	beq.n	800e5a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	6a1b      	ldr	r3, [r3, #32]
 800e59a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e59c:	4313      	orrs	r3, r2
 800e59e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689a      	ldr	r2, [r3, #8]
 800e5a6:	4baf      	ldr	r3, [pc, #700]	; (800e864 <UART_SetConfig+0x330>)
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	6812      	ldr	r2, [r2, #0]
 800e5ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5b0:	430b      	orrs	r3, r1
 800e5b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ba:	f023 010f 	bic.w	r1, r3, #15
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	430a      	orrs	r2, r1
 800e5c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4aa6      	ldr	r2, [pc, #664]	; (800e868 <UART_SetConfig+0x334>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d177      	bne.n	800e6c4 <UART_SetConfig+0x190>
 800e5d4:	4ba5      	ldr	r3, [pc, #660]	; (800e86c <UART_SetConfig+0x338>)
 800e5d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5dc:	2b28      	cmp	r3, #40	; 0x28
 800e5de:	d86d      	bhi.n	800e6bc <UART_SetConfig+0x188>
 800e5e0:	a201      	add	r2, pc, #4	; (adr r2, 800e5e8 <UART_SetConfig+0xb4>)
 800e5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e6:	bf00      	nop
 800e5e8:	0800e68d 	.word	0x0800e68d
 800e5ec:	0800e6bd 	.word	0x0800e6bd
 800e5f0:	0800e6bd 	.word	0x0800e6bd
 800e5f4:	0800e6bd 	.word	0x0800e6bd
 800e5f8:	0800e6bd 	.word	0x0800e6bd
 800e5fc:	0800e6bd 	.word	0x0800e6bd
 800e600:	0800e6bd 	.word	0x0800e6bd
 800e604:	0800e6bd 	.word	0x0800e6bd
 800e608:	0800e695 	.word	0x0800e695
 800e60c:	0800e6bd 	.word	0x0800e6bd
 800e610:	0800e6bd 	.word	0x0800e6bd
 800e614:	0800e6bd 	.word	0x0800e6bd
 800e618:	0800e6bd 	.word	0x0800e6bd
 800e61c:	0800e6bd 	.word	0x0800e6bd
 800e620:	0800e6bd 	.word	0x0800e6bd
 800e624:	0800e6bd 	.word	0x0800e6bd
 800e628:	0800e69d 	.word	0x0800e69d
 800e62c:	0800e6bd 	.word	0x0800e6bd
 800e630:	0800e6bd 	.word	0x0800e6bd
 800e634:	0800e6bd 	.word	0x0800e6bd
 800e638:	0800e6bd 	.word	0x0800e6bd
 800e63c:	0800e6bd 	.word	0x0800e6bd
 800e640:	0800e6bd 	.word	0x0800e6bd
 800e644:	0800e6bd 	.word	0x0800e6bd
 800e648:	0800e6a5 	.word	0x0800e6a5
 800e64c:	0800e6bd 	.word	0x0800e6bd
 800e650:	0800e6bd 	.word	0x0800e6bd
 800e654:	0800e6bd 	.word	0x0800e6bd
 800e658:	0800e6bd 	.word	0x0800e6bd
 800e65c:	0800e6bd 	.word	0x0800e6bd
 800e660:	0800e6bd 	.word	0x0800e6bd
 800e664:	0800e6bd 	.word	0x0800e6bd
 800e668:	0800e6ad 	.word	0x0800e6ad
 800e66c:	0800e6bd 	.word	0x0800e6bd
 800e670:	0800e6bd 	.word	0x0800e6bd
 800e674:	0800e6bd 	.word	0x0800e6bd
 800e678:	0800e6bd 	.word	0x0800e6bd
 800e67c:	0800e6bd 	.word	0x0800e6bd
 800e680:	0800e6bd 	.word	0x0800e6bd
 800e684:	0800e6bd 	.word	0x0800e6bd
 800e688:	0800e6b5 	.word	0x0800e6b5
 800e68c:	2301      	movs	r3, #1
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e692:	e222      	b.n	800eada <UART_SetConfig+0x5a6>
 800e694:	2304      	movs	r3, #4
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e21e      	b.n	800eada <UART_SetConfig+0x5a6>
 800e69c:	2308      	movs	r3, #8
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e21a      	b.n	800eada <UART_SetConfig+0x5a6>
 800e6a4:	2310      	movs	r3, #16
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e216      	b.n	800eada <UART_SetConfig+0x5a6>
 800e6ac:	2320      	movs	r3, #32
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b2:	e212      	b.n	800eada <UART_SetConfig+0x5a6>
 800e6b4:	2340      	movs	r3, #64	; 0x40
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e20e      	b.n	800eada <UART_SetConfig+0x5a6>
 800e6bc:	2380      	movs	r3, #128	; 0x80
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e20a      	b.n	800eada <UART_SetConfig+0x5a6>
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a69      	ldr	r2, [pc, #420]	; (800e870 <UART_SetConfig+0x33c>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d130      	bne.n	800e730 <UART_SetConfig+0x1fc>
 800e6ce:	4b67      	ldr	r3, [pc, #412]	; (800e86c <UART_SetConfig+0x338>)
 800e6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6d2:	f003 0307 	and.w	r3, r3, #7
 800e6d6:	2b05      	cmp	r3, #5
 800e6d8:	d826      	bhi.n	800e728 <UART_SetConfig+0x1f4>
 800e6da:	a201      	add	r2, pc, #4	; (adr r2, 800e6e0 <UART_SetConfig+0x1ac>)
 800e6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e0:	0800e6f9 	.word	0x0800e6f9
 800e6e4:	0800e701 	.word	0x0800e701
 800e6e8:	0800e709 	.word	0x0800e709
 800e6ec:	0800e711 	.word	0x0800e711
 800e6f0:	0800e719 	.word	0x0800e719
 800e6f4:	0800e721 	.word	0x0800e721
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fe:	e1ec      	b.n	800eada <UART_SetConfig+0x5a6>
 800e700:	2304      	movs	r3, #4
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e1e8      	b.n	800eada <UART_SetConfig+0x5a6>
 800e708:	2308      	movs	r3, #8
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e1e4      	b.n	800eada <UART_SetConfig+0x5a6>
 800e710:	2310      	movs	r3, #16
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e1e0      	b.n	800eada <UART_SetConfig+0x5a6>
 800e718:	2320      	movs	r3, #32
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e1dc      	b.n	800eada <UART_SetConfig+0x5a6>
 800e720:	2340      	movs	r3, #64	; 0x40
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e1d8      	b.n	800eada <UART_SetConfig+0x5a6>
 800e728:	2380      	movs	r3, #128	; 0x80
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e1d4      	b.n	800eada <UART_SetConfig+0x5a6>
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4a4f      	ldr	r2, [pc, #316]	; (800e874 <UART_SetConfig+0x340>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d130      	bne.n	800e79c <UART_SetConfig+0x268>
 800e73a:	4b4c      	ldr	r3, [pc, #304]	; (800e86c <UART_SetConfig+0x338>)
 800e73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e73e:	f003 0307 	and.w	r3, r3, #7
 800e742:	2b05      	cmp	r3, #5
 800e744:	d826      	bhi.n	800e794 <UART_SetConfig+0x260>
 800e746:	a201      	add	r2, pc, #4	; (adr r2, 800e74c <UART_SetConfig+0x218>)
 800e748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74c:	0800e765 	.word	0x0800e765
 800e750:	0800e76d 	.word	0x0800e76d
 800e754:	0800e775 	.word	0x0800e775
 800e758:	0800e77d 	.word	0x0800e77d
 800e75c:	0800e785 	.word	0x0800e785
 800e760:	0800e78d 	.word	0x0800e78d
 800e764:	2300      	movs	r3, #0
 800e766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76a:	e1b6      	b.n	800eada <UART_SetConfig+0x5a6>
 800e76c:	2304      	movs	r3, #4
 800e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e772:	e1b2      	b.n	800eada <UART_SetConfig+0x5a6>
 800e774:	2308      	movs	r3, #8
 800e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77a:	e1ae      	b.n	800eada <UART_SetConfig+0x5a6>
 800e77c:	2310      	movs	r3, #16
 800e77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e782:	e1aa      	b.n	800eada <UART_SetConfig+0x5a6>
 800e784:	2320      	movs	r3, #32
 800e786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78a:	e1a6      	b.n	800eada <UART_SetConfig+0x5a6>
 800e78c:	2340      	movs	r3, #64	; 0x40
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e1a2      	b.n	800eada <UART_SetConfig+0x5a6>
 800e794:	2380      	movs	r3, #128	; 0x80
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e19e      	b.n	800eada <UART_SetConfig+0x5a6>
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a35      	ldr	r2, [pc, #212]	; (800e878 <UART_SetConfig+0x344>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d130      	bne.n	800e808 <UART_SetConfig+0x2d4>
 800e7a6:	4b31      	ldr	r3, [pc, #196]	; (800e86c <UART_SetConfig+0x338>)
 800e7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7aa:	f003 0307 	and.w	r3, r3, #7
 800e7ae:	2b05      	cmp	r3, #5
 800e7b0:	d826      	bhi.n	800e800 <UART_SetConfig+0x2cc>
 800e7b2:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <UART_SetConfig+0x284>)
 800e7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b8:	0800e7d1 	.word	0x0800e7d1
 800e7bc:	0800e7d9 	.word	0x0800e7d9
 800e7c0:	0800e7e1 	.word	0x0800e7e1
 800e7c4:	0800e7e9 	.word	0x0800e7e9
 800e7c8:	0800e7f1 	.word	0x0800e7f1
 800e7cc:	0800e7f9 	.word	0x0800e7f9
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d6:	e180      	b.n	800eada <UART_SetConfig+0x5a6>
 800e7d8:	2304      	movs	r3, #4
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e17c      	b.n	800eada <UART_SetConfig+0x5a6>
 800e7e0:	2308      	movs	r3, #8
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e178      	b.n	800eada <UART_SetConfig+0x5a6>
 800e7e8:	2310      	movs	r3, #16
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e174      	b.n	800eada <UART_SetConfig+0x5a6>
 800e7f0:	2320      	movs	r3, #32
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e170      	b.n	800eada <UART_SetConfig+0x5a6>
 800e7f8:	2340      	movs	r3, #64	; 0x40
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e16c      	b.n	800eada <UART_SetConfig+0x5a6>
 800e800:	2380      	movs	r3, #128	; 0x80
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e168      	b.n	800eada <UART_SetConfig+0x5a6>
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a1b      	ldr	r2, [pc, #108]	; (800e87c <UART_SetConfig+0x348>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d142      	bne.n	800e898 <UART_SetConfig+0x364>
 800e812:	4b16      	ldr	r3, [pc, #88]	; (800e86c <UART_SetConfig+0x338>)
 800e814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e816:	f003 0307 	and.w	r3, r3, #7
 800e81a:	2b05      	cmp	r3, #5
 800e81c:	d838      	bhi.n	800e890 <UART_SetConfig+0x35c>
 800e81e:	a201      	add	r2, pc, #4	; (adr r2, 800e824 <UART_SetConfig+0x2f0>)
 800e820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e824:	0800e83d 	.word	0x0800e83d
 800e828:	0800e845 	.word	0x0800e845
 800e82c:	0800e84d 	.word	0x0800e84d
 800e830:	0800e855 	.word	0x0800e855
 800e834:	0800e881 	.word	0x0800e881
 800e838:	0800e889 	.word	0x0800e889
 800e83c:	2300      	movs	r3, #0
 800e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e842:	e14a      	b.n	800eada <UART_SetConfig+0x5a6>
 800e844:	2304      	movs	r3, #4
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e146      	b.n	800eada <UART_SetConfig+0x5a6>
 800e84c:	2308      	movs	r3, #8
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e142      	b.n	800eada <UART_SetConfig+0x5a6>
 800e854:	2310      	movs	r3, #16
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e13e      	b.n	800eada <UART_SetConfig+0x5a6>
 800e85c:	cfff69f3 	.word	0xcfff69f3
 800e860:	58000c00 	.word	0x58000c00
 800e864:	11fff4ff 	.word	0x11fff4ff
 800e868:	40011000 	.word	0x40011000
 800e86c:	58024400 	.word	0x58024400
 800e870:	40004400 	.word	0x40004400
 800e874:	40004800 	.word	0x40004800
 800e878:	40004c00 	.word	0x40004c00
 800e87c:	40005000 	.word	0x40005000
 800e880:	2320      	movs	r3, #32
 800e882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e886:	e128      	b.n	800eada <UART_SetConfig+0x5a6>
 800e888:	2340      	movs	r3, #64	; 0x40
 800e88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88e:	e124      	b.n	800eada <UART_SetConfig+0x5a6>
 800e890:	2380      	movs	r3, #128	; 0x80
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e896:	e120      	b.n	800eada <UART_SetConfig+0x5a6>
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4acb      	ldr	r2, [pc, #812]	; (800ebcc <UART_SetConfig+0x698>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d176      	bne.n	800e990 <UART_SetConfig+0x45c>
 800e8a2:	4bcb      	ldr	r3, [pc, #812]	; (800ebd0 <UART_SetConfig+0x69c>)
 800e8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8aa:	2b28      	cmp	r3, #40	; 0x28
 800e8ac:	d86c      	bhi.n	800e988 <UART_SetConfig+0x454>
 800e8ae:	a201      	add	r2, pc, #4	; (adr r2, 800e8b4 <UART_SetConfig+0x380>)
 800e8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b4:	0800e959 	.word	0x0800e959
 800e8b8:	0800e989 	.word	0x0800e989
 800e8bc:	0800e989 	.word	0x0800e989
 800e8c0:	0800e989 	.word	0x0800e989
 800e8c4:	0800e989 	.word	0x0800e989
 800e8c8:	0800e989 	.word	0x0800e989
 800e8cc:	0800e989 	.word	0x0800e989
 800e8d0:	0800e989 	.word	0x0800e989
 800e8d4:	0800e961 	.word	0x0800e961
 800e8d8:	0800e989 	.word	0x0800e989
 800e8dc:	0800e989 	.word	0x0800e989
 800e8e0:	0800e989 	.word	0x0800e989
 800e8e4:	0800e989 	.word	0x0800e989
 800e8e8:	0800e989 	.word	0x0800e989
 800e8ec:	0800e989 	.word	0x0800e989
 800e8f0:	0800e989 	.word	0x0800e989
 800e8f4:	0800e969 	.word	0x0800e969
 800e8f8:	0800e989 	.word	0x0800e989
 800e8fc:	0800e989 	.word	0x0800e989
 800e900:	0800e989 	.word	0x0800e989
 800e904:	0800e989 	.word	0x0800e989
 800e908:	0800e989 	.word	0x0800e989
 800e90c:	0800e989 	.word	0x0800e989
 800e910:	0800e989 	.word	0x0800e989
 800e914:	0800e971 	.word	0x0800e971
 800e918:	0800e989 	.word	0x0800e989
 800e91c:	0800e989 	.word	0x0800e989
 800e920:	0800e989 	.word	0x0800e989
 800e924:	0800e989 	.word	0x0800e989
 800e928:	0800e989 	.word	0x0800e989
 800e92c:	0800e989 	.word	0x0800e989
 800e930:	0800e989 	.word	0x0800e989
 800e934:	0800e979 	.word	0x0800e979
 800e938:	0800e989 	.word	0x0800e989
 800e93c:	0800e989 	.word	0x0800e989
 800e940:	0800e989 	.word	0x0800e989
 800e944:	0800e989 	.word	0x0800e989
 800e948:	0800e989 	.word	0x0800e989
 800e94c:	0800e989 	.word	0x0800e989
 800e950:	0800e989 	.word	0x0800e989
 800e954:	0800e981 	.word	0x0800e981
 800e958:	2301      	movs	r3, #1
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95e:	e0bc      	b.n	800eada <UART_SetConfig+0x5a6>
 800e960:	2304      	movs	r3, #4
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e966:	e0b8      	b.n	800eada <UART_SetConfig+0x5a6>
 800e968:	2308      	movs	r3, #8
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e0b4      	b.n	800eada <UART_SetConfig+0x5a6>
 800e970:	2310      	movs	r3, #16
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e0b0      	b.n	800eada <UART_SetConfig+0x5a6>
 800e978:	2320      	movs	r3, #32
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e0ac      	b.n	800eada <UART_SetConfig+0x5a6>
 800e980:	2340      	movs	r3, #64	; 0x40
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e0a8      	b.n	800eada <UART_SetConfig+0x5a6>
 800e988:	2380      	movs	r3, #128	; 0x80
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98e:	e0a4      	b.n	800eada <UART_SetConfig+0x5a6>
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a8f      	ldr	r2, [pc, #572]	; (800ebd4 <UART_SetConfig+0x6a0>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d130      	bne.n	800e9fc <UART_SetConfig+0x4c8>
 800e99a:	4b8d      	ldr	r3, [pc, #564]	; (800ebd0 <UART_SetConfig+0x69c>)
 800e99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e99e:	f003 0307 	and.w	r3, r3, #7
 800e9a2:	2b05      	cmp	r3, #5
 800e9a4:	d826      	bhi.n	800e9f4 <UART_SetConfig+0x4c0>
 800e9a6:	a201      	add	r2, pc, #4	; (adr r2, 800e9ac <UART_SetConfig+0x478>)
 800e9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ac:	0800e9c5 	.word	0x0800e9c5
 800e9b0:	0800e9cd 	.word	0x0800e9cd
 800e9b4:	0800e9d5 	.word	0x0800e9d5
 800e9b8:	0800e9dd 	.word	0x0800e9dd
 800e9bc:	0800e9e5 	.word	0x0800e9e5
 800e9c0:	0800e9ed 	.word	0x0800e9ed
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ca:	e086      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9cc:	2304      	movs	r3, #4
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e082      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9d4:	2308      	movs	r3, #8
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e07e      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9dc:	2310      	movs	r3, #16
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e07a      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9e4:	2320      	movs	r3, #32
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e076      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9ec:	2340      	movs	r3, #64	; 0x40
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e072      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9f4:	2380      	movs	r3, #128	; 0x80
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e06e      	b.n	800eada <UART_SetConfig+0x5a6>
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a75      	ldr	r2, [pc, #468]	; (800ebd8 <UART_SetConfig+0x6a4>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d130      	bne.n	800ea68 <UART_SetConfig+0x534>
 800ea06:	4b72      	ldr	r3, [pc, #456]	; (800ebd0 <UART_SetConfig+0x69c>)
 800ea08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	2b05      	cmp	r3, #5
 800ea10:	d826      	bhi.n	800ea60 <UART_SetConfig+0x52c>
 800ea12:	a201      	add	r2, pc, #4	; (adr r2, 800ea18 <UART_SetConfig+0x4e4>)
 800ea14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea18:	0800ea31 	.word	0x0800ea31
 800ea1c:	0800ea39 	.word	0x0800ea39
 800ea20:	0800ea41 	.word	0x0800ea41
 800ea24:	0800ea49 	.word	0x0800ea49
 800ea28:	0800ea51 	.word	0x0800ea51
 800ea2c:	0800ea59 	.word	0x0800ea59
 800ea30:	2300      	movs	r3, #0
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea36:	e050      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea38:	2304      	movs	r3, #4
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3e:	e04c      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea40:	2308      	movs	r3, #8
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e048      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea48:	2310      	movs	r3, #16
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4e:	e044      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea50:	2320      	movs	r3, #32
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea56:	e040      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea58:	2340      	movs	r3, #64	; 0x40
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e03c      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea60:	2380      	movs	r3, #128	; 0x80
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea66:	e038      	b.n	800eada <UART_SetConfig+0x5a6>
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a5b      	ldr	r2, [pc, #364]	; (800ebdc <UART_SetConfig+0x6a8>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d130      	bne.n	800ead4 <UART_SetConfig+0x5a0>
 800ea72:	4b57      	ldr	r3, [pc, #348]	; (800ebd0 <UART_SetConfig+0x69c>)
 800ea74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea76:	f003 0307 	and.w	r3, r3, #7
 800ea7a:	2b05      	cmp	r3, #5
 800ea7c:	d826      	bhi.n	800eacc <UART_SetConfig+0x598>
 800ea7e:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <UART_SetConfig+0x550>)
 800ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea84:	0800ea9d 	.word	0x0800ea9d
 800ea88:	0800eaa5 	.word	0x0800eaa5
 800ea8c:	0800eaad 	.word	0x0800eaad
 800ea90:	0800eab5 	.word	0x0800eab5
 800ea94:	0800eabd 	.word	0x0800eabd
 800ea98:	0800eac5 	.word	0x0800eac5
 800ea9c:	2302      	movs	r3, #2
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa2:	e01a      	b.n	800eada <UART_SetConfig+0x5a6>
 800eaa4:	2304      	movs	r3, #4
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaaa:	e016      	b.n	800eada <UART_SetConfig+0x5a6>
 800eaac:	2308      	movs	r3, #8
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab2:	e012      	b.n	800eada <UART_SetConfig+0x5a6>
 800eab4:	2310      	movs	r3, #16
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaba:	e00e      	b.n	800eada <UART_SetConfig+0x5a6>
 800eabc:	2320      	movs	r3, #32
 800eabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac2:	e00a      	b.n	800eada <UART_SetConfig+0x5a6>
 800eac4:	2340      	movs	r3, #64	; 0x40
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaca:	e006      	b.n	800eada <UART_SetConfig+0x5a6>
 800eacc:	2380      	movs	r3, #128	; 0x80
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead2:	e002      	b.n	800eada <UART_SetConfig+0x5a6>
 800ead4:	2380      	movs	r3, #128	; 0x80
 800ead6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a3f      	ldr	r2, [pc, #252]	; (800ebdc <UART_SetConfig+0x6a8>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	f040 80f8 	bne.w	800ecd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eae6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eaea:	2b20      	cmp	r3, #32
 800eaec:	dc46      	bgt.n	800eb7c <UART_SetConfig+0x648>
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	f2c0 8082 	blt.w	800ebf8 <UART_SetConfig+0x6c4>
 800eaf4:	3b02      	subs	r3, #2
 800eaf6:	2b1e      	cmp	r3, #30
 800eaf8:	d87e      	bhi.n	800ebf8 <UART_SetConfig+0x6c4>
 800eafa:	a201      	add	r2, pc, #4	; (adr r2, 800eb00 <UART_SetConfig+0x5cc>)
 800eafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb00:	0800eb83 	.word	0x0800eb83
 800eb04:	0800ebf9 	.word	0x0800ebf9
 800eb08:	0800eb8b 	.word	0x0800eb8b
 800eb0c:	0800ebf9 	.word	0x0800ebf9
 800eb10:	0800ebf9 	.word	0x0800ebf9
 800eb14:	0800ebf9 	.word	0x0800ebf9
 800eb18:	0800eb9b 	.word	0x0800eb9b
 800eb1c:	0800ebf9 	.word	0x0800ebf9
 800eb20:	0800ebf9 	.word	0x0800ebf9
 800eb24:	0800ebf9 	.word	0x0800ebf9
 800eb28:	0800ebf9 	.word	0x0800ebf9
 800eb2c:	0800ebf9 	.word	0x0800ebf9
 800eb30:	0800ebf9 	.word	0x0800ebf9
 800eb34:	0800ebf9 	.word	0x0800ebf9
 800eb38:	0800ebab 	.word	0x0800ebab
 800eb3c:	0800ebf9 	.word	0x0800ebf9
 800eb40:	0800ebf9 	.word	0x0800ebf9
 800eb44:	0800ebf9 	.word	0x0800ebf9
 800eb48:	0800ebf9 	.word	0x0800ebf9
 800eb4c:	0800ebf9 	.word	0x0800ebf9
 800eb50:	0800ebf9 	.word	0x0800ebf9
 800eb54:	0800ebf9 	.word	0x0800ebf9
 800eb58:	0800ebf9 	.word	0x0800ebf9
 800eb5c:	0800ebf9 	.word	0x0800ebf9
 800eb60:	0800ebf9 	.word	0x0800ebf9
 800eb64:	0800ebf9 	.word	0x0800ebf9
 800eb68:	0800ebf9 	.word	0x0800ebf9
 800eb6c:	0800ebf9 	.word	0x0800ebf9
 800eb70:	0800ebf9 	.word	0x0800ebf9
 800eb74:	0800ebf9 	.word	0x0800ebf9
 800eb78:	0800ebeb 	.word	0x0800ebeb
 800eb7c:	2b40      	cmp	r3, #64	; 0x40
 800eb7e:	d037      	beq.n	800ebf0 <UART_SetConfig+0x6bc>
 800eb80:	e03a      	b.n	800ebf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800eb82:	f7fc f809 	bl	800ab98 <HAL_RCCEx_GetD3PCLK1Freq>
 800eb86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb88:	e03c      	b.n	800ec04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fc f818 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb98:	e034      	b.n	800ec04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb9a:	f107 0318 	add.w	r3, r7, #24
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fc f964 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba8:	e02c      	b.n	800ec04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebaa:	4b09      	ldr	r3, [pc, #36]	; (800ebd0 <UART_SetConfig+0x69c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f003 0320 	and.w	r3, r3, #32
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d016      	beq.n	800ebe4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebb6:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <UART_SetConfig+0x69c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	08db      	lsrs	r3, r3, #3
 800ebbc:	f003 0303 	and.w	r3, r3, #3
 800ebc0:	4a07      	ldr	r2, [pc, #28]	; (800ebe0 <UART_SetConfig+0x6ac>)
 800ebc2:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebc8:	e01c      	b.n	800ec04 <UART_SetConfig+0x6d0>
 800ebca:	bf00      	nop
 800ebcc:	40011400 	.word	0x40011400
 800ebd0:	58024400 	.word	0x58024400
 800ebd4:	40007800 	.word	0x40007800
 800ebd8:	40007c00 	.word	0x40007c00
 800ebdc:	58000c00 	.word	0x58000c00
 800ebe0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ebe4:	4b9d      	ldr	r3, [pc, #628]	; (800ee5c <UART_SetConfig+0x928>)
 800ebe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebe8:	e00c      	b.n	800ec04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebea:	4b9d      	ldr	r3, [pc, #628]	; (800ee60 <UART_SetConfig+0x92c>)
 800ebec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebee:	e009      	b.n	800ec04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebf6:	e005      	b.n	800ec04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ec04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	f000 81de 	beq.w	800efc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec10:	4a94      	ldr	r2, [pc, #592]	; (800ee64 <UART_SetConfig+0x930>)
 800ec12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec16:	461a      	mov	r2, r3
 800ec18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec1e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	685a      	ldr	r2, [r3, #4]
 800ec24:	4613      	mov	r3, r2
 800ec26:	005b      	lsls	r3, r3, #1
 800ec28:	4413      	add	r3, r2
 800ec2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d305      	bcc.n	800ec3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d903      	bls.n	800ec44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec42:	e1c1      	b.n	800efc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec46:	2200      	movs	r2, #0
 800ec48:	60bb      	str	r3, [r7, #8]
 800ec4a:	60fa      	str	r2, [r7, #12]
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec50:	4a84      	ldr	r2, [pc, #528]	; (800ee64 <UART_SetConfig+0x930>)
 800ec52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	2200      	movs	r2, #0
 800ec5a:	603b      	str	r3, [r7, #0]
 800ec5c:	607a      	str	r2, [r7, #4]
 800ec5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ec66:	f7f1 fb37 	bl	80002d8 <__aeabi_uldivmod>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	4610      	mov	r0, r2
 800ec70:	4619      	mov	r1, r3
 800ec72:	f04f 0200 	mov.w	r2, #0
 800ec76:	f04f 0300 	mov.w	r3, #0
 800ec7a:	020b      	lsls	r3, r1, #8
 800ec7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ec80:	0202      	lsls	r2, r0, #8
 800ec82:	6979      	ldr	r1, [r7, #20]
 800ec84:	6849      	ldr	r1, [r1, #4]
 800ec86:	0849      	lsrs	r1, r1, #1
 800ec88:	2000      	movs	r0, #0
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	eb12 0804 	adds.w	r8, r2, r4
 800ec92:	eb43 0905 	adc.w	r9, r3, r5
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	469a      	mov	sl, r3
 800ec9e:	4693      	mov	fp, r2
 800eca0:	4652      	mov	r2, sl
 800eca2:	465b      	mov	r3, fp
 800eca4:	4640      	mov	r0, r8
 800eca6:	4649      	mov	r1, r9
 800eca8:	f7f1 fb16 	bl	80002d8 <__aeabi_uldivmod>
 800ecac:	4602      	mov	r2, r0
 800ecae:	460b      	mov	r3, r1
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecba:	d308      	bcc.n	800ecce <UART_SetConfig+0x79a>
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecc2:	d204      	bcs.n	800ecce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecca:	60da      	str	r2, [r3, #12]
 800eccc:	e17c      	b.n	800efc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ecd4:	e178      	b.n	800efc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	69db      	ldr	r3, [r3, #28]
 800ecda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecde:	f040 80c5 	bne.w	800ee6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ece2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ece6:	2b20      	cmp	r3, #32
 800ece8:	dc48      	bgt.n	800ed7c <UART_SetConfig+0x848>
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	db7b      	blt.n	800ede6 <UART_SetConfig+0x8b2>
 800ecee:	2b20      	cmp	r3, #32
 800ecf0:	d879      	bhi.n	800ede6 <UART_SetConfig+0x8b2>
 800ecf2:	a201      	add	r2, pc, #4	; (adr r2, 800ecf8 <UART_SetConfig+0x7c4>)
 800ecf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf8:	0800ed83 	.word	0x0800ed83
 800ecfc:	0800ed8b 	.word	0x0800ed8b
 800ed00:	0800ede7 	.word	0x0800ede7
 800ed04:	0800ede7 	.word	0x0800ede7
 800ed08:	0800ed93 	.word	0x0800ed93
 800ed0c:	0800ede7 	.word	0x0800ede7
 800ed10:	0800ede7 	.word	0x0800ede7
 800ed14:	0800ede7 	.word	0x0800ede7
 800ed18:	0800eda3 	.word	0x0800eda3
 800ed1c:	0800ede7 	.word	0x0800ede7
 800ed20:	0800ede7 	.word	0x0800ede7
 800ed24:	0800ede7 	.word	0x0800ede7
 800ed28:	0800ede7 	.word	0x0800ede7
 800ed2c:	0800ede7 	.word	0x0800ede7
 800ed30:	0800ede7 	.word	0x0800ede7
 800ed34:	0800ede7 	.word	0x0800ede7
 800ed38:	0800edb3 	.word	0x0800edb3
 800ed3c:	0800ede7 	.word	0x0800ede7
 800ed40:	0800ede7 	.word	0x0800ede7
 800ed44:	0800ede7 	.word	0x0800ede7
 800ed48:	0800ede7 	.word	0x0800ede7
 800ed4c:	0800ede7 	.word	0x0800ede7
 800ed50:	0800ede7 	.word	0x0800ede7
 800ed54:	0800ede7 	.word	0x0800ede7
 800ed58:	0800ede7 	.word	0x0800ede7
 800ed5c:	0800ede7 	.word	0x0800ede7
 800ed60:	0800ede7 	.word	0x0800ede7
 800ed64:	0800ede7 	.word	0x0800ede7
 800ed68:	0800ede7 	.word	0x0800ede7
 800ed6c:	0800ede7 	.word	0x0800ede7
 800ed70:	0800ede7 	.word	0x0800ede7
 800ed74:	0800ede7 	.word	0x0800ede7
 800ed78:	0800edd9 	.word	0x0800edd9
 800ed7c:	2b40      	cmp	r3, #64	; 0x40
 800ed7e:	d02e      	beq.n	800edde <UART_SetConfig+0x8aa>
 800ed80:	e031      	b.n	800ede6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed82:	f7fa fac5 	bl	8009310 <HAL_RCC_GetPCLK1Freq>
 800ed86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed88:	e033      	b.n	800edf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed8a:	f7fa fad7 	bl	800933c <HAL_RCC_GetPCLK2Freq>
 800ed8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed90:	e02f      	b.n	800edf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fb ff14 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eda0:	e027      	b.n	800edf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eda2:	f107 0318 	add.w	r3, r7, #24
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fc f860 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edb0:	e01f      	b.n	800edf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edb2:	4b2d      	ldr	r3, [pc, #180]	; (800ee68 <UART_SetConfig+0x934>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f003 0320 	and.w	r3, r3, #32
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d009      	beq.n	800edd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edbe:	4b2a      	ldr	r3, [pc, #168]	; (800ee68 <UART_SetConfig+0x934>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	08db      	lsrs	r3, r3, #3
 800edc4:	f003 0303 	and.w	r3, r3, #3
 800edc8:	4a24      	ldr	r2, [pc, #144]	; (800ee5c <UART_SetConfig+0x928>)
 800edca:	fa22 f303 	lsr.w	r3, r2, r3
 800edce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edd0:	e00f      	b.n	800edf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800edd2:	4b22      	ldr	r3, [pc, #136]	; (800ee5c <UART_SetConfig+0x928>)
 800edd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edd6:	e00c      	b.n	800edf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edd8:	4b21      	ldr	r3, [pc, #132]	; (800ee60 <UART_SetConfig+0x92c>)
 800edda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eddc:	e009      	b.n	800edf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ede2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede4:	e005      	b.n	800edf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ede6:	2300      	movs	r3, #0
 800ede8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800edf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 80e7 	beq.w	800efc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfe:	4a19      	ldr	r2, [pc, #100]	; (800ee64 <UART_SetConfig+0x930>)
 800ee00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee04:	461a      	mov	r2, r3
 800ee06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee0c:	005a      	lsls	r2, r3, #1
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	085b      	lsrs	r3, r3, #1
 800ee14:	441a      	add	r2, r3
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	2b0f      	cmp	r3, #15
 800ee24:	d916      	bls.n	800ee54 <UART_SetConfig+0x920>
 800ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee2c:	d212      	bcs.n	800ee54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	f023 030f 	bic.w	r3, r3, #15
 800ee36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3a:	085b      	lsrs	r3, r3, #1
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee46:	4313      	orrs	r3, r2
 800ee48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ee50:	60da      	str	r2, [r3, #12]
 800ee52:	e0b9      	b.n	800efc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee5a:	e0b5      	b.n	800efc8 <UART_SetConfig+0xa94>
 800ee5c:	03d09000 	.word	0x03d09000
 800ee60:	003d0900 	.word	0x003d0900
 800ee64:	0801050c 	.word	0x0801050c
 800ee68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ee6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee70:	2b20      	cmp	r3, #32
 800ee72:	dc49      	bgt.n	800ef08 <UART_SetConfig+0x9d4>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	db7c      	blt.n	800ef72 <UART_SetConfig+0xa3e>
 800ee78:	2b20      	cmp	r3, #32
 800ee7a:	d87a      	bhi.n	800ef72 <UART_SetConfig+0xa3e>
 800ee7c:	a201      	add	r2, pc, #4	; (adr r2, 800ee84 <UART_SetConfig+0x950>)
 800ee7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee82:	bf00      	nop
 800ee84:	0800ef0f 	.word	0x0800ef0f
 800ee88:	0800ef17 	.word	0x0800ef17
 800ee8c:	0800ef73 	.word	0x0800ef73
 800ee90:	0800ef73 	.word	0x0800ef73
 800ee94:	0800ef1f 	.word	0x0800ef1f
 800ee98:	0800ef73 	.word	0x0800ef73
 800ee9c:	0800ef73 	.word	0x0800ef73
 800eea0:	0800ef73 	.word	0x0800ef73
 800eea4:	0800ef2f 	.word	0x0800ef2f
 800eea8:	0800ef73 	.word	0x0800ef73
 800eeac:	0800ef73 	.word	0x0800ef73
 800eeb0:	0800ef73 	.word	0x0800ef73
 800eeb4:	0800ef73 	.word	0x0800ef73
 800eeb8:	0800ef73 	.word	0x0800ef73
 800eebc:	0800ef73 	.word	0x0800ef73
 800eec0:	0800ef73 	.word	0x0800ef73
 800eec4:	0800ef3f 	.word	0x0800ef3f
 800eec8:	0800ef73 	.word	0x0800ef73
 800eecc:	0800ef73 	.word	0x0800ef73
 800eed0:	0800ef73 	.word	0x0800ef73
 800eed4:	0800ef73 	.word	0x0800ef73
 800eed8:	0800ef73 	.word	0x0800ef73
 800eedc:	0800ef73 	.word	0x0800ef73
 800eee0:	0800ef73 	.word	0x0800ef73
 800eee4:	0800ef73 	.word	0x0800ef73
 800eee8:	0800ef73 	.word	0x0800ef73
 800eeec:	0800ef73 	.word	0x0800ef73
 800eef0:	0800ef73 	.word	0x0800ef73
 800eef4:	0800ef73 	.word	0x0800ef73
 800eef8:	0800ef73 	.word	0x0800ef73
 800eefc:	0800ef73 	.word	0x0800ef73
 800ef00:	0800ef73 	.word	0x0800ef73
 800ef04:	0800ef65 	.word	0x0800ef65
 800ef08:	2b40      	cmp	r3, #64	; 0x40
 800ef0a:	d02e      	beq.n	800ef6a <UART_SetConfig+0xa36>
 800ef0c:	e031      	b.n	800ef72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef0e:	f7fa f9ff 	bl	8009310 <HAL_RCC_GetPCLK1Freq>
 800ef12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef14:	e033      	b.n	800ef7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef16:	f7fa fa11 	bl	800933c <HAL_RCC_GetPCLK2Freq>
 800ef1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef1c:	e02f      	b.n	800ef7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fb fe4e 	bl	800abc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef2c:	e027      	b.n	800ef7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef2e:	f107 0318 	add.w	r3, r7, #24
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fb ff9a 	bl	800ae6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef3c:	e01f      	b.n	800ef7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef3e:	4b2d      	ldr	r3, [pc, #180]	; (800eff4 <UART_SetConfig+0xac0>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 0320 	and.w	r3, r3, #32
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d009      	beq.n	800ef5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef4a:	4b2a      	ldr	r3, [pc, #168]	; (800eff4 <UART_SetConfig+0xac0>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	08db      	lsrs	r3, r3, #3
 800ef50:	f003 0303 	and.w	r3, r3, #3
 800ef54:	4a28      	ldr	r2, [pc, #160]	; (800eff8 <UART_SetConfig+0xac4>)
 800ef56:	fa22 f303 	lsr.w	r3, r2, r3
 800ef5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef5c:	e00f      	b.n	800ef7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ef5e:	4b26      	ldr	r3, [pc, #152]	; (800eff8 <UART_SetConfig+0xac4>)
 800ef60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef62:	e00c      	b.n	800ef7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef64:	4b25      	ldr	r3, [pc, #148]	; (800effc <UART_SetConfig+0xac8>)
 800ef66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef68:	e009      	b.n	800ef7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef70:	e005      	b.n	800ef7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ef72:	2300      	movs	r3, #0
 800ef74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef7c:	bf00      	nop
    }

    if (pclk != 0U)
 800ef7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d021      	beq.n	800efc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef88:	4a1d      	ldr	r2, [pc, #116]	; (800f000 <UART_SetConfig+0xacc>)
 800ef8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	085b      	lsrs	r3, r3, #1
 800ef9c:	441a      	add	r2, r3
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	2b0f      	cmp	r3, #15
 800efac:	d909      	bls.n	800efc2 <UART_SetConfig+0xa8e>
 800efae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efb4:	d205      	bcs.n	800efc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800efb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb8:	b29a      	uxth	r2, r3
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	60da      	str	r2, [r3, #12]
 800efc0:	e002      	b.n	800efc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2201      	movs	r2, #1
 800efcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2201      	movs	r2, #1
 800efd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2200      	movs	r2, #0
 800efdc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2200      	movs	r2, #0
 800efe2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800efe4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3748      	adds	r7, #72	; 0x48
 800efec:	46bd      	mov	sp, r7
 800efee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eff2:	bf00      	nop
 800eff4:	58024400 	.word	0x58024400
 800eff8:	03d09000 	.word	0x03d09000
 800effc:	003d0900 	.word	0x003d0900
 800f000:	0801050c 	.word	0x0801050c

0800f004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00a      	beq.n	800f02e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f032:	f003 0302 	and.w	r3, r3, #2
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00a      	beq.n	800f050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	430a      	orrs	r2, r1
 800f04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f054:	f003 0304 	and.w	r3, r3, #4
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00a      	beq.n	800f072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	430a      	orrs	r2, r1
 800f070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f076:	f003 0308 	and.w	r3, r3, #8
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00a      	beq.n	800f094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	430a      	orrs	r2, r1
 800f092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f098:	f003 0310 	and.w	r3, r3, #16
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00a      	beq.n	800f0b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ba:	f003 0320 	and.w	r3, r3, #32
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00a      	beq.n	800f0d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	430a      	orrs	r2, r1
 800f0d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d01a      	beq.n	800f11a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	430a      	orrs	r2, r1
 800f0f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f102:	d10a      	bne.n	800f11a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00a      	beq.n	800f13c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	430a      	orrs	r2, r1
 800f13a:	605a      	str	r2, [r3, #4]
  }
}
 800f13c:	bf00      	nop
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f158:	f7f3 fbf8 	bl	800294c <HAL_GetTick>
 800f15c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f003 0308 	and.w	r3, r3, #8
 800f168:	2b08      	cmp	r3, #8
 800f16a:	d10e      	bne.n	800f18a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f16c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f82f 	bl	800f1de <UART_WaitOnFlagUntilTimeout>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d001      	beq.n	800f18a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f186:	2303      	movs	r3, #3
 800f188:	e025      	b.n	800f1d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b04      	cmp	r3, #4
 800f196:	d10e      	bne.n	800f1b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f819 	bl	800f1de <UART_WaitOnFlagUntilTimeout>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	e00f      	b.n	800f1d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2220      	movs	r2, #32
 800f1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2220      	movs	r2, #32
 800f1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b09c      	sub	sp, #112	; 0x70
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	60f8      	str	r0, [r7, #12]
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	603b      	str	r3, [r7, #0]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1ee:	e0a9      	b.n	800f344 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1f6:	f000 80a5 	beq.w	800f344 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1fa:	f7f3 fba7 	bl	800294c <HAL_GetTick>
 800f1fe:	4602      	mov	r2, r0
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	1ad3      	subs	r3, r2, r3
 800f204:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f206:	429a      	cmp	r2, r3
 800f208:	d302      	bcc.n	800f210 <UART_WaitOnFlagUntilTimeout+0x32>
 800f20a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d140      	bne.n	800f292 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f218:	e853 3f00 	ldrex	r3, [r3]
 800f21c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f224:	667b      	str	r3, [r7, #100]	; 0x64
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	461a      	mov	r2, r3
 800f22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f22e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f230:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f236:	e841 2300 	strex	r3, r2, [r1]
 800f23a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1e6      	bne.n	800f210 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	3308      	adds	r3, #8
 800f248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f24c:	e853 3f00 	ldrex	r3, [r3]
 800f250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f254:	f023 0301 	bic.w	r3, r3, #1
 800f258:	663b      	str	r3, [r7, #96]	; 0x60
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3308      	adds	r3, #8
 800f260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f262:	64ba      	str	r2, [r7, #72]	; 0x48
 800f264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f26a:	e841 2300 	strex	r3, r2, [r1]
 800f26e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f272:	2b00      	cmp	r3, #0
 800f274:	d1e5      	bne.n	800f242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2220      	movs	r2, #32
 800f27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2220      	movs	r2, #32
 800f282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f28e:	2303      	movs	r3, #3
 800f290:	e069      	b.n	800f366 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 0304 	and.w	r3, r3, #4
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d051      	beq.n	800f344 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	69db      	ldr	r3, [r3, #28]
 800f2a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2ae:	d149      	bne.n	800f344 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c2:	e853 3f00 	ldrex	r3, [r3]
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f2ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800f2da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2e0:	e841 2300 	strex	r3, r2, [r1]
 800f2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1e6      	bne.n	800f2ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	e853 3f00 	ldrex	r3, [r3]
 800f2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	f023 0301 	bic.w	r3, r3, #1
 800f302:	66bb      	str	r3, [r7, #104]	; 0x68
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3308      	adds	r3, #8
 800f30a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f30c:	623a      	str	r2, [r7, #32]
 800f30e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f310:	69f9      	ldr	r1, [r7, #28]
 800f312:	6a3a      	ldr	r2, [r7, #32]
 800f314:	e841 2300 	strex	r3, r2, [r1]
 800f318:	61bb      	str	r3, [r7, #24]
   return(result);
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1e5      	bne.n	800f2ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2220      	movs	r2, #32
 800f324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2220      	movs	r2, #32
 800f32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2220      	movs	r2, #32
 800f334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f340:	2303      	movs	r3, #3
 800f342:	e010      	b.n	800f366 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	69da      	ldr	r2, [r3, #28]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	4013      	ands	r3, r2
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	429a      	cmp	r2, r3
 800f352:	bf0c      	ite	eq
 800f354:	2301      	moveq	r3, #1
 800f356:	2300      	movne	r3, #0
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	461a      	mov	r2, r3
 800f35c:	79fb      	ldrb	r3, [r7, #7]
 800f35e:	429a      	cmp	r2, r3
 800f360:	f43f af46 	beq.w	800f1f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3770      	adds	r7, #112	; 0x70
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f370:	b480      	push	{r7}
 800f372:	b0a3      	sub	sp, #140	; 0x8c
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	4613      	mov	r3, r2
 800f37c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	88fa      	ldrh	r2, [r7, #6]
 800f388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	88fa      	ldrh	r2, [r7, #6]
 800f390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3a2:	d10e      	bne.n	800f3c2 <UART_Start_Receive_IT+0x52>
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	691b      	ldr	r3, [r3, #16]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d105      	bne.n	800f3b8 <UART_Start_Receive_IT+0x48>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f3b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3b6:	e02d      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	22ff      	movs	r2, #255	; 0xff
 800f3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3c0:	e028      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d10d      	bne.n	800f3e6 <UART_Start_Receive_IT+0x76>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d104      	bne.n	800f3dc <UART_Start_Receive_IT+0x6c>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	22ff      	movs	r2, #255	; 0xff
 800f3d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3da:	e01b      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	227f      	movs	r2, #127	; 0x7f
 800f3e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3e4:	e016      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3ee:	d10d      	bne.n	800f40c <UART_Start_Receive_IT+0x9c>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <UART_Start_Receive_IT+0x92>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	227f      	movs	r2, #127	; 0x7f
 800f3fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f400:	e008      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	223f      	movs	r2, #63	; 0x3f
 800f406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f40a:	e003      	b.n	800f414 <UART_Start_Receive_IT+0xa4>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2222      	movs	r2, #34	; 0x22
 800f420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	3308      	adds	r3, #8
 800f42a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f42e:	e853 3f00 	ldrex	r3, [r3]
 800f432:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f436:	f043 0301 	orr.w	r3, r3, #1
 800f43a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f448:	673a      	str	r2, [r7, #112]	; 0x70
 800f44a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f44e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f450:	e841 2300 	strex	r3, r2, [r1]
 800f454:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1e3      	bne.n	800f424 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f464:	d153      	bne.n	800f50e <UART_Start_Receive_IT+0x19e>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f46c:	88fa      	ldrh	r2, [r7, #6]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d34d      	bcc.n	800f50e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	689b      	ldr	r3, [r3, #8]
 800f476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f47a:	d107      	bne.n	800f48c <UART_Start_Receive_IT+0x11c>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d103      	bne.n	800f48c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	4a4b      	ldr	r2, [pc, #300]	; (800f5b4 <UART_Start_Receive_IT+0x244>)
 800f488:	671a      	str	r2, [r3, #112]	; 0x70
 800f48a:	e002      	b.n	800f492 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	4a4a      	ldr	r2, [pc, #296]	; (800f5b8 <UART_Start_Receive_IT+0x248>)
 800f490:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	691b      	ldr	r3, [r3, #16]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d01a      	beq.n	800f4d8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4aa:	e853 3f00 	ldrex	r3, [r3]
 800f4ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f4ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4cc:	e841 2300 	strex	r3, r2, [r1]
 800f4d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f4d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e4      	bne.n	800f4a2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	3308      	adds	r3, #8
 800f4de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e2:	e853 3f00 	ldrex	r3, [r3]
 800f4e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4f8:	64ba      	str	r2, [r7, #72]	; 0x48
 800f4fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f500:	e841 2300 	strex	r3, r2, [r1]
 800f504:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1e5      	bne.n	800f4d8 <UART_Start_Receive_IT+0x168>
 800f50c:	e04a      	b.n	800f5a4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f516:	d107      	bne.n	800f528 <UART_Start_Receive_IT+0x1b8>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	691b      	ldr	r3, [r3, #16]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d103      	bne.n	800f528 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4a26      	ldr	r2, [pc, #152]	; (800f5bc <UART_Start_Receive_IT+0x24c>)
 800f524:	671a      	str	r2, [r3, #112]	; 0x70
 800f526:	e002      	b.n	800f52e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	4a25      	ldr	r2, [pc, #148]	; (800f5c0 <UART_Start_Receive_IT+0x250>)
 800f52c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2200      	movs	r2, #0
 800f532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d019      	beq.n	800f572 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f546:	e853 3f00 	ldrex	r3, [r3]
 800f54a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f552:	677b      	str	r3, [r7, #116]	; 0x74
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f55c:	637b      	str	r3, [r7, #52]	; 0x34
 800f55e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f564:	e841 2300 	strex	r3, r2, [r1]
 800f568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1e6      	bne.n	800f53e <UART_Start_Receive_IT+0x1ce>
 800f570:	e018      	b.n	800f5a4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	e853 3f00 	ldrex	r3, [r3]
 800f57e:	613b      	str	r3, [r7, #16]
   return(result);
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	f043 0320 	orr.w	r3, r3, #32
 800f586:	67bb      	str	r3, [r7, #120]	; 0x78
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	461a      	mov	r2, r3
 800f58e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f590:	623b      	str	r3, [r7, #32]
 800f592:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f594:	69f9      	ldr	r1, [r7, #28]
 800f596:	6a3a      	ldr	r2, [r7, #32]
 800f598:	e841 2300 	strex	r3, r2, [r1]
 800f59c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1e6      	bne.n	800f572 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	378c      	adds	r7, #140	; 0x8c
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	0800fccd 	.word	0x0800fccd
 800f5b8:	0800f9d5 	.word	0x0800f9d5
 800f5bc:	0800f873 	.word	0x0800f873
 800f5c0:	0800f713 	.word	0x0800f713

0800f5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b095      	sub	sp, #84	; 0x54
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d4:	e853 3f00 	ldrex	r3, [r3]
 800f5d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ea:	643b      	str	r3, [r7, #64]	; 0x40
 800f5ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5f2:	e841 2300 	strex	r3, r2, [r1]
 800f5f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1e6      	bne.n	800f5cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	3308      	adds	r3, #8
 800f604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f606:	6a3b      	ldr	r3, [r7, #32]
 800f608:	e853 3f00 	ldrex	r3, [r3]
 800f60c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f60e:	69fa      	ldr	r2, [r7, #28]
 800f610:	4b1e      	ldr	r3, [pc, #120]	; (800f68c <UART_EndRxTransfer+0xc8>)
 800f612:	4013      	ands	r3, r2
 800f614:	64bb      	str	r3, [r7, #72]	; 0x48
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3308      	adds	r3, #8
 800f61c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f61e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f620:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f626:	e841 2300 	strex	r3, r2, [r1]
 800f62a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1e5      	bne.n	800f5fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f636:	2b01      	cmp	r3, #1
 800f638:	d118      	bne.n	800f66c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	e853 3f00 	ldrex	r3, [r3]
 800f646:	60bb      	str	r3, [r7, #8]
   return(result);
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	f023 0310 	bic.w	r3, r3, #16
 800f64e:	647b      	str	r3, [r7, #68]	; 0x44
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	461a      	mov	r2, r3
 800f656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f658:	61bb      	str	r3, [r7, #24]
 800f65a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65c:	6979      	ldr	r1, [r7, #20]
 800f65e:	69ba      	ldr	r2, [r7, #24]
 800f660:	e841 2300 	strex	r3, r2, [r1]
 800f664:	613b      	str	r3, [r7, #16]
   return(result);
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1e6      	bne.n	800f63a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2220      	movs	r2, #32
 800f670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f680:	bf00      	nop
 800f682:	3754      	adds	r7, #84	; 0x54
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	effffffe 	.word	0xeffffffe

0800f690 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f69c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f7fe ff2a 	bl	800e508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6b4:	bf00      	nop
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	e853 3f00 	ldrex	r3, [r3]
 800f6d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6d8:	61fb      	str	r3, [r7, #28]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	61bb      	str	r3, [r7, #24]
 800f6e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e6:	6979      	ldr	r1, [r7, #20]
 800f6e8:	69ba      	ldr	r2, [r7, #24]
 800f6ea:	e841 2300 	strex	r3, r2, [r1]
 800f6ee:	613b      	str	r3, [r7, #16]
   return(result);
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1e6      	bne.n	800f6c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2220      	movs	r2, #32
 800f6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2200      	movs	r2, #0
 800f702:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7fe fef5 	bl	800e4f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f70a:	bf00      	nop
 800f70c:	3720      	adds	r7, #32
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b096      	sub	sp, #88	; 0x58
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f720:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f72a:	2b22      	cmp	r3, #34	; 0x22
 800f72c:	f040 8095 	bne.w	800f85a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f736:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f73a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f73e:	b2d9      	uxtb	r1, r3
 800f740:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f744:	b2da      	uxtb	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f74a:	400a      	ands	r2, r1
 800f74c:	b2d2      	uxtb	r2, r2
 800f74e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f760:	b29b      	uxth	r3, r3
 800f762:	3b01      	subs	r3, #1
 800f764:	b29a      	uxth	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f772:	b29b      	uxth	r3, r3
 800f774:	2b00      	cmp	r3, #0
 800f776:	d178      	bne.n	800f86a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f780:	e853 3f00 	ldrex	r3, [r3]
 800f784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f78c:	653b      	str	r3, [r7, #80]	; 0x50
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	461a      	mov	r2, r3
 800f794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f796:	647b      	str	r3, [r7, #68]	; 0x44
 800f798:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f79a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f79c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f79e:	e841 2300 	strex	r3, r2, [r1]
 800f7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1e6      	bne.n	800f778 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	3308      	adds	r3, #8
 800f7b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	e853 3f00 	ldrex	r3, [r3]
 800f7b8:	623b      	str	r3, [r7, #32]
   return(result);
 800f7ba:	6a3b      	ldr	r3, [r7, #32]
 800f7bc:	f023 0301 	bic.w	r3, r3, #1
 800f7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	3308      	adds	r3, #8
 800f7c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7ca:	633a      	str	r2, [r7, #48]	; 0x30
 800f7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7d2:	e841 2300 	strex	r3, r2, [r1]
 800f7d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1e5      	bne.n	800f7aa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2220      	movs	r2, #32
 800f7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d12e      	bne.n	800f852 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	e853 3f00 	ldrex	r3, [r3]
 800f806:	60fb      	str	r3, [r7, #12]
   return(result);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f023 0310 	bic.w	r3, r3, #16
 800f80e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	461a      	mov	r2, r3
 800f816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f818:	61fb      	str	r3, [r7, #28]
 800f81a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81c:	69b9      	ldr	r1, [r7, #24]
 800f81e:	69fa      	ldr	r2, [r7, #28]
 800f820:	e841 2300 	strex	r3, r2, [r1]
 800f824:	617b      	str	r3, [r7, #20]
   return(result);
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d1e6      	bne.n	800f7fa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	69db      	ldr	r3, [r3, #28]
 800f832:	f003 0310 	and.w	r3, r3, #16
 800f836:	2b10      	cmp	r3, #16
 800f838:	d103      	bne.n	800f842 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2210      	movs	r2, #16
 800f840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f848:	4619      	mov	r1, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7fe fe66 	bl	800e51c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f850:	e00b      	b.n	800f86a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7f1 faba 	bl	8000dcc <HAL_UART_RxCpltCallback>
}
 800f858:	e007      	b.n	800f86a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	699a      	ldr	r2, [r3, #24]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f042 0208 	orr.w	r2, r2, #8
 800f868:	619a      	str	r2, [r3, #24]
}
 800f86a:	bf00      	nop
 800f86c:	3758      	adds	r7, #88	; 0x58
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b096      	sub	sp, #88	; 0x58
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f880:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f88a:	2b22      	cmp	r3, #34	; 0x22
 800f88c:	f040 8095 	bne.w	800f9ba <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f896:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f89e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f8a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f8a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f8a8:	4013      	ands	r3, r2
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b4:	1c9a      	adds	r2, r3, #2
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d178      	bne.n	800f9ca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e0:	e853 3f00 	ldrex	r3, [r3]
 800f8e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f6:	643b      	str	r3, [r7, #64]	; 0x40
 800f8f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8fe:	e841 2300 	strex	r3, r2, [r1]
 800f902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e6      	bne.n	800f8d8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3308      	adds	r3, #8
 800f910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f912:	6a3b      	ldr	r3, [r7, #32]
 800f914:	e853 3f00 	ldrex	r3, [r3]
 800f918:	61fb      	str	r3, [r7, #28]
   return(result);
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	f023 0301 	bic.w	r3, r3, #1
 800f920:	64bb      	str	r3, [r7, #72]	; 0x48
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	3308      	adds	r3, #8
 800f928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f92a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f92c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f932:	e841 2300 	strex	r3, r2, [r1]
 800f936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1e5      	bne.n	800f90a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2220      	movs	r2, #32
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f950:	2b01      	cmp	r3, #1
 800f952:	d12e      	bne.n	800f9b2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	e853 3f00 	ldrex	r3, [r3]
 800f966:	60bb      	str	r3, [r7, #8]
   return(result);
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	f023 0310 	bic.w	r3, r3, #16
 800f96e:	647b      	str	r3, [r7, #68]	; 0x44
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	461a      	mov	r2, r3
 800f976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f978:	61bb      	str	r3, [r7, #24]
 800f97a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97c:	6979      	ldr	r1, [r7, #20]
 800f97e:	69ba      	ldr	r2, [r7, #24]
 800f980:	e841 2300 	strex	r3, r2, [r1]
 800f984:	613b      	str	r3, [r7, #16]
   return(result);
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1e6      	bne.n	800f95a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	69db      	ldr	r3, [r3, #28]
 800f992:	f003 0310 	and.w	r3, r3, #16
 800f996:	2b10      	cmp	r3, #16
 800f998:	d103      	bne.n	800f9a2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2210      	movs	r2, #16
 800f9a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7fe fdb6 	bl	800e51c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f9b0:	e00b      	b.n	800f9ca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7f1 fa0a 	bl	8000dcc <HAL_UART_RxCpltCallback>
}
 800f9b8:	e007      	b.n	800f9ca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	699a      	ldr	r2, [r3, #24]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f042 0208 	orr.w	r2, r2, #8
 800f9c8:	619a      	str	r2, [r3, #24]
}
 800f9ca:	bf00      	nop
 800f9cc:	3758      	adds	r7, #88	; 0x58
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
	...

0800f9d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b0a6      	sub	sp, #152	; 0x98
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9e2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	69db      	ldr	r3, [r3, #28]
 800f9ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa0a:	2b22      	cmp	r3, #34	; 0x22
 800fa0c:	f040 814d 	bne.w	800fcaa <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa1a:	e0f4      	b.n	800fc06 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fa26:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fa2a:	b2d9      	uxtb	r1, r3
 800fa2c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa36:	400a      	ands	r2, r1
 800fa38:	b2d2      	uxtb	r2, r2
 800fa3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa40:	1c5a      	adds	r2, r3, #1
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	3b01      	subs	r3, #1
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	69db      	ldr	r3, [r3, #28]
 800fa5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fa62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa66:	f003 0307 	and.w	r3, r3, #7
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d053      	beq.n	800fb16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa72:	f003 0301 	and.w	r3, r3, #1
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d011      	beq.n	800fa9e <UART_RxISR_8BIT_FIFOEN+0xca>
 800fa7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00b      	beq.n	800fa9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa94:	f043 0201 	orr.w	r2, r3, #1
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800faa2:	f003 0302 	and.w	r3, r3, #2
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d011      	beq.n	800face <UART_RxISR_8BIT_FIFOEN+0xfa>
 800faaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800faae:	f003 0301 	and.w	r3, r3, #1
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00b      	beq.n	800face <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2202      	movs	r2, #2
 800fabc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fac4:	f043 0204 	orr.w	r2, r3, #4
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800face:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fad2:	f003 0304 	and.w	r3, r3, #4
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d011      	beq.n	800fafe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fade:	f003 0301 	and.w	r3, r3, #1
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00b      	beq.n	800fafe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2204      	movs	r2, #4
 800faec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faf4:	f043 0202 	orr.w	r2, r3, #2
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d006      	beq.n	800fb16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7fe fcfd 	bl	800e508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d171      	bne.n	800fc06 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb2a:	e853 3f00 	ldrex	r3, [r3]
 800fb2e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fb30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb44:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb46:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fb4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb4c:	e841 2300 	strex	r3, r2, [r1]
 800fb50:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fb52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1e4      	bne.n	800fb22 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	3308      	adds	r3, #8
 800fb5e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb62:	e853 3f00 	ldrex	r3, [r3]
 800fb66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fb68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb6a:	4b56      	ldr	r3, [pc, #344]	; (800fcc4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3308      	adds	r3, #8
 800fb76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb78:	657a      	str	r2, [r7, #84]	; 0x54
 800fb7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb80:	e841 2300 	strex	r3, r2, [r1]
 800fb84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1e5      	bne.n	800fb58 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2220      	movs	r2, #32
 800fb90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d12e      	bne.n	800fc00 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb0:	e853 3f00 	ldrex	r3, [r3]
 800fbb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb8:	f023 0310 	bic.w	r3, r3, #16
 800fbbc:	67bb      	str	r3, [r7, #120]	; 0x78
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbc6:	643b      	str	r3, [r7, #64]	; 0x40
 800fbc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbce:	e841 2300 	strex	r3, r2, [r1]
 800fbd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d1e6      	bne.n	800fba8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	69db      	ldr	r3, [r3, #28]
 800fbe0:	f003 0310 	and.w	r3, r3, #16
 800fbe4:	2b10      	cmp	r3, #16
 800fbe6:	d103      	bne.n	800fbf0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2210      	movs	r2, #16
 800fbee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7fe fc8f 	bl	800e51c <HAL_UARTEx_RxEventCallback>
 800fbfe:	e002      	b.n	800fc06 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7f1 f8e3 	bl	8000dcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d006      	beq.n	800fc1c <UART_RxISR_8BIT_FIFOEN+0x248>
 800fc0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc12:	f003 0320 	and.w	r3, r3, #32
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f47f af00 	bne.w	800fa1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc26:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d045      	beq.n	800fcba <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d23e      	bcs.n	800fcba <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	3308      	adds	r3, #8
 800fc42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	e853 3f00 	ldrex	r3, [r3]
 800fc4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc52:	673b      	str	r3, [r7, #112]	; 0x70
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3308      	adds	r3, #8
 800fc5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e5      	bne.n	800fc3c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a15      	ldr	r2, [pc, #84]	; (800fcc8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800fc74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	e853 3f00 	ldrex	r3, [r3]
 800fc82:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f043 0320 	orr.w	r3, r3, #32
 800fc8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc94:	61bb      	str	r3, [r7, #24]
 800fc96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc98:	6979      	ldr	r1, [r7, #20]
 800fc9a:	69ba      	ldr	r2, [r7, #24]
 800fc9c:	e841 2300 	strex	r3, r2, [r1]
 800fca0:	613b      	str	r3, [r7, #16]
   return(result);
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1e6      	bne.n	800fc76 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fca8:	e007      	b.n	800fcba <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	699a      	ldr	r2, [r3, #24]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f042 0208 	orr.w	r2, r2, #8
 800fcb8:	619a      	str	r2, [r3, #24]
}
 800fcba:	bf00      	nop
 800fcbc:	3798      	adds	r7, #152	; 0x98
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	effffffe 	.word	0xeffffffe
 800fcc8:	0800f713 	.word	0x0800f713

0800fccc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b0a8      	sub	sp, #160	; 0xa0
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcda:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	69db      	ldr	r3, [r3, #28]
 800fce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd02:	2b22      	cmp	r3, #34	; 0x22
 800fd04:	f040 8151 	bne.w	800ffaa <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd12:	e0f8      	b.n	800ff06 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800fd26:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800fd2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800fd2e:	4013      	ands	r3, r2
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd3c:	1c9a      	adds	r2, r3, #2
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	69db      	ldr	r3, [r3, #28]
 800fd5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd62:	f003 0307 	and.w	r3, r3, #7
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d053      	beq.n	800fe12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd6e:	f003 0301 	and.w	r3, r3, #1
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d011      	beq.n	800fd9a <UART_RxISR_16BIT_FIFOEN+0xce>
 800fd76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2201      	movs	r2, #1
 800fd88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd90:	f043 0201 	orr.w	r2, r3, #1
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd9e:	f003 0302 	and.w	r3, r3, #2
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d011      	beq.n	800fdca <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fda6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00b      	beq.n	800fdca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2202      	movs	r2, #2
 800fdb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdc0:	f043 0204 	orr.w	r2, r3, #4
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fdce:	f003 0304 	and.w	r3, r3, #4
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d011      	beq.n	800fdfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fdd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00b      	beq.n	800fdfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2204      	movs	r2, #4
 800fde8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdf0:	f043 0202 	orr.w	r2, r3, #2
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d006      	beq.n	800fe12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7fe fb7f 	bl	800e508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d173      	bne.n	800ff06 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe26:	e853 3f00 	ldrex	r3, [r3]
 800fe2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fe2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe42:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fe48:	e841 2300 	strex	r3, r2, [r1]
 800fe4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fe4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1e4      	bne.n	800fe1e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3308      	adds	r3, #8
 800fe5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe5e:	e853 3f00 	ldrex	r3, [r3]
 800fe62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe66:	4b57      	ldr	r3, [pc, #348]	; (800ffc4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800fe68:	4013      	ands	r3, r2
 800fe6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	3308      	adds	r3, #8
 800fe74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe78:	65ba      	str	r2, [r7, #88]	; 0x58
 800fe7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe80:	e841 2300 	strex	r3, r2, [r1]
 800fe84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e3      	bne.n	800fe54 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2220      	movs	r2, #32
 800fe90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d12e      	bne.n	800ff00 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	e853 3f00 	ldrex	r3, [r3]
 800feb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800feb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb8:	f023 0310 	bic.w	r3, r3, #16
 800febc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fec6:	647b      	str	r3, [r7, #68]	; 0x44
 800fec8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fece:	e841 2300 	strex	r3, r2, [r1]
 800fed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1e6      	bne.n	800fea8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	f003 0310 	and.w	r3, r3, #16
 800fee4:	2b10      	cmp	r3, #16
 800fee6:	d103      	bne.n	800fef0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2210      	movs	r2, #16
 800feee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7fe fb0f 	bl	800e51c <HAL_UARTEx_RxEventCallback>
 800fefe:	e002      	b.n	800ff06 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7f0 ff63 	bl	8000dcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d006      	beq.n	800ff1c <UART_RxISR_16BIT_FIFOEN+0x250>
 800ff0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff12:	f003 0320 	and.w	r3, r3, #32
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f47f aefc 	bne.w	800fd14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff22:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d045      	beq.n	800ffba <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff34:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d23e      	bcs.n	800ffba <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	3308      	adds	r3, #8
 800ff42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	e853 3f00 	ldrex	r3, [r3]
 800ff4a:	623b      	str	r3, [r7, #32]
   return(result);
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff52:	677b      	str	r3, [r7, #116]	; 0x74
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	3308      	adds	r3, #8
 800ff5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ff5c:	633a      	str	r2, [r7, #48]	; 0x30
 800ff5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff64:	e841 2300 	strex	r3, r2, [r1]
 800ff68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d1e5      	bne.n	800ff3c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	4a15      	ldr	r2, [pc, #84]	; (800ffc8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ff74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	e853 3f00 	ldrex	r3, [r3]
 800ff82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f043 0320 	orr.w	r3, r3, #32
 800ff8a:	673b      	str	r3, [r7, #112]	; 0x70
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	461a      	mov	r2, r3
 800ff92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff94:	61fb      	str	r3, [r7, #28]
 800ff96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff98:	69b9      	ldr	r1, [r7, #24]
 800ff9a:	69fa      	ldr	r2, [r7, #28]
 800ff9c:	e841 2300 	strex	r3, r2, [r1]
 800ffa0:	617b      	str	r3, [r7, #20]
   return(result);
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d1e6      	bne.n	800ff76 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ffa8:	e007      	b.n	800ffba <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	699a      	ldr	r2, [r3, #24]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f042 0208 	orr.w	r2, r2, #8
 800ffb8:	619a      	str	r2, [r3, #24]
}
 800ffba:	bf00      	nop
 800ffbc:	37a0      	adds	r7, #160	; 0xa0
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	effffffe 	.word	0xeffffffe
 800ffc8:	0800f873 	.word	0x0800f873

0800ffcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ffd4:	bf00      	nop
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fffc:	bf00      	nop
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010016:	2b01      	cmp	r3, #1
 8010018:	d101      	bne.n	801001e <HAL_UARTEx_DisableFifoMode+0x16>
 801001a:	2302      	movs	r3, #2
 801001c:	e027      	b.n	801006e <HAL_UARTEx_DisableFifoMode+0x66>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2201      	movs	r2, #1
 8010022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2224      	movs	r2, #36	; 0x24
 801002a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f022 0201 	bic.w	r2, r2, #1
 8010044:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801004c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2220      	movs	r2, #32
 8010060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3714      	adds	r7, #20
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801007a:	b580      	push	{r7, lr}
 801007c:	b084      	sub	sp, #16
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
 8010082:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801008a:	2b01      	cmp	r3, #1
 801008c:	d101      	bne.n	8010092 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801008e:	2302      	movs	r3, #2
 8010090:	e02d      	b.n	80100ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2201      	movs	r2, #1
 8010096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2224      	movs	r2, #36	; 0x24
 801009e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f022 0201 	bic.w	r2, r2, #1
 80100b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	683a      	ldr	r2, [r7, #0]
 80100ca:	430a      	orrs	r2, r1
 80100cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 f850 	bl	8010174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2220      	movs	r2, #32
 80100e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b084      	sub	sp, #16
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010106:	2b01      	cmp	r3, #1
 8010108:	d101      	bne.n	801010e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801010a:	2302      	movs	r3, #2
 801010c:	e02d      	b.n	801016a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2201      	movs	r2, #1
 8010112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2224      	movs	r2, #36	; 0x24
 801011a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f022 0201 	bic.w	r2, r2, #1
 8010134:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	689b      	ldr	r3, [r3, #8]
 801013c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	683a      	ldr	r2, [r7, #0]
 8010146:	430a      	orrs	r2, r1
 8010148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 f812 	bl	8010174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2220      	movs	r2, #32
 801015c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010180:	2b00      	cmp	r3, #0
 8010182:	d108      	bne.n	8010196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2201      	movs	r2, #1
 8010188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2201      	movs	r2, #1
 8010190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010194:	e031      	b.n	80101fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010196:	2310      	movs	r3, #16
 8010198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801019a:	2310      	movs	r3, #16
 801019c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	0e5b      	lsrs	r3, r3, #25
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	f003 0307 	and.w	r3, r3, #7
 80101ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	0f5b      	lsrs	r3, r3, #29
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0307 	and.w	r3, r3, #7
 80101bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101be:	7bbb      	ldrb	r3, [r7, #14]
 80101c0:	7b3a      	ldrb	r2, [r7, #12]
 80101c2:	4911      	ldr	r1, [pc, #68]	; (8010208 <UARTEx_SetNbDataToProcess+0x94>)
 80101c4:	5c8a      	ldrb	r2, [r1, r2]
 80101c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80101ca:	7b3a      	ldrb	r2, [r7, #12]
 80101cc:	490f      	ldr	r1, [pc, #60]	; (801020c <UARTEx_SetNbDataToProcess+0x98>)
 80101ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	7b7a      	ldrb	r2, [r7, #13]
 80101e0:	4909      	ldr	r1, [pc, #36]	; (8010208 <UARTEx_SetNbDataToProcess+0x94>)
 80101e2:	5c8a      	ldrb	r2, [r1, r2]
 80101e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80101e8:	7b7a      	ldrb	r2, [r7, #13]
 80101ea:	4908      	ldr	r1, [pc, #32]	; (801020c <UARTEx_SetNbDataToProcess+0x98>)
 80101ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80101fa:	bf00      	nop
 80101fc:	3714      	adds	r7, #20
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop
 8010208:	08010524 	.word	0x08010524
 801020c:	0801052c 	.word	0x0801052c

08010210 <malloc>:
 8010210:	4b02      	ldr	r3, [pc, #8]	; (801021c <malloc+0xc>)
 8010212:	4601      	mov	r1, r0
 8010214:	6818      	ldr	r0, [r3, #0]
 8010216:	f000 b82b 	b.w	8010270 <_malloc_r>
 801021a:	bf00      	nop
 801021c:	2400008c 	.word	0x2400008c

08010220 <free>:
 8010220:	4b02      	ldr	r3, [pc, #8]	; (801022c <free+0xc>)
 8010222:	4601      	mov	r1, r0
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	f000 b901 	b.w	801042c <_free_r>
 801022a:	bf00      	nop
 801022c:	2400008c 	.word	0x2400008c

08010230 <sbrk_aligned>:
 8010230:	b570      	push	{r4, r5, r6, lr}
 8010232:	4e0e      	ldr	r6, [pc, #56]	; (801026c <sbrk_aligned+0x3c>)
 8010234:	460c      	mov	r4, r1
 8010236:	6831      	ldr	r1, [r6, #0]
 8010238:	4605      	mov	r5, r0
 801023a:	b911      	cbnz	r1, 8010242 <sbrk_aligned+0x12>
 801023c:	f000 f8ac 	bl	8010398 <_sbrk_r>
 8010240:	6030      	str	r0, [r6, #0]
 8010242:	4621      	mov	r1, r4
 8010244:	4628      	mov	r0, r5
 8010246:	f000 f8a7 	bl	8010398 <_sbrk_r>
 801024a:	1c43      	adds	r3, r0, #1
 801024c:	d00a      	beq.n	8010264 <sbrk_aligned+0x34>
 801024e:	1cc4      	adds	r4, r0, #3
 8010250:	f024 0403 	bic.w	r4, r4, #3
 8010254:	42a0      	cmp	r0, r4
 8010256:	d007      	beq.n	8010268 <sbrk_aligned+0x38>
 8010258:	1a21      	subs	r1, r4, r0
 801025a:	4628      	mov	r0, r5
 801025c:	f000 f89c 	bl	8010398 <_sbrk_r>
 8010260:	3001      	adds	r0, #1
 8010262:	d101      	bne.n	8010268 <sbrk_aligned+0x38>
 8010264:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010268:	4620      	mov	r0, r4
 801026a:	bd70      	pop	{r4, r5, r6, pc}
 801026c:	240005d0 	.word	0x240005d0

08010270 <_malloc_r>:
 8010270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010274:	1ccd      	adds	r5, r1, #3
 8010276:	f025 0503 	bic.w	r5, r5, #3
 801027a:	3508      	adds	r5, #8
 801027c:	2d0c      	cmp	r5, #12
 801027e:	bf38      	it	cc
 8010280:	250c      	movcc	r5, #12
 8010282:	2d00      	cmp	r5, #0
 8010284:	4607      	mov	r7, r0
 8010286:	db01      	blt.n	801028c <_malloc_r+0x1c>
 8010288:	42a9      	cmp	r1, r5
 801028a:	d905      	bls.n	8010298 <_malloc_r+0x28>
 801028c:	230c      	movs	r3, #12
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	2600      	movs	r6, #0
 8010292:	4630      	mov	r0, r6
 8010294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010298:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801036c <_malloc_r+0xfc>
 801029c:	f000 f868 	bl	8010370 <__malloc_lock>
 80102a0:	f8d8 3000 	ldr.w	r3, [r8]
 80102a4:	461c      	mov	r4, r3
 80102a6:	bb5c      	cbnz	r4, 8010300 <_malloc_r+0x90>
 80102a8:	4629      	mov	r1, r5
 80102aa:	4638      	mov	r0, r7
 80102ac:	f7ff ffc0 	bl	8010230 <sbrk_aligned>
 80102b0:	1c43      	adds	r3, r0, #1
 80102b2:	4604      	mov	r4, r0
 80102b4:	d155      	bne.n	8010362 <_malloc_r+0xf2>
 80102b6:	f8d8 4000 	ldr.w	r4, [r8]
 80102ba:	4626      	mov	r6, r4
 80102bc:	2e00      	cmp	r6, #0
 80102be:	d145      	bne.n	801034c <_malloc_r+0xdc>
 80102c0:	2c00      	cmp	r4, #0
 80102c2:	d048      	beq.n	8010356 <_malloc_r+0xe6>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	4631      	mov	r1, r6
 80102c8:	4638      	mov	r0, r7
 80102ca:	eb04 0903 	add.w	r9, r4, r3
 80102ce:	f000 f863 	bl	8010398 <_sbrk_r>
 80102d2:	4581      	cmp	r9, r0
 80102d4:	d13f      	bne.n	8010356 <_malloc_r+0xe6>
 80102d6:	6821      	ldr	r1, [r4, #0]
 80102d8:	1a6d      	subs	r5, r5, r1
 80102da:	4629      	mov	r1, r5
 80102dc:	4638      	mov	r0, r7
 80102de:	f7ff ffa7 	bl	8010230 <sbrk_aligned>
 80102e2:	3001      	adds	r0, #1
 80102e4:	d037      	beq.n	8010356 <_malloc_r+0xe6>
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	442b      	add	r3, r5
 80102ea:	6023      	str	r3, [r4, #0]
 80102ec:	f8d8 3000 	ldr.w	r3, [r8]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d038      	beq.n	8010366 <_malloc_r+0xf6>
 80102f4:	685a      	ldr	r2, [r3, #4]
 80102f6:	42a2      	cmp	r2, r4
 80102f8:	d12b      	bne.n	8010352 <_malloc_r+0xe2>
 80102fa:	2200      	movs	r2, #0
 80102fc:	605a      	str	r2, [r3, #4]
 80102fe:	e00f      	b.n	8010320 <_malloc_r+0xb0>
 8010300:	6822      	ldr	r2, [r4, #0]
 8010302:	1b52      	subs	r2, r2, r5
 8010304:	d41f      	bmi.n	8010346 <_malloc_r+0xd6>
 8010306:	2a0b      	cmp	r2, #11
 8010308:	d917      	bls.n	801033a <_malloc_r+0xca>
 801030a:	1961      	adds	r1, r4, r5
 801030c:	42a3      	cmp	r3, r4
 801030e:	6025      	str	r5, [r4, #0]
 8010310:	bf18      	it	ne
 8010312:	6059      	strne	r1, [r3, #4]
 8010314:	6863      	ldr	r3, [r4, #4]
 8010316:	bf08      	it	eq
 8010318:	f8c8 1000 	streq.w	r1, [r8]
 801031c:	5162      	str	r2, [r4, r5]
 801031e:	604b      	str	r3, [r1, #4]
 8010320:	4638      	mov	r0, r7
 8010322:	f104 060b 	add.w	r6, r4, #11
 8010326:	f000 f829 	bl	801037c <__malloc_unlock>
 801032a:	f026 0607 	bic.w	r6, r6, #7
 801032e:	1d23      	adds	r3, r4, #4
 8010330:	1af2      	subs	r2, r6, r3
 8010332:	d0ae      	beq.n	8010292 <_malloc_r+0x22>
 8010334:	1b9b      	subs	r3, r3, r6
 8010336:	50a3      	str	r3, [r4, r2]
 8010338:	e7ab      	b.n	8010292 <_malloc_r+0x22>
 801033a:	42a3      	cmp	r3, r4
 801033c:	6862      	ldr	r2, [r4, #4]
 801033e:	d1dd      	bne.n	80102fc <_malloc_r+0x8c>
 8010340:	f8c8 2000 	str.w	r2, [r8]
 8010344:	e7ec      	b.n	8010320 <_malloc_r+0xb0>
 8010346:	4623      	mov	r3, r4
 8010348:	6864      	ldr	r4, [r4, #4]
 801034a:	e7ac      	b.n	80102a6 <_malloc_r+0x36>
 801034c:	4634      	mov	r4, r6
 801034e:	6876      	ldr	r6, [r6, #4]
 8010350:	e7b4      	b.n	80102bc <_malloc_r+0x4c>
 8010352:	4613      	mov	r3, r2
 8010354:	e7cc      	b.n	80102f0 <_malloc_r+0x80>
 8010356:	230c      	movs	r3, #12
 8010358:	603b      	str	r3, [r7, #0]
 801035a:	4638      	mov	r0, r7
 801035c:	f000 f80e 	bl	801037c <__malloc_unlock>
 8010360:	e797      	b.n	8010292 <_malloc_r+0x22>
 8010362:	6025      	str	r5, [r4, #0]
 8010364:	e7dc      	b.n	8010320 <_malloc_r+0xb0>
 8010366:	605b      	str	r3, [r3, #4]
 8010368:	deff      	udf	#255	; 0xff
 801036a:	bf00      	nop
 801036c:	240005cc 	.word	0x240005cc

08010370 <__malloc_lock>:
 8010370:	4801      	ldr	r0, [pc, #4]	; (8010378 <__malloc_lock+0x8>)
 8010372:	f000 b84b 	b.w	801040c <__retarget_lock_acquire_recursive>
 8010376:	bf00      	nop
 8010378:	2400070c 	.word	0x2400070c

0801037c <__malloc_unlock>:
 801037c:	4801      	ldr	r0, [pc, #4]	; (8010384 <__malloc_unlock+0x8>)
 801037e:	f000 b846 	b.w	801040e <__retarget_lock_release_recursive>
 8010382:	bf00      	nop
 8010384:	2400070c 	.word	0x2400070c

08010388 <memset>:
 8010388:	4402      	add	r2, r0
 801038a:	4603      	mov	r3, r0
 801038c:	4293      	cmp	r3, r2
 801038e:	d100      	bne.n	8010392 <memset+0xa>
 8010390:	4770      	bx	lr
 8010392:	f803 1b01 	strb.w	r1, [r3], #1
 8010396:	e7f9      	b.n	801038c <memset+0x4>

08010398 <_sbrk_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4d06      	ldr	r5, [pc, #24]	; (80103b4 <_sbrk_r+0x1c>)
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	f7f2 f964 	bl	8002670 <_sbrk>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_sbrk_r+0x1a>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_sbrk_r+0x1a>
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	24000710 	.word	0x24000710

080103b8 <__errno>:
 80103b8:	4b01      	ldr	r3, [pc, #4]	; (80103c0 <__errno+0x8>)
 80103ba:	6818      	ldr	r0, [r3, #0]
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	2400008c 	.word	0x2400008c

080103c4 <__libc_init_array>:
 80103c4:	b570      	push	{r4, r5, r6, lr}
 80103c6:	4d0d      	ldr	r5, [pc, #52]	; (80103fc <__libc_init_array+0x38>)
 80103c8:	4c0d      	ldr	r4, [pc, #52]	; (8010400 <__libc_init_array+0x3c>)
 80103ca:	1b64      	subs	r4, r4, r5
 80103cc:	10a4      	asrs	r4, r4, #2
 80103ce:	2600      	movs	r6, #0
 80103d0:	42a6      	cmp	r6, r4
 80103d2:	d109      	bne.n	80103e8 <__libc_init_array+0x24>
 80103d4:	4d0b      	ldr	r5, [pc, #44]	; (8010404 <__libc_init_array+0x40>)
 80103d6:	4c0c      	ldr	r4, [pc, #48]	; (8010408 <__libc_init_array+0x44>)
 80103d8:	f000 f874 	bl	80104c4 <_init>
 80103dc:	1b64      	subs	r4, r4, r5
 80103de:	10a4      	asrs	r4, r4, #2
 80103e0:	2600      	movs	r6, #0
 80103e2:	42a6      	cmp	r6, r4
 80103e4:	d105      	bne.n	80103f2 <__libc_init_array+0x2e>
 80103e6:	bd70      	pop	{r4, r5, r6, pc}
 80103e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ec:	4798      	blx	r3
 80103ee:	3601      	adds	r6, #1
 80103f0:	e7ee      	b.n	80103d0 <__libc_init_array+0xc>
 80103f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103f6:	4798      	blx	r3
 80103f8:	3601      	adds	r6, #1
 80103fa:	e7f2      	b.n	80103e2 <__libc_init_array+0x1e>
 80103fc:	0801053c 	.word	0x0801053c
 8010400:	0801053c 	.word	0x0801053c
 8010404:	0801053c 	.word	0x0801053c
 8010408:	08010540 	.word	0x08010540

0801040c <__retarget_lock_acquire_recursive>:
 801040c:	4770      	bx	lr

0801040e <__retarget_lock_release_recursive>:
 801040e:	4770      	bx	lr

08010410 <memcpy>:
 8010410:	440a      	add	r2, r1
 8010412:	4291      	cmp	r1, r2
 8010414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010418:	d100      	bne.n	801041c <memcpy+0xc>
 801041a:	4770      	bx	lr
 801041c:	b510      	push	{r4, lr}
 801041e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010426:	4291      	cmp	r1, r2
 8010428:	d1f9      	bne.n	801041e <memcpy+0xe>
 801042a:	bd10      	pop	{r4, pc}

0801042c <_free_r>:
 801042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801042e:	2900      	cmp	r1, #0
 8010430:	d044      	beq.n	80104bc <_free_r+0x90>
 8010432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010436:	9001      	str	r0, [sp, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f1a1 0404 	sub.w	r4, r1, #4
 801043e:	bfb8      	it	lt
 8010440:	18e4      	addlt	r4, r4, r3
 8010442:	f7ff ff95 	bl	8010370 <__malloc_lock>
 8010446:	4a1e      	ldr	r2, [pc, #120]	; (80104c0 <_free_r+0x94>)
 8010448:	9801      	ldr	r0, [sp, #4]
 801044a:	6813      	ldr	r3, [r2, #0]
 801044c:	b933      	cbnz	r3, 801045c <_free_r+0x30>
 801044e:	6063      	str	r3, [r4, #4]
 8010450:	6014      	str	r4, [r2, #0]
 8010452:	b003      	add	sp, #12
 8010454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010458:	f7ff bf90 	b.w	801037c <__malloc_unlock>
 801045c:	42a3      	cmp	r3, r4
 801045e:	d908      	bls.n	8010472 <_free_r+0x46>
 8010460:	6825      	ldr	r5, [r4, #0]
 8010462:	1961      	adds	r1, r4, r5
 8010464:	428b      	cmp	r3, r1
 8010466:	bf01      	itttt	eq
 8010468:	6819      	ldreq	r1, [r3, #0]
 801046a:	685b      	ldreq	r3, [r3, #4]
 801046c:	1949      	addeq	r1, r1, r5
 801046e:	6021      	streq	r1, [r4, #0]
 8010470:	e7ed      	b.n	801044e <_free_r+0x22>
 8010472:	461a      	mov	r2, r3
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	b10b      	cbz	r3, 801047c <_free_r+0x50>
 8010478:	42a3      	cmp	r3, r4
 801047a:	d9fa      	bls.n	8010472 <_free_r+0x46>
 801047c:	6811      	ldr	r1, [r2, #0]
 801047e:	1855      	adds	r5, r2, r1
 8010480:	42a5      	cmp	r5, r4
 8010482:	d10b      	bne.n	801049c <_free_r+0x70>
 8010484:	6824      	ldr	r4, [r4, #0]
 8010486:	4421      	add	r1, r4
 8010488:	1854      	adds	r4, r2, r1
 801048a:	42a3      	cmp	r3, r4
 801048c:	6011      	str	r1, [r2, #0]
 801048e:	d1e0      	bne.n	8010452 <_free_r+0x26>
 8010490:	681c      	ldr	r4, [r3, #0]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	6053      	str	r3, [r2, #4]
 8010496:	440c      	add	r4, r1
 8010498:	6014      	str	r4, [r2, #0]
 801049a:	e7da      	b.n	8010452 <_free_r+0x26>
 801049c:	d902      	bls.n	80104a4 <_free_r+0x78>
 801049e:	230c      	movs	r3, #12
 80104a0:	6003      	str	r3, [r0, #0]
 80104a2:	e7d6      	b.n	8010452 <_free_r+0x26>
 80104a4:	6825      	ldr	r5, [r4, #0]
 80104a6:	1961      	adds	r1, r4, r5
 80104a8:	428b      	cmp	r3, r1
 80104aa:	bf04      	itt	eq
 80104ac:	6819      	ldreq	r1, [r3, #0]
 80104ae:	685b      	ldreq	r3, [r3, #4]
 80104b0:	6063      	str	r3, [r4, #4]
 80104b2:	bf04      	itt	eq
 80104b4:	1949      	addeq	r1, r1, r5
 80104b6:	6021      	streq	r1, [r4, #0]
 80104b8:	6054      	str	r4, [r2, #4]
 80104ba:	e7ca      	b.n	8010452 <_free_r+0x26>
 80104bc:	b003      	add	sp, #12
 80104be:	bd30      	pop	{r4, r5, pc}
 80104c0:	240005cc 	.word	0x240005cc

080104c4 <_init>:
 80104c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c6:	bf00      	nop
 80104c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ca:	bc08      	pop	{r3}
 80104cc:	469e      	mov	lr, r3
 80104ce:	4770      	bx	lr

080104d0 <_fini>:
 80104d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d2:	bf00      	nop
 80104d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104d6:	bc08      	pop	{r3}
 80104d8:	469e      	mov	lr, r3
 80104da:	4770      	bx	lr
