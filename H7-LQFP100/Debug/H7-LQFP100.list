
H7-LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010430  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080106c8  080106c8  000206c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010720  08010720  00020720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010728  08010728  00020728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801072c  0801072c  0002072c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010730  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005fc  240000c0  080107e8  000300c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240006bc  080107e8  000306bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000249f6  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003936  00000000  00000000  00054adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c20  00000000  00000000  00058418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001af8  00000000  00000000  0005a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b4fd  00000000  00000000  0005bb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024f37  00000000  00000000  0009702d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180832  00000000  00000000  000bbf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023c796  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007cac  00000000  00000000  0023c7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080106b0 	.word	0x080106b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	080106b0 	.word	0x080106b0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fb16 	bl	8007c58 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fbf0 	bl	8007e40 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000320 	.word	0x24000320
 80006a0:	080106c8 	.word	0x080106c8
 80006a4:	080106d4 	.word	0x080106d4

080006a8 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fec2 	bl	8010468 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
	return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000710:	b084      	sub	sp, #16
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	f107 0c18 	add.w	ip, r7, #24
 800071c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	2301      	movs	r3, #1
 8000724:	2201      	movs	r2, #1
 8000726:	f107 0018 	add.w	r0, r7, #24
 800072a:	f00b fa51 	bl	800bbd0 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000740:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 8000742:	2002      	movs	r0, #2
 8000744:	f00f fe90 	bl	8010468 <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3301      	adds	r3, #1
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	701a      	strb	r2, [r3, #0]
	return results;
 800075a:	68bb      	ldr	r3, [r7, #8]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
	...

0800076c <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <erpa_adc+0x34>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <erpa_adc+0x34>)
 800077a:	895b      	ldrh	r3, [r3, #10]
 800077c:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 800077e:	2004      	movs	r0, #4
 8000780:	f00f fe72 	bl	8010468 <malloc>
 8000784:	4603      	mov	r3, r0
 8000786:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	88fa      	ldrh	r2, [r7, #6]
 800078c:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	801a      	strh	r2, [r3, #0]

	return results;
 8000796:	683b      	ldr	r3, [r7, #0]

}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000660 	.word	0x24000660

080007a4 <hk_adc1>:

uint16_t* hk_adc1() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <hk_adc1+0x98>)
 80007ac:	8a9b      	ldrh	r3, [r3, #20]
 80007ae:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <hk_adc1+0x98>)
 80007b2:	8a1b      	ldrh	r3, [r3, #16]
 80007b4:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <hk_adc1+0x98>)
 80007b8:	899b      	ldrh	r3, [r3, #12]
 80007ba:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <hk_adc1+0x98>)
 80007be:	8a5b      	ldrh	r3, [r3, #18]
 80007c0:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <hk_adc1+0x98>)
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <hk_adc1+0x98>)
 80007ca:	88db      	ldrh	r3, [r3, #6]
 80007cc:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <hk_adc1+0x98>)
 80007d0:	89db      	ldrh	r3, [r3, #14]
 80007d2:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <hk_adc1+0x98>)
 80007d6:	891b      	ldrh	r3, [r3, #8]
 80007d8:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <hk_adc1+0x98>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 80007e0:	2012      	movs	r0, #18
 80007e2:	f00f fe41 	bl	8010468 <malloc>
 80007e6:	4603      	mov	r3, r0
 80007e8:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	8afa      	ldrh	r2, [r7, #22]
 80007ee:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3302      	adds	r3, #2
 80007f4:	8aba      	ldrh	r2, [r7, #20]
 80007f6:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3304      	adds	r3, #4
 80007fc:	8a7a      	ldrh	r2, [r7, #18]
 80007fe:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	3306      	adds	r3, #6
 8000804:	8a3a      	ldrh	r2, [r7, #16]
 8000806:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	3308      	adds	r3, #8
 800080c:	89fa      	ldrh	r2, [r7, #14]
 800080e:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	330a      	adds	r3, #10
 8000814:	89ba      	ldrh	r2, [r7, #12]
 8000816:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	330c      	adds	r3, #12
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	330e      	adds	r3, #14
 8000824:	893a      	ldrh	r2, [r7, #8]
 8000826:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3310      	adds	r3, #16
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	801a      	strh	r2, [r3, #0]

	return results;
 8000830:	683b      	ldr	r3, [r7, #0]

}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000660 	.word	0x24000660

08000840 <hk_adc3>:

uint16_t* hk_adc3() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <hk_adc3+0x50>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <hk_adc3+0x50>)
 800084e:	885b      	ldrh	r3, [r3, #2]
 8000850:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <hk_adc3+0x50>)
 8000854:	889b      	ldrh	r3, [r3, #4]
 8000856:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <hk_adc3+0x50>)
 800085a:	88db      	ldrh	r3, [r3, #6]
 800085c:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 800085e:	2008      	movs	r0, #8
 8000860:	f00f fe02 	bl	8010468 <malloc>
 8000864:	4603      	mov	r3, r0
 8000866:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	89fa      	ldrh	r2, [r7, #14]
 800086c:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3302      	adds	r3, #2
 8000872:	89ba      	ldrh	r2, [r7, #12]
 8000874:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3304      	adds	r3, #4
 800087a:	897a      	ldrh	r2, [r7, #10]
 800087c:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3306      	adds	r3, #6
 8000882:	893a      	ldrh	r2, [r7, #8]
 8000884:	801a      	strh	r2, [r3, #0]

	return results;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24000680 	.word	0x24000680

08000894 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 800089e:	23aa      	movs	r3, #170	; 0xaa
 80008a0:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80008a2:	23aa      	movs	r3, #170	; 0xaa
 80008a4:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <send_erpa_packet+0x90>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <send_erpa_packet+0x90>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008ba:	2300      	movs	r3, #0
 80008bc:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008be:	2300      	movs	r3, #0
 80008c0:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3302      	adds	r3, #2
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	3302      	adds	r3, #2
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 80008ee:	2300      	movs	r3, #0
 80008f0:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 80008f2:	2300      	movs	r3, #0
 80008f4:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000902:	f107 0108 	add.w	r1, r7, #8
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	220e      	movs	r2, #14
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <send_erpa_packet+0x94>)
 800090c:	f00d fa6a 	bl	800dde4 <HAL_UART_Transmit>
	erpa_seq++;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <send_erpa_packet+0x90>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <send_erpa_packet+0x90>)
 800091a:	801a      	strh	r2, [r3, #0]

}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000698 	.word	0x24000698
 8000928:	24000560 	.word	0x24000560

0800092c <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 8000938:	23cc      	movs	r3, #204	; 0xcc
 800093a:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 800093c:	23cc      	movs	r3, #204	; 0xcc
 800093e:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000940:	4b7d      	ldr	r3, [pc, #500]	; (8000b38 <send_hk_packet+0x20c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 800094c:	4b7a      	ldr	r3, [pc, #488]	; (8000b38 <send_hk_packet+0x20c>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3302      	adds	r3, #2
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	b29b      	uxth	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000986:	121b      	asrs	r3, r3, #8
 8000988:	b2db      	uxtb	r3, r3
 800098a:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3302      	adds	r3, #2
 800099a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099e:	121b      	asrs	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3302      	adds	r3, #2
 80009a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3304      	adds	r3, #4
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	121b      	asrs	r3, r3, #8
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3306      	adds	r3, #6
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	121b      	asrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3306      	adds	r3, #6
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3302      	adds	r3, #2
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3302      	adds	r3, #2
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3306      	adds	r3, #6
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3306      	adds	r3, #6
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	330c      	adds	r3, #12
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	330c      	adds	r3, #12
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3306      	adds	r3, #6
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3306      	adds	r3, #6
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	330e      	adds	r3, #14
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	330e      	adds	r3, #14
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3310      	adds	r3, #16
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3308      	adds	r3, #8
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	330a      	adds	r3, #10
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	330a      	adds	r3, #10
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b14:	f107 0110 	add.w	r1, r7, #16
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2226      	movs	r2, #38	; 0x26
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <send_hk_packet+0x210>)
 8000b1e:	f00d f961 	bl	800dde4 <HAL_UART_Transmit>
	hk_seq++;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <send_hk_packet+0x20c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <send_hk_packet+0x20c>)
 8000b2c:	801a      	strh	r2, [r3, #0]

}
 8000b2e:	bf00      	nop
 8000b30:	3738      	adds	r7, #56	; 0x38
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2400069c 	.word	0x2400069c
 8000b3c:	24000560 	.word	0x24000560

08000b40 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b48:	23bb      	movs	r3, #187	; 0xbb
 8000b4a:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b4c:	23bb      	movs	r3, #187	; 0xbb
 8000b4e:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <send_pmt_packet+0x54>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <send_pmt_packet+0x54>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000b70:	f107 0108 	add.w	r1, r7, #8
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2206      	movs	r2, #6
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <send_pmt_packet+0x58>)
 8000b7a:	f00d f933 	bl	800dde4 <HAL_UART_Transmit>
	pmt_seq++;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <send_pmt_packet+0x54>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <send_pmt_packet+0x54>)
 8000b88:	801a      	strh	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400069a 	.word	0x2400069a
 8000b98:	24000560 	.word	0x24000560

08000b9c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b0a7      	sub	sp, #156	; 0x9c
 8000ba0:	af1e      	add	r7, sp, #120	; 0x78
 8000ba2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d147      	bne.n	8000c3c <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		if (ERPA_ON) {
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d027      	beq.n	8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x68>
			SWP_FACTOR_COUNTER++;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bbc:	6013      	str	r3, [r2, #0]

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000bbe:	bf00      	nop
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	4834      	ldr	r0, [pc, #208]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bc6:	f006 ff85 	bl	8007ad4 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f7      	bne.n	8000bc0 <HAL_TIM_OC_DelayElapsedCallback+0x24>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bd0:	4c32      	ldr	r4, [pc, #200]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bd2:	4668      	mov	r0, sp
 8000bd4:	f104 0310 	add.w	r3, r4, #16
 8000bd8:	2278      	movs	r2, #120	; 0x78
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f00f fc54 	bl	8010488 <memcpy>
 8000be0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000be4:	f7ff fd94 	bl	8000710 <spi>
 8000be8:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000bea:	f7ff fdbf 	bl	800076c <erpa_adc>
 8000bee:	6178      	str	r0, [r7, #20]
//					set_erpa_sweep();
//				}
//				SWP_FACTOR_COUNTER = 0;
//			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000bf0:	6979      	ldr	r1, [r7, #20]
 8000bf2:	69b8      	ldr	r0, [r7, #24]
 8000bf4:	f7ff fe4e 	bl	8000894 <send_erpa_packet>

			free(spi2_results);
 8000bf8:	69b8      	ldr	r0, [r7, #24]
 8000bfa:	f00f fc3d 	bl	8010478 <free>
			free(erpa_adc_results);
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f00f fc3a 	bl	8010478 <free>
		}
		if (HK_ON) {
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d03b      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			int16_t *i2c_values = i2c();
 8000c0c:	f7ff fd4c 	bl	80006a8 <i2c>
 8000c10:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c12:	f7ff fdc7 	bl	80007a4 <hk_adc1>
 8000c16:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c18:	f7ff fe12 	bl	8000840 <hk_adc3>
 8000c1c:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	6938      	ldr	r0, [r7, #16]
 8000c24:	f7ff fe82 	bl	800092c <send_hk_packet>

			free(i2c_values);
 8000c28:	6938      	ldr	r0, [r7, #16]
 8000c2a:	f00f fc25 	bl	8010478 <free>
			free(hk_adc1_results);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f00f fc22 	bl	8010478 <free>
			free(hk_adc3_results);
 8000c34:	68b8      	ldr	r0, [r7, #8]
 8000c36:	f00f fc1f 	bl	8010478 <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c3a:	e023      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
	} else if (htim == &htim1) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d11f      	bne.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		if (PMT_ON) {
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d01b      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c4c:	bf00      	nop
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c54:	f006 ff3e 	bl	8007ad4 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f7      	bne.n	8000c4e <HAL_TIM_OC_DelayElapsedCallback+0xb2>
			uint8_t *spi1_results = spi(hspi1);
 8000c5e:	4c14      	ldr	r4, [pc, #80]	; (8000cb0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c60:	4668      	mov	r0, sp
 8000c62:	f104 0310 	add.w	r3, r4, #16
 8000c66:	2278      	movs	r2, #120	; 0x78
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f00f fc0d 	bl	8010488 <memcpy>
 8000c6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c72:	f7ff fd4d 	bl	8000710 <spi>
 8000c76:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000c78:	69f8      	ldr	r0, [r7, #28]
 8000c7a:	f7ff ff61 	bl	8000b40 <send_pmt_packet>
			free(spi1_results);
 8000c7e:	69f8      	ldr	r0, [r7, #28]
 8000c80:	f00f fbfa 	bl	8010478 <free>
}
 8000c84:	bf00      	nop
 8000c86:	3724      	adds	r7, #36	; 0x24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	240004c8 	.word	0x240004c8
 8000c90:	2400069f 	.word	0x2400069f
 8000c94:	24000694 	.word	0x24000694
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	240003f4 	.word	0x240003f4
 8000ca0:	240006a0 	.word	0x240006a0
 8000ca4:	2400047c 	.word	0x2400047c
 8000ca8:	2400069e 	.word	0x2400069e
 8000cac:	58020000 	.word	0x58020000
 8000cb0:	2400036c 	.word	0x2400036c

08000cb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	49b6      	ldr	r1, [pc, #728]	; (8000f98 <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc0:	48b6      	ldr	r0, [pc, #728]	; (8000f9c <HAL_UART_RxCpltCallback+0x2e8>)
 8000cc2:	f00d f925 	bl	800df10 <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cc6:	4bb4      	ldr	r3, [pc, #720]	; (8000f98 <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b25      	cmp	r3, #37	; 0x25
 8000cd0:	f200 815d 	bhi.w	8000f8e <HAL_UART_RxCpltCallback+0x2da>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <HAL_UART_RxCpltCallback+0x28>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000e31 	.word	0x08000e31
 8000ce0:	08000e4d 	.word	0x08000e4d
 8000ce4:	08000e69 	.word	0x08000e69
 8000ce8:	08000e89 	.word	0x08000e89
 8000cec:	08000ea9 	.word	0x08000ea9
 8000cf0:	08000ec5 	.word	0x08000ec5
 8000cf4:	08000ee5 	.word	0x08000ee5
 8000cf8:	08000f05 	.word	0x08000f05
 8000cfc:	08000f8f 	.word	0x08000f8f
 8000d00:	08000f8f 	.word	0x08000f8f
 8000d04:	08000d83 	.word	0x08000d83
 8000d08:	08000d75 	.word	0x08000d75
 8000d0c:	08000f21 	.word	0x08000f21
 8000d10:	08000f31 	.word	0x08000f31
 8000d14:	08000f51 	.word	0x08000f51
 8000d18:	08000f71 	.word	0x08000f71
 8000d1c:	08000f41 	.word	0x08000f41
 8000d20:	08000f61 	.word	0x08000f61
 8000d24:	08000f79 	.word	0x08000f79
 8000d28:	08000e3f 	.word	0x08000e3f
 8000d2c:	08000e5b 	.word	0x08000e5b
 8000d30:	08000e79 	.word	0x08000e79
 8000d34:	08000e99 	.word	0x08000e99
 8000d38:	08000eb7 	.word	0x08000eb7
 8000d3c:	08000ed5 	.word	0x08000ed5
 8000d40:	08000ef5 	.word	0x08000ef5
 8000d44:	08000f13 	.word	0x08000f13
 8000d48:	08000d91 	.word	0x08000d91
 8000d4c:	08000da9 	.word	0x08000da9
 8000d50:	08000dc1 	.word	0x08000dc1
 8000d54:	08000f8f 	.word	0x08000f8f
 8000d58:	08000f8f 	.word	0x08000f8f
 8000d5c:	08000f8f 	.word	0x08000f8f
 8000d60:	08000f8f 	.word	0x08000f8f
 8000d64:	08000f8f 	.word	0x08000f8f
 8000d68:	08000f8f 	.word	0x08000f8f
 8000d6c:	08000de5 	.word	0x08000de5
 8000d70:	08000e07 	.word	0x08000e07
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d74:	4b8a      	ldr	r3, [pc, #552]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d76:	2104      	movs	r1, #4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fec2 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000d80:	e105      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d82:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d84:	2104      	movs	r1, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f006 febb 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000d8e:	e0fe      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x1B: {
		if (step < 9) {
 8000d90:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	f200 80f3 	bhi.w	8000f80 <HAL_UART_RxCpltCallback+0x2cc>
			step++;
 8000d9a:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000da4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000da6:	e0eb      	b.n	8000f80 <HAL_UART_RxCpltCallback+0x2cc>
	}
	case 0x1C: {
		if (step > 0) {
 8000da8:	4b7e      	ldr	r3, [pc, #504]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80e9 	beq.w	8000f84 <HAL_UART_RxCpltCallback+0x2d0>
			step--;
 8000db2:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000dbc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dbe:	e0e1      	b.n	8000f84 <HAL_UART_RxCpltCallback+0x2d0>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000dc0:	4b79      	ldr	r3, [pc, #484]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d106      	bne.n	8000dd6 <HAL_UART_RxCpltCallback+0x122>
			auto_sweep = 1;
 8000dc8:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
			step = 0;
 8000dce:	4b75      	ldr	r3, [pc, #468]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
		} else {
			auto_sweep = 0;
			step = 0;
		}
		break;
 8000dd4:	e0db      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
			auto_sweep = 0;
 8000dd6:	4b74      	ldr	r3, [pc, #464]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
			step = 0;
 8000ddc:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		break;
 8000de2:	e0d4      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x24: {
		if (SAMPLING_FACTOR < 32) {
 8000de4:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	f300 80cd 	bgt.w	8000f88 <HAL_UART_RxCpltCallback+0x2d4>
			SAMPLING_FACTOR *= 2;
 8000dee:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4a6d      	ldr	r2, [pc, #436]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000df6:	6013      	str	r3, [r2, #0]
			FACTOR_COUNTER = 0;
 8000df8:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000dfe:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <HAL_UART_RxCpltCallback+0x300>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e04:	e0c0      	b.n	8000f88 <HAL_UART_RxCpltCallback+0x2d4>
	}
	case 0x25: {
		if (SAMPLING_FACTOR > 1) {
 8000e06:	4b69      	ldr	r3, [pc, #420]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	f340 80be 	ble.w	8000f8c <HAL_UART_RxCpltCallback+0x2d8>
			SAMPLING_FACTOR /= 2;
 8000e10:	4b66      	ldr	r3, [pc, #408]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da00      	bge.n	8000e1a <HAL_UART_RxCpltCallback+0x166>
 8000e18:	3301      	adds	r3, #1
 8000e1a:	105b      	asrs	r3, r3, #1
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000e20:	601a      	str	r2, [r3, #0]
			FACTOR_COUNTER = 0;
 8000e22:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000e28:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <HAL_UART_RxCpltCallback+0x300>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e2e:	e0ad      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x2d8>
	}
	case 0x00: {

		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e30:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e32:	2120      	movs	r1, #32
 8000e34:	2201      	movs	r2, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fe64 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e3c:	e0a7      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e3e:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e40:	2120      	movs	r1, #32
 8000e42:	2200      	movs	r2, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 fe5d 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e4a:	e0a0      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	2201      	movs	r2, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 fe56 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e58:	e099      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fe4f 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e66:	e092      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e68:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fe47 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e76:	e08a      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fe3f 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e86:	e082      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e88:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f006 fe37 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000e96:	e07a      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fe2f 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000ea6:	e072      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	2201      	movs	r2, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f006 fe28 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000eb4:	e06b      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fe21 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000ec2:	e064      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fe19 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000ed2:	e05c      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ed4:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	2200      	movs	r2, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fe11 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000ee2:	e054      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	2201      	movs	r2, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fe09 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000ef2:	e04c      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	2200      	movs	r2, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fe01 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000f02:	e044      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fdfa 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000f10:	e03d      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fdf3 	bl	8007b04 <HAL_GPIO_WritePin>
		break;
 8000f1e:	e036      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f20:	f001 fd7a 	bl	8002a18 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f24:	2101      	movs	r1, #1
 8000f26:	2001      	movs	r0, #1
 8000f28:	f007 fb90 	bl	800864c <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f2c:	f7ff fb56 	bl	80005dc <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	4821      	ldr	r0, [pc, #132]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000f3a:	f00b fbbd 	bl	800c6b8 <HAL_TIM_OC_Start_IT>
		break;
 8000f3e:	e026      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000f4a:	f00b fd0f 	bl	800c96c <HAL_TIM_OC_Stop_IT>

		break;
 8000f4e:	e01e      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f56:	210c      	movs	r1, #12
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <HAL_UART_RxCpltCallback+0x314>)
 8000f5a:	f00b fbad 	bl	800c6b8 <HAL_TIM_OC_Start_IT>
		break;
 8000f5e:	e016      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000f66:	210c      	movs	r1, #12
 8000f68:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <HAL_UART_RxCpltCallback+0x314>)
 8000f6a:	f00b fcff 	bl	800c96c <HAL_TIM_OC_Stop_IT>

		break;
 8000f6e:	e00e      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0F: {
		HK_ON = 1;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_UART_RxCpltCallback+0x318>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
		break;
 8000f76:	e00a      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x12: {
		HK_ON = 0;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_UART_RxCpltCallback+0x318>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
		break;
 8000f7e:	e006      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f8c:	bf00      	nop
	}
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240005f0 	.word	0x240005f0
 8000f9c:	24000560 	.word	0x24000560
 8000fa0:	58020400 	.word	0x58020400
 8000fa4:	24000688 	.word	0x24000688
 8000fa8:	2400068c 	.word	0x2400068c
 8000fac:	24000040 	.word	0x24000040
 8000fb0:	24000690 	.word	0x24000690
 8000fb4:	24000694 	.word	0x24000694
 8000fb8:	58020800 	.word	0x58020800
 8000fbc:	2400069e 	.word	0x2400069e
 8000fc0:	2400047c 	.word	0x2400047c
 8000fc4:	2400069f 	.word	0x2400069f
 8000fc8:	240004c8 	.word	0x240004c8
 8000fcc:	240006a0 	.word	0x240006a0

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f001 fc69 	bl	80028ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f897 	bl	800110c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fde:	f000 f91b 	bl	8001218 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 8000fe2:	f000 fdd9 	bl	8001b98 <MX_GPIO_Init>
	MX_DAC1_Init();
 8000fe6:	f000 fafd 	bl	80015e4 <MX_DAC1_Init>
	MX_TIM1_Init();
 8000fea:	f000 fc1d 	bl	8001828 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000fee:	f000 fcab 	bl	8001948 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000ff2:	f000 fb29 	bl	8001648 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000ff6:	f000 fb67 	bl	80016c8 <MX_SPI1_Init>
	MX_DMA_Init();
 8000ffa:	f000 fd9d 	bl	8001b38 <MX_DMA_Init>
	MX_ADC1_Init();
 8000ffe:	f000 f939 	bl	8001274 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001002:	f000 fd4d 	bl	8001aa0 <MX_USART1_UART_Init>
	MX_ADC3_Init();
 8001006:	f000 fa57 	bl	80014b8 <MX_ADC3_Init>
	MX_SPI2_Init();
 800100a:	f000 fbb5 	bl	8001778 <MX_SPI2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fdc3 	bl	8001b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001012:	f000 fd91 	bl	8001b38 <MX_DMA_Init>
  MX_ADC1_Init();
 8001016:	f000 f92d 	bl	8001274 <MX_ADC1_Init>
  MX_ADC3_Init();
 800101a:	f000 fa4d 	bl	80014b8 <MX_ADC3_Init>
  MX_DAC1_Init();
 800101e:	f000 fae1 	bl	80015e4 <MX_DAC1_Init>
  MX_I2C1_Init();
 8001022:	f000 fb11 	bl	8001648 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001026:	f000 fb4f 	bl	80016c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800102a:	f000 fba5 	bl	8001778 <MX_SPI2_Init>
  MX_TIM1_Init();
 800102e:	f000 fbfb 	bl	8001828 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001032:	f000 fd35 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001036:	f000 fc87 	bl	8001948 <MX_TIM2_Init>
  MX_TIM6_Init();
 800103a:	f000 fcfb 	bl	8001a34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800103e:	482a      	ldr	r0, [pc, #168]	; (80010e8 <main+0x118>)
 8001040:	f00b faca 	bl	800c5d8 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, DAC_OUT, 16, DAC_ALIGN_12B_R);
 8001044:	2300      	movs	r3, #0
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2310      	movs	r3, #16
 800104a:	4a28      	ldr	r2, [pc, #160]	; (80010ec <main+0x11c>)
 800104c:	2100      	movs	r1, #0
 800104e:	4828      	ldr	r0, [pc, #160]	; (80010f0 <main+0x120>)
 8001050:	f003 fa42 	bl	80044d8 <HAL_DAC_Start_DMA>

	TIM2->CCR4 = 312;
 8001054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001058:	f44f 729c 	mov.w	r2, #312	; 0x138
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
//	}

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800105e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001066:	4823      	ldr	r0, [pc, #140]	; (80010f4 <main+0x124>)
 8001068:	f002 ffc2 	bl	8003ff0 <HAL_ADCEx_Calibration_Start>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <main+0xa6>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001072:	f000 fe77 	bl	8001d64 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 8001076:	220b      	movs	r2, #11
 8001078:	491f      	ldr	r1, [pc, #124]	; (80010f8 <main+0x128>)
 800107a:	481e      	ldr	r0, [pc, #120]	; (80010f4 <main+0x124>)
 800107c:	f002 f8ae 	bl	80031dc <HAL_ADC_Start_DMA>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <main+0xba>
	ADC1NumChannels) != HAL_OK) {
		Error_Handler();
 8001086:	f000 fe6d 	bl	8001d64 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800108a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800108e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001092:	481a      	ldr	r0, [pc, #104]	; (80010fc <main+0x12c>)
 8001094:	f002 ffac 	bl	8003ff0 <HAL_ADCEx_Calibration_Start>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <main+0xd2>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800109e:	f000 fe61 	bl	8001d64 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 80010a2:	2204      	movs	r2, #4
 80010a4:	4916      	ldr	r1, [pc, #88]	; (8001100 <main+0x130>)
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <main+0x12c>)
 80010a8:	f002 f898 	bl	80031dc <HAL_ADC_Start_DMA>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <main+0xe6>
	ADC3NumChannels) != HAL_OK) {
		Error_Handler();
 80010b2:	f000 fe57 	bl	8001d64 <Error_Handler>
	}

	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 80010b6:	bf00      	nop
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <main+0x134>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c6:	d0f7      	beq.n	80010b8 <main+0xe8>
		;
	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 80010c8:	bf00      	nop
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <main+0x134>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010d8:	d1f7      	bne.n	80010ca <main+0xfa>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	490a      	ldr	r1, [pc, #40]	; (8001108 <main+0x138>)
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <main+0x134>)
 80010e0:	f00c ff16 	bl	800df10 <HAL_UART_Receive_IT>
 80010e4:	e7f9      	b.n	80010da <main+0x10a>
 80010e6:	bf00      	nop
 80010e8:	24000514 	.word	0x24000514
 80010ec:	24000000 	.word	0x24000000
 80010f0:	24000294 	.word	0x24000294
 80010f4:	240000dc 	.word	0x240000dc
 80010f8:	24000660 	.word	0x24000660
 80010fc:	24000140 	.word	0x24000140
 8001100:	24000680 	.word	0x24000680
 8001104:	24000560 	.word	0x24000560
 8001108:	240005f0 	.word	0x240005f0

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b09c      	sub	sp, #112	; 0x70
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	224c      	movs	r2, #76	; 0x4c
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f00f f9c2 	bl	80104a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2220      	movs	r2, #32
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00f f9bc 	bl	80104a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800112c:	2002      	movs	r0, #2
 800112e:	f007 fac9 	bl	80086c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <SystemClock_Config+0x100>)
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	4a34      	ldr	r2, [pc, #208]	; (800120c <SystemClock_Config+0x100>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <SystemClock_Config+0x100>)
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <SystemClock_Config+0x104>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <SystemClock_Config+0x104>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <SystemClock_Config+0x104>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001168:	bf00      	nop
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <SystemClock_Config+0x104>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001176:	d1f8      	bne.n	800116a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <SystemClock_Config+0x108>)
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	4a25      	ldr	r2, [pc, #148]	; (8001214 <SystemClock_Config+0x108>)
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001188:	2301      	movs	r3, #1
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800119c:	230c      	movs	r3, #12
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011ac:	230c      	movs	r3, #12
 80011ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fabb 	bl	8008738 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c8:	f000 fdcc 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	233f      	movs	r3, #63	; 0x3f
 80011ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2303      	movs	r3, #3
 80011d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f007 fece 	bl	8008f94 <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011fe:	f000 fdb1 	bl	8001d64 <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3770      	adds	r7, #112	; 0x70
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58000400 	.word	0x58000400
 8001210:	58024800 	.word	0x58024800
 8001214:	58024400 	.word	0x58024400

08001218 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0b0      	sub	sp, #192	; 0xc0
 800121c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	22bc      	movs	r2, #188	; 0xbc
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00f f93d 	bl	80104a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800122e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001234:	2309      	movs	r3, #9
 8001236:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001238:	2304      	movs	r3, #4
 800123a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001244:	23c0      	movs	r3, #192	; 0xc0
 8001246:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001248:	2320      	movs	r3, #32
 800124a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800124c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f008 fa26 	bl	80096ac <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001266:	f000 fd7d 	bl	8001d64 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	37c0      	adds	r7, #192	; 0xc0
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001298:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <MX_ADC1_Init+0x210>)
 800129a:	4a7b      	ldr	r2, [pc, #492]	; (8001488 <MX_ADC1_Init+0x214>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800129e:	4b79      	ldr	r3, [pc, #484]	; (8001484 <MX_ADC1_Init+0x210>)
 80012a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <MX_ADC1_Init+0x210>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ac:	4b75      	ldr	r3, [pc, #468]	; (8001484 <MX_ADC1_Init+0x210>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b2:	4b74      	ldr	r3, [pc, #464]	; (8001484 <MX_ADC1_Init+0x210>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <MX_ADC1_Init+0x210>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012be:	4b71      	ldr	r3, [pc, #452]	; (8001484 <MX_ADC1_Init+0x210>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012c4:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <MX_ADC1_Init+0x210>)
 80012c6:	220b      	movs	r2, #11
 80012c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ca:	4b6e      	ldr	r3, [pc, #440]	; (8001484 <MX_ADC1_Init+0x210>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <MX_ADC1_Init+0x210>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <MX_ADC1_Init+0x210>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012dc:	4b69      	ldr	r3, [pc, #420]	; (8001484 <MX_ADC1_Init+0x210>)
 80012de:	2203      	movs	r2, #3
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <MX_ADC1_Init+0x210>)
 80012e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ea:	4b66      	ldr	r3, [pc, #408]	; (8001484 <MX_ADC1_Init+0x210>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <MX_ADC1_Init+0x210>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f8:	4862      	ldr	r0, [pc, #392]	; (8001484 <MX_ADC1_Init+0x210>)
 80012fa:	f001 fdcd 	bl	8002e98 <HAL_ADC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001304:	f000 fd2e 	bl	8001d64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	485c      	ldr	r0, [pc, #368]	; (8001484 <MX_ADC1_Init+0x210>)
 8001314:	f002 fed0 	bl	80040b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800131e:	f000 fd21 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <MX_ADC1_Init+0x218>)
 8001324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001326:	2306      	movs	r3, #6
 8001328:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800132a:	2307      	movs	r3, #7
 800132c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800132e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001332:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001334:	2304      	movs	r3, #4
 8001336:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	484f      	ldr	r0, [pc, #316]	; (8001484 <MX_ADC1_Init+0x210>)
 8001346:	f002 f821 	bl	800338c <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001350:	f000 fd08 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001354:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <MX_ADC1_Init+0x21c>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001358:	230c      	movs	r3, #12
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4848      	ldr	r0, [pc, #288]	; (8001484 <MX_ADC1_Init+0x210>)
 8001362:	f002 f813 	bl	800338c <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800136c:	f000 fcfa 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <MX_ADC1_Init+0x220>)
 8001372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001374:	2312      	movs	r3, #18
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4841      	ldr	r0, [pc, #260]	; (8001484 <MX_ADC1_Init+0x210>)
 800137e:	f002 f805 	bl	800338c <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001388:	f000 fcec 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <MX_ADC1_Init+0x224>)
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001390:	2318      	movs	r3, #24
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	483a      	ldr	r0, [pc, #232]	; (8001484 <MX_ADC1_Init+0x210>)
 800139a:	f001 fff7 	bl	800338c <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013a4:	f000 fcde 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <MX_ADC1_Init+0x228>)
 80013aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4833      	ldr	r0, [pc, #204]	; (8001484 <MX_ADC1_Init+0x210>)
 80013b8:	f001 ffe8 	bl	800338c <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013c2:	f000 fccf 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_ADC1_Init+0x22c>)
 80013c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_ADC1_Init+0x210>)
 80013d6:	f001 ffd9 	bl	800338c <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013e0:	f000 fcc0 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <MX_ADC1_Init+0x230>)
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013e8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4824      	ldr	r0, [pc, #144]	; (8001484 <MX_ADC1_Init+0x210>)
 80013f4:	f001 ffca 	bl	800338c <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013fe:	f000 fcb1 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC1_Init+0x234>)
 8001404:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001406:	f44f 7389 	mov.w	r3, #274	; 0x112
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_ADC1_Init+0x210>)
 8001412:	f001 ffbb 	bl	800338c <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800141c:	f000 fca2 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_ADC1_Init+0x238>)
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001424:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001428:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_ADC1_Init+0x210>)
 8001430:	f001 ffac 	bl	800338c <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800143a:	f000 fc93 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_ADC1_Init+0x23c>)
 8001440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_ADC1_Init+0x210>)
 800144e:	f001 ff9d 	bl	800338c <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001458:	f000 fc84 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_ADC1_Init+0x240>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001460:	f240 2306 	movw	r3, #518	; 0x206
 8001464:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0x210>)
 800146c:	f001 ff8e 	bl	800338c <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001476:	f000 fc75 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	240000dc 	.word	0x240000dc
 8001488:	40022000 	.word	0x40022000
 800148c:	0c900008 	.word	0x0c900008
 8001490:	10c00010 	.word	0x10c00010
 8001494:	14f00020 	.word	0x14f00020
 8001498:	1d500080 	.word	0x1d500080
 800149c:	21800100 	.word	0x21800100
 80014a0:	25b00200 	.word	0x25b00200
 80014a4:	2a000400 	.word	0x2a000400
 80014a8:	2e300800 	.word	0x2e300800
 80014ac:	3ac04000 	.word	0x3ac04000
 80014b0:	3ef08000 	.word	0x3ef08000
 80014b4:	47520000 	.word	0x47520000

080014b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014d0:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014d2:	4a40      	ldr	r2, [pc, #256]	; (80015d4 <MX_ADC3_Init+0x11c>)
 80014d4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <MX_ADC3_Init+0x118>)
 80014fe:	2204      	movs	r2, #4
 8001500:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_ADC3_Init+0x118>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001516:	2203      	movs	r2, #3
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_ADC3_Init+0x118>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC3_Init+0x118>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001532:	f001 fcb1 	bl	8002e98 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800153c:	f000 fc12 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC3_Init+0x120>)
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001548:	2307      	movs	r3, #7
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001550:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001552:	2304      	movs	r3, #4
 8001554:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001564:	f001 ff12 	bl	800338c <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800156e:	f000 fbf9 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_ADC3_Init+0x124>)
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001576:	230c      	movs	r3, #12
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_ADC3_Init+0x118>)
 8001580:	f001 ff04 	bl	800338c <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 800158a:	f000 fbeb 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800158e:	2301      	movs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001592:	2312      	movs	r3, #18
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC3_Init+0x118>)
 800159c:	f001 fef6 	bl	800338c <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 80015a6:	f000 fbdd 	bl	8001d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_ADC3_Init+0x128>)
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015ae:	2318      	movs	r3, #24
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC3_Init+0x118>)
 80015b8:	f001 fee8 	bl	800338c <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 80015c2:	f000 fbcf 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	24000140 	.word	0x24000140
 80015d4:	58026000 	.word	0x58026000
 80015d8:	cb840000 	.word	0xcb840000
 80015dc:	cfb80000 	.word	0xcfb80000
 80015e0:	04300002 	.word	0x04300002

080015e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00e ff57 	bl	80104a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_DAC1_Init+0x60>)
 80015fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015fe:	f002 ff48 	bl	8004492 <HAL_DAC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001608:	f000 fbac 	bl	8001d64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001610:	2316      	movs	r3, #22
 8001612:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_DAC1_Init+0x5c>)
 8001628:	f003 f8a4 	bl	8004774 <HAL_DAC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001632:	f000 fb97 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	24000294 	.word	0x24000294
 8001644:	40007400 	.word	0x40007400

08001648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_I2C1_Init+0x74>)
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_I2C1_Init+0x74>)
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_I2C1_Init+0x74>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_I2C1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <MX_I2C1_Init+0x74>)
 8001684:	f006 fa58 	bl	8007b38 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168e:	f000 fb69 	bl	8001d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <MX_I2C1_Init+0x74>)
 8001696:	f006 ff41 	bl	800851c <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a0:	f000 fb60 	bl	8001d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_I2C1_Init+0x74>)
 80016a8:	f006 ff83 	bl	80085b2 <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f000 fb57 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24000320 	.word	0x24000320
 80016c0:	40005400 	.word	0x40005400
 80016c4:	00506682 	.word	0x00506682

080016c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <MX_SPI1_Init+0xac>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016e4:	220f      	movs	r2, #15
 80016e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016fe:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_SPI1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_SPI1_Init+0xa8>)
 800171e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_SPI1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_SPI1_Init+0xa8>)
 800175c:	f00a f932 	bl	800b9c4 <HAL_SPI_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001766:	f000 fafd 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2400036c 	.word	0x2400036c
 8001774:	40013000 	.word	0x40013000

08001778 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <MX_SPI2_Init+0xa8>)
 800177e:	4a29      	ldr	r2, [pc, #164]	; (8001824 <MX_SPI2_Init+0xac>)
 8001780:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001784:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001788:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <MX_SPI2_Init+0xa8>)
 800178c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001790:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001794:	220f      	movs	r2, #15
 8001796:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017ae:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_SPI2_Init+0xa8>)
 800180c:	f00a f8da 	bl	800b9c4 <HAL_SPI_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001816:	f000 faa5 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	240003f4 	.word	0x240003f4
 8001824:	40003800 	.word	0x40003800

08001828 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b096      	sub	sp, #88	; 0x58
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	222c      	movs	r2, #44	; 0x2c
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00e fe25 	bl	80104a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <MX_TIM1_Init+0x118>)
 800185c:	4a39      	ldr	r2, [pc, #228]	; (8001944 <MX_TIM1_Init+0x11c>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <MX_TIM1_Init+0x118>)
 8001862:	2263      	movs	r2, #99	; 0x63
 8001864:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_TIM1_Init+0x118>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <MX_TIM1_Init+0x118>)
 800186e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001872:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MX_TIM1_Init+0x118>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_TIM1_Init+0x118>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <MX_TIM1_Init+0x118>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001886:	482e      	ldr	r0, [pc, #184]	; (8001940 <MX_TIM1_Init+0x118>)
 8001888:	f00b f954 	bl	800cb34 <HAL_TIM_PWM_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 fa67 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4825      	ldr	r0, [pc, #148]	; (8001940 <MX_TIM1_Init+0x118>)
 80018aa:	f00c f921 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018b4:	f000 fa56 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b8:	2360      	movs	r3, #96	; 0x60
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 - 1;
 80018bc:	f240 13df 	movw	r3, #479	; 0x1df
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	4818      	ldr	r0, [pc, #96]	; (8001940 <MX_TIM1_Init+0x118>)
 80018e0:	f00b fa9e 	bl	800ce20 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018ea:	f000 fa3b 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001906:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM1_Init+0x118>)
 8001924:	f00c f972 	bl	800dc0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800192e:	f000 fa19 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM1_Init+0x118>)
 8001934:	f000 fd6e 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001938:	bf00      	nop
 800193a:	3758      	adds	r7, #88	; 0x58
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2400047c 	.word	0x2400047c
 8001944:	40010000 	.word	0x40010000

08001948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48 - 1;
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001984:	222f      	movs	r2, #47	; 0x2f
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125 - 1;
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001990:	f640 4234 	movw	r2, #3124	; 0xc34
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a2:	4823      	ldr	r0, [pc, #140]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019a4:	f00a fdc1 	bl	800c52a <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019ae:	f000 f9d9 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019bc:	4619      	mov	r1, r3
 80019be:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019c0:	f00b fb42 	bl	800d048 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019ca:	f000 f9cb 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ce:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019d0:	f00b f8b0 	bl	800cb34 <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019da:	f000 f9c3 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019ee:	f00c f87f 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019f8:	f000 f9b4 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	; 0x60
 80019fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	220c      	movs	r2, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a14:	f00b fa04 	bl	800ce20 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a1e:	f000 f9a1 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a24:	f000 fcf6 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001a28:	bf00      	nop
 8001a2a:	3738      	adds	r7, #56	; 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	240004c8 	.word	0x240004c8

08001a34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <MX_TIM6_Init+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a4c:	222f      	movs	r2, #47	; 0x2f
 8001a4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3125;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a58:	f640 4235 	movw	r2, #3125	; 0xc35
 8001a5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a66:	f00a fd60 	bl	800c52a <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a70:	f000 f978 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001a74:	2310      	movs	r3, #16
 8001a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM6_Init+0x64>)
 8001a82:	f00c f835 	bl	800daf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a8c:	f000 f96a 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24000514 	.word	0x24000514
 8001a9c:	40001000 	.word	0x40001000

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_USART1_UART_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aea:	f00c f92b 	bl	800dd44 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af4:	f000 f936 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001afc:	f00e fbbf 	bl	801027e <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f000 f92d 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b0e:	f00e fbf4 	bl	80102fa <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f000 f924 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b1e:	f00e fb75 	bl	801020c <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f000 f91c 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	24000560 	.word	0x24000560
 8001b34:	40011000 	.word	0x40011000

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_DMA_Init+0x5c>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	200b      	movs	r0, #11
 8001b62:	f002 fc62 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b66:	200b      	movs	r0, #11
 8001b68:	f002 fc79 	bl	800445e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	200c      	movs	r0, #12
 8001b72:	f002 fc5a 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b76:	200c      	movs	r0, #12
 8001b78:	f002 fc71 	bl	800445e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2010      	movs	r0, #16
 8001b82:	f002 fc52 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b86:	2010      	movs	r0, #16
 8001b88:	f002 fc69 	bl	800445e <HAL_NVIC_EnableIRQ>

}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_GPIO_Init+0xe8>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c2e:	f005 ff69 	bl	8007b04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2164      	movs	r1, #100	; 0x64
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c38:	f005 ff64 	bl	8007b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c3c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <MX_GPIO_Init+0xec>)
 8001c56:	f005 fd8d 	bl	8007774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c5a:	2364      	movs	r3, #100	; 0x64
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_GPIO_Init+0xf0>)
 8001c72:	f005 fd7f 	bl	8007774 <HAL_GPIO_Init>

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58020800 	.word	0x58020800
 8001c88:	58020400 	.word	0x58020400

08001c8c <HAL_ADC_ConvCpltCallback>:
/**
 * @brief  Conversion DMA half-transfer callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b08b      	sub	sp, #44	; 0x2c
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d125      	bne.n	8001ce8 <HAL_ADC_ConvCpltCallback+0x5c>
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	230b      	movs	r3, #11
 8001ca2:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	dd48      	ble.n	8001d3c <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cba:	f3bf 8f4f 	dsb	sy
}
 8001cbe:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	3320      	adds	r3, #32
 8001ccc:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b20      	subs	r3, #32
 8001cd2:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dcf2      	bgt.n	8001cc0 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cda:	f3bf 8f4f 	dsb	sy
}
 8001cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ce0:	f3bf 8f6f 	isb	sy
}
 8001ce4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001ce6:	e029      	b.n	8001d3c <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t*) &ADC1Data[ADC1NumChannels / 2],
				ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d128      	bne.n	8001d42 <HAL_ADC_ConvCpltCallback+0xb6>
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dd20      	ble.n	8001d40 <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
}
 8001d12:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3320      	adds	r3, #32
 8001d20:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3b20      	subs	r3, #32
 8001d26:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dcf2      	bgt.n	8001d14 <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
}
 8001d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d34:	f3bf 8f6f 	isb	sy
}
 8001d38:	bf00      	nop
}
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_ConvCpltCallback+0xb4>
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_ConvCpltCallback+0xb6>
 8001d40:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t*) &ADC3Data[ADC3NumChannels / 2],
				ADC3NumChannels);

	}

}
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	; 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	240000dc 	.word	0x240000dc
 8001d54:	2400066a 	.word	0x2400066a
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	24000140 	.word	0x24000140
 8001d60:	24000684 	.word	0x24000684

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_MspInit+0x30>)
 8001d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d7c:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_MspInit+0x30>)
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_MspInit+0x30>)
 8001d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	58024400 	.word	0x58024400

08001da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	; 0x38
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a7b      	ldr	r2, [pc, #492]	; (8001fb0 <HAL_ADC_MspInit+0x20c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f040 8091 	bne.w	8001eea <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dc8:	4b7a      	ldr	r3, [pc, #488]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dce:	4a79      	ldr	r2, [pc, #484]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dd8:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e14:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a62      	ldr	r2, [pc, #392]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e40:	2333      	movs	r3, #51	; 0x33
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4859      	ldr	r0, [pc, #356]	; (8001fb8 <HAL_ADC_MspInit+0x214>)
 8001e54:	f005 fc8e 	bl	8007774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001e58:	23ce      	movs	r3, #206	; 0xce
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4854      	ldr	r0, [pc, #336]	; (8001fbc <HAL_ADC_MspInit+0x218>)
 8001e6c:	f005 fc82 	bl	8007774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e70:	2303      	movs	r3, #3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	484f      	ldr	r0, [pc, #316]	; (8001fc0 <HAL_ADC_MspInit+0x21c>)
 8001e84:	f005 fc76 	bl	8007774 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e88:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e8a:	4a4f      	ldr	r2, [pc, #316]	; (8001fc8 <HAL_ADC_MspInit+0x224>)
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e90:	2209      	movs	r2, #9
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ecc:	483d      	ldr	r0, [pc, #244]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ece:	f002 fe15 	bl	8004afc <HAL_DMA_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001ed8:	f7ff ff44 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a39      	ldr	r2, [pc, #228]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee2:	4a38      	ldr	r2, [pc, #224]	; (8001fc4 <HAL_ADC_MspInit+0x220>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ee8:	e05e      	b.n	8001fa8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a37      	ldr	r2, [pc, #220]	; (8001fcc <HAL_ADC_MspInit+0x228>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d159      	bne.n	8001fa8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_ADC_MspInit+0x210>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f30:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f38:	f000 fd8a 	bl	8002a50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f44:	f000 fd84 	bl	8002a50 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_ADC_MspInit+0x230>)
 8001f4c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f50:	2273      	movs	r2, #115	; 0x73
 8001f52:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f66:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f6e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f8c:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001f8e:	f002 fdb5 	bl	8004afc <HAL_DMA_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001f98:	f7ff fee4 	bl	8001d64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001fa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_ADC_MspInit+0x22c>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	; 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020800 	.word	0x58020800
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	240001a4 	.word	0x240001a4
 8001fc8:	40020010 	.word	0x40020010
 8001fcc:	58026000 	.word	0x58026000
 8001fd0:	2400021c 	.word	0x2400021c
 8001fd4:	40020028 	.word	0x40020028

08001fd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <HAL_DAC_MspInit+0xf0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d161      	bne.n	80020be <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_DAC_MspInit+0xf4>)
 8001ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002000:	4a32      	ldr	r2, [pc, #200]	; (80020cc <HAL_DAC_MspInit+0xf4>)
 8002002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_DAC_MspInit+0xf4>)
 800200c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_DAC_MspInit+0xf4>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201e:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <HAL_DAC_MspInit+0xf4>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_DAC_MspInit+0xf4>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002036:	2310      	movs	r3, #16
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4821      	ldr	r0, [pc, #132]	; (80020d0 <HAL_DAC_MspInit+0xf8>)
 800204a:	f005 fb93 	bl	8007774 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_DAC_MspInit+0x100>)
 8002052:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002056:	2243      	movs	r2, #67	; 0x43
 8002058:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002074:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800207c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002092:	4810      	ldr	r0, [pc, #64]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 8002094:	f002 fd32 	bl	8004afc <HAL_DMA_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800209e:	f7ff fe61 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_DAC_MspInit+0xfc>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2036      	movs	r0, #54	; 0x36
 80020b4:	f002 f9b9 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020b8:	2036      	movs	r0, #54	; 0x36
 80020ba:	f002 f9d0 	bl	800445e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40007400 	.word	0x40007400
 80020cc:	58024400 	.word	0x58024400
 80020d0:	58020000 	.word	0x58020000
 80020d4:	240002a8 	.word	0x240002a8
 80020d8:	40020088 	.word	0x40020088

080020dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b8      	sub	sp, #224	; 0xe0
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	22bc      	movs	r2, #188	; 0xbc
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00e f9d1 	bl	80104a4 <memset>
  if(hi2c->Instance==I2C1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_I2C_MspInit+0xc0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d142      	bne.n	8002192 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800210c:	2308      	movs	r3, #8
 800210e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4618      	mov	r0, r3
 800211c:	f007 fac6 	bl	80096ac <HAL_RCCEx_PeriphCLKConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002126:	f7ff fe1d 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_I2C_MspInit+0xc4>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_I2C_MspInit+0xc4>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_I2C_MspInit+0xc4>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800214c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002162:	2304      	movs	r3, #4
 8002164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800216c:	4619      	mov	r1, r3
 800216e:	480d      	ldr	r0, [pc, #52]	; (80021a4 <HAL_I2C_MspInit+0xc8>)
 8002170:	f005 fb00 	bl	8007774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_I2C_MspInit+0xc4>)
 8002176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_I2C_MspInit+0xc4>)
 800217c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002180:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_I2C_MspInit+0xc4>)
 8002186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	37e0      	adds	r7, #224	; 0xe0
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40005400 	.word	0x40005400
 80021a0:	58024400 	.word	0x58024400
 80021a4:	58020400 	.word	0x58020400

080021a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0ba      	sub	sp, #232	; 0xe8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	22bc      	movs	r2, #188	; 0xbc
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f00e f96b 	bl	80104a4 <memset>
  if(hspi->Instance==SPI1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <HAL_SPI_MspInit+0x150>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d142      	bne.n	800225e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021de:	2300      	movs	r3, #0
 80021e0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	4618      	mov	r0, r3
 80021e8:	f007 fa60 	bl	80096ac <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021f2:	f7ff fdb7 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_SPI_MspInit+0x154>)
 80021f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021fc:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <HAL_SPI_MspInit+0x154>)
 80021fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002202:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_SPI_MspInit+0x154>)
 8002208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800220c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_SPI_MspInit+0x154>)
 8002216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221a:	4a38      	ldr	r2, [pc, #224]	; (80022fc <HAL_SPI_MspInit+0x154>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002224:	4b35      	ldr	r3, [pc, #212]	; (80022fc <HAL_SPI_MspInit+0x154>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002232:	2318      	movs	r3, #24
 8002234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224a:	2305      	movs	r3, #5
 800224c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002254:	4619      	mov	r1, r3
 8002256:	482a      	ldr	r0, [pc, #168]	; (8002300 <HAL_SPI_MspInit+0x158>)
 8002258:	f005 fa8c 	bl	8007774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800225c:	e047      	b.n	80022ee <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_SPI_MspInit+0x15c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d142      	bne.n	80022ee <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800226e:	2300      	movs	r3, #0
 8002270:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	4618      	mov	r0, r3
 8002278:	f007 fa18 	bl	80096ac <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002282:	f7ff fd6f 	bl	8001d64 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_SPI_MspInit+0x154>)
 8002288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_SPI_MspInit+0x154>)
 800228e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002292:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_SPI_MspInit+0x154>)
 8002298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_SPI_MspInit+0x154>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022aa:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_SPI_MspInit+0x154>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_SPI_MspInit+0x154>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80022c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022dc:	2305      	movs	r3, #5
 80022de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_SPI_MspInit+0x158>)
 80022ea:	f005 fa43 	bl	8007774 <HAL_GPIO_Init>
}
 80022ee:	bf00      	nop
 80022f0:	37e8      	adds	r7, #232	; 0xe8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40013000 	.word	0x40013000
 80022fc:	58024400 	.word	0x58024400
 8002300:	58020400 	.word	0x58020400
 8002304:	40003800 	.word	0x40003800

08002308 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_TIM_PWM_MspInit+0x78>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12e      	bne.n	8002378 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_TIM_PWM_MspInit+0x7c>)
 800231c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_TIM_PWM_MspInit+0x7c>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_TIM_PWM_MspInit+0x7c>)
 800232c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2018      	movs	r0, #24
 800233e:	f002 f874 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002342:	2018      	movs	r0, #24
 8002344:	f002 f88b 	bl	800445e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2019      	movs	r0, #25
 800234e:	f002 f86c 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002352:	2019      	movs	r0, #25
 8002354:	f002 f883 	bl	800445e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	201a      	movs	r0, #26
 800235e:	f002 f864 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002362:	201a      	movs	r0, #26
 8002364:	f002 f87b 	bl	800445e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	201b      	movs	r0, #27
 800236e:	f002 f85c 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002372:	201b      	movs	r0, #27
 8002374:	f002 f873 	bl	800445e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010000 	.word	0x40010000
 8002384:	58024400 	.word	0x58024400

08002388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002398:	d117      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_TIM_Base_MspInit+0x84>)
 800239c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_TIM_Base_MspInit+0x84>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_TIM_Base_MspInit+0x84>)
 80023ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	201c      	movs	r0, #28
 80023be:	f002 f834 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c2:	201c      	movs	r0, #28
 80023c4:	f002 f84b 	bl	800445e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80023c8:	e01b      	b.n	8002402 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM6)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_TIM_Base_MspInit+0x88>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d116      	bne.n	8002402 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_TIM_Base_MspInit+0x84>)
 80023d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_TIM_Base_MspInit+0x84>)
 80023dc:	f043 0310 	orr.w	r3, r3, #16
 80023e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_TIM_Base_MspInit+0x84>)
 80023e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2036      	movs	r0, #54	; 0x36
 80023f8:	f002 f817 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023fc:	2036      	movs	r0, #54	; 0x36
 80023fe:	f002 f82e 	bl	800445e <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	58024400 	.word	0x58024400
 8002410:	40001000 	.word	0x40001000

08002414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_TIM_MspPostInit+0xb8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d120      	bne.n	8002478 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 8002438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002466:	2301      	movs	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4818      	ldr	r0, [pc, #96]	; (80024d4 <HAL_TIM_MspPostInit+0xc0>)
 8002472:	f005 f97f 	bl	8007774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002476:	e024      	b.n	80024c2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d11f      	bne.n	80024c2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b2:	2301      	movs	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <HAL_TIM_MspPostInit+0xc4>)
 80024be:	f005 f959 	bl	8007774 <HAL_GPIO_Init>
}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000
 80024d0:	58024400 	.word	0x58024400
 80024d4:	58020000 	.word	0x58020000
 80024d8:	58020400 	.word	0x58020400

080024dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b0b8      	sub	sp, #224	; 0xe0
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	22bc      	movs	r2, #188	; 0xbc
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f00d ffd1 	bl	80104a4 <memset>
  if(huart->Instance==USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_UART_MspInit+0xd0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d14a      	bne.n	80025a2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4618      	mov	r0, r3
 800251c:	f007 f8c6 	bl	80096ac <HAL_RCCEx_PeriphCLKConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002526:	f7ff fc1d 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_UART_MspInit+0xd4>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_UART_MspInit+0xd4>)
 8002532:	f043 0310 	orr.w	r3, r3, #16
 8002536:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_UART_MspInit+0xd4>)
 800253c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_UART_MspInit+0xd4>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_UART_MspInit+0xd4>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_UART_MspInit+0xd4>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002566:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800256a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002580:	2307      	movs	r3, #7
 8002582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002586:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800258a:	4619      	mov	r1, r3
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <HAL_UART_MspInit+0xd8>)
 800258e:	f005 f8f1 	bl	8007774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2025      	movs	r0, #37	; 0x25
 8002598:	f001 ff47 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800259c:	2025      	movs	r0, #37	; 0x25
 800259e:	f001 ff5e 	bl	800445e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	37e0      	adds	r7, #224	; 0xe0
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40011000 	.word	0x40011000
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58020000 	.word	0x58020000

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <NMI_Handler+0x4>

080025be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <MemManage_Handler+0x4>

080025ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002604:	f000 f9c4 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <DMA1_Stream0_IRQHandler+0x10>)
 8002612:	f003 fd9d 	bl	8006150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	240001a4 	.word	0x240001a4

08002620 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <DMA1_Stream1_IRQHandler+0x10>)
 8002626:	f003 fd93 	bl	8006150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2400021c 	.word	0x2400021c

08002634 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <DMA1_Stream5_IRQHandler+0x10>)
 800263a:	f003 fd89 	bl	8006150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240002a8 	.word	0x240002a8

08002648 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <TIM1_BRK_IRQHandler+0x10>)
 800264e:	f00a fac8 	bl	800cbe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2400047c 	.word	0x2400047c

0800265c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <TIM1_UP_IRQHandler+0x10>)
 8002662:	f00a fabe 	bl	800cbe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2400047c 	.word	0x2400047c

08002670 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002676:	f00a fab4 	bl	800cbe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2400047c 	.word	0x2400047c

08002684 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <TIM1_CC_IRQHandler+0x10>)
 800268a:	f00a faaa 	bl	800cbe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2400047c 	.word	0x2400047c

08002698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <TIM2_IRQHandler+0x10>)
 800269e:	f00a faa0 	bl	800cbe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	240004c8 	.word	0x240004c8

080026ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <USART1_IRQHandler+0x10>)
 80026b2:	f00b fc83 	bl	800dfbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	24000560 	.word	0x24000560

080026c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <TIM6_DAC_IRQHandler+0x14>)
 80026c6:	f001 ffd3 	bl	8004670 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80026ca:	4803      	ldr	r0, [pc, #12]	; (80026d8 <TIM6_DAC_IRQHandler+0x18>)
 80026cc:	f00a fa89 	bl	800cbe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	24000294 	.word	0x24000294
 80026d8:	24000514 	.word	0x24000514

080026dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <_sbrk+0x5c>)
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <_sbrk+0x60>)
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <_sbrk+0x64>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <_sbrk+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d207      	bcs.n	800271c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800270c:	f00d fe82 	bl	8010414 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	220c      	movs	r2, #12
 8002714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271a:	e009      	b.n	8002730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <_sbrk+0x64>)
 800272c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	24080000 	.word	0x24080000
 800273c:	00000400 	.word	0x00000400
 8002740:	240006a4 	.word	0x240006a4
 8002744:	240006c0 	.word	0x240006c0

08002748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <SystemInit+0xe4>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	4a36      	ldr	r2, [pc, #216]	; (800282c <SystemInit+0xe4>)
 8002754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <SystemInit+0xe8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	2b06      	cmp	r3, #6
 8002766:	d807      	bhi.n	8002778 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <SystemInit+0xe8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 030f 	bic.w	r3, r3, #15
 8002770:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <SystemInit+0xe8>)
 8002772:	f043 0307 	orr.w	r3, r3, #7
 8002776:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <SystemInit+0xec>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <SystemInit+0xec>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <SystemInit+0xec>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <SystemInit+0xec>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <SystemInit+0xec>)
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <SystemInit+0xf0>)
 8002792:	4013      	ands	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <SystemInit+0xe8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <SystemInit+0xe8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 030f 	bic.w	r3, r3, #15
 80027aa:	4a21      	ldr	r2, [pc, #132]	; (8002830 <SystemInit+0xe8>)
 80027ac:	f043 0307 	orr.w	r3, r3, #7
 80027b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <SystemInit+0xec>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <SystemInit+0xec>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <SystemInit+0xec>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <SystemInit+0xec>)
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <SystemInit+0xf4>)
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <SystemInit+0xec>)
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <SystemInit+0xf8>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <SystemInit+0xec>)
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <SystemInit+0xfc>)
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <SystemInit+0xec>)
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <SystemInit+0xec>)
 80027de:	4a19      	ldr	r2, [pc, #100]	; (8002844 <SystemInit+0xfc>)
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <SystemInit+0xec>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <SystemInit+0xec>)
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <SystemInit+0xfc>)
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <SystemInit+0xec>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <SystemInit+0xec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <SystemInit+0xec>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <SystemInit+0xec>)
 8002802:	2200      	movs	r2, #0
 8002804:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <SystemInit+0x100>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <SystemInit+0x104>)
 800280c:	4013      	ands	r3, r2
 800280e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002812:	d202      	bcs.n	800281a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <SystemInit+0x108>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <SystemInit+0x10c>)
 800281c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002820:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	52002000 	.word	0x52002000
 8002834:	58024400 	.word	0x58024400
 8002838:	eaf6ed7f 	.word	0xeaf6ed7f
 800283c:	02020200 	.word	0x02020200
 8002840:	01ff0000 	.word	0x01ff0000
 8002844:	01010280 	.word	0x01010280
 8002848:	5c001000 	.word	0x5c001000
 800284c:	ffff0000 	.word	0xffff0000
 8002850:	51008108 	.word	0x51008108
 8002854:	52004000 	.word	0x52004000

08002858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800285c:	f7ff ff74 	bl	8002748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002860:	480c      	ldr	r0, [pc, #48]	; (8002894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002862:	490d      	ldr	r1, [pc, #52]	; (8002898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002878:	4c0a      	ldr	r4, [pc, #40]	; (80028a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002886:	f00d fdcb 	bl	8010420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288a:	f7fe fba1 	bl	8000fd0 <main>
  bx  lr
 800288e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002890:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002894:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002898:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 800289c:	08010730 	.word	0x08010730
  ldr r2, =_sbss
 80028a0:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 80028a4:	240006bc 	.word	0x240006bc

080028a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC3_IRQHandler>
	...

080028ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b2:	2003      	movs	r0, #3
 80028b4:	f001 fdae 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028b8:	f006 fd22 	bl	8009300 <HAL_RCC_GetSysClockFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_Init+0x68>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	4913      	ldr	r1, [pc, #76]	; (8002918 <HAL_Init+0x6c>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_Init+0x68>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_Init+0x6c>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_Init+0x70>)
 80028ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_Init+0x74>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f6:	200f      	movs	r0, #15
 80028f8:	f000 f814 	bl	8002924 <HAL_InitTick>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e002      	b.n	800290c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002906:	f7ff fa33 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58024400 	.word	0x58024400
 8002918:	080106e0 	.word	0x080106e0
 800291c:	24000048 	.word	0x24000048
 8002920:	24000044 	.word	0x24000044

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_InitTick+0x60>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e021      	b.n	800297c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_InitTick+0x64>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_InitTick+0x60>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fd93 	bl	800447a <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800296c:	f001 fd5d 	bl	800442a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <HAL_InitTick+0x68>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	24000050 	.word	0x24000050
 8002988:	24000044 	.word	0x24000044
 800298c:	2400004c 	.word	0x2400004c

08002990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_IncTick+0x20>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_IncTick+0x24>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_IncTick+0x24>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	24000050 	.word	0x24000050
 80029b4:	240006a8 	.word	0x240006a8

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	240006a8 	.word	0x240006a8

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffee 	bl	80029b8 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	24000050 	.word	0x24000050

08002a18 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_SuspendTick+0x1c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_SuspendTick+0x1c>)
 8002a22:	f023 0302 	bic.w	r3, r3, #2
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetREVID+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0c1b      	lsrs	r3, r3, #16
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	5c001000 	.word	0x5c001000

08002a50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000400 	.word	0x58000400

08002a7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3360      	adds	r3, #96	; 0x60
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	611a      	str	r2, [r3, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3360      	adds	r3, #96	; 0x60
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]
  }
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3330      	adds	r3, #48	; 0x30
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	211f      	movs	r1, #31
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 011f 	and.w	r1, r3, #31
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f023 0203 	bic.w	r2, r3, #3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0e5b      	lsrs	r3, r3, #25
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0d1b      	lsrs	r3, r3, #20
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2107      	movs	r1, #7
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	401a      	ands	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0318 	and.w	r3, r3, #24
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cac:	40d9      	lsrs	r1, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	000fffff 	.word	0x000fffff

08002cd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6093      	str	r3, [r2, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	5fffffc0 	.word	0x5fffffc0

08002d10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <LL_ADC_EnableInternalRegulator+0x24>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	6fffffc0 	.word	0x6fffffc0

08002d60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <LL_ADC_Enable+0x24>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	7fffffc0 	.word	0x7fffffc0

08002db0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <LL_ADC_Disable+0x24>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	f043 0202 	orr.w	r2, r3, #2
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	7fffffc0 	.word	0x7fffffc0

08002dd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <LL_ADC_IsEnabled+0x18>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <LL_ADC_IsEnabled+0x1a>
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d101      	bne.n	8002e16 <LL_ADC_IsDisableOngoing+0x18>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <LL_ADC_IsDisableOngoing+0x1a>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <LL_ADC_REG_StartConversion+0x24>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	7fffffc0 	.word	0x7fffffc0

08002e4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d101      	bne.n	8002e64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d101      	bne.n	8002e8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e18f      	b.n	80031d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe ff6f 	bl	8001da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff19 	bl	8002d10 <LL_ADC_IsDeepPowerDownEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff feff 	bl	8002cec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff34 	bl	8002d60 <LL_ADC_IsInternalRegulatorEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d114      	bne.n	8002f28 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff18 	bl	8002d38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f08:	4b87      	ldr	r3, [pc, #540]	; (8003128 <HAL_ADC_Init+0x290>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	4a87      	ldr	r2, [pc, #540]	; (800312c <HAL_ADC_Init+0x294>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f1a:	e002      	b.n	8002f22 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff17 	bl	8002d60 <LL_ADC_IsInternalRegulatorEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff77 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8002f5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 8129 	bne.w	80031c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 8125 	bne.w	80031c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff24 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d136      	bne.n	8003004 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_ADC_Init+0x298>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_Init+0x112>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_ADC_Init+0x29c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_ADC_Init+0x130>
 8002faa:	4861      	ldr	r0, [pc, #388]	; (8003130 <HAL_ADC_Init+0x298>)
 8002fac:	f7ff ff14 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	4860      	ldr	r0, [pc, #384]	; (8003134 <HAL_ADC_Init+0x29c>)
 8002fb4:	f7ff ff10 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4323      	orrs	r3, r4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	e008      	b.n	8002fda <HAL_ADC_Init+0x142>
 8002fc8:	485b      	ldr	r0, [pc, #364]	; (8003138 <HAL_ADC_Init+0x2a0>)
 8002fca:	f7ff ff05 	bl	8002dd8 <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a53      	ldr	r2, [pc, #332]	; (8003130 <HAL_ADC_Init+0x298>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_ADC_Init+0x15a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a51      	ldr	r2, [pc, #324]	; (8003134 <HAL_ADC_Init+0x29c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Init+0x15e>
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_ADC_Init+0x2a4>)
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Init+0x160>
 8002ff6:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_ADC_Init+0x2a8>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7ff fd3c 	bl	8002a7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003004:	f7ff fd18 	bl	8002a38 <HAL_GetREVID>
 8003008:	4603      	mov	r3, r0
 800300a:	f241 0203 	movw	r2, #4099	; 0x1003
 800300e:	4293      	cmp	r3, r2
 8003010:	d914      	bls.n	800303c <HAL_ADC_Init+0x1a4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b10      	cmp	r3, #16
 8003018:	d110      	bne.n	800303c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7d5b      	ldrb	r3, [r3, #21]
 800301e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003024:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800302a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7f1b      	ldrb	r3, [r3, #28]
 8003030:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003032:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003034:	f043 030c 	orr.w	r3, r3, #12
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e00d      	b.n	8003058 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7d5b      	ldrb	r3, [r3, #21]
 8003040:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003046:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800304c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7f1b      	ldrb	r3, [r3, #28]
 8003052:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7f1b      	ldrb	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	3b01      	subs	r3, #1
 8003066:	045b      	lsls	r3, r3, #17
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <HAL_ADC_Init+0x2ac>)
 8003092:	4013      	ands	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	430b      	orrs	r3, r1
 800309c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fed2 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 80030a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fedf 	bl	8002e72 <LL_ADC_INJ_IsConversionOngoing>
 80030b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d15f      	bne.n	800317c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d15c      	bne.n	800317c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7d1b      	ldrb	r3, [r3, #20]
 80030c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_ADC_Init+0x2b0>)
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d130      	bne.n	8003150 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_ADC_Init+0x2b4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003102:	3a01      	subs	r2, #1
 8003104:	0411      	lsls	r1, r2, #16
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003116:	430a      	orrs	r2, r1
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	611a      	str	r2, [r3, #16]
 8003124:	e01c      	b.n	8003160 <HAL_ADC_Init+0x2c8>
 8003126:	bf00      	nop
 8003128:	24000044 	.word	0x24000044
 800312c:	053e2d63 	.word	0x053e2d63
 8003130:	40022000 	.word	0x40022000
 8003134:	40022100 	.word	0x40022100
 8003138:	58026000 	.word	0x58026000
 800313c:	40022300 	.word	0x40022300
 8003140:	58026300 	.word	0x58026300
 8003144:	fff0c003 	.word	0xfff0c003
 8003148:	ffffbffc 	.word	0xffffbffc
 800314c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fdd6 	bl	8003d28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10c      	bne.n	800319e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f023 010f 	bic.w	r1, r3, #15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
 800319c:	e007      	b.n	80031ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020f 	bic.w	r2, r2, #15
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
 80031be:	e007      	b.n	80031d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0210 	orr.w	r2, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop

080031dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a55      	ldr	r2, [pc, #340]	; (8003344 <HAL_ADC_Start_DMA+0x168>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_ADC_Start_DMA+0x20>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a54      	ldr	r2, [pc, #336]	; (8003348 <HAL_ADC_Start_DMA+0x16c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_Start_DMA+0x24>
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_ADC_Start_DMA+0x170>)
 80031fe:	e000      	b.n	8003202 <HAL_ADC_Start_DMA+0x26>
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_ADC_Start_DMA+0x174>)
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fd64 	bl	8002cd0 <LL_ADC_GetMultimode>
 8003208:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fe1c 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 808c 	bne.w	8003334 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_ADC_Start_DMA+0x4e>
 8003226:	2302      	movs	r3, #2
 8003228:	e087      	b.n	800333a <HAL_ADC_Start_DMA+0x15e>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d002      	beq.n	8003244 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b09      	cmp	r3, #9
 8003242:	d170      	bne.n	8003326 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fbf1 	bl	8003a2c <ADC_Enable>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d163      	bne.n	800331c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_ADC_Start_DMA+0x178>)
 800325a:	4013      	ands	r3, r2
 800325c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a37      	ldr	r2, [pc, #220]	; (8003348 <HAL_ADC_Start_DMA+0x16c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d002      	beq.n	8003274 <HAL_ADC_Start_DMA+0x98>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e000      	b.n	8003276 <HAL_ADC_Start_DMA+0x9a>
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <HAL_ADC_Start_DMA+0x168>)
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	4293      	cmp	r3, r2
 800327c:	d002      	beq.n	8003284 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f023 0206 	bic.w	r2, r3, #6
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58
 80032a8:	e002      	b.n	80032b0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <HAL_ADC_Start_DMA+0x17c>)
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	4a27      	ldr	r2, [pc, #156]	; (800335c <HAL_ADC_Start_DMA+0x180>)
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_ADC_Start_DMA+0x184>)
 80032c6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	221c      	movs	r2, #28
 80032ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0210 	orr.w	r2, r2, #16
 80032e6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7ff fc89 	bl	8002c0a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	4619      	mov	r1, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f001 ff54 	bl	80051b4 <HAL_DMA_Start_IT>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fd85 	bl	8002e24 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800331a:	e00d      	b.n	8003338 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003324:	e008      	b.n	8003338 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003332:	e001      	b.n	8003338 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003334:	2302      	movs	r3, #2
 8003336:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40022100 	.word	0x40022100
 800334c:	40022300 	.word	0x40022300
 8003350:	58026300 	.word	0x58026300
 8003354:	fffff0fe 	.word	0xfffff0fe
 8003358:	08003bff 	.word	0x08003bff
 800335c:	08003cd7 	.word	0x08003cd7
 8003360:	08003cf3 	.word	0x08003cf3

08003364 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b0a1      	sub	sp, #132	; 0x84
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a9d      	ldr	r2, [pc, #628]	; (800361c <HAL_ADC_ConfigChannel+0x290>)
 80033a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x2a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e321      	b.n	80039fa <HAL_ADC_ConfigChannel+0x66e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fd42 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 8306 	bne.w	80039dc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d108      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x62>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2201      	movs	r2, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	e016      	b.n	800341c <HAL_ADC_ConfigChannel+0x90>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e003      	b.n	8003412 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800340a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2201      	movs	r2, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	69d1      	ldr	r1, [r2, #28]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	430b      	orrs	r3, r1
 8003428:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f7ff fbbb 	bl	8002bb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fd03 	bl	8002e4c <LL_ADC_REG_IsConversionOngoing>
 8003446:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fd10 	bl	8002e72 <LL_ADC_INJ_IsConversionOngoing>
 8003452:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 80b3 	bne.w	80035c2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800345c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 80af 	bne.w	80035c2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	461a      	mov	r2, r3
 8003472:	f7ff fbdd 	bl	8002c30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003476:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <HAL_ADC_ConfigChannel+0x294>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800347e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003482:	d10b      	bne.n	800349c <HAL_ADC_ConfigChannel+0x110>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	e01d      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x14c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x136>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	e00a      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x14c>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d027      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6919      	ldr	r1, [r3, #16]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f0:	f7ff faf8 	bl	8002ae4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	7e5b      	ldrb	r3, [r3, #25]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_ADC_ConfigChannel+0x17e>
 8003504:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003508:	e000      	b.n	800350c <HAL_ADC_ConfigChannel+0x180>
 800350a:	2300      	movs	r3, #0
 800350c:	461a      	mov	r2, r3
 800350e:	f7ff fb22 	bl	8002b56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6919      	ldr	r1, [r3, #16]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	7e1b      	ldrb	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x19c>
 8003522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003526:	e000      	b.n	800352a <HAL_ADC_ConfigChannel+0x19e>
 8003528:	2300      	movs	r3, #0
 800352a:	461a      	mov	r2, r3
 800352c:	f7ff fafa 	bl	8002b24 <LL_ADC_SetDataRightShift>
 8003530:	e047      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	069b      	lsls	r3, r3, #26
 8003542:	429a      	cmp	r2, r3
 8003544:	d107      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003554:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	069b      	lsls	r3, r3, #26
 8003566:	429a      	cmp	r2, r3
 8003568:	d107      	bne.n	800357a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003578:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	069b      	lsls	r3, r3, #26
 800358a:	429a      	cmp	r2, r3
 800358c:	d107      	bne.n	800359e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800359c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	069b      	lsls	r3, r3, #26
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d107      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fc06 	bl	8002dd8 <LL_ADC_IsEnabled>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 820d 	bne.w	80039ee <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f7ff fb51 	bl	8002c88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <HAL_ADC_ConfigChannel+0x290>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	f040 8133 	bne.w	8003858 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d110      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x298>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	3301      	adds	r3, #1
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2b09      	cmp	r3, #9
 8003610:	bf94      	ite	ls
 8003612:	2301      	movls	r3, #1
 8003614:	2300      	movhi	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e01e      	b.n	8003658 <HAL_ADC_ConfigChannel+0x2cc>
 800361a:	bf00      	nop
 800361c:	47ff0000 	.word	0x47ff0000
 8003620:	5c001000 	.word	0x5c001000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2b09      	cmp	r3, #9
 8003650:	bf94      	ite	ls
 8003652:	2301      	movls	r3, #1
 8003654:	2300      	movhi	r3, #0
 8003656:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003658:	2b00      	cmp	r3, #0
 800365a:	d079      	beq.n	8003750 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x2ec>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	3301      	adds	r3, #1
 8003670:	069b      	lsls	r3, r3, #26
 8003672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003676:	e015      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x318>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003690:	2320      	movs	r3, #32
 8003692:	e003      	b.n	800369c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3301      	adds	r3, #1
 800369e:	069b      	lsls	r3, r3, #26
 80036a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x338>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2101      	movs	r1, #1
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	e017      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x368>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e003      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	ea42 0103 	orr.w	r1, r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_ADC_ConfigChannel+0x38e>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e9b      	lsrs	r3, r3, #26
 800370a:	3301      	adds	r3, #1
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	e018      	b.n	800374c <HAL_ADC_ConfigChannel+0x3c0>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e003      	b.n	800373e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800374c:	430b      	orrs	r3, r1
 800374e:	e07e      	b.n	800384e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003758:	2b00      	cmp	r3, #0
 800375a:	d107      	bne.n	800376c <HAL_ADC_ConfigChannel+0x3e0>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	3301      	adds	r3, #1
 8003764:	069b      	lsls	r3, r3, #26
 8003766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800376a:	e015      	b.n	8003798 <HAL_ADC_ConfigChannel+0x40c>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003784:	2320      	movs	r3, #32
 8003786:	e003      	b.n	8003790 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3301      	adds	r3, #1
 8003792:	069b      	lsls	r3, r3, #26
 8003794:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x42c>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0e9b      	lsrs	r3, r3, #26
 80037aa:	3301      	adds	r3, #1
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	e017      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x45c>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	61bb      	str	r3, [r7, #24]
  return result;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80037d0:	2320      	movs	r3, #32
 80037d2:	e003      	b.n	80037dc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x488>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0e9b      	lsrs	r3, r3, #26
 80037fe:	3301      	adds	r3, #1
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	3b1e      	subs	r3, #30
 800380c:	051b      	lsls	r3, r3, #20
 800380e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003812:	e01b      	b.n	800384c <HAL_ADC_ConfigChannel+0x4c0>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	60fb      	str	r3, [r7, #12]
  return result;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800382c:	2320      	movs	r3, #32
 800382e:	e003      	b.n	8003838 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	f003 021f 	and.w	r2, r3, #31
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	3b1e      	subs	r3, #30
 8003846:	051b      	lsls	r3, r3, #20
 8003848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800384c:	430b      	orrs	r3, r1
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	4619      	mov	r1, r3
 8003854:	f7ff f9ec 	bl	8002c30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f280 80c6 	bge.w	80039ee <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a67      	ldr	r2, [pc, #412]	; (8003a04 <HAL_ADC_ConfigChannel+0x678>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x4ea>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	; (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_ADC_ConfigChannel+0x4ee>
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_ADC_ConfigChannel+0x680>)
 8003878:	e000      	b.n	800387c <HAL_ADC_ConfigChannel+0x4f0>
 800387a:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <HAL_ADC_ConfigChannel+0x684>)
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f923 	bl	8002ac8 <LL_ADC_GetCommonPathInternalCh>
 8003882:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5e      	ldr	r2, [pc, #376]	; (8003a04 <HAL_ADC_ConfigChannel+0x678>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x50c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5d      	ldr	r2, [pc, #372]	; (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10e      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x52a>
 8003898:	485a      	ldr	r0, [pc, #360]	; (8003a04 <HAL_ADC_ConfigChannel+0x678>)
 800389a:	f7ff fa9d 	bl	8002dd8 <LL_ADC_IsEnabled>
 800389e:	4604      	mov	r4, r0
 80038a0:	4859      	ldr	r0, [pc, #356]	; (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 80038a2:	f7ff fa99 	bl	8002dd8 <LL_ADC_IsEnabled>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4323      	orrs	r3, r4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e008      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x53c>
 80038b6:	4857      	ldr	r0, [pc, #348]	; (8003a14 <HAL_ADC_ConfigChannel+0x688>)
 80038b8:	f7ff fa8e 	bl	8002dd8 <LL_ADC_IsEnabled>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07d      	beq.n	80039c8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a51      	ldr	r2, [pc, #324]	; (8003a18 <HAL_ADC_ConfigChannel+0x68c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d130      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x5ac>
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d12b      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4b      	ldr	r2, [pc, #300]	; (8003a14 <HAL_ADC_ConfigChannel+0x688>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	f040 8081 	bne.w	80039ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a44      	ldr	r2, [pc, #272]	; (8003a04 <HAL_ADC_ConfigChannel+0x678>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_ADC_ConfigChannel+0x574>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a43      	ldr	r2, [pc, #268]	; (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x578>
 8003900:	4a42      	ldr	r2, [pc, #264]	; (8003a0c <HAL_ADC_ConfigChannel+0x680>)
 8003902:	e000      	b.n	8003906 <HAL_ADC_ConfigChannel+0x57a>
 8003904:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <HAL_ADC_ConfigChannel+0x684>)
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f7ff f8c7 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003914:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_ADC_ConfigChannel+0x690>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	4a41      	ldr	r2, [pc, #260]	; (8003a20 <HAL_ADC_ConfigChannel+0x694>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	099b      	lsrs	r3, r3, #6
 8003922:	3301      	adds	r3, #1
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003928:	e002      	b.n	8003930 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3b01      	subs	r3, #1
 800392e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f9      	bne.n	800392a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003936:	e05a      	b.n	80039ee <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a39      	ldr	r2, [pc, #228]	; (8003a24 <HAL_ADC_ConfigChannel+0x698>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d11e      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x5f4>
 8003942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d119      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a30      	ldr	r2, [pc, #192]	; (8003a14 <HAL_ADC_ConfigChannel+0x688>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d14b      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_ADC_ConfigChannel+0x678>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_ADC_ConfigChannel+0x5de>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_ADC_ConfigChannel+0x5e2>
 800396a:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_ADC_ConfigChannel+0x680>)
 800396c:	e000      	b.n	8003970 <HAL_ADC_ConfigChannel+0x5e4>
 800396e:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_ADC_ConfigChannel+0x684>)
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7ff f892 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800397e:	e036      	b.n	80039ee <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <HAL_ADC_ConfigChannel+0x69c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d131      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x662>
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d12c      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <HAL_ADC_ConfigChannel+0x688>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d127      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_ADC_ConfigChannel+0x678>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_ADC_ConfigChannel+0x626>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x62a>
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_ADC_ConfigChannel+0x680>)
 80039b4:	e000      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x62c>
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <HAL_ADC_ConfigChannel+0x684>)
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039be:	4619      	mov	r1, r3
 80039c0:	4610      	mov	r0, r2
 80039c2:	f7ff f86e 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
 80039c6:	e012      	b.n	80039ee <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039da:	e008      	b.n	80039ee <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3784      	adds	r7, #132	; 0x84
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022100 	.word	0x40022100
 8003a0c:	40022300 	.word	0x40022300
 8003a10:	58026300 	.word	0x58026300
 8003a14:	58026000 	.word	0x58026000
 8003a18:	cb840000 	.word	0xcb840000
 8003a1c:	24000044 	.word	0x24000044
 8003a20:	053e2d63 	.word	0x053e2d63
 8003a24:	c7520000 	.word	0xc7520000
 8003a28:	cfb80000 	.word	0xcfb80000

08003a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f9cd 	bl	8002dd8 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d16e      	bne.n	8003b22 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <ADC_Enable+0x100>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e05a      	b.n	8003b24 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff f988 	bl	8002d88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a78:	f7fe ff9e 	bl	80029b8 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <ADC_Enable+0x104>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <ADC_Enable+0x66>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <ADC_Enable+0x108>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <ADC_Enable+0x6a>
 8003a92:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <ADC_Enable+0x10c>)
 8003a94:	e000      	b.n	8003a98 <ADC_Enable+0x6c>
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <ADC_Enable+0x110>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f919 	bl	8002cd0 <LL_ADC_GetMultimode>
 8003a9e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <ADC_Enable+0x108>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d002      	beq.n	8003ab0 <ADC_Enable+0x84>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e000      	b.n	8003ab2 <ADC_Enable+0x86>
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <ADC_Enable+0x104>)
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d130      	bne.n	8003b22 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ac0:	e028      	b.n	8003b14 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f986 	bl	8002dd8 <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff f956 	bl	8002d88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003adc:	f7fe ff6c 	bl	80029b8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d914      	bls.n	8003b14 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00d      	beq.n	8003b14 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d1cf      	bne.n	8003ac2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	8000003f 	.word	0x8000003f
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40022100 	.word	0x40022100
 8003b38:	40022300 	.word	0x40022300
 8003b3c:	58026300 	.word	0x58026300

08003b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f956 	bl	8002dfe <LL_ADC_IsDisableOngoing>
 8003b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f93d 	bl	8002dd8 <LL_ADC_IsEnabled>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d047      	beq.n	8003bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d144      	bne.n	8003bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030d 	and.w	r3, r3, #13
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10c      	bne.n	8003b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff f917 	bl	8002db0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2203      	movs	r2, #3
 8003b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b8a:	f7fe ff15 	bl	80029b8 <HAL_GetTick>
 8003b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b90:	e029      	b.n	8003be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e023      	b.n	8003bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bae:	f7fe ff03 	bl	80029b8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d914      	bls.n	8003be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0210 	orr.w	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e007      	b.n	8003bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1dc      	bne.n	8003bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d14b      	bne.n	8003cb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe ffa8 	bl	8002b8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d032      	beq.n	8003ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d12b      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11f      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	f043 0201 	orr.w	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
 8003c74:	e018      	b.n	8003ca8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7fd ffef 	bl	8001c8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cae:	e00e      	b.n	8003cce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fb5b 	bl	8003378 <HAL_ADC_ErrorCallback>
}
 8003cc2:	e004      	b.n	8003cce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fb3d 	bl	8003364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fb2d 	bl	8003378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a79      	ldr	r2, [pc, #484]	; (8003f1c <ADC_ConfigureBoostMode+0x1f4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <ADC_ConfigureBoostMode+0x1c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a78      	ldr	r2, [pc, #480]	; (8003f20 <ADC_ConfigureBoostMode+0x1f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d109      	bne.n	8003d58 <ADC_ConfigureBoostMode+0x30>
 8003d44:	4b77      	ldr	r3, [pc, #476]	; (8003f24 <ADC_ConfigureBoostMode+0x1fc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e008      	b.n	8003d6a <ADC_ConfigureBoostMode+0x42>
 8003d58:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <ADC_ConfigureBoostMode+0x200>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01c      	beq.n	8003da8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d6e:	f005 fc41 	bl	80095f4 <HAL_RCC_GetHCLKFreq>
 8003d72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d7c:	d010      	beq.n	8003da0 <ADC_ConfigureBoostMode+0x78>
 8003d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d82:	d871      	bhi.n	8003e68 <ADC_ConfigureBoostMode+0x140>
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d002      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x68>
 8003d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d8e:	d16b      	bne.n	8003e68 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	60fb      	str	r3, [r7, #12]
        break;
 8003d9e:	e066      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	60fb      	str	r3, [r7, #12]
        break;
 8003da6:	e062      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003dac:	f006 fbc4 	bl	800a538 <HAL_RCCEx_GetPeriphCLKFreq>
 8003db0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dba:	d051      	beq.n	8003e60 <ADC_ConfigureBoostMode+0x138>
 8003dbc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dc0:	d854      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003dc2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003dc6:	d047      	beq.n	8003e58 <ADC_ConfigureBoostMode+0x130>
 8003dc8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003dcc:	d84e      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003dce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dd2:	d03d      	beq.n	8003e50 <ADC_ConfigureBoostMode+0x128>
 8003dd4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dd8:	d848      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dde:	d033      	beq.n	8003e48 <ADC_ConfigureBoostMode+0x120>
 8003de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de4:	d842      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003de6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dea:	d029      	beq.n	8003e40 <ADC_ConfigureBoostMode+0x118>
 8003dec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003df0:	d83c      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003df2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003df6:	d01a      	beq.n	8003e2e <ADC_ConfigureBoostMode+0x106>
 8003df8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dfc:	d836      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003dfe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e02:	d014      	beq.n	8003e2e <ADC_ConfigureBoostMode+0x106>
 8003e04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e08:	d830      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0e:	d00e      	beq.n	8003e2e <ADC_ConfigureBoostMode+0x106>
 8003e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e14:	d82a      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003e16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e1a:	d008      	beq.n	8003e2e <ADC_ConfigureBoostMode+0x106>
 8003e1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e20:	d824      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003e22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e26:	d002      	beq.n	8003e2e <ADC_ConfigureBoostMode+0x106>
 8003e28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e2c:	d11e      	bne.n	8003e6c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0c9b      	lsrs	r3, r3, #18
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	60fb      	str	r3, [r7, #12]
        break;
 8003e3e:	e016      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
        break;
 8003e46:	e012      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	60fb      	str	r3, [r7, #12]
        break;
 8003e4e:	e00e      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	60fb      	str	r3, [r7, #12]
        break;
 8003e56:	e00a      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	09db      	lsrs	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
        break;
 8003e5e:	e006      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	60fb      	str	r3, [r7, #12]
        break;
 8003e66:	e002      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
        break;
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003e6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e6e:	f7fe fde3 	bl	8002a38 <HAL_GetREVID>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d815      	bhi.n	8003ea8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <ADC_ConfigureBoostMode+0x204>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d908      	bls.n	8003e96 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e94:	e03e      	b.n	8003f14 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea4:	609a      	str	r2, [r3, #8]
}
 8003ea6:	e035      	b.n	8003f14 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <ADC_ConfigureBoostMode+0x208>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d808      	bhi.n	8003ec8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	e025      	b.n	8003f14 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a1a      	ldr	r2, [pc, #104]	; (8003f34 <ADC_ConfigureBoostMode+0x20c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d80a      	bhi.n	8003ee6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee2:	609a      	str	r2, [r3, #8]
}
 8003ee4:	e016      	b.n	8003f14 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <ADC_ConfigureBoostMode+0x210>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d80a      	bhi.n	8003f04 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f00:	609a      	str	r2, [r3, #8]
}
 8003f02:	e007      	b.n	8003f14 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40022000 	.word	0x40022000
 8003f20:	40022100 	.word	0x40022100
 8003f24:	40022300 	.word	0x40022300
 8003f28:	58026300 	.word	0x58026300
 8003f2c:	01312d00 	.word	0x01312d00
 8003f30:	005f5e10 	.word	0x005f5e10
 8003f34:	00bebc20 	.word	0x00bebc20
 8003f38:	017d7840 	.word	0x017d7840

08003f3c <LL_ADC_IsEnabled>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <LL_ADC_IsEnabled+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <LL_ADC_IsEnabled+0x1a>
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <LL_ADC_StartCalibration>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <LL_ADC_StartCalibration+0x38>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f84:	430a      	orrs	r2, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	3ffeffc0 	.word	0x3ffeffc0

08003fa0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb4:	d101      	bne.n	8003fba <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d101      	bne.n	8003fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_ADCEx_Calibration_Start+0x1e>
 800400a:	2302      	movs	r3, #2
 800400c:	e04c      	b.n	80040a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff fd92 	bl	8003b40 <ADC_Disable>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d135      	bne.n	8004092 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800402a:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800402c:	4013      	ands	r3, r2
 800402e:	f043 0202 	orr.w	r2, r3, #2
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff90 	bl	8003f64 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004044:	e014      	b.n	8004070 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3301      	adds	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d30d      	bcc.n	8004070 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	f023 0312 	bic.w	r3, r3, #18
 800405c:	f043 0210 	orr.w	r2, r3, #16
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01b      	b.n	80040a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff93 	bl	8003fa0 <LL_ADC_IsCalibrationOnGoing>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e2      	bne.n	8004046 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
 8004090:	e005      	b.n	800409e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0210 	orr.w	r2, r3, #16
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	ffffeefd 	.word	0xffffeefd
 80040b4:	25c3f800 	.word	0x25c3f800

080040b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b09f      	sub	sp, #124	; 0x7c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0be      	b.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5c      	ldr	r2, [pc, #368]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d102      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f0:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	e001      	b.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f043 0220 	orr.w	r2, r3, #32
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e09d      	b.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff54 	bl	8003fc8 <LL_ADC_REG_IsConversionOngoing>
 8004120:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ff4e 	bl	8003fc8 <LL_ADC_REG_IsConversionOngoing>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d17f      	bne.n	8004232 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004134:	2b00      	cmp	r3, #0
 8004136:	d17c      	bne.n	8004232 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a47      	ldr	r2, [pc, #284]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a46      	ldr	r2, [pc, #280]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800414e:	e000      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004152:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d039      	beq.n	80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	431a      	orrs	r2, r3
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10e      	bne.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004182:	4836      	ldr	r0, [pc, #216]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004184:	f7ff feda 	bl	8003f3c <LL_ADC_IsEnabled>
 8004188:	4604      	mov	r4, r0
 800418a:	4835      	ldr	r0, [pc, #212]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800418c:	f7ff fed6 	bl	8003f3c <LL_ADC_IsEnabled>
 8004190:	4603      	mov	r3, r0
 8004192:	4323      	orrs	r3, r4
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e008      	b.n	80041b2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80041a0:	4832      	ldr	r0, [pc, #200]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041a2:	f7ff fecb 	bl	8003f3c <LL_ADC_IsEnabled>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d047      	beq.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041bc:	4013      	ands	r3, r2
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	6811      	ldr	r1, [r2, #0]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	6892      	ldr	r2, [r2, #8]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	431a      	orrs	r2, r3
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ce:	e03a      	b.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10e      	bne.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80041f0:	481a      	ldr	r0, [pc, #104]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041f2:	f7ff fea3 	bl	8003f3c <LL_ADC_IsEnabled>
 80041f6:	4604      	mov	r4, r0
 80041f8:	4819      	ldr	r0, [pc, #100]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041fa:	f7ff fe9f 	bl	8003f3c <LL_ADC_IsEnabled>
 80041fe:	4603      	mov	r3, r0
 8004200:	4323      	orrs	r3, r4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e008      	b.n	8004220 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800420e:	4817      	ldr	r0, [pc, #92]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004210:	f7ff fe94 	bl	8003f3c <LL_ADC_IsEnabled>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800422a:	4013      	ands	r3, r2
 800422c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800422e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004230:	e009      	b.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004244:	e000      	b.n	8004248 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004246:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004250:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004254:	4618      	mov	r0, r3
 8004256:	377c      	adds	r7, #124	; 0x7c
 8004258:	46bd      	mov	sp, r7
 800425a:	bd90      	pop	{r4, r7, pc}
 800425c:	40022000 	.word	0x40022000
 8004260:	40022100 	.word	0x40022100
 8004264:	40022300 	.word	0x40022300
 8004268:	58026300 	.word	0x58026300
 800426c:	58026000 	.word	0x58026000
 8004270:	fffff0e0 	.word	0xfffff0e0

08004274 <__NVIC_SetPriorityGrouping>:
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <__NVIC_SetPriorityGrouping+0x40>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <__NVIC_SetPriorityGrouping+0x40>)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	60d3      	str	r3, [r2, #12]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000ed00 	.word	0xe000ed00
 80042b8:	05fa0000 	.word	0x05fa0000

080042bc <__NVIC_GetPriorityGrouping>:
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <__NVIC_GetPriorityGrouping+0x18>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 0307 	and.w	r3, r3, #7
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <__NVIC_EnableIRQ>:
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	db0b      	blt.n	8004302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	f003 021f 	and.w	r2, r3, #31
 80042f0:	4907      	ldr	r1, [pc, #28]	; (8004310 <__NVIC_EnableIRQ+0x38>)
 80042f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2001      	movs	r0, #1
 80042fa:	fa00 f202 	lsl.w	r2, r0, r2
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100

08004314 <__NVIC_SetPriority>:
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db0a      	blt.n	800433e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	490c      	ldr	r1, [pc, #48]	; (8004360 <__NVIC_SetPriority+0x4c>)
 800432e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	440b      	add	r3, r1
 8004338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800433c:	e00a      	b.n	8004354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4908      	ldr	r1, [pc, #32]	; (8004364 <__NVIC_SetPriority+0x50>)
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3b04      	subs	r3, #4
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	440b      	add	r3, r1
 8004352:	761a      	strb	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000e100 	.word	0xe000e100
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <NVIC_EncodePriority>:
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf28      	it	cs
 8004386:	2304      	movcs	r3, #4
 8004388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3304      	adds	r3, #4
 800438e:	2b06      	cmp	r3, #6
 8004390:	d902      	bls.n	8004398 <NVIC_EncodePriority+0x30>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3b03      	subs	r3, #3
 8004396:	e000      	b.n	800439a <NVIC_EncodePriority+0x32>
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	43d9      	mvns	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	4313      	orrs	r3, r2
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e0:	d301      	bcc.n	80043e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e2:	2301      	movs	r3, #1
 80043e4:	e00f      	b.n	8004406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <SysTick_Config+0x40>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ee:	210f      	movs	r1, #15
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f4:	f7ff ff8e 	bl	8004314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SysTick_Config+0x40>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <SysTick_Config+0x40>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010

08004414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff29 	bl	8004274 <__NVIC_SetPriorityGrouping>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004438:	f7ff ff40 	bl	80042bc <__NVIC_GetPriorityGrouping>
 800443c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	6978      	ldr	r0, [r7, #20]
 8004444:	f7ff ff90 	bl	8004368 <NVIC_EncodePriority>
 8004448:	4602      	mov	r2, r0
 800444a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff ff5f 	bl	8004314 <__NVIC_SetPriority>
}
 8004456:	bf00      	nop
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff33 	bl	80042d8 <__NVIC_EnableIRQ>
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff ffa4 	bl	80043d0 <SysTick_Config>
 8004488:	4603      	mov	r3, r0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e014      	b.n	80044ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	791b      	ldrb	r3, [r3, #4]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fd fd8f 	bl	8001fd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	795b      	ldrb	r3, [r3, #5]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_DAC_Start_DMA+0x1e>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e0ab      	b.n	800464e <HAL_DAC_Start_DMA+0x176>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2202      	movs	r2, #2
 8004500:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d12f      	bne.n	8004568 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_DAC_Start_DMA+0x180>)
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a51      	ldr	r2, [pc, #324]	; (800465c <HAL_DAC_Start_DMA+0x184>)
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_DAC_Start_DMA+0x188>)
 800451e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800452e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2b08      	cmp	r3, #8
 8004534:	d013      	beq.n	800455e <HAL_DAC_Start_DMA+0x86>
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d845      	bhi.n	80045c8 <HAL_DAC_Start_DMA+0xf0>
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_DAC_Start_DMA+0x72>
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d005      	beq.n	8004554 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004548:	e03e      	b.n	80045c8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	613b      	str	r3, [r7, #16]
        break;
 8004552:	e03c      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	613b      	str	r3, [r7, #16]
        break;
 800455c:	e037      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3310      	adds	r3, #16
 8004564:	613b      	str	r3, [r7, #16]
        break;
 8004566:	e032      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a3d      	ldr	r2, [pc, #244]	; (8004664 <HAL_DAC_Start_DMA+0x18c>)
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <HAL_DAC_Start_DMA+0x190>)
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a3b      	ldr	r2, [pc, #236]	; (800466c <HAL_DAC_Start_DMA+0x194>)
 800457e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800458e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d013      	beq.n	80045be <HAL_DAC_Start_DMA+0xe6>
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d817      	bhi.n	80045cc <HAL_DAC_Start_DMA+0xf4>
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_DAC_Start_DMA+0xd2>
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d005      	beq.n	80045b4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80045a8:	e010      	b.n	80045cc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	613b      	str	r3, [r7, #16]
        break;
 80045b2:	e00c      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3318      	adds	r3, #24
 80045ba:	613b      	str	r3, [r7, #16]
        break;
 80045bc:	e007      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	331c      	adds	r3, #28
 80045c4:	613b      	str	r3, [r7, #16]
        break;
 80045c6:	e002      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80045cc:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d111      	bne.n	80045f8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6898      	ldr	r0, [r3, #8]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	f000 fde1 	bl	80051b4 <HAL_DMA_Start_IT>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
 80045f6:	e010      	b.n	800461a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004606:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68d8      	ldr	r0, [r3, #12]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	f000 fdcf 	bl	80051b4 <HAL_DMA_Start_IT>
 8004616:	4603      	mov	r3, r0
 8004618:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e005      	b.n	800464c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f043 0204 	orr.w	r2, r3, #4
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	080049d5 	.word	0x080049d5
 800465c:	080049f7 	.word	0x080049f7
 8004660:	08004a13 	.word	0x08004a13
 8004664:	08004a91 	.word	0x08004a91
 8004668:	08004ab3 	.word	0x08004ab3
 800466c:	08004acf 	.word	0x08004acf

08004670 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004686:	d120      	bne.n	80046ca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d118      	bne.n	80046ca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2204      	movs	r2, #4
 800469c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f043 0201 	orr.w	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f84b 	bl	8004760 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d8:	d120      	bne.n	800471c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e8:	d118      	bne.n	800471c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f043 0202 	orr.w	r2, r3, #2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004704:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9b0 	bl	8004a7c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	795b      	ldrb	r3, [r3, #5]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_DAC_ConfigChannel+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e11d      	b.n	80049c8 <HAL_DAC_ConfigChannel+0x254>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2202      	movs	r2, #2
 8004796:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d174      	bne.n	800488a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80047a0:	f7fe f90a 	bl	80029b8 <HAL_GetTick>
 80047a4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d134      	bne.n	8004816 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047ac:	e011      	b.n	80047d2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047ae:	f7fe f903 	bl	80029b8 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d90a      	bls.n	80047d2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f043 0208 	orr.w	r2, r3, #8
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2203      	movs	r2, #3
 80047cc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0fa      	b.n	80049c8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d8:	4b7d      	ldr	r3, [pc, #500]	; (80049d0 <HAL_DAC_ConfigChannel+0x25c>)
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80047e0:	2001      	movs	r0, #1
 80047e2:	f7fe f8f5 	bl	80029d0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	6992      	ldr	r2, [r2, #24]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
 80047f0:	e01e      	b.n	8004830 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047f2:	f7fe f8e1 	bl	80029b8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d90a      	bls.n	8004816 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f043 0208 	orr.w	r2, r3, #8
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2203      	movs	r2, #3
 8004810:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0d8      	b.n	80049c8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	dbe8      	blt.n	80047f2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004820:	2001      	movs	r0, #1
 8004822:	f7fe f8d5 	bl	80029d0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	6992      	ldr	r2, [r2, #24]
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	ea02 0103 	and.w	r1, r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	409a      	lsls	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	21ff      	movs	r1, #255	; 0xff
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	ea02 0103 	and.w	r1, r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	409a      	lsls	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d11d      	bne.n	80048ce <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	221f      	movs	r2, #31
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4013      	ands	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2207      	movs	r2, #7
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4013      	ands	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d102      	bne.n	80048f8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e00f      	b.n	8004918 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d102      	bne.n	8004906 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e008      	b.n	8004918 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800490e:	2301      	movs	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e001      	b.n	8004918 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6819      	ldr	r1, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43da      	mvns	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4013      	ands	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	22c0      	movs	r2, #192	; 0xc0
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43da      	mvns	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	400a      	ands	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20008000 	.word	0x20008000

080049d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fe9e 	bl	8004724 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	711a      	strb	r2, [r3, #4]
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fe97 	bl	8004738 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f043 0204 	orr.w	r2, r3, #4
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff fe8d 	bl	800474c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	711a      	strb	r2, [r3, #4]
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff ffce 	bl	8004a40 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	711a      	strb	r2, [r3, #4]
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7ff ffc7 	bl	8004a54 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f043 0204 	orr.w	r2, r3, #4
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff ffbd 	bl	8004a68 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	711a      	strb	r2, [r3, #4]
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7fd ff58 	bl	80029b8 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e316      	b.n	8005142 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a66      	ldr	r2, [pc, #408]	; (8004cb4 <HAL_DMA_Init+0x1b8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04a      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a65      	ldr	r2, [pc, #404]	; (8004cb8 <HAL_DMA_Init+0x1bc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d045      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a63      	ldr	r2, [pc, #396]	; (8004cbc <HAL_DMA_Init+0x1c0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d040      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a62      	ldr	r2, [pc, #392]	; (8004cc0 <HAL_DMA_Init+0x1c4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d03b      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a60      	ldr	r2, [pc, #384]	; (8004cc4 <HAL_DMA_Init+0x1c8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d036      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5f      	ldr	r2, [pc, #380]	; (8004cc8 <HAL_DMA_Init+0x1cc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d031      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5d      	ldr	r2, [pc, #372]	; (8004ccc <HAL_DMA_Init+0x1d0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d02c      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5c      	ldr	r2, [pc, #368]	; (8004cd0 <HAL_DMA_Init+0x1d4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d027      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5a      	ldr	r2, [pc, #360]	; (8004cd4 <HAL_DMA_Init+0x1d8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a59      	ldr	r2, [pc, #356]	; (8004cd8 <HAL_DMA_Init+0x1dc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01d      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a57      	ldr	r2, [pc, #348]	; (8004cdc <HAL_DMA_Init+0x1e0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a56      	ldr	r2, [pc, #344]	; (8004ce0 <HAL_DMA_Init+0x1e4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a54      	ldr	r2, [pc, #336]	; (8004ce4 <HAL_DMA_Init+0x1e8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a53      	ldr	r2, [pc, #332]	; (8004ce8 <HAL_DMA_Init+0x1ec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a51      	ldr	r2, [pc, #324]	; (8004cec <HAL_DMA_Init+0x1f0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_DMA_Init+0xb8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a50      	ldr	r2, [pc, #320]	; (8004cf0 <HAL_DMA_Init+0x1f4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_DMA_Init+0xbc>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_DMA_Init+0xbe>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 813b 	beq.w	8004e36 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a37      	ldr	r2, [pc, #220]	; (8004cb4 <HAL_DMA_Init+0x1b8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <HAL_DMA_Init+0x1bc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a34      	ldr	r2, [pc, #208]	; (8004cbc <HAL_DMA_Init+0x1c0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a33      	ldr	r2, [pc, #204]	; (8004cc0 <HAL_DMA_Init+0x1c4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a31      	ldr	r2, [pc, #196]	; (8004cc4 <HAL_DMA_Init+0x1c8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <HAL_DMA_Init+0x1cc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2e      	ldr	r2, [pc, #184]	; (8004ccc <HAL_DMA_Init+0x1d0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <HAL_DMA_Init+0x1d4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <HAL_DMA_Init+0x1d8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <HAL_DMA_Init+0x1dc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <HAL_DMA_Init+0x1e0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_DMA_Init+0x1e4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <HAL_DMA_Init+0x1e8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <HAL_DMA_Init+0x1ec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a22      	ldr	r2, [pc, #136]	; (8004cec <HAL_DMA_Init+0x1f0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_Init+0x174>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <HAL_DMA_Init+0x1f4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <HAL_DMA_Init+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e007      	b.n	8004c92 <HAL_DMA_Init+0x196>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c92:	e02f      	b.n	8004cf4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c94:	f7fd fe90 	bl	80029b8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d928      	bls.n	8004cf4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2203      	movs	r2, #3
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e246      	b.n	8005142 <HAL_DMA_Init+0x646>
 8004cb4:	40020010 	.word	0x40020010
 8004cb8:	40020028 	.word	0x40020028
 8004cbc:	40020040 	.word	0x40020040
 8004cc0:	40020058 	.word	0x40020058
 8004cc4:	40020070 	.word	0x40020070
 8004cc8:	40020088 	.word	0x40020088
 8004ccc:	400200a0 	.word	0x400200a0
 8004cd0:	400200b8 	.word	0x400200b8
 8004cd4:	40020410 	.word	0x40020410
 8004cd8:	40020428 	.word	0x40020428
 8004cdc:	40020440 	.word	0x40020440
 8004ce0:	40020458 	.word	0x40020458
 8004ce4:	40020470 	.word	0x40020470
 8004ce8:	40020488 	.word	0x40020488
 8004cec:	400204a0 	.word	0x400204a0
 8004cf0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1c8      	bne.n	8004c94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4b83      	ldr	r3, [pc, #524]	; (8004f1c <HAL_DMA_Init+0x420>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d107      	bne.n	8004d58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	4313      	orrs	r3, r2
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d58:	4b71      	ldr	r3, [pc, #452]	; (8004f20 <HAL_DMA_Init+0x424>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b71      	ldr	r3, [pc, #452]	; (8004f24 <HAL_DMA_Init+0x428>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d64:	d328      	bcc.n	8004db8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b28      	cmp	r3, #40	; 0x28
 8004d6c:	d903      	bls.n	8004d76 <HAL_DMA_Init+0x27a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b2e      	cmp	r3, #46	; 0x2e
 8004d74:	d917      	bls.n	8004da6 <HAL_DMA_Init+0x2aa>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d7c:	d903      	bls.n	8004d86 <HAL_DMA_Init+0x28a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b42      	cmp	r3, #66	; 0x42
 8004d84:	d90f      	bls.n	8004da6 <HAL_DMA_Init+0x2aa>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b46      	cmp	r3, #70	; 0x46
 8004d8c:	d903      	bls.n	8004d96 <HAL_DMA_Init+0x29a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b48      	cmp	r3, #72	; 0x48
 8004d94:	d907      	bls.n	8004da6 <HAL_DMA_Init+0x2aa>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b4e      	cmp	r3, #78	; 0x4e
 8004d9c:	d905      	bls.n	8004daa <HAL_DMA_Init+0x2ae>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b52      	cmp	r3, #82	; 0x52
 8004da4:	d801      	bhi.n	8004daa <HAL_DMA_Init+0x2ae>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_DMA_Init+0x2b0>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d117      	bne.n	8004e12 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f002 fb33 	bl	8007460 <DMA_CheckFifoParam>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e197      	b.n	8005142 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f002 fa6e 	bl	80072fc <DMA_CalcBaseAndBitshift>
 8004e20:	4603      	mov	r3, r0
 8004e22:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	223f      	movs	r2, #63	; 0x3f
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	e0cd      	b.n	8004fd2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a3b      	ldr	r2, [pc, #236]	; (8004f28 <HAL_DMA_Init+0x42c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <HAL_DMA_Init+0x430>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a38      	ldr	r2, [pc, #224]	; (8004f30 <HAL_DMA_Init+0x434>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a36      	ldr	r2, [pc, #216]	; (8004f34 <HAL_DMA_Init+0x438>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a35      	ldr	r2, [pc, #212]	; (8004f38 <HAL_DMA_Init+0x43c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a33      	ldr	r2, [pc, #204]	; (8004f3c <HAL_DMA_Init+0x440>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <HAL_DMA_Init+0x444>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMA_Init+0x38a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <HAL_DMA_Init+0x448>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_DMA_Init+0x38e>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <HAL_DMA_Init+0x390>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8097 	beq.w	8004fc0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <HAL_DMA_Init+0x42c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d021      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <HAL_DMA_Init+0x430>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01c      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <HAL_DMA_Init+0x434>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d017      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <HAL_DMA_Init+0x438>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d012      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_DMA_Init+0x43c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_DMA_Init+0x440>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d008      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_DMA_Init+0x444>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <HAL_DMA_Init+0x3e4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_DMA_Init+0x448>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_DMA_Init+0x44c>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d020      	beq.n	8004f4c <HAL_DMA_Init+0x450>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d102      	bne.n	8004f18 <HAL_DMA_Init+0x41c>
 8004f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f16:	e01a      	b.n	8004f4e <HAL_DMA_Init+0x452>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e018      	b.n	8004f4e <HAL_DMA_Init+0x452>
 8004f1c:	fe10803f 	.word	0xfe10803f
 8004f20:	5c001000 	.word	0x5c001000
 8004f24:	ffff0000 	.word	0xffff0000
 8004f28:	58025408 	.word	0x58025408
 8004f2c:	5802541c 	.word	0x5802541c
 8004f30:	58025430 	.word	0x58025430
 8004f34:	58025444 	.word	0x58025444
 8004f38:	58025458 	.word	0x58025458
 8004f3c:	5802546c 	.word	0x5802546c
 8004f40:	58025480 	.word	0x58025480
 8004f44:	58025494 	.word	0x58025494
 8004f48:	fffe000f 	.word	0xfffe000f
 8004f4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	4b6e      	ldr	r3, [pc, #440]	; (800514c <HAL_DMA_Init+0x650>)
 8004f94:	4413      	add	r3, r2
 8004f96:	4a6e      	ldr	r2, [pc, #440]	; (8005150 <HAL_DMA_Init+0x654>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f002 f9a9 	bl	80072fc <DMA_CalcBaseAndBitshift>
 8004faa:	4603      	mov	r3, r0
 8004fac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	e008      	b.n	8004fd2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2240      	movs	r2, #64	; 0x40
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0b7      	b.n	8005142 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5f      	ldr	r2, [pc, #380]	; (8005154 <HAL_DMA_Init+0x658>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d072      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5d      	ldr	r2, [pc, #372]	; (8005158 <HAL_DMA_Init+0x65c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d06d      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a5c      	ldr	r2, [pc, #368]	; (800515c <HAL_DMA_Init+0x660>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d068      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5a      	ldr	r2, [pc, #360]	; (8005160 <HAL_DMA_Init+0x664>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d063      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a59      	ldr	r2, [pc, #356]	; (8005164 <HAL_DMA_Init+0x668>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d05e      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a57      	ldr	r2, [pc, #348]	; (8005168 <HAL_DMA_Init+0x66c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d059      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a56      	ldr	r2, [pc, #344]	; (800516c <HAL_DMA_Init+0x670>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d054      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a54      	ldr	r2, [pc, #336]	; (8005170 <HAL_DMA_Init+0x674>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d04f      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a53      	ldr	r2, [pc, #332]	; (8005174 <HAL_DMA_Init+0x678>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04a      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_DMA_Init+0x67c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d045      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_DMA_Init+0x680>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a4e      	ldr	r2, [pc, #312]	; (8005180 <HAL_DMA_Init+0x684>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d03b      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4d      	ldr	r2, [pc, #308]	; (8005184 <HAL_DMA_Init+0x688>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d036      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a4b      	ldr	r2, [pc, #300]	; (8005188 <HAL_DMA_Init+0x68c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d031      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4a      	ldr	r2, [pc, #296]	; (800518c <HAL_DMA_Init+0x690>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d02c      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a48      	ldr	r2, [pc, #288]	; (8005190 <HAL_DMA_Init+0x694>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d027      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a47      	ldr	r2, [pc, #284]	; (8005194 <HAL_DMA_Init+0x698>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a45      	ldr	r2, [pc, #276]	; (8005198 <HAL_DMA_Init+0x69c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a44      	ldr	r2, [pc, #272]	; (800519c <HAL_DMA_Init+0x6a0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a42      	ldr	r2, [pc, #264]	; (80051a0 <HAL_DMA_Init+0x6a4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a41      	ldr	r2, [pc, #260]	; (80051a4 <HAL_DMA_Init+0x6a8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <HAL_DMA_Init+0x6ac>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3e      	ldr	r2, [pc, #248]	; (80051ac <HAL_DMA_Init+0x6b0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_DMA_Init+0x5c6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3c      	ldr	r2, [pc, #240]	; (80051b0 <HAL_DMA_Init+0x6b4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_Init+0x5ca>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_DMA_Init+0x5cc>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d032      	beq.n	8005132 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f002 fa43 	bl	8007558 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d102      	bne.n	80050e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d010      	beq.n	8005120 <HAL_DMA_Init+0x624>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d80c      	bhi.n	8005120 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f002 fac0 	bl	800768c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	e008      	b.n	8005132 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	a7fdabf8 	.word	0xa7fdabf8
 8005150:	cccccccd 	.word	0xcccccccd
 8005154:	40020010 	.word	0x40020010
 8005158:	40020028 	.word	0x40020028
 800515c:	40020040 	.word	0x40020040
 8005160:	40020058 	.word	0x40020058
 8005164:	40020070 	.word	0x40020070
 8005168:	40020088 	.word	0x40020088
 800516c:	400200a0 	.word	0x400200a0
 8005170:	400200b8 	.word	0x400200b8
 8005174:	40020410 	.word	0x40020410
 8005178:	40020428 	.word	0x40020428
 800517c:	40020440 	.word	0x40020440
 8005180:	40020458 	.word	0x40020458
 8005184:	40020470 	.word	0x40020470
 8005188:	40020488 	.word	0x40020488
 800518c:	400204a0 	.word	0x400204a0
 8005190:	400204b8 	.word	0x400204b8
 8005194:	58025408 	.word	0x58025408
 8005198:	5802541c 	.word	0x5802541c
 800519c:	58025430 	.word	0x58025430
 80051a0:	58025444 	.word	0x58025444
 80051a4:	58025458 	.word	0x58025458
 80051a8:	5802546c 	.word	0x5802546c
 80051ac:	58025480 	.word	0x58025480
 80051b0:	58025494 	.word	0x58025494

080051b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e226      	b.n	800561e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_DMA_Start_IT+0x2a>
 80051da:	2302      	movs	r3, #2
 80051dc:	e21f      	b.n	800561e <HAL_DMA_Start_IT+0x46a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	f040 820a 	bne.w	8005608 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a68      	ldr	r2, [pc, #416]	; (80053a8 <HAL_DMA_Start_IT+0x1f4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d04a      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a66      	ldr	r2, [pc, #408]	; (80053ac <HAL_DMA_Start_IT+0x1f8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d045      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a65      	ldr	r2, [pc, #404]	; (80053b0 <HAL_DMA_Start_IT+0x1fc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d040      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a63      	ldr	r2, [pc, #396]	; (80053b4 <HAL_DMA_Start_IT+0x200>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d03b      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a62      	ldr	r2, [pc, #392]	; (80053b8 <HAL_DMA_Start_IT+0x204>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d036      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a60      	ldr	r2, [pc, #384]	; (80053bc <HAL_DMA_Start_IT+0x208>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5f      	ldr	r2, [pc, #380]	; (80053c0 <HAL_DMA_Start_IT+0x20c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d02c      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5d      	ldr	r2, [pc, #372]	; (80053c4 <HAL_DMA_Start_IT+0x210>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d027      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a5c      	ldr	r2, [pc, #368]	; (80053c8 <HAL_DMA_Start_IT+0x214>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d022      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a5a      	ldr	r2, [pc, #360]	; (80053cc <HAL_DMA_Start_IT+0x218>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a59      	ldr	r2, [pc, #356]	; (80053d0 <HAL_DMA_Start_IT+0x21c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a57      	ldr	r2, [pc, #348]	; (80053d4 <HAL_DMA_Start_IT+0x220>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a56      	ldr	r2, [pc, #344]	; (80053d8 <HAL_DMA_Start_IT+0x224>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a54      	ldr	r2, [pc, #336]	; (80053dc <HAL_DMA_Start_IT+0x228>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a53      	ldr	r2, [pc, #332]	; (80053e0 <HAL_DMA_Start_IT+0x22c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_DMA_Start_IT+0xee>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a51      	ldr	r2, [pc, #324]	; (80053e4 <HAL_DMA_Start_IT+0x230>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d108      	bne.n	80052b4 <HAL_DMA_Start_IT+0x100>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e007      	b.n	80052c4 <HAL_DMA_Start_IT+0x110>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f001 fe6a 	bl	8006fa4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <HAL_DMA_Start_IT+0x1f4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04a      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a33      	ldr	r2, [pc, #204]	; (80053ac <HAL_DMA_Start_IT+0x1f8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d045      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a31      	ldr	r2, [pc, #196]	; (80053b0 <HAL_DMA_Start_IT+0x1fc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d040      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a30      	ldr	r2, [pc, #192]	; (80053b4 <HAL_DMA_Start_IT+0x200>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03b      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_DMA_Start_IT+0x204>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d036      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <HAL_DMA_Start_IT+0x208>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d031      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <HAL_DMA_Start_IT+0x20c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02c      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <HAL_DMA_Start_IT+0x210>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d027      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a28      	ldr	r2, [pc, #160]	; (80053c8 <HAL_DMA_Start_IT+0x214>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a27      	ldr	r2, [pc, #156]	; (80053cc <HAL_DMA_Start_IT+0x218>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <HAL_DMA_Start_IT+0x21c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a24      	ldr	r2, [pc, #144]	; (80053d4 <HAL_DMA_Start_IT+0x220>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_DMA_Start_IT+0x224>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_DMA_Start_IT+0x228>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_DMA_Start_IT+0x22c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_DMA_Start_IT+0x1bc>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_DMA_Start_IT+0x230>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d101      	bne.n	8005374 <HAL_DMA_Start_IT+0x1c0>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <HAL_DMA_Start_IT+0x1c2>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d036      	beq.n	80053e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 021e 	bic.w	r2, r3, #30
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0216 	orr.w	r2, r2, #22
 800538c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d03e      	beq.n	8005414 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0208 	orr.w	r2, r2, #8
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e035      	b.n	8005414 <HAL_DMA_Start_IT+0x260>
 80053a8:	40020010 	.word	0x40020010
 80053ac:	40020028 	.word	0x40020028
 80053b0:	40020040 	.word	0x40020040
 80053b4:	40020058 	.word	0x40020058
 80053b8:	40020070 	.word	0x40020070
 80053bc:	40020088 	.word	0x40020088
 80053c0:	400200a0 	.word	0x400200a0
 80053c4:	400200b8 	.word	0x400200b8
 80053c8:	40020410 	.word	0x40020410
 80053cc:	40020428 	.word	0x40020428
 80053d0:	40020440 	.word	0x40020440
 80053d4:	40020458 	.word	0x40020458
 80053d8:	40020470 	.word	0x40020470
 80053dc:	40020488 	.word	0x40020488
 80053e0:	400204a0 	.word	0x400204a0
 80053e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 020e 	bic.w	r2, r3, #14
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 020a 	orr.w	r2, r2, #10
 80053fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0204 	orr.w	r2, r2, #4
 8005412:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a83      	ldr	r2, [pc, #524]	; (8005628 <HAL_DMA_Start_IT+0x474>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d072      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a82      	ldr	r2, [pc, #520]	; (800562c <HAL_DMA_Start_IT+0x478>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d06d      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a80      	ldr	r2, [pc, #512]	; (8005630 <HAL_DMA_Start_IT+0x47c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d068      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7f      	ldr	r2, [pc, #508]	; (8005634 <HAL_DMA_Start_IT+0x480>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d063      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7d      	ldr	r2, [pc, #500]	; (8005638 <HAL_DMA_Start_IT+0x484>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d05e      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7c      	ldr	r2, [pc, #496]	; (800563c <HAL_DMA_Start_IT+0x488>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d059      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a7a      	ldr	r2, [pc, #488]	; (8005640 <HAL_DMA_Start_IT+0x48c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d054      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a79      	ldr	r2, [pc, #484]	; (8005644 <HAL_DMA_Start_IT+0x490>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d04f      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a77      	ldr	r2, [pc, #476]	; (8005648 <HAL_DMA_Start_IT+0x494>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d04a      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a76      	ldr	r2, [pc, #472]	; (800564c <HAL_DMA_Start_IT+0x498>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d045      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a74      	ldr	r2, [pc, #464]	; (8005650 <HAL_DMA_Start_IT+0x49c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d040      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a73      	ldr	r2, [pc, #460]	; (8005654 <HAL_DMA_Start_IT+0x4a0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d03b      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a71      	ldr	r2, [pc, #452]	; (8005658 <HAL_DMA_Start_IT+0x4a4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d036      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a70      	ldr	r2, [pc, #448]	; (800565c <HAL_DMA_Start_IT+0x4a8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d031      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a6e      	ldr	r2, [pc, #440]	; (8005660 <HAL_DMA_Start_IT+0x4ac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d02c      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6d      	ldr	r2, [pc, #436]	; (8005664 <HAL_DMA_Start_IT+0x4b0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d027      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a6b      	ldr	r2, [pc, #428]	; (8005668 <HAL_DMA_Start_IT+0x4b4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6a      	ldr	r2, [pc, #424]	; (800566c <HAL_DMA_Start_IT+0x4b8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d01d      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a68      	ldr	r2, [pc, #416]	; (8005670 <HAL_DMA_Start_IT+0x4bc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a67      	ldr	r2, [pc, #412]	; (8005674 <HAL_DMA_Start_IT+0x4c0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a65      	ldr	r2, [pc, #404]	; (8005678 <HAL_DMA_Start_IT+0x4c4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a64      	ldr	r2, [pc, #400]	; (800567c <HAL_DMA_Start_IT+0x4c8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a62      	ldr	r2, [pc, #392]	; (8005680 <HAL_DMA_Start_IT+0x4cc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_DMA_Start_IT+0x350>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a61      	ldr	r2, [pc, #388]	; (8005684 <HAL_DMA_Start_IT+0x4d0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d101      	bne.n	8005508 <HAL_DMA_Start_IT+0x354>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_DMA_Start_IT+0x356>
 8005508:	2300      	movs	r3, #0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01a      	beq.n	8005544 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005542:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a37      	ldr	r2, [pc, #220]	; (8005628 <HAL_DMA_Start_IT+0x474>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d04a      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a36      	ldr	r2, [pc, #216]	; (800562c <HAL_DMA_Start_IT+0x478>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d045      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a34      	ldr	r2, [pc, #208]	; (8005630 <HAL_DMA_Start_IT+0x47c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d040      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a33      	ldr	r2, [pc, #204]	; (8005634 <HAL_DMA_Start_IT+0x480>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d03b      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a31      	ldr	r2, [pc, #196]	; (8005638 <HAL_DMA_Start_IT+0x484>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d036      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <HAL_DMA_Start_IT+0x488>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d031      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <HAL_DMA_Start_IT+0x48c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d02c      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <HAL_DMA_Start_IT+0x490>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d027      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_DMA_Start_IT+0x494>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d022      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <HAL_DMA_Start_IT+0x498>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d01d      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_DMA_Start_IT+0x49c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d018      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_DMA_Start_IT+0x4a0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a25      	ldr	r2, [pc, #148]	; (8005658 <HAL_DMA_Start_IT+0x4a4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00e      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a24      	ldr	r2, [pc, #144]	; (800565c <HAL_DMA_Start_IT+0x4a8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_DMA_Start_IT+0x4ac>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_DMA_Start_IT+0x430>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <HAL_DMA_Start_IT+0x4b0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d108      	bne.n	80055f6 <HAL_DMA_Start_IT+0x442>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e012      	b.n	800561c <HAL_DMA_Start_IT+0x468>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e009      	b.n	800561c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8
 8005668:	58025408 	.word	0x58025408
 800566c:	5802541c 	.word	0x5802541c
 8005670:	58025430 	.word	0x58025430
 8005674:	58025444 	.word	0x58025444
 8005678:	58025458 	.word	0x58025458
 800567c:	5802546c 	.word	0x5802546c
 8005680:	58025480 	.word	0x58025480
 8005684:	58025494 	.word	0x58025494

08005688 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005690:	f7fd f992 	bl	80029b8 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e2dc      	b.n	8005c5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d008      	beq.n	80056be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e2cd      	b.n	8005c5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a76      	ldr	r2, [pc, #472]	; (800589c <HAL_DMA_Abort+0x214>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d04a      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a74      	ldr	r2, [pc, #464]	; (80058a0 <HAL_DMA_Abort+0x218>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d045      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a73      	ldr	r2, [pc, #460]	; (80058a4 <HAL_DMA_Abort+0x21c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d040      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a71      	ldr	r2, [pc, #452]	; (80058a8 <HAL_DMA_Abort+0x220>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d03b      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a70      	ldr	r2, [pc, #448]	; (80058ac <HAL_DMA_Abort+0x224>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d036      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6e      	ldr	r2, [pc, #440]	; (80058b0 <HAL_DMA_Abort+0x228>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d031      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6d      	ldr	r2, [pc, #436]	; (80058b4 <HAL_DMA_Abort+0x22c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d02c      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a6b      	ldr	r2, [pc, #428]	; (80058b8 <HAL_DMA_Abort+0x230>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d027      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6a      	ldr	r2, [pc, #424]	; (80058bc <HAL_DMA_Abort+0x234>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a68      	ldr	r2, [pc, #416]	; (80058c0 <HAL_DMA_Abort+0x238>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01d      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a67      	ldr	r2, [pc, #412]	; (80058c4 <HAL_DMA_Abort+0x23c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a65      	ldr	r2, [pc, #404]	; (80058c8 <HAL_DMA_Abort+0x240>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a64      	ldr	r2, [pc, #400]	; (80058cc <HAL_DMA_Abort+0x244>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a62      	ldr	r2, [pc, #392]	; (80058d0 <HAL_DMA_Abort+0x248>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a61      	ldr	r2, [pc, #388]	; (80058d4 <HAL_DMA_Abort+0x24c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_DMA_Abort+0xd6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a5f      	ldr	r2, [pc, #380]	; (80058d8 <HAL_DMA_Abort+0x250>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_DMA_Abort+0xda>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_DMA_Abort+0xdc>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 021e 	bic.w	r2, r2, #30
 8005776:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005786:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e00a      	b.n	80057a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 020e 	bic.w	r2, r2, #14
 800579e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3c      	ldr	r2, [pc, #240]	; (800589c <HAL_DMA_Abort+0x214>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d072      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_DMA_Abort+0x218>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d06d      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a39      	ldr	r2, [pc, #228]	; (80058a4 <HAL_DMA_Abort+0x21c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d068      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a37      	ldr	r2, [pc, #220]	; (80058a8 <HAL_DMA_Abort+0x220>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d063      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a36      	ldr	r2, [pc, #216]	; (80058ac <HAL_DMA_Abort+0x224>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d05e      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a34      	ldr	r2, [pc, #208]	; (80058b0 <HAL_DMA_Abort+0x228>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d059      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a33      	ldr	r2, [pc, #204]	; (80058b4 <HAL_DMA_Abort+0x22c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d054      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a31      	ldr	r2, [pc, #196]	; (80058b8 <HAL_DMA_Abort+0x230>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04f      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a30      	ldr	r2, [pc, #192]	; (80058bc <HAL_DMA_Abort+0x234>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d04a      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2e      	ldr	r2, [pc, #184]	; (80058c0 <HAL_DMA_Abort+0x238>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d045      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <HAL_DMA_Abort+0x23c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d040      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2b      	ldr	r2, [pc, #172]	; (80058c8 <HAL_DMA_Abort+0x240>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d03b      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <HAL_DMA_Abort+0x244>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d036      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <HAL_DMA_Abort+0x248>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d031      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <HAL_DMA_Abort+0x24c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d02c      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a25      	ldr	r2, [pc, #148]	; (80058d8 <HAL_DMA_Abort+0x250>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d027      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a24      	ldr	r2, [pc, #144]	; (80058dc <HAL_DMA_Abort+0x254>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d022      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <HAL_DMA_Abort+0x258>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <HAL_DMA_Abort+0x25c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1f      	ldr	r2, [pc, #124]	; (80058e8 <HAL_DMA_Abort+0x260>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <HAL_DMA_Abort+0x264>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <HAL_DMA_Abort+0x268>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <HAL_DMA_Abort+0x26c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_DMA_Abort+0x20e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <HAL_DMA_Abort+0x270>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d132      	bne.n	80058fc <HAL_DMA_Abort+0x274>
 8005896:	2301      	movs	r3, #1
 8005898:	e031      	b.n	80058fe <HAL_DMA_Abort+0x276>
 800589a:	bf00      	nop
 800589c:	40020010 	.word	0x40020010
 80058a0:	40020028 	.word	0x40020028
 80058a4:	40020040 	.word	0x40020040
 80058a8:	40020058 	.word	0x40020058
 80058ac:	40020070 	.word	0x40020070
 80058b0:	40020088 	.word	0x40020088
 80058b4:	400200a0 	.word	0x400200a0
 80058b8:	400200b8 	.word	0x400200b8
 80058bc:	40020410 	.word	0x40020410
 80058c0:	40020428 	.word	0x40020428
 80058c4:	40020440 	.word	0x40020440
 80058c8:	40020458 	.word	0x40020458
 80058cc:	40020470 	.word	0x40020470
 80058d0:	40020488 	.word	0x40020488
 80058d4:	400204a0 	.word	0x400204a0
 80058d8:	400204b8 	.word	0x400204b8
 80058dc:	58025408 	.word	0x58025408
 80058e0:	5802541c 	.word	0x5802541c
 80058e4:	58025430 	.word	0x58025430
 80058e8:	58025444 	.word	0x58025444
 80058ec:	58025458 	.word	0x58025458
 80058f0:	5802546c 	.word	0x5802546c
 80058f4:	58025480 	.word	0x58025480
 80058f8:	58025494 	.word	0x58025494
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005910:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6d      	ldr	r2, [pc, #436]	; (8005acc <HAL_DMA_Abort+0x444>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d04a      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a6b      	ldr	r2, [pc, #428]	; (8005ad0 <HAL_DMA_Abort+0x448>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d045      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a6a      	ldr	r2, [pc, #424]	; (8005ad4 <HAL_DMA_Abort+0x44c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d040      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a68      	ldr	r2, [pc, #416]	; (8005ad8 <HAL_DMA_Abort+0x450>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d03b      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a67      	ldr	r2, [pc, #412]	; (8005adc <HAL_DMA_Abort+0x454>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d036      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a65      	ldr	r2, [pc, #404]	; (8005ae0 <HAL_DMA_Abort+0x458>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d031      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a64      	ldr	r2, [pc, #400]	; (8005ae4 <HAL_DMA_Abort+0x45c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d02c      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a62      	ldr	r2, [pc, #392]	; (8005ae8 <HAL_DMA_Abort+0x460>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d027      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a61      	ldr	r2, [pc, #388]	; (8005aec <HAL_DMA_Abort+0x464>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5f      	ldr	r2, [pc, #380]	; (8005af0 <HAL_DMA_Abort+0x468>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5e      	ldr	r2, [pc, #376]	; (8005af4 <HAL_DMA_Abort+0x46c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a5c      	ldr	r2, [pc, #368]	; (8005af8 <HAL_DMA_Abort+0x470>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a5b      	ldr	r2, [pc, #364]	; (8005afc <HAL_DMA_Abort+0x474>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a59      	ldr	r2, [pc, #356]	; (8005b00 <HAL_DMA_Abort+0x478>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_DMA_Abort+0x47c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_DMA_Abort+0x32a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <HAL_DMA_Abort+0x480>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d108      	bne.n	80059c4 <HAL_DMA_Abort+0x33c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e007      	b.n	80059d4 <HAL_DMA_Abort+0x34c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0201 	bic.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059d4:	e013      	b.n	80059fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d6:	f7fc ffef 	bl	80029b8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b05      	cmp	r3, #5
 80059e2:	d90c      	bls.n	80059fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e12d      	b.n	8005c5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e5      	bne.n	80059d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <HAL_DMA_Abort+0x444>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04a      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <HAL_DMA_Abort+0x448>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d045      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <HAL_DMA_Abort+0x44c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d040      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <HAL_DMA_Abort+0x450>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a29      	ldr	r2, [pc, #164]	; (8005adc <HAL_DMA_Abort+0x454>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d036      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <HAL_DMA_Abort+0x458>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d031      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <HAL_DMA_Abort+0x45c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d02c      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a24      	ldr	r2, [pc, #144]	; (8005ae8 <HAL_DMA_Abort+0x460>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d027      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a23      	ldr	r2, [pc, #140]	; (8005aec <HAL_DMA_Abort+0x464>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <HAL_DMA_Abort+0x468>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <HAL_DMA_Abort+0x46c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <HAL_DMA_Abort+0x470>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_DMA_Abort+0x474>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <HAL_DMA_Abort+0x478>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1a      	ldr	r2, [pc, #104]	; (8005b04 <HAL_DMA_Abort+0x47c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_DMA_Abort+0x422>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <HAL_DMA_Abort+0x480>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <HAL_DMA_Abort+0x426>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_DMA_Abort+0x428>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d02b      	beq.n	8005b0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	223f      	movs	r2, #63	; 0x3f
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	e02a      	b.n	8005b22 <HAL_DMA_Abort+0x49a>
 8005acc:	40020010 	.word	0x40020010
 8005ad0:	40020028 	.word	0x40020028
 8005ad4:	40020040 	.word	0x40020040
 8005ad8:	40020058 	.word	0x40020058
 8005adc:	40020070 	.word	0x40020070
 8005ae0:	40020088 	.word	0x40020088
 8005ae4:	400200a0 	.word	0x400200a0
 8005ae8:	400200b8 	.word	0x400200b8
 8005aec:	40020410 	.word	0x40020410
 8005af0:	40020428 	.word	0x40020428
 8005af4:	40020440 	.word	0x40020440
 8005af8:	40020458 	.word	0x40020458
 8005afc:	40020470 	.word	0x40020470
 8005b00:	40020488 	.word	0x40020488
 8005b04:	400204a0 	.word	0x400204a0
 8005b08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a4f      	ldr	r2, [pc, #316]	; (8005c64 <HAL_DMA_Abort+0x5dc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d072      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <HAL_DMA_Abort+0x5e0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d06d      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a4c      	ldr	r2, [pc, #304]	; (8005c6c <HAL_DMA_Abort+0x5e4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d068      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a4a      	ldr	r2, [pc, #296]	; (8005c70 <HAL_DMA_Abort+0x5e8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d063      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a49      	ldr	r2, [pc, #292]	; (8005c74 <HAL_DMA_Abort+0x5ec>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d05e      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a47      	ldr	r2, [pc, #284]	; (8005c78 <HAL_DMA_Abort+0x5f0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d059      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a46      	ldr	r2, [pc, #280]	; (8005c7c <HAL_DMA_Abort+0x5f4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d054      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a44      	ldr	r2, [pc, #272]	; (8005c80 <HAL_DMA_Abort+0x5f8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d04f      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a43      	ldr	r2, [pc, #268]	; (8005c84 <HAL_DMA_Abort+0x5fc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d04a      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a41      	ldr	r2, [pc, #260]	; (8005c88 <HAL_DMA_Abort+0x600>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d045      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a40      	ldr	r2, [pc, #256]	; (8005c8c <HAL_DMA_Abort+0x604>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d040      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3e      	ldr	r2, [pc, #248]	; (8005c90 <HAL_DMA_Abort+0x608>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d03b      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a3d      	ldr	r2, [pc, #244]	; (8005c94 <HAL_DMA_Abort+0x60c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d036      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a3b      	ldr	r2, [pc, #236]	; (8005c98 <HAL_DMA_Abort+0x610>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d031      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3a      	ldr	r2, [pc, #232]	; (8005c9c <HAL_DMA_Abort+0x614>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d02c      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a38      	ldr	r2, [pc, #224]	; (8005ca0 <HAL_DMA_Abort+0x618>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d027      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a37      	ldr	r2, [pc, #220]	; (8005ca4 <HAL_DMA_Abort+0x61c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d022      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a35      	ldr	r2, [pc, #212]	; (8005ca8 <HAL_DMA_Abort+0x620>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a34      	ldr	r2, [pc, #208]	; (8005cac <HAL_DMA_Abort+0x624>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d018      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a32      	ldr	r2, [pc, #200]	; (8005cb0 <HAL_DMA_Abort+0x628>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a31      	ldr	r2, [pc, #196]	; (8005cb4 <HAL_DMA_Abort+0x62c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2f      	ldr	r2, [pc, #188]	; (8005cb8 <HAL_DMA_Abort+0x630>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2e      	ldr	r2, [pc, #184]	; (8005cbc <HAL_DMA_Abort+0x634>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_DMA_Abort+0x58a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <HAL_DMA_Abort+0x638>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_DMA_Abort+0x58e>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <HAL_DMA_Abort+0x590>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40020010 	.word	0x40020010
 8005c68:	40020028 	.word	0x40020028
 8005c6c:	40020040 	.word	0x40020040
 8005c70:	40020058 	.word	0x40020058
 8005c74:	40020070 	.word	0x40020070
 8005c78:	40020088 	.word	0x40020088
 8005c7c:	400200a0 	.word	0x400200a0
 8005c80:	400200b8 	.word	0x400200b8
 8005c84:	40020410 	.word	0x40020410
 8005c88:	40020428 	.word	0x40020428
 8005c8c:	40020440 	.word	0x40020440
 8005c90:	40020458 	.word	0x40020458
 8005c94:	40020470 	.word	0x40020470
 8005c98:	40020488 	.word	0x40020488
 8005c9c:	400204a0 	.word	0x400204a0
 8005ca0:	400204b8 	.word	0x400204b8
 8005ca4:	58025408 	.word	0x58025408
 8005ca8:	5802541c 	.word	0x5802541c
 8005cac:	58025430 	.word	0x58025430
 8005cb0:	58025444 	.word	0x58025444
 8005cb4:	58025458 	.word	0x58025458
 8005cb8:	5802546c 	.word	0x5802546c
 8005cbc:	58025480 	.word	0x58025480
 8005cc0:	58025494 	.word	0x58025494

08005cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e237      	b.n	8006146 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d004      	beq.n	8005cec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e22c      	b.n	8006146 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5c      	ldr	r2, [pc, #368]	; (8005e64 <HAL_DMA_Abort_IT+0x1a0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d04a      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5b      	ldr	r2, [pc, #364]	; (8005e68 <HAL_DMA_Abort_IT+0x1a4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d045      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a59      	ldr	r2, [pc, #356]	; (8005e6c <HAL_DMA_Abort_IT+0x1a8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d040      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_DMA_Abort_IT+0x1ac>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d03b      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a56      	ldr	r2, [pc, #344]	; (8005e74 <HAL_DMA_Abort_IT+0x1b0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d036      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a55      	ldr	r2, [pc, #340]	; (8005e78 <HAL_DMA_Abort_IT+0x1b4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d031      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a53      	ldr	r2, [pc, #332]	; (8005e7c <HAL_DMA_Abort_IT+0x1b8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02c      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a52      	ldr	r2, [pc, #328]	; (8005e80 <HAL_DMA_Abort_IT+0x1bc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d027      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a50      	ldr	r2, [pc, #320]	; (8005e84 <HAL_DMA_Abort_IT+0x1c0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4f      	ldr	r2, [pc, #316]	; (8005e88 <HAL_DMA_Abort_IT+0x1c4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d01d      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4d      	ldr	r2, [pc, #308]	; (8005e8c <HAL_DMA_Abort_IT+0x1c8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a4c      	ldr	r2, [pc, #304]	; (8005e90 <HAL_DMA_Abort_IT+0x1cc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a4a      	ldr	r2, [pc, #296]	; (8005e94 <HAL_DMA_Abort_IT+0x1d0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a49      	ldr	r2, [pc, #292]	; (8005e98 <HAL_DMA_Abort_IT+0x1d4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a47      	ldr	r2, [pc, #284]	; (8005e9c <HAL_DMA_Abort_IT+0x1d8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a46      	ldr	r2, [pc, #280]	; (8005ea0 <HAL_DMA_Abort_IT+0x1dc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d101      	bne.n	8005d90 <HAL_DMA_Abort_IT+0xcc>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <HAL_DMA_Abort_IT+0xce>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8086 	beq.w	8005ea4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <HAL_DMA_Abort_IT+0x1a0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d04a      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_DMA_Abort_IT+0x1a4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d045      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <HAL_DMA_Abort_IT+0x1a8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d040      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <HAL_DMA_Abort_IT+0x1ac>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d03b      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <HAL_DMA_Abort_IT+0x1b0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d036      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <HAL_DMA_Abort_IT+0x1b4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d031      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_DMA_Abort_IT+0x1b8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d02c      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_DMA_Abort_IT+0x1bc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d027      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <HAL_DMA_Abort_IT+0x1c0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d022      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <HAL_DMA_Abort_IT+0x1c4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d01d      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <HAL_DMA_Abort_IT+0x1c8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <HAL_DMA_Abort_IT+0x1cc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_DMA_Abort_IT+0x1d0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <HAL_DMA_Abort_IT+0x1d4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_DMA_Abort_IT+0x1d8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x17c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <HAL_DMA_Abort_IT+0x1dc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d108      	bne.n	8005e52 <HAL_DMA_Abort_IT+0x18e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e178      	b.n	8006144 <HAL_DMA_Abort_IT+0x480>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e16f      	b.n	8006144 <HAL_DMA_Abort_IT+0x480>
 8005e64:	40020010 	.word	0x40020010
 8005e68:	40020028 	.word	0x40020028
 8005e6c:	40020040 	.word	0x40020040
 8005e70:	40020058 	.word	0x40020058
 8005e74:	40020070 	.word	0x40020070
 8005e78:	40020088 	.word	0x40020088
 8005e7c:	400200a0 	.word	0x400200a0
 8005e80:	400200b8 	.word	0x400200b8
 8005e84:	40020410 	.word	0x40020410
 8005e88:	40020428 	.word	0x40020428
 8005e8c:	40020440 	.word	0x40020440
 8005e90:	40020458 	.word	0x40020458
 8005e94:	40020470 	.word	0x40020470
 8005e98:	40020488 	.word	0x40020488
 8005e9c:	400204a0 	.word	0x400204a0
 8005ea0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 020e 	bic.w	r2, r2, #14
 8005eb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a6c      	ldr	r2, [pc, #432]	; (800606c <HAL_DMA_Abort_IT+0x3a8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04a      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6b      	ldr	r2, [pc, #428]	; (8006070 <HAL_DMA_Abort_IT+0x3ac>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d045      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a69      	ldr	r2, [pc, #420]	; (8006074 <HAL_DMA_Abort_IT+0x3b0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d040      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a68      	ldr	r2, [pc, #416]	; (8006078 <HAL_DMA_Abort_IT+0x3b4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d03b      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a66      	ldr	r2, [pc, #408]	; (800607c <HAL_DMA_Abort_IT+0x3b8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d036      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a65      	ldr	r2, [pc, #404]	; (8006080 <HAL_DMA_Abort_IT+0x3bc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d031      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a63      	ldr	r2, [pc, #396]	; (8006084 <HAL_DMA_Abort_IT+0x3c0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02c      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a62      	ldr	r2, [pc, #392]	; (8006088 <HAL_DMA_Abort_IT+0x3c4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d027      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a60      	ldr	r2, [pc, #384]	; (800608c <HAL_DMA_Abort_IT+0x3c8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a5f      	ldr	r2, [pc, #380]	; (8006090 <HAL_DMA_Abort_IT+0x3cc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d01d      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a5d      	ldr	r2, [pc, #372]	; (8006094 <HAL_DMA_Abort_IT+0x3d0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5c      	ldr	r2, [pc, #368]	; (8006098 <HAL_DMA_Abort_IT+0x3d4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a5a      	ldr	r2, [pc, #360]	; (800609c <HAL_DMA_Abort_IT+0x3d8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a59      	ldr	r2, [pc, #356]	; (80060a0 <HAL_DMA_Abort_IT+0x3dc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a57      	ldr	r2, [pc, #348]	; (80060a4 <HAL_DMA_Abort_IT+0x3e0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x290>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a56      	ldr	r2, [pc, #344]	; (80060a8 <HAL_DMA_Abort_IT+0x3e4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <HAL_DMA_Abort_IT+0x2a2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e007      	b.n	8005f76 <HAL_DMA_Abort_IT+0x2b2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a3c      	ldr	r2, [pc, #240]	; (800606c <HAL_DMA_Abort_IT+0x3a8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d072      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a3a      	ldr	r2, [pc, #232]	; (8006070 <HAL_DMA_Abort_IT+0x3ac>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d06d      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a39      	ldr	r2, [pc, #228]	; (8006074 <HAL_DMA_Abort_IT+0x3b0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d068      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a37      	ldr	r2, [pc, #220]	; (8006078 <HAL_DMA_Abort_IT+0x3b4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d063      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a36      	ldr	r2, [pc, #216]	; (800607c <HAL_DMA_Abort_IT+0x3b8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d05e      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a34      	ldr	r2, [pc, #208]	; (8006080 <HAL_DMA_Abort_IT+0x3bc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d059      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a33      	ldr	r2, [pc, #204]	; (8006084 <HAL_DMA_Abort_IT+0x3c0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d054      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a31      	ldr	r2, [pc, #196]	; (8006088 <HAL_DMA_Abort_IT+0x3c4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d04f      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a30      	ldr	r2, [pc, #192]	; (800608c <HAL_DMA_Abort_IT+0x3c8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d04a      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2e      	ldr	r2, [pc, #184]	; (8006090 <HAL_DMA_Abort_IT+0x3cc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d045      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2d      	ldr	r2, [pc, #180]	; (8006094 <HAL_DMA_Abort_IT+0x3d0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d040      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <HAL_DMA_Abort_IT+0x3d4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d03b      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	; (800609c <HAL_DMA_Abort_IT+0x3d8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d036      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	; (80060a0 <HAL_DMA_Abort_IT+0x3dc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d031      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <HAL_DMA_Abort_IT+0x3e0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d02c      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <HAL_DMA_Abort_IT+0x3e4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d027      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a24      	ldr	r2, [pc, #144]	; (80060ac <HAL_DMA_Abort_IT+0x3e8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <HAL_DMA_Abort_IT+0x3ec>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <HAL_DMA_Abort_IT+0x3f0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <HAL_DMA_Abort_IT+0x3f4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <HAL_DMA_Abort_IT+0x3f8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_DMA_Abort_IT+0x3fc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <HAL_DMA_Abort_IT+0x400>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_DMA_Abort_IT+0x3a2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_DMA_Abort_IT+0x404>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d132      	bne.n	80060cc <HAL_DMA_Abort_IT+0x408>
 8006066:	2301      	movs	r3, #1
 8006068:	e031      	b.n	80060ce <HAL_DMA_Abort_IT+0x40a>
 800606a:	bf00      	nop
 800606c:	40020010 	.word	0x40020010
 8006070:	40020028 	.word	0x40020028
 8006074:	40020040 	.word	0x40020040
 8006078:	40020058 	.word	0x40020058
 800607c:	40020070 	.word	0x40020070
 8006080:	40020088 	.word	0x40020088
 8006084:	400200a0 	.word	0x400200a0
 8006088:	400200b8 	.word	0x400200b8
 800608c:	40020410 	.word	0x40020410
 8006090:	40020428 	.word	0x40020428
 8006094:	40020440 	.word	0x40020440
 8006098:	40020458 	.word	0x40020458
 800609c:	40020470 	.word	0x40020470
 80060a0:	40020488 	.word	0x40020488
 80060a4:	400204a0 	.word	0x400204a0
 80060a8:	400204b8 	.word	0x400204b8
 80060ac:	58025408 	.word	0x58025408
 80060b0:	5802541c 	.word	0x5802541c
 80060b4:	58025430 	.word	0x58025430
 80060b8:	58025444 	.word	0x58025444
 80060bc:	58025458 	.word	0x58025458
 80060c0:	5802546c 	.word	0x5802546c
 80060c4:	58025480 	.word	0x58025480
 80060c8:	58025494 	.word	0x58025494
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d028      	beq.n	8006124 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	2201      	movs	r2, #1
 80060f2:	409a      	lsls	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006100:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00c      	beq.n	8006124 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006118:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006122:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop

08006150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800615c:	4b67      	ldr	r3, [pc, #412]	; (80062fc <HAL_DMA_IRQHandler+0x1ac>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a67      	ldr	r2, [pc, #412]	; (8006300 <HAL_DMA_IRQHandler+0x1b0>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	0a9b      	lsrs	r3, r3, #10
 8006168:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006174:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5f      	ldr	r2, [pc, #380]	; (8006304 <HAL_DMA_IRQHandler+0x1b4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5d      	ldr	r2, [pc, #372]	; (8006308 <HAL_DMA_IRQHandler+0x1b8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a5c      	ldr	r2, [pc, #368]	; (800630c <HAL_DMA_IRQHandler+0x1bc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5a      	ldr	r2, [pc, #360]	; (8006310 <HAL_DMA_IRQHandler+0x1c0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a59      	ldr	r2, [pc, #356]	; (8006314 <HAL_DMA_IRQHandler+0x1c4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a57      	ldr	r2, [pc, #348]	; (8006318 <HAL_DMA_IRQHandler+0x1c8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a56      	ldr	r2, [pc, #344]	; (800631c <HAL_DMA_IRQHandler+0x1cc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a54      	ldr	r2, [pc, #336]	; (8006320 <HAL_DMA_IRQHandler+0x1d0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a53      	ldr	r2, [pc, #332]	; (8006324 <HAL_DMA_IRQHandler+0x1d4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a51      	ldr	r2, [pc, #324]	; (8006328 <HAL_DMA_IRQHandler+0x1d8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a50      	ldr	r2, [pc, #320]	; (800632c <HAL_DMA_IRQHandler+0x1dc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a4e      	ldr	r2, [pc, #312]	; (8006330 <HAL_DMA_IRQHandler+0x1e0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a4d      	ldr	r2, [pc, #308]	; (8006334 <HAL_DMA_IRQHandler+0x1e4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a4b      	ldr	r2, [pc, #300]	; (8006338 <HAL_DMA_IRQHandler+0x1e8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4a      	ldr	r2, [pc, #296]	; (800633c <HAL_DMA_IRQHandler+0x1ec>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_IRQHandler+0xd2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a48      	ldr	r2, [pc, #288]	; (8006340 <HAL_DMA_IRQHandler+0x1f0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <HAL_DMA_IRQHandler+0xd6>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <HAL_DMA_IRQHandler+0xd8>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 842b 	beq.w	8006a84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2208      	movs	r2, #8
 8006238:	409a      	lsls	r2, r3
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80a2 	beq.w	8006388 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2e      	ldr	r2, [pc, #184]	; (8006304 <HAL_DMA_IRQHandler+0x1b4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d04a      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2d      	ldr	r2, [pc, #180]	; (8006308 <HAL_DMA_IRQHandler+0x1b8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d045      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2b      	ldr	r2, [pc, #172]	; (800630c <HAL_DMA_IRQHandler+0x1bc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d040      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <HAL_DMA_IRQHandler+0x1c0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d03b      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <HAL_DMA_IRQHandler+0x1c4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d036      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <HAL_DMA_IRQHandler+0x1c8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d031      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <HAL_DMA_IRQHandler+0x1cc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d02c      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a24      	ldr	r2, [pc, #144]	; (8006320 <HAL_DMA_IRQHandler+0x1d0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d027      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a22      	ldr	r2, [pc, #136]	; (8006324 <HAL_DMA_IRQHandler+0x1d4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d022      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <HAL_DMA_IRQHandler+0x1d8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d01d      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <HAL_DMA_IRQHandler+0x1dc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d018      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_DMA_IRQHandler+0x1e0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d013      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <HAL_DMA_IRQHandler+0x1e4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00e      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <HAL_DMA_IRQHandler+0x1e8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d009      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a19      	ldr	r2, [pc, #100]	; (800633c <HAL_DMA_IRQHandler+0x1ec>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x194>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_DMA_IRQHandler+0x1f0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d12f      	bne.n	8006344 <HAL_DMA_IRQHandler+0x1f4>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bf14      	ite	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	2300      	moveq	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e02e      	b.n	8006358 <HAL_DMA_IRQHandler+0x208>
 80062fa:	bf00      	nop
 80062fc:	24000044 	.word	0x24000044
 8006300:	1b4e81b5 	.word	0x1b4e81b5
 8006304:	40020010 	.word	0x40020010
 8006308:	40020028 	.word	0x40020028
 800630c:	40020040 	.word	0x40020040
 8006310:	40020058 	.word	0x40020058
 8006314:	40020070 	.word	0x40020070
 8006318:	40020088 	.word	0x40020088
 800631c:	400200a0 	.word	0x400200a0
 8006320:	400200b8 	.word	0x400200b8
 8006324:	40020410 	.word	0x40020410
 8006328:	40020428 	.word	0x40020428
 800632c:	40020440 	.word	0x40020440
 8006330:	40020458 	.word	0x40020458
 8006334:	40020470 	.word	0x40020470
 8006338:	40020488 	.word	0x40020488
 800633c:	400204a0 	.word	0x400204a0
 8006340:	400204b8 	.word	0x400204b8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0204 	bic.w	r2, r2, #4
 800636a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2208      	movs	r2, #8
 8006376:	409a      	lsls	r2, r3
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d06e      	beq.n	800647c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a69      	ldr	r2, [pc, #420]	; (8006548 <HAL_DMA_IRQHandler+0x3f8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d04a      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a67      	ldr	r2, [pc, #412]	; (800654c <HAL_DMA_IRQHandler+0x3fc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d045      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a66      	ldr	r2, [pc, #408]	; (8006550 <HAL_DMA_IRQHandler+0x400>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d040      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a64      	ldr	r2, [pc, #400]	; (8006554 <HAL_DMA_IRQHandler+0x404>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d03b      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a63      	ldr	r2, [pc, #396]	; (8006558 <HAL_DMA_IRQHandler+0x408>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d036      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a61      	ldr	r2, [pc, #388]	; (800655c <HAL_DMA_IRQHandler+0x40c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d031      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a60      	ldr	r2, [pc, #384]	; (8006560 <HAL_DMA_IRQHandler+0x410>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d02c      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5e      	ldr	r2, [pc, #376]	; (8006564 <HAL_DMA_IRQHandler+0x414>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d027      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5d      	ldr	r2, [pc, #372]	; (8006568 <HAL_DMA_IRQHandler+0x418>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d022      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a5b      	ldr	r2, [pc, #364]	; (800656c <HAL_DMA_IRQHandler+0x41c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01d      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a5a      	ldr	r2, [pc, #360]	; (8006570 <HAL_DMA_IRQHandler+0x420>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d018      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a58      	ldr	r2, [pc, #352]	; (8006574 <HAL_DMA_IRQHandler+0x424>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a57      	ldr	r2, [pc, #348]	; (8006578 <HAL_DMA_IRQHandler+0x428>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a55      	ldr	r2, [pc, #340]	; (800657c <HAL_DMA_IRQHandler+0x42c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a54      	ldr	r2, [pc, #336]	; (8006580 <HAL_DMA_IRQHandler+0x430>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_DMA_IRQHandler+0x2ee>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a52      	ldr	r2, [pc, #328]	; (8006584 <HAL_DMA_IRQHandler+0x434>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d10a      	bne.n	8006454 <HAL_DMA_IRQHandler+0x304>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	e003      	b.n	800645c <HAL_DMA_IRQHandler+0x30c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00d      	beq.n	800647c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2201      	movs	r2, #1
 800646a:	409a      	lsls	r2, r3
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006474:	f043 0202 	orr.w	r2, r3, #2
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	2204      	movs	r2, #4
 8006486:	409a      	lsls	r2, r3
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 808f 	beq.w	80065b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <HAL_DMA_IRQHandler+0x3f8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d04a      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2a      	ldr	r2, [pc, #168]	; (800654c <HAL_DMA_IRQHandler+0x3fc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d045      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a29      	ldr	r2, [pc, #164]	; (8006550 <HAL_DMA_IRQHandler+0x400>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d040      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a27      	ldr	r2, [pc, #156]	; (8006554 <HAL_DMA_IRQHandler+0x404>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d03b      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a26      	ldr	r2, [pc, #152]	; (8006558 <HAL_DMA_IRQHandler+0x408>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d036      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a24      	ldr	r2, [pc, #144]	; (800655c <HAL_DMA_IRQHandler+0x40c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d031      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a23      	ldr	r2, [pc, #140]	; (8006560 <HAL_DMA_IRQHandler+0x410>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d02c      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a21      	ldr	r2, [pc, #132]	; (8006564 <HAL_DMA_IRQHandler+0x414>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d027      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a20      	ldr	r2, [pc, #128]	; (8006568 <HAL_DMA_IRQHandler+0x418>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d022      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1e      	ldr	r2, [pc, #120]	; (800656c <HAL_DMA_IRQHandler+0x41c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01d      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1d      	ldr	r2, [pc, #116]	; (8006570 <HAL_DMA_IRQHandler+0x420>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d018      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <HAL_DMA_IRQHandler+0x424>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1a      	ldr	r2, [pc, #104]	; (8006578 <HAL_DMA_IRQHandler+0x428>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00e      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <HAL_DMA_IRQHandler+0x42c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d009      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a17      	ldr	r2, [pc, #92]	; (8006580 <HAL_DMA_IRQHandler+0x430>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_DMA_IRQHandler+0x3e2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a15      	ldr	r2, [pc, #84]	; (8006584 <HAL_DMA_IRQHandler+0x434>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d12a      	bne.n	8006588 <HAL_DMA_IRQHandler+0x438>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e023      	b.n	8006590 <HAL_DMA_IRQHandler+0x440>
 8006548:	40020010 	.word	0x40020010
 800654c:	40020028 	.word	0x40020028
 8006550:	40020040 	.word	0x40020040
 8006554:	40020058 	.word	0x40020058
 8006558:	40020070 	.word	0x40020070
 800655c:	40020088 	.word	0x40020088
 8006560:	400200a0 	.word	0x400200a0
 8006564:	400200b8 	.word	0x400200b8
 8006568:	40020410 	.word	0x40020410
 800656c:	40020428 	.word	0x40020428
 8006570:	40020440 	.word	0x40020440
 8006574:	40020458 	.word	0x40020458
 8006578:	40020470 	.word	0x40020470
 800657c:	40020488 	.word	0x40020488
 8006580:	400204a0 	.word	0x400204a0
 8006584:	400204b8 	.word	0x400204b8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2204      	movs	r2, #4
 800659e:	409a      	lsls	r2, r3
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	f043 0204 	orr.w	r2, r3, #4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2210      	movs	r2, #16
 80065ba:	409a      	lsls	r2, r3
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80a6 	beq.w	8006712 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a85      	ldr	r2, [pc, #532]	; (80067e0 <HAL_DMA_IRQHandler+0x690>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d04a      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a83      	ldr	r2, [pc, #524]	; (80067e4 <HAL_DMA_IRQHandler+0x694>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d045      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a82      	ldr	r2, [pc, #520]	; (80067e8 <HAL_DMA_IRQHandler+0x698>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d040      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a80      	ldr	r2, [pc, #512]	; (80067ec <HAL_DMA_IRQHandler+0x69c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d03b      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7f      	ldr	r2, [pc, #508]	; (80067f0 <HAL_DMA_IRQHandler+0x6a0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d036      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a7d      	ldr	r2, [pc, #500]	; (80067f4 <HAL_DMA_IRQHandler+0x6a4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a7c      	ldr	r2, [pc, #496]	; (80067f8 <HAL_DMA_IRQHandler+0x6a8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d02c      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a7a      	ldr	r2, [pc, #488]	; (80067fc <HAL_DMA_IRQHandler+0x6ac>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d027      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a79      	ldr	r2, [pc, #484]	; (8006800 <HAL_DMA_IRQHandler+0x6b0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d022      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a77      	ldr	r2, [pc, #476]	; (8006804 <HAL_DMA_IRQHandler+0x6b4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01d      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a76      	ldr	r2, [pc, #472]	; (8006808 <HAL_DMA_IRQHandler+0x6b8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a74      	ldr	r2, [pc, #464]	; (800680c <HAL_DMA_IRQHandler+0x6bc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a73      	ldr	r2, [pc, #460]	; (8006810 <HAL_DMA_IRQHandler+0x6c0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a71      	ldr	r2, [pc, #452]	; (8006814 <HAL_DMA_IRQHandler+0x6c4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a70      	ldr	r2, [pc, #448]	; (8006818 <HAL_DMA_IRQHandler+0x6c8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_DMA_IRQHandler+0x516>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a6e      	ldr	r2, [pc, #440]	; (800681c <HAL_DMA_IRQHandler+0x6cc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d10a      	bne.n	800667c <HAL_DMA_IRQHandler+0x52c>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	e009      	b.n	8006690 <HAL_DMA_IRQHandler+0x540>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	bf14      	ite	ne
 800668a:	2301      	movne	r3, #1
 800668c:	2300      	moveq	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d03e      	beq.n	8006712 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2210      	movs	r2, #16
 800669e:	409a      	lsls	r2, r3
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d024      	beq.n	8006712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
 80066d0:	e01f      	b.n	8006712 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01b      	beq.n	8006712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
 80066e2:	e016      	b.n	8006712 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0208 	bic.w	r2, r2, #8
 8006700:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2220      	movs	r2, #32
 800671c:	409a      	lsls	r2, r3
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	4013      	ands	r3, r2
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8110 	beq.w	8006948 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2c      	ldr	r2, [pc, #176]	; (80067e0 <HAL_DMA_IRQHandler+0x690>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d04a      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2b      	ldr	r2, [pc, #172]	; (80067e4 <HAL_DMA_IRQHandler+0x694>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d045      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <HAL_DMA_IRQHandler+0x698>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d040      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a28      	ldr	r2, [pc, #160]	; (80067ec <HAL_DMA_IRQHandler+0x69c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d03b      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <HAL_DMA_IRQHandler+0x6a0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d036      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a25      	ldr	r2, [pc, #148]	; (80067f4 <HAL_DMA_IRQHandler+0x6a4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d031      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <HAL_DMA_IRQHandler+0x6a8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d02c      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a22      	ldr	r2, [pc, #136]	; (80067fc <HAL_DMA_IRQHandler+0x6ac>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d027      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a20      	ldr	r2, [pc, #128]	; (8006800 <HAL_DMA_IRQHandler+0x6b0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d022      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <HAL_DMA_IRQHandler+0x6b4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d01d      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <HAL_DMA_IRQHandler+0x6b8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d018      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1c      	ldr	r2, [pc, #112]	; (800680c <HAL_DMA_IRQHandler+0x6bc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <HAL_DMA_IRQHandler+0x6c0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a19      	ldr	r2, [pc, #100]	; (8006814 <HAL_DMA_IRQHandler+0x6c4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a17      	ldr	r2, [pc, #92]	; (8006818 <HAL_DMA_IRQHandler+0x6c8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x678>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a16      	ldr	r2, [pc, #88]	; (800681c <HAL_DMA_IRQHandler+0x6cc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d12b      	bne.n	8006820 <HAL_DMA_IRQHandler+0x6d0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e02a      	b.n	8006834 <HAL_DMA_IRQHandler+0x6e4>
 80067de:	bf00      	nop
 80067e0:	40020010 	.word	0x40020010
 80067e4:	40020028 	.word	0x40020028
 80067e8:	40020040 	.word	0x40020040
 80067ec:	40020058 	.word	0x40020058
 80067f0:	40020070 	.word	0x40020070
 80067f4:	40020088 	.word	0x40020088
 80067f8:	400200a0 	.word	0x400200a0
 80067fc:	400200b8 	.word	0x400200b8
 8006800:	40020410 	.word	0x40020410
 8006804:	40020428 	.word	0x40020428
 8006808:	40020440 	.word	0x40020440
 800680c:	40020458 	.word	0x40020458
 8006810:	40020470 	.word	0x40020470
 8006814:	40020488 	.word	0x40020488
 8006818:	400204a0 	.word	0x400204a0
 800681c:	400204b8 	.word	0x400204b8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	bf14      	ite	ne
 800682e:	2301      	movne	r3, #1
 8006830:	2300      	moveq	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8087 	beq.w	8006948 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2220      	movs	r2, #32
 8006844:	409a      	lsls	r2, r3
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b04      	cmp	r3, #4
 8006854:	d139      	bne.n	80068ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0216 	bic.w	r2, r2, #22
 8006864:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695a      	ldr	r2, [r3, #20]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006874:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_DMA_IRQHandler+0x736>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0208 	bic.w	r2, r2, #8
 8006894:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	223f      	movs	r2, #63	; 0x3f
 80068a0:	409a      	lsls	r2, r3
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 834a 	beq.w	8006f54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
          }
          return;
 80068c8:	e344      	b.n	8006f54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d018      	beq.n	800690a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d108      	bne.n	80068f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d02c      	beq.n	8006948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	e027      	b.n	8006948 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d023      	beq.n	8006948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
 8006908:	e01e      	b.n	8006948 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10f      	bne.n	8006938 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0210 	bic.w	r2, r2, #16
 8006926:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8306 	beq.w	8006f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8088 	beq.w	8006a70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2204      	movs	r2, #4
 8006964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a7a      	ldr	r2, [pc, #488]	; (8006b58 <HAL_DMA_IRQHandler+0xa08>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d04a      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a79      	ldr	r2, [pc, #484]	; (8006b5c <HAL_DMA_IRQHandler+0xa0c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d045      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a77      	ldr	r2, [pc, #476]	; (8006b60 <HAL_DMA_IRQHandler+0xa10>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d040      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a76      	ldr	r2, [pc, #472]	; (8006b64 <HAL_DMA_IRQHandler+0xa14>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d03b      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a74      	ldr	r2, [pc, #464]	; (8006b68 <HAL_DMA_IRQHandler+0xa18>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d036      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a73      	ldr	r2, [pc, #460]	; (8006b6c <HAL_DMA_IRQHandler+0xa1c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d031      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a71      	ldr	r2, [pc, #452]	; (8006b70 <HAL_DMA_IRQHandler+0xa20>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d02c      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a70      	ldr	r2, [pc, #448]	; (8006b74 <HAL_DMA_IRQHandler+0xa24>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d027      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a6e      	ldr	r2, [pc, #440]	; (8006b78 <HAL_DMA_IRQHandler+0xa28>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d022      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6d      	ldr	r2, [pc, #436]	; (8006b7c <HAL_DMA_IRQHandler+0xa2c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d01d      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a6b      	ldr	r2, [pc, #428]	; (8006b80 <HAL_DMA_IRQHandler+0xa30>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a6a      	ldr	r2, [pc, #424]	; (8006b84 <HAL_DMA_IRQHandler+0xa34>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a68      	ldr	r2, [pc, #416]	; (8006b88 <HAL_DMA_IRQHandler+0xa38>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a67      	ldr	r2, [pc, #412]	; (8006b8c <HAL_DMA_IRQHandler+0xa3c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d009      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <HAL_DMA_IRQHandler+0xa40>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x8b8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a64      	ldr	r2, [pc, #400]	; (8006b94 <HAL_DMA_IRQHandler+0xa44>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d108      	bne.n	8006a1a <HAL_DMA_IRQHandler+0x8ca>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0201 	bic.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e007      	b.n	8006a2a <HAL_DMA_IRQHandler+0x8da>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d307      	bcc.n	8006a46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f2      	bne.n	8006a2a <HAL_DMA_IRQHandler+0x8da>
 8006a44:	e000      	b.n	8006a48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a46:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a5e:	e003      	b.n	8006a68 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8272 	beq.w	8006f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	e26c      	b.n	8006f5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a43      	ldr	r2, [pc, #268]	; (8006b98 <HAL_DMA_IRQHandler+0xa48>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d022      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a42      	ldr	r2, [pc, #264]	; (8006b9c <HAL_DMA_IRQHandler+0xa4c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d01d      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a40      	ldr	r2, [pc, #256]	; (8006ba0 <HAL_DMA_IRQHandler+0xa50>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3f      	ldr	r2, [pc, #252]	; (8006ba4 <HAL_DMA_IRQHandler+0xa54>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <HAL_DMA_IRQHandler+0xa58>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a3c      	ldr	r2, [pc, #240]	; (8006bac <HAL_DMA_IRQHandler+0xa5c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a3a      	ldr	r2, [pc, #232]	; (8006bb0 <HAL_DMA_IRQHandler+0xa60>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x984>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a39      	ldr	r2, [pc, #228]	; (8006bb4 <HAL_DMA_IRQHandler+0xa64>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d101      	bne.n	8006ad8 <HAL_DMA_IRQHandler+0x988>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <HAL_DMA_IRQHandler+0x98a>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 823f 	beq.w	8006f5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2204      	movs	r2, #4
 8006af2:	409a      	lsls	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80cd 	beq.w	8006c98 <HAL_DMA_IRQHandler+0xb48>
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80c7 	beq.w	8006c98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	f003 031f 	and.w	r3, r3, #31
 8006b12:	2204      	movs	r2, #4
 8006b14:	409a      	lsls	r2, r3
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d049      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8210 	beq.w	8006f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b40:	e20a      	b.n	8006f58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8206 	beq.w	8006f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b54:	e200      	b.n	8006f58 <HAL_DMA_IRQHandler+0xe08>
 8006b56:	bf00      	nop
 8006b58:	40020010 	.word	0x40020010
 8006b5c:	40020028 	.word	0x40020028
 8006b60:	40020040 	.word	0x40020040
 8006b64:	40020058 	.word	0x40020058
 8006b68:	40020070 	.word	0x40020070
 8006b6c:	40020088 	.word	0x40020088
 8006b70:	400200a0 	.word	0x400200a0
 8006b74:	400200b8 	.word	0x400200b8
 8006b78:	40020410 	.word	0x40020410
 8006b7c:	40020428 	.word	0x40020428
 8006b80:	40020440 	.word	0x40020440
 8006b84:	40020458 	.word	0x40020458
 8006b88:	40020470 	.word	0x40020470
 8006b8c:	40020488 	.word	0x40020488
 8006b90:	400204a0 	.word	0x400204a0
 8006b94:	400204b8 	.word	0x400204b8
 8006b98:	58025408 	.word	0x58025408
 8006b9c:	5802541c 	.word	0x5802541c
 8006ba0:	58025430 	.word	0x58025430
 8006ba4:	58025444 	.word	0x58025444
 8006ba8:	58025458 	.word	0x58025458
 8006bac:	5802546c 	.word	0x5802546c
 8006bb0:	58025480 	.word	0x58025480
 8006bb4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d160      	bne.n	8006c84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a7f      	ldr	r2, [pc, #508]	; (8006dc4 <HAL_DMA_IRQHandler+0xc74>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d04a      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a7d      	ldr	r2, [pc, #500]	; (8006dc8 <HAL_DMA_IRQHandler+0xc78>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d045      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a7c      	ldr	r2, [pc, #496]	; (8006dcc <HAL_DMA_IRQHandler+0xc7c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d040      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a7a      	ldr	r2, [pc, #488]	; (8006dd0 <HAL_DMA_IRQHandler+0xc80>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d03b      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a79      	ldr	r2, [pc, #484]	; (8006dd4 <HAL_DMA_IRQHandler+0xc84>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d036      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a77      	ldr	r2, [pc, #476]	; (8006dd8 <HAL_DMA_IRQHandler+0xc88>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d031      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a76      	ldr	r2, [pc, #472]	; (8006ddc <HAL_DMA_IRQHandler+0xc8c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d02c      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a74      	ldr	r2, [pc, #464]	; (8006de0 <HAL_DMA_IRQHandler+0xc90>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d027      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a73      	ldr	r2, [pc, #460]	; (8006de4 <HAL_DMA_IRQHandler+0xc94>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d022      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a71      	ldr	r2, [pc, #452]	; (8006de8 <HAL_DMA_IRQHandler+0xc98>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01d      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a70      	ldr	r2, [pc, #448]	; (8006dec <HAL_DMA_IRQHandler+0xc9c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d018      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6e      	ldr	r2, [pc, #440]	; (8006df0 <HAL_DMA_IRQHandler+0xca0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a6d      	ldr	r2, [pc, #436]	; (8006df4 <HAL_DMA_IRQHandler+0xca4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00e      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6b      	ldr	r2, [pc, #428]	; (8006df8 <HAL_DMA_IRQHandler+0xca8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d009      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a6a      	ldr	r2, [pc, #424]	; (8006dfc <HAL_DMA_IRQHandler+0xcac>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xb12>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a68      	ldr	r2, [pc, #416]	; (8006e00 <HAL_DMA_IRQHandler+0xcb0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d108      	bne.n	8006c74 <HAL_DMA_IRQHandler+0xb24>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0208 	bic.w	r2, r2, #8
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e007      	b.n	8006c84 <HAL_DMA_IRQHandler+0xb34>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8165 	beq.w	8006f58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c96:	e15f      	b.n	8006f58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80c5 	beq.w	8006e38 <HAL_DMA_IRQHandler+0xce8>
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80bf 	beq.w	8006e38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	409a      	lsls	r2, r3
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d018      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 813a 	beq.w	8006f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf0:	e134      	b.n	8006f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8130 	beq.w	8006f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d04:	e12a      	b.n	8006f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 8089 	bne.w	8006e24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2b      	ldr	r2, [pc, #172]	; (8006dc4 <HAL_DMA_IRQHandler+0xc74>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d04a      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a29      	ldr	r2, [pc, #164]	; (8006dc8 <HAL_DMA_IRQHandler+0xc78>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d045      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <HAL_DMA_IRQHandler+0xc7c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d040      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a26      	ldr	r2, [pc, #152]	; (8006dd0 <HAL_DMA_IRQHandler+0xc80>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d03b      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a25      	ldr	r2, [pc, #148]	; (8006dd4 <HAL_DMA_IRQHandler+0xc84>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d036      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a23      	ldr	r2, [pc, #140]	; (8006dd8 <HAL_DMA_IRQHandler+0xc88>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d031      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <HAL_DMA_IRQHandler+0xc8c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d02c      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <HAL_DMA_IRQHandler+0xc90>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d027      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <HAL_DMA_IRQHandler+0xc94>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d022      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_DMA_IRQHandler+0xc98>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01d      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <HAL_DMA_IRQHandler+0xc9c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d018      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a1a      	ldr	r2, [pc, #104]	; (8006df0 <HAL_DMA_IRQHandler+0xca0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d013      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_DMA_IRQHandler+0xca4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00e      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <HAL_DMA_IRQHandler+0xca8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <HAL_DMA_IRQHandler+0xcac>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d004      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xc62>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a14      	ldr	r2, [pc, #80]	; (8006e00 <HAL_DMA_IRQHandler+0xcb0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d128      	bne.n	8006e04 <HAL_DMA_IRQHandler+0xcb4>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0214 	bic.w	r2, r2, #20
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e027      	b.n	8006e14 <HAL_DMA_IRQHandler+0xcc4>
 8006dc4:	40020010 	.word	0x40020010
 8006dc8:	40020028 	.word	0x40020028
 8006dcc:	40020040 	.word	0x40020040
 8006dd0:	40020058 	.word	0x40020058
 8006dd4:	40020070 	.word	0x40020070
 8006dd8:	40020088 	.word	0x40020088
 8006ddc:	400200a0 	.word	0x400200a0
 8006de0:	400200b8 	.word	0x400200b8
 8006de4:	40020410 	.word	0x40020410
 8006de8:	40020428 	.word	0x40020428
 8006dec:	40020440 	.word	0x40020440
 8006df0:	40020458 	.word	0x40020458
 8006df4:	40020470 	.word	0x40020470
 8006df8:	40020488 	.word	0x40020488
 8006dfc:	400204a0 	.word	0x400204a0
 8006e00:	400204b8 	.word	0x400204b8
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 020a 	bic.w	r2, r2, #10
 8006e12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8097 	beq.w	8006f5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e36:	e091      	b.n	8006f5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2208      	movs	r2, #8
 8006e42:	409a      	lsls	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8088 	beq.w	8006f5e <HAL_DMA_IRQHandler+0xe0e>
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8082 	beq.w	8006f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a41      	ldr	r2, [pc, #260]	; (8006f64 <HAL_DMA_IRQHandler+0xe14>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d04a      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a3f      	ldr	r2, [pc, #252]	; (8006f68 <HAL_DMA_IRQHandler+0xe18>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d045      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a3e      	ldr	r2, [pc, #248]	; (8006f6c <HAL_DMA_IRQHandler+0xe1c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d040      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a3c      	ldr	r2, [pc, #240]	; (8006f70 <HAL_DMA_IRQHandler+0xe20>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d03b      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a3b      	ldr	r2, [pc, #236]	; (8006f74 <HAL_DMA_IRQHandler+0xe24>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d036      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a39      	ldr	r2, [pc, #228]	; (8006f78 <HAL_DMA_IRQHandler+0xe28>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d031      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a38      	ldr	r2, [pc, #224]	; (8006f7c <HAL_DMA_IRQHandler+0xe2c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d02c      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a36      	ldr	r2, [pc, #216]	; (8006f80 <HAL_DMA_IRQHandler+0xe30>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d027      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a35      	ldr	r2, [pc, #212]	; (8006f84 <HAL_DMA_IRQHandler+0xe34>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d022      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a33      	ldr	r2, [pc, #204]	; (8006f88 <HAL_DMA_IRQHandler+0xe38>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01d      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a32      	ldr	r2, [pc, #200]	; (8006f8c <HAL_DMA_IRQHandler+0xe3c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_DMA_IRQHandler+0xe40>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2f      	ldr	r2, [pc, #188]	; (8006f94 <HAL_DMA_IRQHandler+0xe44>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2d      	ldr	r2, [pc, #180]	; (8006f98 <HAL_DMA_IRQHandler+0xe48>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a2c      	ldr	r2, [pc, #176]	; (8006f9c <HAL_DMA_IRQHandler+0xe4c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <HAL_DMA_IRQHandler+0xdaa>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <HAL_DMA_IRQHandler+0xe50>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d108      	bne.n	8006f0c <HAL_DMA_IRQHandler+0xdbc>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 021c 	bic.w	r2, r2, #28
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e007      	b.n	8006f1c <HAL_DMA_IRQHandler+0xdcc>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 020e 	bic.w	r2, r2, #14
 8006f1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	2201      	movs	r2, #1
 8006f26:	409a      	lsls	r2, r3
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	e004      	b.n	8006f5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f54:	bf00      	nop
 8006f56:	e002      	b.n	8006f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f58:	bf00      	nop
 8006f5a:	e000      	b.n	8006f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f5e:	3728      	adds	r7, #40	; 0x28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40020010 	.word	0x40020010
 8006f68:	40020028 	.word	0x40020028
 8006f6c:	40020040 	.word	0x40020040
 8006f70:	40020058 	.word	0x40020058
 8006f74:	40020070 	.word	0x40020070
 8006f78:	40020088 	.word	0x40020088
 8006f7c:	400200a0 	.word	0x400200a0
 8006f80:	400200b8 	.word	0x400200b8
 8006f84:	40020410 	.word	0x40020410
 8006f88:	40020428 	.word	0x40020428
 8006f8c:	40020440 	.word	0x40020440
 8006f90:	40020458 	.word	0x40020458
 8006f94:	40020470 	.word	0x40020470
 8006f98:	40020488 	.word	0x40020488
 8006f9c:	400204a0 	.word	0x400204a0
 8006fa0:	400204b8 	.word	0x400204b8

08006fa4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a7f      	ldr	r2, [pc, #508]	; (80071c0 <DMA_SetConfig+0x21c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d072      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a7d      	ldr	r2, [pc, #500]	; (80071c4 <DMA_SetConfig+0x220>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d06d      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7c      	ldr	r2, [pc, #496]	; (80071c8 <DMA_SetConfig+0x224>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d068      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7a      	ldr	r2, [pc, #488]	; (80071cc <DMA_SetConfig+0x228>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d063      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a79      	ldr	r2, [pc, #484]	; (80071d0 <DMA_SetConfig+0x22c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d05e      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a77      	ldr	r2, [pc, #476]	; (80071d4 <DMA_SetConfig+0x230>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d059      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a76      	ldr	r2, [pc, #472]	; (80071d8 <DMA_SetConfig+0x234>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d054      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a74      	ldr	r2, [pc, #464]	; (80071dc <DMA_SetConfig+0x238>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d04f      	beq.n	80070ae <DMA_SetConfig+0x10a>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a73      	ldr	r2, [pc, #460]	; (80071e0 <DMA_SetConfig+0x23c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d04a      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a71      	ldr	r2, [pc, #452]	; (80071e4 <DMA_SetConfig+0x240>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d045      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a70      	ldr	r2, [pc, #448]	; (80071e8 <DMA_SetConfig+0x244>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d040      	beq.n	80070ae <DMA_SetConfig+0x10a>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6e      	ldr	r2, [pc, #440]	; (80071ec <DMA_SetConfig+0x248>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d03b      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6d      	ldr	r2, [pc, #436]	; (80071f0 <DMA_SetConfig+0x24c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d036      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6b      	ldr	r2, [pc, #428]	; (80071f4 <DMA_SetConfig+0x250>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d031      	beq.n	80070ae <DMA_SetConfig+0x10a>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6a      	ldr	r2, [pc, #424]	; (80071f8 <DMA_SetConfig+0x254>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d02c      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a68      	ldr	r2, [pc, #416]	; (80071fc <DMA_SetConfig+0x258>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d027      	beq.n	80070ae <DMA_SetConfig+0x10a>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a67      	ldr	r2, [pc, #412]	; (8007200 <DMA_SetConfig+0x25c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a65      	ldr	r2, [pc, #404]	; (8007204 <DMA_SetConfig+0x260>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a64      	ldr	r2, [pc, #400]	; (8007208 <DMA_SetConfig+0x264>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <DMA_SetConfig+0x10a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a62      	ldr	r2, [pc, #392]	; (800720c <DMA_SetConfig+0x268>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a61      	ldr	r2, [pc, #388]	; (8007210 <DMA_SetConfig+0x26c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5f      	ldr	r2, [pc, #380]	; (8007214 <DMA_SetConfig+0x270>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <DMA_SetConfig+0x10a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a5e      	ldr	r2, [pc, #376]	; (8007218 <DMA_SetConfig+0x274>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <DMA_SetConfig+0x10a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a5c      	ldr	r2, [pc, #368]	; (800721c <DMA_SetConfig+0x278>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <DMA_SetConfig+0x10e>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <DMA_SetConfig+0x110>
 80070b2:	2300      	movs	r3, #0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a39      	ldr	r2, [pc, #228]	; (80071c0 <DMA_SetConfig+0x21c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d04a      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a38      	ldr	r2, [pc, #224]	; (80071c4 <DMA_SetConfig+0x220>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d045      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a36      	ldr	r2, [pc, #216]	; (80071c8 <DMA_SetConfig+0x224>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d040      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a35      	ldr	r2, [pc, #212]	; (80071cc <DMA_SetConfig+0x228>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d03b      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a33      	ldr	r2, [pc, #204]	; (80071d0 <DMA_SetConfig+0x22c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d036      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a32      	ldr	r2, [pc, #200]	; (80071d4 <DMA_SetConfig+0x230>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d031      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a30      	ldr	r2, [pc, #192]	; (80071d8 <DMA_SetConfig+0x234>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d02c      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2f      	ldr	r2, [pc, #188]	; (80071dc <DMA_SetConfig+0x238>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d027      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2d      	ldr	r2, [pc, #180]	; (80071e0 <DMA_SetConfig+0x23c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d022      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <DMA_SetConfig+0x240>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d01d      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <DMA_SetConfig+0x244>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d018      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a29      	ldr	r2, [pc, #164]	; (80071ec <DMA_SetConfig+0x248>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <DMA_SetConfig+0x24c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00e      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <DMA_SetConfig+0x250>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d009      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a24      	ldr	r2, [pc, #144]	; (80071f8 <DMA_SetConfig+0x254>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <DMA_SetConfig+0x1d0>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a23      	ldr	r2, [pc, #140]	; (80071fc <DMA_SetConfig+0x258>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d101      	bne.n	8007178 <DMA_SetConfig+0x1d4>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <DMA_SetConfig+0x1d6>
 8007178:	2300      	movs	r3, #0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d059      	beq.n	8007232 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	223f      	movs	r2, #63	; 0x3f
 8007188:	409a      	lsls	r2, r3
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800719c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d138      	bne.n	8007220 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071be:	e086      	b.n	80072ce <DMA_SetConfig+0x32a>
 80071c0:	40020010 	.word	0x40020010
 80071c4:	40020028 	.word	0x40020028
 80071c8:	40020040 	.word	0x40020040
 80071cc:	40020058 	.word	0x40020058
 80071d0:	40020070 	.word	0x40020070
 80071d4:	40020088 	.word	0x40020088
 80071d8:	400200a0 	.word	0x400200a0
 80071dc:	400200b8 	.word	0x400200b8
 80071e0:	40020410 	.word	0x40020410
 80071e4:	40020428 	.word	0x40020428
 80071e8:	40020440 	.word	0x40020440
 80071ec:	40020458 	.word	0x40020458
 80071f0:	40020470 	.word	0x40020470
 80071f4:	40020488 	.word	0x40020488
 80071f8:	400204a0 	.word	0x400204a0
 80071fc:	400204b8 	.word	0x400204b8
 8007200:	58025408 	.word	0x58025408
 8007204:	5802541c 	.word	0x5802541c
 8007208:	58025430 	.word	0x58025430
 800720c:	58025444 	.word	0x58025444
 8007210:	58025458 	.word	0x58025458
 8007214:	5802546c 	.word	0x5802546c
 8007218:	58025480 	.word	0x58025480
 800721c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	60da      	str	r2, [r3, #12]
}
 8007230:	e04d      	b.n	80072ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a29      	ldr	r2, [pc, #164]	; (80072dc <DMA_SetConfig+0x338>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d022      	beq.n	8007282 <DMA_SetConfig+0x2de>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <DMA_SetConfig+0x33c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d01d      	beq.n	8007282 <DMA_SetConfig+0x2de>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a26      	ldr	r2, [pc, #152]	; (80072e4 <DMA_SetConfig+0x340>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d018      	beq.n	8007282 <DMA_SetConfig+0x2de>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a24      	ldr	r2, [pc, #144]	; (80072e8 <DMA_SetConfig+0x344>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <DMA_SetConfig+0x2de>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a23      	ldr	r2, [pc, #140]	; (80072ec <DMA_SetConfig+0x348>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <DMA_SetConfig+0x2de>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <DMA_SetConfig+0x34c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <DMA_SetConfig+0x2de>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a20      	ldr	r2, [pc, #128]	; (80072f4 <DMA_SetConfig+0x350>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <DMA_SetConfig+0x2de>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <DMA_SetConfig+0x354>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d101      	bne.n	8007286 <DMA_SetConfig+0x2e2>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <DMA_SetConfig+0x2e4>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d020      	beq.n	80072ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2201      	movs	r2, #1
 8007296:	409a      	lsls	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d108      	bne.n	80072be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	60da      	str	r2, [r3, #12]
}
 80072bc:	e007      	b.n	80072ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	60da      	str	r2, [r3, #12]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	58025408 	.word	0x58025408
 80072e0:	5802541c 	.word	0x5802541c
 80072e4:	58025430 	.word	0x58025430
 80072e8:	58025444 	.word	0x58025444
 80072ec:	58025458 	.word	0x58025458
 80072f0:	5802546c 	.word	0x5802546c
 80072f4:	58025480 	.word	0x58025480
 80072f8:	58025494 	.word	0x58025494

080072fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a42      	ldr	r2, [pc, #264]	; (8007414 <DMA_CalcBaseAndBitshift+0x118>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d04a      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a41      	ldr	r2, [pc, #260]	; (8007418 <DMA_CalcBaseAndBitshift+0x11c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d045      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3f      	ldr	r2, [pc, #252]	; (800741c <DMA_CalcBaseAndBitshift+0x120>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d040      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3e      	ldr	r2, [pc, #248]	; (8007420 <DMA_CalcBaseAndBitshift+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d03b      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a3c      	ldr	r2, [pc, #240]	; (8007424 <DMA_CalcBaseAndBitshift+0x128>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d036      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a3b      	ldr	r2, [pc, #236]	; (8007428 <DMA_CalcBaseAndBitshift+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d031      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a39      	ldr	r2, [pc, #228]	; (800742c <DMA_CalcBaseAndBitshift+0x130>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d02c      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a38      	ldr	r2, [pc, #224]	; (8007430 <DMA_CalcBaseAndBitshift+0x134>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d027      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a36      	ldr	r2, [pc, #216]	; (8007434 <DMA_CalcBaseAndBitshift+0x138>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d022      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a35      	ldr	r2, [pc, #212]	; (8007438 <DMA_CalcBaseAndBitshift+0x13c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d01d      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a33      	ldr	r2, [pc, #204]	; (800743c <DMA_CalcBaseAndBitshift+0x140>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d018      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a32      	ldr	r2, [pc, #200]	; (8007440 <DMA_CalcBaseAndBitshift+0x144>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d013      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a30      	ldr	r2, [pc, #192]	; (8007444 <DMA_CalcBaseAndBitshift+0x148>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00e      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <DMA_CalcBaseAndBitshift+0x14c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d009      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2d      	ldr	r2, [pc, #180]	; (800744c <DMA_CalcBaseAndBitshift+0x150>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <DMA_CalcBaseAndBitshift+0xa8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <DMA_CalcBaseAndBitshift+0x154>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d101      	bne.n	80073a8 <DMA_CalcBaseAndBitshift+0xac>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <DMA_CalcBaseAndBitshift+0xae>
 80073a8:	2300      	movs	r3, #0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d024      	beq.n	80073f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3b10      	subs	r3, #16
 80073b6:	4a27      	ldr	r2, [pc, #156]	; (8007454 <DMA_CalcBaseAndBitshift+0x158>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	091b      	lsrs	r3, r3, #4
 80073be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	4a24      	ldr	r2, [pc, #144]	; (8007458 <DMA_CalcBaseAndBitshift+0x15c>)
 80073c8:	5cd3      	ldrb	r3, [r2, r3]
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d908      	bls.n	80073e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	4b1f      	ldr	r3, [pc, #124]	; (800745c <DMA_CalcBaseAndBitshift+0x160>)
 80073de:	4013      	ands	r3, r2
 80073e0:	1d1a      	adds	r2, r3, #4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	659a      	str	r2, [r3, #88]	; 0x58
 80073e6:	e00d      	b.n	8007404 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b1b      	ldr	r3, [pc, #108]	; (800745c <DMA_CalcBaseAndBitshift+0x160>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6593      	str	r3, [r2, #88]	; 0x58
 80073f6:	e005      	b.n	8007404 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40020010 	.word	0x40020010
 8007418:	40020028 	.word	0x40020028
 800741c:	40020040 	.word	0x40020040
 8007420:	40020058 	.word	0x40020058
 8007424:	40020070 	.word	0x40020070
 8007428:	40020088 	.word	0x40020088
 800742c:	400200a0 	.word	0x400200a0
 8007430:	400200b8 	.word	0x400200b8
 8007434:	40020410 	.word	0x40020410
 8007438:	40020428 	.word	0x40020428
 800743c:	40020440 	.word	0x40020440
 8007440:	40020458 	.word	0x40020458
 8007444:	40020470 	.word	0x40020470
 8007448:	40020488 	.word	0x40020488
 800744c:	400204a0 	.word	0x400204a0
 8007450:	400204b8 	.word	0x400204b8
 8007454:	aaaaaaab 	.word	0xaaaaaaab
 8007458:	080106f0 	.word	0x080106f0
 800745c:	fffffc00 	.word	0xfffffc00

08007460 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d120      	bne.n	80074b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	2b03      	cmp	r3, #3
 800747a:	d858      	bhi.n	800752e <DMA_CheckFifoParam+0xce>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <DMA_CheckFifoParam+0x24>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007495 	.word	0x08007495
 8007488:	080074a7 	.word	0x080074a7
 800748c:	08007495 	.word	0x08007495
 8007490:	0800752f 	.word	0x0800752f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d048      	beq.n	8007532 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074a4:	e045      	b.n	8007532 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074ae:	d142      	bne.n	8007536 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074b4:	e03f      	b.n	8007536 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074be:	d123      	bne.n	8007508 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d838      	bhi.n	800753a <DMA_CheckFifoParam+0xda>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <DMA_CheckFifoParam+0x70>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074e7 	.word	0x080074e7
 80074d8:	080074e1 	.word	0x080074e1
 80074dc:	080074f9 	.word	0x080074f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
        break;
 80074e4:	e030      	b.n	8007548 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d025      	beq.n	800753e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074f6:	e022      	b.n	800753e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007500:	d11f      	bne.n	8007542 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007506:	e01c      	b.n	8007542 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	2b02      	cmp	r3, #2
 800750e:	d902      	bls.n	8007516 <DMA_CheckFifoParam+0xb6>
 8007510:	2b03      	cmp	r3, #3
 8007512:	d003      	beq.n	800751c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007514:	e018      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
        break;
 800751a:	e015      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00e      	beq.n	8007546 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
    break;
 800752c:	e00b      	b.n	8007546 <DMA_CheckFifoParam+0xe6>
        break;
 800752e:	bf00      	nop
 8007530:	e00a      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        break;
 8007532:	bf00      	nop
 8007534:	e008      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        break;
 8007536:	bf00      	nop
 8007538:	e006      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        break;
 800753a:	bf00      	nop
 800753c:	e004      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        break;
 800753e:	bf00      	nop
 8007540:	e002      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
        break;
 8007542:	bf00      	nop
 8007544:	e000      	b.n	8007548 <DMA_CheckFifoParam+0xe8>
    break;
 8007546:	bf00      	nop
    }
  }

  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop

08007558 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a38      	ldr	r2, [pc, #224]	; (800764c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d022      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a36      	ldr	r2, [pc, #216]	; (8007650 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01d      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a35      	ldr	r2, [pc, #212]	; (8007654 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d018      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a33      	ldr	r2, [pc, #204]	; (8007658 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a32      	ldr	r2, [pc, #200]	; (800765c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a30      	ldr	r2, [pc, #192]	; (8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a2d      	ldr	r2, [pc, #180]	; (8007668 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d101      	bne.n	80075ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01a      	beq.n	80075f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	3b08      	subs	r3, #8
 80075c8:	4a28      	ldr	r2, [pc, #160]	; (800766c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4b26      	ldr	r3, [pc, #152]	; (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	461a      	mov	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a24      	ldr	r2, [pc, #144]	; (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80075e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	2201      	movs	r2, #1
 80075ee:	409a      	lsls	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80075f4:	e024      	b.n	8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	3b10      	subs	r3, #16
 80075fe:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4a1c      	ldr	r2, [pc, #112]	; (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d806      	bhi.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d902      	bls.n	800761e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3308      	adds	r3, #8
 800761c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4b18      	ldr	r3, [pc, #96]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a16      	ldr	r2, [pc, #88]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007630:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2201      	movs	r2, #1
 800763a:	409a      	lsls	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	58025408 	.word	0x58025408
 8007650:	5802541c 	.word	0x5802541c
 8007654:	58025430 	.word	0x58025430
 8007658:	58025444 	.word	0x58025444
 800765c:	58025458 	.word	0x58025458
 8007660:	5802546c 	.word	0x5802546c
 8007664:	58025480 	.word	0x58025480
 8007668:	58025494 	.word	0x58025494
 800766c:	cccccccd 	.word	0xcccccccd
 8007670:	16009600 	.word	0x16009600
 8007674:	58025880 	.word	0x58025880
 8007678:	aaaaaaab 	.word	0xaaaaaaab
 800767c:	400204b8 	.word	0x400204b8
 8007680:	4002040f 	.word	0x4002040f
 8007684:	10008200 	.word	0x10008200
 8007688:	40020880 	.word	0x40020880

0800768c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04a      	beq.n	8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d847      	bhi.n	8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a25      	ldr	r2, [pc, #148]	; (8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d022      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a24      	ldr	r2, [pc, #144]	; (8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d01d      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a22      	ldr	r2, [pc, #136]	; (800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d018      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a21      	ldr	r2, [pc, #132]	; (8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d009      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d101      	bne.n	80076fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076fc:	2300      	movs	r3, #0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4b17      	ldr	r3, [pc, #92]	; (8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a15      	ldr	r2, [pc, #84]	; (8007768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007714:	671a      	str	r2, [r3, #112]	; 0x70
 8007716:	e009      	b.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4b14      	ldr	r3, [pc, #80]	; (800776c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a11      	ldr	r2, [pc, #68]	; (8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800772a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3b01      	subs	r3, #1
 8007730:	2201      	movs	r2, #1
 8007732:	409a      	lsls	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	58025408 	.word	0x58025408
 8007748:	5802541c 	.word	0x5802541c
 800774c:	58025430 	.word	0x58025430
 8007750:	58025444 	.word	0x58025444
 8007754:	58025458 	.word	0x58025458
 8007758:	5802546c 	.word	0x5802546c
 800775c:	58025480 	.word	0x58025480
 8007760:	58025494 	.word	0x58025494
 8007764:	1600963f 	.word	0x1600963f
 8007768:	58025940 	.word	0x58025940
 800776c:	1000823f 	.word	0x1000823f
 8007770:	40020940 	.word	0x40020940

08007774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007774:	b480      	push	{r7}
 8007776:	b089      	sub	sp, #36	; 0x24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800777e:	2300      	movs	r3, #0
 8007780:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007782:	4b89      	ldr	r3, [pc, #548]	; (80079a8 <HAL_GPIO_Init+0x234>)
 8007784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007786:	e194      	b.n	8007ab2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	2101      	movs	r1, #1
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	fa01 f303 	lsl.w	r3, r1, r3
 8007794:	4013      	ands	r3, r2
 8007796:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8186 	beq.w	8007aac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d005      	beq.n	80077b8 <HAL_GPIO_Init+0x44>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d130      	bne.n	800781a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	2203      	movs	r2, #3
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	43db      	mvns	r3, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4013      	ands	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077ee:	2201      	movs	r2, #1
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43db      	mvns	r3, r3
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	4013      	ands	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 0201 	and.w	r2, r3, #1
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4313      	orrs	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	2b03      	cmp	r3, #3
 8007824:	d017      	beq.n	8007856 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	2203      	movs	r2, #3
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	4313      	orrs	r3, r2
 800784e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d123      	bne.n	80078aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	08da      	lsrs	r2, r3, #3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3208      	adds	r2, #8
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	220f      	movs	r2, #15
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	43db      	mvns	r3, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	4013      	ands	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4313      	orrs	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	08da      	lsrs	r2, r3, #3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3208      	adds	r2, #8
 80078a4:	69b9      	ldr	r1, [r7, #24]
 80078a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	2203      	movs	r2, #3
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	43db      	mvns	r3, r3
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	4013      	ands	r3, r2
 80078c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f003 0203 	and.w	r2, r3, #3
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80e0 	beq.w	8007aac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ec:	4b2f      	ldr	r3, [pc, #188]	; (80079ac <HAL_GPIO_Init+0x238>)
 80078ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078f2:	4a2e      	ldr	r2, [pc, #184]	; (80079ac <HAL_GPIO_Init+0x238>)
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80078fc:	4b2b      	ldr	r3, [pc, #172]	; (80079ac <HAL_GPIO_Init+0x238>)
 80078fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800790a:	4a29      	ldr	r2, [pc, #164]	; (80079b0 <HAL_GPIO_Init+0x23c>)
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	089b      	lsrs	r3, r3, #2
 8007910:	3302      	adds	r3, #2
 8007912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	220f      	movs	r2, #15
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	43db      	mvns	r3, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4013      	ands	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <HAL_GPIO_Init+0x240>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d052      	beq.n	80079dc <HAL_GPIO_Init+0x268>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <HAL_GPIO_Init+0x244>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d031      	beq.n	80079a2 <HAL_GPIO_Init+0x22e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1e      	ldr	r2, [pc, #120]	; (80079bc <HAL_GPIO_Init+0x248>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d02b      	beq.n	800799e <HAL_GPIO_Init+0x22a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a1d      	ldr	r2, [pc, #116]	; (80079c0 <HAL_GPIO_Init+0x24c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d025      	beq.n	800799a <HAL_GPIO_Init+0x226>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <HAL_GPIO_Init+0x250>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d01f      	beq.n	8007996 <HAL_GPIO_Init+0x222>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <HAL_GPIO_Init+0x254>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d019      	beq.n	8007992 <HAL_GPIO_Init+0x21e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <HAL_GPIO_Init+0x258>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d013      	beq.n	800798e <HAL_GPIO_Init+0x21a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <HAL_GPIO_Init+0x25c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00d      	beq.n	800798a <HAL_GPIO_Init+0x216>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <HAL_GPIO_Init+0x260>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d007      	beq.n	8007986 <HAL_GPIO_Init+0x212>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <HAL_GPIO_Init+0x264>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d101      	bne.n	8007982 <HAL_GPIO_Init+0x20e>
 800797e:	2309      	movs	r3, #9
 8007980:	e02d      	b.n	80079de <HAL_GPIO_Init+0x26a>
 8007982:	230a      	movs	r3, #10
 8007984:	e02b      	b.n	80079de <HAL_GPIO_Init+0x26a>
 8007986:	2308      	movs	r3, #8
 8007988:	e029      	b.n	80079de <HAL_GPIO_Init+0x26a>
 800798a:	2307      	movs	r3, #7
 800798c:	e027      	b.n	80079de <HAL_GPIO_Init+0x26a>
 800798e:	2306      	movs	r3, #6
 8007990:	e025      	b.n	80079de <HAL_GPIO_Init+0x26a>
 8007992:	2305      	movs	r3, #5
 8007994:	e023      	b.n	80079de <HAL_GPIO_Init+0x26a>
 8007996:	2304      	movs	r3, #4
 8007998:	e021      	b.n	80079de <HAL_GPIO_Init+0x26a>
 800799a:	2303      	movs	r3, #3
 800799c:	e01f      	b.n	80079de <HAL_GPIO_Init+0x26a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e01d      	b.n	80079de <HAL_GPIO_Init+0x26a>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e01b      	b.n	80079de <HAL_GPIO_Init+0x26a>
 80079a6:	bf00      	nop
 80079a8:	58000080 	.word	0x58000080
 80079ac:	58024400 	.word	0x58024400
 80079b0:	58000400 	.word	0x58000400
 80079b4:	58020000 	.word	0x58020000
 80079b8:	58020400 	.word	0x58020400
 80079bc:	58020800 	.word	0x58020800
 80079c0:	58020c00 	.word	0x58020c00
 80079c4:	58021000 	.word	0x58021000
 80079c8:	58021400 	.word	0x58021400
 80079cc:	58021800 	.word	0x58021800
 80079d0:	58021c00 	.word	0x58021c00
 80079d4:	58022000 	.word	0x58022000
 80079d8:	58022400 	.word	0x58022400
 80079dc:	2300      	movs	r3, #0
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	f002 0203 	and.w	r2, r2, #3
 80079e4:	0092      	lsls	r2, r2, #2
 80079e6:	4093      	lsls	r3, r2
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079ee:	4938      	ldr	r1, [pc, #224]	; (8007ad0 <HAL_GPIO_Init+0x35c>)
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	089b      	lsrs	r3, r3, #2
 80079f4:	3302      	adds	r3, #2
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	43db      	mvns	r3, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	43db      	mvns	r3, r3
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4013      	ands	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	43db      	mvns	r3, r3
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f47f ae63 	bne.w	8007788 <HAL_GPIO_Init+0x14>
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	3724      	adds	r7, #36	; 0x24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	58000400 	.word	0x58000400

08007ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	887b      	ldrh	r3, [r7, #2]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
 8007af0:	e001      	b.n	8007af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	807b      	strh	r3, [r7, #2]
 8007b10:	4613      	mov	r3, r2
 8007b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b14:	787b      	ldrb	r3, [r7, #1]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b1a:	887a      	ldrh	r2, [r7, #2]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b20:	e003      	b.n	8007b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b22:	887b      	ldrh	r3, [r7, #2]
 8007b24:	041a      	lsls	r2, r3, #16
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	619a      	str	r2, [r3, #24]
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e07f      	b.n	8007c4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fa fabc 	bl	80020dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2224      	movs	r2, #36	; 0x24
 8007b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0201 	bic.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d107      	bne.n	8007bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bae:	609a      	str	r2, [r3, #8]
 8007bb0:	e006      	b.n	8007bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d104      	bne.n	8007bd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <HAL_I2C_Init+0x11c>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69d9      	ldr	r1, [r3, #28]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	02008000 	.word	0x02008000

08007c58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	461a      	mov	r2, r3
 8007c64:	460b      	mov	r3, r1
 8007c66:	817b      	strh	r3, [r7, #10]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	f040 80da 	bne.w	8007e2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_I2C_Master_Transmit+0x30>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e0d3      	b.n	8007e30 <HAL_I2C_Master_Transmit+0x1d8>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c90:	f7fa fe92 	bl	80029b8 <HAL_GetTick>
 8007c94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2319      	movs	r3, #25
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f9e6 	bl	8008074 <I2C_WaitOnFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e0be      	b.n	8007e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2221      	movs	r2, #33	; 0x21
 8007cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2210      	movs	r2, #16
 8007cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	893a      	ldrh	r2, [r7, #8]
 8007cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2bff      	cmp	r3, #255	; 0xff
 8007ce2:	d90e      	bls.n	8007d02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	8979      	ldrh	r1, [r7, #10]
 8007cf2:	4b51      	ldr	r3, [pc, #324]	; (8007e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fbdc 	bl	80084b8 <I2C_TransferConfig>
 8007d00:	e06c      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	8979      	ldrh	r1, [r7, #10]
 8007d14:	4b48      	ldr	r3, [pc, #288]	; (8007e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fbcb 	bl	80084b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007d22:	e05b      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	6a39      	ldr	r1, [r7, #32]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f9e3 	bl	80080f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e07b      	b.n	8007e30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d034      	beq.n	8007ddc <HAL_I2C_Master_Transmit+0x184>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d130      	bne.n	8007ddc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	2200      	movs	r2, #0
 8007d82:	2180      	movs	r1, #128	; 0x80
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 f975 	bl	8008074 <I2C_WaitOnFlagUntilTimeout>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e04d      	b.n	8007e30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2bff      	cmp	r3, #255	; 0xff
 8007d9c:	d90e      	bls.n	8007dbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	22ff      	movs	r2, #255	; 0xff
 8007da2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	8979      	ldrh	r1, [r7, #10]
 8007dac:	2300      	movs	r3, #0
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fb7f 	bl	80084b8 <I2C_TransferConfig>
 8007dba:	e00f      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	8979      	ldrh	r1, [r7, #10]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fb6e 	bl	80084b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d19e      	bne.n	8007d24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	6a39      	ldr	r1, [r7, #32]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f9c2 	bl	8008174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e01a      	b.n	8007e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6859      	ldr	r1, [r3, #4]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <HAL_I2C_Master_Transmit+0x1e4>)
 8007e0e:	400b      	ands	r3, r1
 8007e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e000      	b.n	8007e30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e2e:	2302      	movs	r3, #2
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	80002000 	.word	0x80002000
 8007e3c:	fe00e800 	.word	0xfe00e800

08007e40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	607a      	str	r2, [r7, #4]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	817b      	strh	r3, [r7, #10]
 8007e50:	4613      	mov	r3, r2
 8007e52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	f040 80db 	bne.w	8008018 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_I2C_Master_Receive+0x30>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e0d4      	b.n	800801a <HAL_I2C_Master_Receive+0x1da>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e78:	f7fa fd9e 	bl	80029b8 <HAL_GetTick>
 8007e7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	2319      	movs	r3, #25
 8007e84:	2201      	movs	r2, #1
 8007e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f8f2 	bl	8008074 <I2C_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e0bf      	b.n	800801a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2222      	movs	r2, #34	; 0x22
 8007e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	893a      	ldrh	r2, [r7, #8]
 8007eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2bff      	cmp	r3, #255	; 0xff
 8007eca:	d90e      	bls.n	8007eea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	22ff      	movs	r2, #255	; 0xff
 8007ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	8979      	ldrh	r1, [r7, #10]
 8007eda:	4b52      	ldr	r3, [pc, #328]	; (8008024 <HAL_I2C_Master_Receive+0x1e4>)
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fae8 	bl	80084b8 <I2C_TransferConfig>
 8007ee8:	e06d      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	8979      	ldrh	r1, [r7, #10]
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <HAL_I2C_Master_Receive+0x1e4>)
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fad7 	bl	80084b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007f0a:	e05c      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	6a39      	ldr	r1, [r7, #32]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f96b 	bl	80081ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e07c      	b.n	800801a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d034      	beq.n	8007fc6 <HAL_I2C_Master_Receive+0x186>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d130      	bne.n	8007fc6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2180      	movs	r1, #128	; 0x80
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f880 	bl	8008074 <I2C_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e04d      	b.n	800801a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2bff      	cmp	r3, #255	; 0xff
 8007f86:	d90e      	bls.n	8007fa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	22ff      	movs	r2, #255	; 0xff
 8007f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	8979      	ldrh	r1, [r7, #10]
 8007f96:	2300      	movs	r3, #0
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fa8a 	bl	80084b8 <I2C_TransferConfig>
 8007fa4:	e00f      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	8979      	ldrh	r1, [r7, #10]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fa79 	bl	80084b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d19d      	bne.n	8007f0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	6a39      	ldr	r1, [r7, #32]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f8cd 	bl	8008174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e01a      	b.n	800801a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6859      	ldr	r1, [r3, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <HAL_I2C_Master_Receive+0x1e8>)
 8007ff8:	400b      	ands	r3, r1
 8007ffa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e000      	b.n	800801a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	80002400 	.word	0x80002400
 8008028:	fe00e800 	.word	0xfe00e800

0800802c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b02      	cmp	r3, #2
 8008040:	d103      	bne.n	800804a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2200      	movs	r2, #0
 8008048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d007      	beq.n	8008068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0201 	orr.w	r2, r2, #1
 8008066:	619a      	str	r2, [r3, #24]
  }
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008084:	e022      	b.n	80080cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800808c:	d01e      	beq.n	80080cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7fa fc93 	bl	80029b8 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d113      	bne.n	80080cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e00f      	b.n	80080ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4013      	ands	r3, r2
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	429a      	cmp	r2, r3
 80080da:	bf0c      	ite	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	2300      	movne	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d0cd      	beq.n	8008086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008100:	e02c      	b.n	800815c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f8ea 	bl	80082e0 <I2C_IsErrorOccurred>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e02a      	b.n	800816c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800811c:	d01e      	beq.n	800815c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811e:	f7fa fc4b 	bl	80029b8 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	d302      	bcc.n	8008134 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d113      	bne.n	800815c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008138:	f043 0220 	orr.w	r2, r3, #32
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e007      	b.n	800816c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b02      	cmp	r3, #2
 8008168:	d1cb      	bne.n	8008102 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008180:	e028      	b.n	80081d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f8aa 	bl	80082e0 <I2C_IsErrorOccurred>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e026      	b.n	80081e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008196:	f7fa fc0f 	bl	80029b8 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d302      	bcc.n	80081ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d113      	bne.n	80081d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	f043 0220 	orr.w	r2, r3, #32
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e007      	b.n	80081e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d1cf      	bne.n	8008182 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081f8:	e064      	b.n	80082c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f86e 	bl	80082e0 <I2C_IsErrorOccurred>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e062      	b.n	80082d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b20      	cmp	r3, #32
 800821a:	d138      	bne.n	800828e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d105      	bne.n	8008236 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	e04e      	b.n	80082d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f003 0310 	and.w	r3, r3, #16
 8008240:	2b10      	cmp	r3, #16
 8008242:	d107      	bne.n	8008254 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2210      	movs	r2, #16
 800824a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2204      	movs	r2, #4
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
 8008252:	e002      	b.n	800825a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2220      	movs	r2, #32
 8008260:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6859      	ldr	r1, [r3, #4]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800826e:	400b      	ands	r3, r1
 8008270:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e022      	b.n	80082d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828e:	f7fa fb93 	bl	80029b8 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10f      	bne.n	80082c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a8:	f043 0220 	orr.w	r2, r3, #32
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e007      	b.n	80082d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f003 0304 	and.w	r3, r3, #4
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d193      	bne.n	80081fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	fe00e800 	.word	0xfe00e800

080082e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b00      	cmp	r3, #0
 800830a:	d075      	beq.n	80083f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2210      	movs	r2, #16
 8008312:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008314:	e056      	b.n	80083c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831c:	d052      	beq.n	80083c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800831e:	f7fa fb4b 	bl	80029b8 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	429a      	cmp	r2, r3
 800832c:	d302      	bcc.n	8008334 <I2C_IsErrorOccurred+0x54>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d147      	bne.n	80083c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008346:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008356:	d12e      	bne.n	80083b6 <I2C_IsErrorOccurred+0xd6>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800835e:	d02a      	beq.n	80083b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	2b20      	cmp	r3, #32
 8008364:	d027      	beq.n	80083b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008374:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008376:	f7fa fb1f 	bl	80029b8 <HAL_GetTick>
 800837a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800837c:	e01b      	b.n	80083b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800837e:	f7fa fb1b 	bl	80029b8 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b19      	cmp	r3, #25
 800838a:	d914      	bls.n	80083b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008390:	f043 0220 	orr.w	r2, r3, #32
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f003 0320 	and.w	r3, r3, #32
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d1dc      	bne.n	800837e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d003      	beq.n	80083da <I2C_IsErrorOccurred+0xfa>
 80083d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d09d      	beq.n	8008316 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d103      	bne.n	80083ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2220      	movs	r2, #32
 80083e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f043 0304 	orr.w	r3, r3, #4
 80083f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800841a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	f043 0308 	orr.w	r3, r3, #8
 8008432:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800843c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	f043 0302 	orr.w	r3, r3, #2
 8008454:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800845e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01c      	beq.n	80084a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f7ff fddc 	bl	800802c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	4b0d      	ldr	r3, [pc, #52]	; (80084b4 <I2C_IsErrorOccurred+0x1d4>)
 8008480:	400b      	ands	r3, r1
 8008482:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	431a      	orrs	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80084a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3728      	adds	r7, #40	; 0x28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	fe00e800 	.word	0xfe00e800

080084b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	817b      	strh	r3, [r7, #10]
 80084c6:	4613      	mov	r3, r2
 80084c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ca:	897b      	ldrh	r3, [r7, #10]
 80084cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084d0:	7a7b      	ldrb	r3, [r7, #9]
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	0d5b      	lsrs	r3, r3, #21
 80084f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <I2C_TransferConfig+0x60>)
 80084f8:	430b      	orrs	r3, r1
 80084fa:	43db      	mvns	r3, r3
 80084fc:	ea02 0103 	and.w	r1, r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	03ff63ff 	.word	0x03ff63ff

0800851c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b20      	cmp	r3, #32
 8008530:	d138      	bne.n	80085a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800853c:	2302      	movs	r3, #2
 800853e:	e032      	b.n	80085a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2224      	movs	r2, #36	; 0x24
 800854c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800856e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6819      	ldr	r1, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0201 	orr.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	e000      	b.n	80085a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d139      	bne.n	800863c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d101      	bne.n	80085d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085d2:	2302      	movs	r3, #2
 80085d4:	e033      	b.n	800863e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2224      	movs	r2, #36	; 0x24
 80085e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0201 	bic.w	r2, r2, #1
 80085f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008604:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	e000      	b.n	800863e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800863c:	2302      	movs	r3, #2
  }
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008658:	4b18      	ldr	r3, [pc, #96]	; (80086bc <HAL_PWR_EnterSTOPMode+0x70>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f023 0201 	bic.w	r2, r3, #1
 8008660:	4916      	ldr	r1, [pc, #88]	; (80086bc <HAL_PWR_EnterSTOPMode+0x70>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4313      	orrs	r3, r2
 8008666:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008668:	4b14      	ldr	r3, [pc, #80]	; (80086bc <HAL_PWR_EnterSTOPMode+0x70>)
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	4a13      	ldr	r2, [pc, #76]	; (80086bc <HAL_PWR_EnterSTOPMode+0x70>)
 800866e:	f023 0305 	bic.w	r3, r3, #5
 8008672:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008674:	4b11      	ldr	r3, [pc, #68]	; (80086bc <HAL_PWR_EnterSTOPMode+0x70>)
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	4a10      	ldr	r2, [pc, #64]	; (80086bc <HAL_PWR_EnterSTOPMode+0x70>)
 800867a:	f023 0302 	bic.w	r3, r3, #2
 800867e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <HAL_PWR_EnterSTOPMode+0x74>)
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	4a0e      	ldr	r2, [pc, #56]	; (80086c0 <HAL_PWR_EnterSTOPMode+0x74>)
 8008686:	f043 0304 	orr.w	r3, r3, #4
 800868a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800868c:	f3bf 8f4f 	dsb	sy
}
 8008690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008692:	f3bf 8f6f 	isb	sy
}
 8008696:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800869e:	bf30      	wfi
 80086a0:	e000      	b.n	80086a4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80086a2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80086a4:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <HAL_PWR_EnterSTOPMode+0x74>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	4a05      	ldr	r2, [pc, #20]	; (80086c0 <HAL_PWR_EnterSTOPMode+0x74>)
 80086aa:	f023 0304 	bic.w	r3, r3, #4
 80086ae:	6113      	str	r3, [r2, #16]
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	58024800 	.word	0x58024800
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086cc:	4b19      	ldr	r3, [pc, #100]	; (8008734 <HAL_PWREx_ConfigSupply+0x70>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d00a      	beq.n	80086ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086d8:	4b16      	ldr	r3, [pc, #88]	; (8008734 <HAL_PWREx_ConfigSupply+0x70>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d001      	beq.n	80086ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e01f      	b.n	800872a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	e01d      	b.n	800872a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086ee:	4b11      	ldr	r3, [pc, #68]	; (8008734 <HAL_PWREx_ConfigSupply+0x70>)
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f023 0207 	bic.w	r2, r3, #7
 80086f6:	490f      	ldr	r1, [pc, #60]	; (8008734 <HAL_PWREx_ConfigSupply+0x70>)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086fe:	f7fa f95b 	bl	80029b8 <HAL_GetTick>
 8008702:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008704:	e009      	b.n	800871a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008706:	f7fa f957 	bl	80029b8 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008714:	d901      	bls.n	800871a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e007      	b.n	800872a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800871a:	4b06      	ldr	r3, [pc, #24]	; (8008734 <HAL_PWREx_ConfigSupply+0x70>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008726:	d1ee      	bne.n	8008706 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	58024800 	.word	0x58024800

08008738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08c      	sub	sp, #48	; 0x30
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f000 bc1d 	b.w	8008f86 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 8087 	beq.w	8008868 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800875a:	4b99      	ldr	r3, [pc, #612]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008764:	4b96      	ldr	r3, [pc, #600]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008768:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b10      	cmp	r3, #16
 800876e:	d007      	beq.n	8008780 <HAL_RCC_OscConfig+0x48>
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	2b18      	cmp	r3, #24
 8008774:	d110      	bne.n	8008798 <HAL_RCC_OscConfig+0x60>
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d10b      	bne.n	8008798 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008780:	4b8f      	ldr	r3, [pc, #572]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d06c      	beq.n	8008866 <HAL_RCC_OscConfig+0x12e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d168      	bne.n	8008866 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e3f6      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a0:	d106      	bne.n	80087b0 <HAL_RCC_OscConfig+0x78>
 80087a2:	4b87      	ldr	r3, [pc, #540]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a86      	ldr	r2, [pc, #536]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e02e      	b.n	800880e <HAL_RCC_OscConfig+0xd6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <HAL_RCC_OscConfig+0x9a>
 80087b8:	4b81      	ldr	r3, [pc, #516]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a80      	ldr	r2, [pc, #512]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	4b7e      	ldr	r3, [pc, #504]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a7d      	ldr	r2, [pc, #500]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	e01d      	b.n	800880e <HAL_RCC_OscConfig+0xd6>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087da:	d10c      	bne.n	80087f6 <HAL_RCC_OscConfig+0xbe>
 80087dc:	4b78      	ldr	r3, [pc, #480]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a77      	ldr	r2, [pc, #476]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	4b75      	ldr	r3, [pc, #468]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a74      	ldr	r2, [pc, #464]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	e00b      	b.n	800880e <HAL_RCC_OscConfig+0xd6>
 80087f6:	4b72      	ldr	r3, [pc, #456]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a71      	ldr	r2, [pc, #452]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	4b6f      	ldr	r3, [pc, #444]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a6e      	ldr	r2, [pc, #440]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800880c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d013      	beq.n	800883e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008816:	f7fa f8cf 	bl	80029b8 <HAL_GetTick>
 800881a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800881c:	e008      	b.n	8008830 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800881e:	f7fa f8cb 	bl	80029b8 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	2b64      	cmp	r3, #100	; 0x64
 800882a:	d901      	bls.n	8008830 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e3aa      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008830:	4b63      	ldr	r3, [pc, #396]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0f0      	beq.n	800881e <HAL_RCC_OscConfig+0xe6>
 800883c:	e014      	b.n	8008868 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883e:	f7fa f8bb 	bl	80029b8 <HAL_GetTick>
 8008842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008846:	f7fa f8b7 	bl	80029b8 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b64      	cmp	r3, #100	; 0x64
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e396      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008858:	4b59      	ldr	r3, [pc, #356]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f0      	bne.n	8008846 <HAL_RCC_OscConfig+0x10e>
 8008864:	e000      	b.n	8008868 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008866:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80cb 	beq.w	8008a0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008876:	4b52      	ldr	r3, [pc, #328]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008880:	4b4f      	ldr	r3, [pc, #316]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <HAL_RCC_OscConfig+0x164>
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2b18      	cmp	r3, #24
 8008890:	d156      	bne.n	8008940 <HAL_RCC_OscConfig+0x208>
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d151      	bne.n	8008940 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800889c:	4b48      	ldr	r3, [pc, #288]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_RCC_OscConfig+0x17c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e368      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088b4:	4b42      	ldr	r3, [pc, #264]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f023 0219 	bic.w	r2, r3, #25
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	493f      	ldr	r1, [pc, #252]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088c6:	f7fa f877 	bl	80029b8 <HAL_GetTick>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088cc:	e008      	b.n	80088e0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088ce:	f7fa f873 	bl	80029b8 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d901      	bls.n	80088e0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e352      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088e0:	4b37      	ldr	r3, [pc, #220]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0f0      	beq.n	80088ce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ec:	f7fa f8a4 	bl	8002a38 <HAL_GetREVID>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d817      	bhi.n	800892a <HAL_RCC_OscConfig+0x1f2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b40      	cmp	r3, #64	; 0x40
 8008900:	d108      	bne.n	8008914 <HAL_RCC_OscConfig+0x1dc>
 8008902:	4b2f      	ldr	r3, [pc, #188]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800890a:	4a2d      	ldr	r2, [pc, #180]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800890c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008910:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008912:	e07b      	b.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008914:	4b2a      	ldr	r3, [pc, #168]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	031b      	lsls	r3, r3, #12
 8008922:	4927      	ldr	r1, [pc, #156]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008924:	4313      	orrs	r3, r2
 8008926:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008928:	e070      	b.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800892a:	4b25      	ldr	r3, [pc, #148]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	061b      	lsls	r3, r3, #24
 8008938:	4921      	ldr	r1, [pc, #132]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800893a:	4313      	orrs	r3, r2
 800893c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800893e:	e065      	b.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d048      	beq.n	80089da <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008948:	4b1d      	ldr	r3, [pc, #116]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f023 0219 	bic.w	r2, r3, #25
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	491a      	ldr	r1, [pc, #104]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008956:	4313      	orrs	r3, r2
 8008958:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895a:	f7fa f82d 	bl	80029b8 <HAL_GetTick>
 800895e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008960:	e008      	b.n	8008974 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008962:	f7fa f829 	bl	80029b8 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e308      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008974:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0f0      	beq.n	8008962 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008980:	f7fa f85a 	bl	8002a38 <HAL_GetREVID>
 8008984:	4603      	mov	r3, r0
 8008986:	f241 0203 	movw	r2, #4099	; 0x1003
 800898a:	4293      	cmp	r3, r2
 800898c:	d81a      	bhi.n	80089c4 <HAL_RCC_OscConfig+0x28c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	d108      	bne.n	80089a8 <HAL_RCC_OscConfig+0x270>
 8008996:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800899e:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80089a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a4:	6053      	str	r3, [r2, #4]
 80089a6:	e031      	b.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	031b      	lsls	r3, r3, #12
 80089b6:	4902      	ldr	r1, [pc, #8]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	604b      	str	r3, [r1, #4]
 80089bc:	e026      	b.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
 80089c4:	4b9a      	ldr	r3, [pc, #616]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	061b      	lsls	r3, r3, #24
 80089d2:	4997      	ldr	r1, [pc, #604]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	604b      	str	r3, [r1, #4]
 80089d8:	e018      	b.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089da:	4b95      	ldr	r3, [pc, #596]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a94      	ldr	r2, [pc, #592]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 80089e0:	f023 0301 	bic.w	r3, r3, #1
 80089e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e6:	f7f9 ffe7 	bl	80029b8 <HAL_GetTick>
 80089ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089ee:	f7f9 ffe3 	bl	80029b8 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e2c2      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a00:	4b8b      	ldr	r3, [pc, #556]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f0      	bne.n	80089ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 80a9 	beq.w	8008b6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a1a:	4b85      	ldr	r3, [pc, #532]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a24:	4b82      	ldr	r3, [pc, #520]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d007      	beq.n	8008a40 <HAL_RCC_OscConfig+0x308>
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b18      	cmp	r3, #24
 8008a34:	d13a      	bne.n	8008aac <HAL_RCC_OscConfig+0x374>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d135      	bne.n	8008aac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a40:	4b7b      	ldr	r3, [pc, #492]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <HAL_RCC_OscConfig+0x320>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	2b80      	cmp	r3, #128	; 0x80
 8008a52:	d001      	beq.n	8008a58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e296      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a58:	f7f9 ffee 	bl	8002a38 <HAL_GetREVID>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d817      	bhi.n	8008a96 <HAL_RCC_OscConfig+0x35e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d108      	bne.n	8008a80 <HAL_RCC_OscConfig+0x348>
 8008a6e:	4b70      	ldr	r3, [pc, #448]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a76:	4a6e      	ldr	r2, [pc, #440]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a7e:	e075      	b.n	8008b6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a80:	4b6b      	ldr	r3, [pc, #428]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	069b      	lsls	r3, r3, #26
 8008a8e:	4968      	ldr	r1, [pc, #416]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a94:	e06a      	b.n	8008b6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a96:	4b66      	ldr	r3, [pc, #408]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	061b      	lsls	r3, r3, #24
 8008aa4:	4962      	ldr	r1, [pc, #392]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aaa:	e05f      	b.n	8008b6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d042      	beq.n	8008b3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ab4:	4b5e      	ldr	r3, [pc, #376]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a5d      	ldr	r2, [pc, #372]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac0:	f7f9 ff7a 	bl	80029b8 <HAL_GetTick>
 8008ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ac6:	e008      	b.n	8008ada <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ac8:	f7f9 ff76 	bl	80029b8 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e255      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ada:	4b55      	ldr	r3, [pc, #340]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0f0      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ae6:	f7f9 ffa7 	bl	8002a38 <HAL_GetREVID>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f241 0203 	movw	r2, #4099	; 0x1003
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d817      	bhi.n	8008b24 <HAL_RCC_OscConfig+0x3ec>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	d108      	bne.n	8008b0e <HAL_RCC_OscConfig+0x3d6>
 8008afc:	4b4c      	ldr	r3, [pc, #304]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b04:	4a4a      	ldr	r2, [pc, #296]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b0a:	6053      	str	r3, [r2, #4]
 8008b0c:	e02e      	b.n	8008b6c <HAL_RCC_OscConfig+0x434>
 8008b0e:	4b48      	ldr	r3, [pc, #288]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	069b      	lsls	r3, r3, #26
 8008b1c:	4944      	ldr	r1, [pc, #272]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	604b      	str	r3, [r1, #4]
 8008b22:	e023      	b.n	8008b6c <HAL_RCC_OscConfig+0x434>
 8008b24:	4b42      	ldr	r3, [pc, #264]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	061b      	lsls	r3, r3, #24
 8008b32:	493f      	ldr	r1, [pc, #252]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60cb      	str	r3, [r1, #12]
 8008b38:	e018      	b.n	8008b6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b3a:	4b3d      	ldr	r3, [pc, #244]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a3c      	ldr	r2, [pc, #240]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b46:	f7f9 ff37 	bl	80029b8 <HAL_GetTick>
 8008b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b4c:	e008      	b.n	8008b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b4e:	f7f9 ff33 	bl	80029b8 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d901      	bls.n	8008b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e212      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b60:	4b33      	ldr	r3, [pc, #204]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f0      	bne.n	8008b4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d036      	beq.n	8008be6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d019      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b80:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b84:	4a2a      	ldr	r2, [pc, #168]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8c:	f7f9 ff14 	bl	80029b8 <HAL_GetTick>
 8008b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b94:	f7f9 ff10 	bl	80029b8 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e1ef      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ba6:	4b22      	ldr	r3, [pc, #136]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f0      	beq.n	8008b94 <HAL_RCC_OscConfig+0x45c>
 8008bb2:	e018      	b.n	8008be6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bb4:	4b1e      	ldr	r3, [pc, #120]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb8:	4a1d      	ldr	r2, [pc, #116]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc0:	f7f9 fefa 	bl	80029b8 <HAL_GetTick>
 8008bc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bc8:	f7f9 fef6 	bl	80029b8 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e1d5      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d039      	beq.n	8008c66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01c      	beq.n	8008c34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bfa:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a0c      	ldr	r2, [pc, #48]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c06:	f7f9 fed7 	bl	80029b8 <HAL_GetTick>
 8008c0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c0c:	e008      	b.n	8008c20 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c0e:	f7f9 fed3 	bl	80029b8 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d901      	bls.n	8008c20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e1b2      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c20:	4b03      	ldr	r3, [pc, #12]	; (8008c30 <HAL_RCC_OscConfig+0x4f8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0f0      	beq.n	8008c0e <HAL_RCC_OscConfig+0x4d6>
 8008c2c:	e01b      	b.n	8008c66 <HAL_RCC_OscConfig+0x52e>
 8008c2e:	bf00      	nop
 8008c30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c34:	4b9b      	ldr	r3, [pc, #620]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a9a      	ldr	r2, [pc, #616]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c40:	f7f9 feba 	bl	80029b8 <HAL_GetTick>
 8008c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c48:	f7f9 feb6 	bl	80029b8 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e195      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c5a:	4b92      	ldr	r3, [pc, #584]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1f0      	bne.n	8008c48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 8081 	beq.w	8008d76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c74:	4b8c      	ldr	r3, [pc, #560]	; (8008ea8 <HAL_RCC_OscConfig+0x770>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a8b      	ldr	r2, [pc, #556]	; (8008ea8 <HAL_RCC_OscConfig+0x770>)
 8008c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c80:	f7f9 fe9a 	bl	80029b8 <HAL_GetTick>
 8008c84:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c86:	e008      	b.n	8008c9a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c88:	f7f9 fe96 	bl	80029b8 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b64      	cmp	r3, #100	; 0x64
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e175      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c9a:	4b83      	ldr	r3, [pc, #524]	; (8008ea8 <HAL_RCC_OscConfig+0x770>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0f0      	beq.n	8008c88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d106      	bne.n	8008cbc <HAL_RCC_OscConfig+0x584>
 8008cae:	4b7d      	ldr	r3, [pc, #500]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb2:	4a7c      	ldr	r2, [pc, #496]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cb4:	f043 0301 	orr.w	r3, r3, #1
 8008cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cba:	e02d      	b.n	8008d18 <HAL_RCC_OscConfig+0x5e0>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10c      	bne.n	8008cde <HAL_RCC_OscConfig+0x5a6>
 8008cc4:	4b77      	ldr	r3, [pc, #476]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc8:	4a76      	ldr	r2, [pc, #472]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cca:	f023 0301 	bic.w	r3, r3, #1
 8008cce:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd0:	4b74      	ldr	r3, [pc, #464]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd4:	4a73      	ldr	r2, [pc, #460]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cd6:	f023 0304 	bic.w	r3, r3, #4
 8008cda:	6713      	str	r3, [r2, #112]	; 0x70
 8008cdc:	e01c      	b.n	8008d18 <HAL_RCC_OscConfig+0x5e0>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	d10c      	bne.n	8008d00 <HAL_RCC_OscConfig+0x5c8>
 8008ce6:	4b6f      	ldr	r3, [pc, #444]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cea:	4a6e      	ldr	r2, [pc, #440]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cec:	f043 0304 	orr.w	r3, r3, #4
 8008cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf2:	4b6c      	ldr	r3, [pc, #432]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf6:	4a6b      	ldr	r2, [pc, #428]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008cf8:	f043 0301 	orr.w	r3, r3, #1
 8008cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cfe:	e00b      	b.n	8008d18 <HAL_RCC_OscConfig+0x5e0>
 8008d00:	4b68      	ldr	r3, [pc, #416]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d04:	4a67      	ldr	r2, [pc, #412]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d06:	f023 0301 	bic.w	r3, r3, #1
 8008d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d0c:	4b65      	ldr	r3, [pc, #404]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d10:	4a64      	ldr	r2, [pc, #400]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d12:	f023 0304 	bic.w	r3, r3, #4
 8008d16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d015      	beq.n	8008d4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d20:	f7f9 fe4a 	bl	80029b8 <HAL_GetTick>
 8008d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d26:	e00a      	b.n	8008d3e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d28:	f7f9 fe46 	bl	80029b8 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e123      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d3e:	4b59      	ldr	r3, [pc, #356]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0ee      	beq.n	8008d28 <HAL_RCC_OscConfig+0x5f0>
 8008d4a:	e014      	b.n	8008d76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4c:	f7f9 fe34 	bl	80029b8 <HAL_GetTick>
 8008d50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d52:	e00a      	b.n	8008d6a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d54:	f7f9 fe30 	bl	80029b8 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e10d      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1ee      	bne.n	8008d54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 8102 	beq.w	8008f84 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d80:	4b48      	ldr	r3, [pc, #288]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d88:	2b18      	cmp	r3, #24
 8008d8a:	f000 80bd 	beq.w	8008f08 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	f040 809e 	bne.w	8008ed4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d98:	4b42      	ldr	r3, [pc, #264]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a41      	ldr	r2, [pc, #260]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7f9 fe08 	bl	80029b8 <HAL_GetTick>
 8008da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dac:	f7f9 fe04 	bl	80029b8 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e0e3      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dbe:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1f0      	bne.n	8008dac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dca:	4b36      	ldr	r3, [pc, #216]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dce:	4b37      	ldr	r3, [pc, #220]	; (8008eac <HAL_RCC_OscConfig+0x774>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dda:	0112      	lsls	r2, r2, #4
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	4931      	ldr	r1, [pc, #196]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	628b      	str	r3, [r1, #40]	; 0x28
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	3b01      	subs	r3, #1
 8008dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	3b01      	subs	r3, #1
 8008df4:	025b      	lsls	r3, r3, #9
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	041b      	lsls	r3, r3, #16
 8008e02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	061b      	lsls	r3, r3, #24
 8008e10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e14:	4923      	ldr	r1, [pc, #140]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e1a:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	4a21      	ldr	r2, [pc, #132]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e26:	4b1f      	ldr	r3, [pc, #124]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2a:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <HAL_RCC_OscConfig+0x778>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e32:	00d2      	lsls	r2, r2, #3
 8008e34:	491b      	ldr	r1, [pc, #108]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	f023 020c 	bic.w	r2, r3, #12
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	4917      	ldr	r1, [pc, #92]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e4c:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	f023 0202 	bic.w	r2, r3, #2
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e58:	4912      	ldr	r1, [pc, #72]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e5e:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e82:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	4a07      	ldr	r2, [pc, #28]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <HAL_RCC_OscConfig+0x76c>)
 8008e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9a:	f7f9 fd8d 	bl	80029b8 <HAL_GetTick>
 8008e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ea0:	e011      	b.n	8008ec6 <HAL_RCC_OscConfig+0x78e>
 8008ea2:	bf00      	nop
 8008ea4:	58024400 	.word	0x58024400
 8008ea8:	58024800 	.word	0x58024800
 8008eac:	fffffc0c 	.word	0xfffffc0c
 8008eb0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7f9 fd80 	bl	80029b8 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e05f      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ec6:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <HAL_RCC_OscConfig+0x858>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f0      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x77c>
 8008ed2:	e057      	b.n	8008f84 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ed4:	4b2e      	ldr	r3, [pc, #184]	; (8008f90 <HAL_RCC_OscConfig+0x858>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a2d      	ldr	r2, [pc, #180]	; (8008f90 <HAL_RCC_OscConfig+0x858>)
 8008eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee0:	f7f9 fd6a 	bl	80029b8 <HAL_GetTick>
 8008ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ee8:	f7f9 fd66 	bl	80029b8 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e045      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008efa:	4b25      	ldr	r3, [pc, #148]	; (8008f90 <HAL_RCC_OscConfig+0x858>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1f0      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x7b0>
 8008f06:	e03d      	b.n	8008f84 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f08:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <HAL_RCC_OscConfig+0x858>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f0e:	4b20      	ldr	r3, [pc, #128]	; (8008f90 <HAL_RCC_OscConfig+0x858>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d031      	beq.n	8008f80 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f003 0203 	and.w	r2, r3, #3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d12a      	bne.n	8008f80 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	091b      	lsrs	r3, r3, #4
 8008f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d122      	bne.n	8008f80 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d11a      	bne.n	8008f80 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	0a5b      	lsrs	r3, r3, #9
 8008f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f56:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d111      	bne.n	8008f80 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d108      	bne.n	8008f80 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	0e1b      	lsrs	r3, r3, #24
 8008f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3730      	adds	r7, #48	; 0x30
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400

08008f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e19c      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fa8:	4b8a      	ldr	r3, [pc, #552]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d910      	bls.n	8008fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fb6:	4b87      	ldr	r3, [pc, #540]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f023 020f 	bic.w	r2, r3, #15
 8008fbe:	4985      	ldr	r1, [pc, #532]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc6:	4b83      	ldr	r3, [pc, #524]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d001      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e184      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d010      	beq.n	8009006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	4b7b      	ldr	r3, [pc, #492]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d908      	bls.n	8009006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ff4:	4b78      	ldr	r3, [pc, #480]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	4975      	ldr	r1, [pc, #468]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009002:	4313      	orrs	r3, r2
 8009004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d010      	beq.n	8009034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695a      	ldr	r2, [r3, #20]
 8009016:	4b70      	ldr	r3, [pc, #448]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800901e:	429a      	cmp	r2, r3
 8009020:	d908      	bls.n	8009034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009022:	4b6d      	ldr	r3, [pc, #436]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	496a      	ldr	r1, [pc, #424]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009030:	4313      	orrs	r3, r2
 8009032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	d010      	beq.n	8009062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699a      	ldr	r2, [r3, #24]
 8009044:	4b64      	ldr	r3, [pc, #400]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800904c:	429a      	cmp	r2, r3
 800904e:	d908      	bls.n	8009062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009050:	4b61      	ldr	r3, [pc, #388]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	495e      	ldr	r1, [pc, #376]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 800905e:	4313      	orrs	r3, r2
 8009060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d010      	beq.n	8009090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69da      	ldr	r2, [r3, #28]
 8009072:	4b59      	ldr	r3, [pc, #356]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800907a:	429a      	cmp	r2, r3
 800907c:	d908      	bls.n	8009090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800907e:	4b56      	ldr	r3, [pc, #344]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	4953      	ldr	r1, [pc, #332]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 800908c:	4313      	orrs	r3, r2
 800908e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d010      	beq.n	80090be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	4b4d      	ldr	r3, [pc, #308]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d908      	bls.n	80090be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ac:	4b4a      	ldr	r3, [pc, #296]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f023 020f 	bic.w	r2, r3, #15
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4947      	ldr	r1, [pc, #284]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d055      	beq.n	8009176 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090ca:	4b43      	ldr	r3, [pc, #268]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	4940      	ldr	r1, [pc, #256]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d107      	bne.n	80090f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090e4:	4b3c      	ldr	r3, [pc, #240]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d121      	bne.n	8009134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0f6      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d107      	bne.n	800910c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090fc:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d115      	bne.n	8009134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e0ea      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d107      	bne.n	8009124 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009114:	4b30      	ldr	r3, [pc, #192]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911c:	2b00      	cmp	r3, #0
 800911e:	d109      	bne.n	8009134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e0de      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009124:	4b2c      	ldr	r3, [pc, #176]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e0d6      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009134:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f023 0207 	bic.w	r2, r3, #7
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4925      	ldr	r1, [pc, #148]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009142:	4313      	orrs	r3, r2
 8009144:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009146:	f7f9 fc37 	bl	80029b8 <HAL_GetTick>
 800914a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800914c:	e00a      	b.n	8009164 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800914e:	f7f9 fc33 	bl	80029b8 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	f241 3288 	movw	r2, #5000	; 0x1388
 800915c:	4293      	cmp	r3, r2
 800915e:	d901      	bls.n	8009164 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e0be      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009164:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	429a      	cmp	r2, r3
 8009174:	d1eb      	bne.n	800914e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d010      	beq.n	80091a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	429a      	cmp	r2, r3
 8009190:	d208      	bcs.n	80091a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009192:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f023 020f 	bic.w	r2, r3, #15
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	490e      	ldr	r1, [pc, #56]	; (80091d8 <HAL_RCC_ClockConfig+0x244>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d214      	bcs.n	80091dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091b2:	4b08      	ldr	r3, [pc, #32]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f023 020f 	bic.w	r2, r3, #15
 80091ba:	4906      	ldr	r1, [pc, #24]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	4313      	orrs	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091c2:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <HAL_RCC_ClockConfig+0x240>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 030f 	and.w	r3, r3, #15
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d005      	beq.n	80091dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e086      	b.n	80092e2 <HAL_RCC_ClockConfig+0x34e>
 80091d4:	52002000 	.word	0x52002000
 80091d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d010      	beq.n	800920a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691a      	ldr	r2, [r3, #16]
 80091ec:	4b3f      	ldr	r3, [pc, #252]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d208      	bcs.n	800920a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091f8:	4b3c      	ldr	r3, [pc, #240]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4939      	ldr	r1, [pc, #228]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009206:	4313      	orrs	r3, r2
 8009208:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d010      	beq.n	8009238 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	4b34      	ldr	r3, [pc, #208]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009222:	429a      	cmp	r2, r3
 8009224:	d208      	bcs.n	8009238 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009226:	4b31      	ldr	r3, [pc, #196]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	492e      	ldr	r1, [pc, #184]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009234:	4313      	orrs	r3, r2
 8009236:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0310 	and.w	r3, r3, #16
 8009240:	2b00      	cmp	r3, #0
 8009242:	d010      	beq.n	8009266 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	4b28      	ldr	r3, [pc, #160]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009250:	429a      	cmp	r2, r3
 8009252:	d208      	bcs.n	8009266 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009254:	4b25      	ldr	r3, [pc, #148]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	4922      	ldr	r1, [pc, #136]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009262:	4313      	orrs	r3, r2
 8009264:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d010      	beq.n	8009294 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69da      	ldr	r2, [r3, #28]
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800927e:	429a      	cmp	r2, r3
 8009280:	d208      	bcs.n	8009294 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009282:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	4917      	ldr	r1, [pc, #92]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 8009290:	4313      	orrs	r3, r2
 8009292:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009294:	f000 f834 	bl	8009300 <HAL_RCC_GetSysClockFreq>
 8009298:	4602      	mov	r2, r0
 800929a:	4b14      	ldr	r3, [pc, #80]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	4912      	ldr	r1, [pc, #72]	; (80092f0 <HAL_RCC_ClockConfig+0x35c>)
 80092a6:	5ccb      	ldrb	r3, [r1, r3]
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
 80092b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <HAL_RCC_ClockConfig+0x358>)
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	4a0d      	ldr	r2, [pc, #52]	; (80092f0 <HAL_RCC_ClockConfig+0x35c>)
 80092bc:	5cd3      	ldrb	r3, [r2, r3]
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
 80092c8:	4a0a      	ldr	r2, [pc, #40]	; (80092f4 <HAL_RCC_ClockConfig+0x360>)
 80092ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092cc:	4a0a      	ldr	r2, [pc, #40]	; (80092f8 <HAL_RCC_ClockConfig+0x364>)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <HAL_RCC_ClockConfig+0x368>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f9 fb24 	bl	8002924 <HAL_InitTick>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
 80092f0:	080106e0 	.word	0x080106e0
 80092f4:	24000048 	.word	0x24000048
 80092f8:	24000044 	.word	0x24000044
 80092fc:	2400004c 	.word	0x2400004c

08009300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	; 0x24
 8009304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009306:	4bb3      	ldr	r3, [pc, #716]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800930e:	2b18      	cmp	r3, #24
 8009310:	f200 8155 	bhi.w	80095be <HAL_RCC_GetSysClockFreq+0x2be>
 8009314:	a201      	add	r2, pc, #4	; (adr r2, 800931c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	08009381 	.word	0x08009381
 8009320:	080095bf 	.word	0x080095bf
 8009324:	080095bf 	.word	0x080095bf
 8009328:	080095bf 	.word	0x080095bf
 800932c:	080095bf 	.word	0x080095bf
 8009330:	080095bf 	.word	0x080095bf
 8009334:	080095bf 	.word	0x080095bf
 8009338:	080095bf 	.word	0x080095bf
 800933c:	080093a7 	.word	0x080093a7
 8009340:	080095bf 	.word	0x080095bf
 8009344:	080095bf 	.word	0x080095bf
 8009348:	080095bf 	.word	0x080095bf
 800934c:	080095bf 	.word	0x080095bf
 8009350:	080095bf 	.word	0x080095bf
 8009354:	080095bf 	.word	0x080095bf
 8009358:	080095bf 	.word	0x080095bf
 800935c:	080093ad 	.word	0x080093ad
 8009360:	080095bf 	.word	0x080095bf
 8009364:	080095bf 	.word	0x080095bf
 8009368:	080095bf 	.word	0x080095bf
 800936c:	080095bf 	.word	0x080095bf
 8009370:	080095bf 	.word	0x080095bf
 8009374:	080095bf 	.word	0x080095bf
 8009378:	080095bf 	.word	0x080095bf
 800937c:	080093b3 	.word	0x080093b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009380:	4b94      	ldr	r3, [pc, #592]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d009      	beq.n	80093a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800938c:	4b91      	ldr	r3, [pc, #580]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a90      	ldr	r2, [pc, #576]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800939e:	e111      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093a0:	4b8d      	ldr	r3, [pc, #564]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093a2:	61bb      	str	r3, [r7, #24]
    break;
 80093a4:	e10e      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80093a6:	4b8d      	ldr	r3, [pc, #564]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093a8:	61bb      	str	r3, [r7, #24]
    break;
 80093aa:	e10b      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80093ac:	4b8c      	ldr	r3, [pc, #560]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093ae:	61bb      	str	r3, [r7, #24]
    break;
 80093b0:	e108      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093b2:	4b88      	ldr	r3, [pc, #544]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093bc:	4b85      	ldr	r3, [pc, #532]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	091b      	lsrs	r3, r3, #4
 80093c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093c8:	4b82      	ldr	r3, [pc, #520]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093d2:	4b80      	ldr	r3, [pc, #512]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d6:	08db      	lsrs	r3, r3, #3
 80093d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	fb02 f303 	mul.w	r3, r2, r3
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 80e1 	beq.w	80095b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	f000 8083 	beq.w	8009504 <HAL_RCC_GetSysClockFreq+0x204>
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b02      	cmp	r3, #2
 8009402:	f200 80a1 	bhi.w	8009548 <HAL_RCC_GetSysClockFreq+0x248>
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <HAL_RCC_GetSysClockFreq+0x114>
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d056      	beq.n	80094c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009412:	e099      	b.n	8009548 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009414:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0320 	and.w	r3, r3, #32
 800941c:	2b00      	cmp	r3, #0
 800941e:	d02d      	beq.n	800947c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009420:	4b6c      	ldr	r3, [pc, #432]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	08db      	lsrs	r3, r3, #3
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	4a6b      	ldr	r2, [pc, #428]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800942c:	fa22 f303 	lsr.w	r3, r2, r3
 8009430:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	ee07 3a90 	vmov	s15, r3
 8009438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944a:	4b62      	ldr	r3, [pc, #392]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	ed97 6a02 	vldr	s12, [r7, #8]
 800945e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800946e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009476:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800947a:	e087      	b.n	800958c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eddf 6a58 	vldr	s13, [pc, #352]	; 80095e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	4b51      	ldr	r3, [pc, #324]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	ed97 6a02 	vldr	s12, [r7, #8]
 80094a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094be:	e065      	b.n	800958c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80094ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d2:	4b40      	ldr	r3, [pc, #256]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009502:	e043      	b.n	800958c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80095f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009516:	4b2f      	ldr	r3, [pc, #188]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009526:	ed97 6a02 	vldr	s12, [r7, #8]
 800952a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800952e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800953a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800953e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009546:	e021      	b.n	800958c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956a:	ed97 6a02 	vldr	s12, [r7, #8]
 800956e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800957e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800958a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800958c:	4b11      	ldr	r3, [pc, #68]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	0a5b      	lsrs	r3, r3, #9
 8009592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009596:	3301      	adds	r3, #1
 8009598:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b0:	ee17 3a90 	vmov	r3, s15
 80095b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095b6:	e005      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61bb      	str	r3, [r7, #24]
    break;
 80095bc:	e002      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80095be:	4b07      	ldr	r3, [pc, #28]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095c0:	61bb      	str	r3, [r7, #24]
    break;
 80095c2:	bf00      	nop
  }

  return sysclockfreq;
 80095c4:	69bb      	ldr	r3, [r7, #24]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3724      	adds	r7, #36	; 0x24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	58024400 	.word	0x58024400
 80095d8:	03d09000 	.word	0x03d09000
 80095dc:	003d0900 	.word	0x003d0900
 80095e0:	017d7840 	.word	0x017d7840
 80095e4:	46000000 	.word	0x46000000
 80095e8:	4c742400 	.word	0x4c742400
 80095ec:	4a742400 	.word	0x4a742400
 80095f0:	4bbebc20 	.word	0x4bbebc20

080095f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095fa:	f7ff fe81 	bl	8009300 <HAL_RCC_GetSysClockFreq>
 80095fe:	4602      	mov	r2, r0
 8009600:	4b10      	ldr	r3, [pc, #64]	; (8009644 <HAL_RCC_GetHCLKFreq+0x50>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	490f      	ldr	r1, [pc, #60]	; (8009648 <HAL_RCC_GetHCLKFreq+0x54>)
 800960c:	5ccb      	ldrb	r3, [r1, r3]
 800960e:	f003 031f 	and.w	r3, r3, #31
 8009612:	fa22 f303 	lsr.w	r3, r2, r3
 8009616:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <HAL_RCC_GetHCLKFreq+0x50>)
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	4a09      	ldr	r2, [pc, #36]	; (8009648 <HAL_RCC_GetHCLKFreq+0x54>)
 8009622:	5cd3      	ldrb	r3, [r2, r3]
 8009624:	f003 031f 	and.w	r3, r3, #31
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	fa22 f303 	lsr.w	r3, r2, r3
 800962e:	4a07      	ldr	r2, [pc, #28]	; (800964c <HAL_RCC_GetHCLKFreq+0x58>)
 8009630:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009632:	4a07      	ldr	r2, [pc, #28]	; (8009650 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009638:	4b04      	ldr	r3, [pc, #16]	; (800964c <HAL_RCC_GetHCLKFreq+0x58>)
 800963a:	681b      	ldr	r3, [r3, #0]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	58024400 	.word	0x58024400
 8009648:	080106e0 	.word	0x080106e0
 800964c:	24000048 	.word	0x24000048
 8009650:	24000044 	.word	0x24000044

08009654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009658:	f7ff ffcc 	bl	80095f4 <HAL_RCC_GetHCLKFreq>
 800965c:	4602      	mov	r2, r0
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	091b      	lsrs	r3, r3, #4
 8009664:	f003 0307 	and.w	r3, r3, #7
 8009668:	4904      	ldr	r1, [pc, #16]	; (800967c <HAL_RCC_GetPCLK1Freq+0x28>)
 800966a:	5ccb      	ldrb	r3, [r1, r3]
 800966c:	f003 031f 	and.w	r3, r3, #31
 8009670:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009674:	4618      	mov	r0, r3
 8009676:	bd80      	pop	{r7, pc}
 8009678:	58024400 	.word	0x58024400
 800967c:	080106e0 	.word	0x080106e0

08009680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009684:	f7ff ffb6 	bl	80095f4 <HAL_RCC_GetHCLKFreq>
 8009688:	4602      	mov	r2, r0
 800968a:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	f003 0307 	and.w	r3, r3, #7
 8009694:	4904      	ldr	r1, [pc, #16]	; (80096a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009696:	5ccb      	ldrb	r3, [r1, r3]
 8009698:	f003 031f 	and.w	r3, r3, #31
 800969c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	58024400 	.word	0x58024400
 80096a8:	080106e0 	.word	0x080106e0

080096ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096b4:	2300      	movs	r3, #0
 80096b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096b8:	2300      	movs	r3, #0
 80096ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d03f      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096d0:	d02a      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096d6:	d824      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096dc:	d018      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e2:	d81e      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d003      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80096e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ec:	d007      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80096ee:	e018      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f0:	4ba3      	ldr	r3, [pc, #652]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	4aa2      	ldr	r2, [pc, #648]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096fc:	e015      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3304      	adds	r3, #4
 8009702:	2102      	movs	r1, #2
 8009704:	4618      	mov	r0, r3
 8009706:	f001 fff9 	bl	800b6fc <RCCEx_PLL2_Config>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800970e:	e00c      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3324      	adds	r3, #36	; 0x24
 8009714:	2102      	movs	r1, #2
 8009716:	4618      	mov	r0, r3
 8009718:	f002 f8a2 	bl	800b860 <RCCEx_PLL3_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009720:	e003      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]
      break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d109      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009730:	4b93      	ldr	r3, [pc, #588]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800973c:	4990      	ldr	r1, [pc, #576]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800973e:	4313      	orrs	r3, r2
 8009740:	650b      	str	r3, [r1, #80]	; 0x50
 8009742:	e001      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009750:	2b00      	cmp	r3, #0
 8009752:	d03d      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009758:	2b04      	cmp	r3, #4
 800975a:	d826      	bhi.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800975c:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800975e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009762:	bf00      	nop
 8009764:	08009779 	.word	0x08009779
 8009768:	08009787 	.word	0x08009787
 800976c:	08009799 	.word	0x08009799
 8009770:	080097b1 	.word	0x080097b1
 8009774:	080097b1 	.word	0x080097b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009778:	4b81      	ldr	r3, [pc, #516]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	4a80      	ldr	r2, [pc, #512]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800977e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009784:	e015      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3304      	adds	r3, #4
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f001 ffb5 	bl	800b6fc <RCCEx_PLL2_Config>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009796:	e00c      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3324      	adds	r3, #36	; 0x24
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f002 f85e 	bl	800b860 <RCCEx_PLL3_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097a8:	e003      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	75fb      	strb	r3, [r7, #23]
      break;
 80097ae:	e000      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80097b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097b8:	4b71      	ldr	r3, [pc, #452]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097bc:	f023 0207 	bic.w	r2, r3, #7
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c4:	496e      	ldr	r1, [pc, #440]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	650b      	str	r3, [r1, #80]	; 0x50
 80097ca:	e001      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d042      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e4:	d02b      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80097e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ea:	d825      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097ec:	2bc0      	cmp	r3, #192	; 0xc0
 80097ee:	d028      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80097f0:	2bc0      	cmp	r3, #192	; 0xc0
 80097f2:	d821      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d016      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80097f8:	2b80      	cmp	r3, #128	; 0x80
 80097fa:	d81d      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009800:	2b40      	cmp	r3, #64	; 0x40
 8009802:	d007      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009804:	e018      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009806:	4b5e      	ldr	r3, [pc, #376]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	4a5d      	ldr	r2, [pc, #372]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800980c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009812:	e017      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3304      	adds	r3, #4
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f001 ff6e 	bl	800b6fc <RCCEx_PLL2_Config>
 8009820:	4603      	mov	r3, r0
 8009822:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009824:	e00e      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3324      	adds	r3, #36	; 0x24
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f002 f817 	bl	800b860 <RCCEx_PLL3_Config>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009836:	e005      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
      break;
 800983c:	e002      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800984a:	4b4d      	ldr	r3, [pc, #308]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800984c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	494a      	ldr	r1, [pc, #296]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009858:	4313      	orrs	r3, r2
 800985a:	650b      	str	r3, [r1, #80]	; 0x50
 800985c:	e001      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800986a:	2b00      	cmp	r3, #0
 800986c:	d049      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009878:	d030      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800987a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800987e:	d82a      	bhi.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009880:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009884:	d02c      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009886:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800988a:	d824      	bhi.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800988c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009890:	d018      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009896:	d81e      	bhi.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800989c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098a0:	d007      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80098a2:	e018      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a4:	4b36      	ldr	r3, [pc, #216]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	4a35      	ldr	r2, [pc, #212]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098b0:	e017      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3304      	adds	r3, #4
 80098b6:	2100      	movs	r1, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 ff1f 	bl	800b6fc <RCCEx_PLL2_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098c2:	e00e      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3324      	adds	r3, #36	; 0x24
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 ffc8 	bl	800b860 <RCCEx_PLL3_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098d4:	e005      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]
      break;
 80098da:	e002      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098dc:	bf00      	nop
 80098de:	e000      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10a      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098e8:	4b25      	ldr	r3, [pc, #148]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098f6:	4922      	ldr	r1, [pc, #136]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	658b      	str	r3, [r1, #88]	; 0x58
 80098fc:	e001      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800990a:	2b00      	cmp	r3, #0
 800990c:	d04b      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009918:	d030      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800991a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800991e:	d82a      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009920:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009924:	d02e      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009926:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800992a:	d824      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800992c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009930:	d018      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009936:	d81e      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800993c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009940:	d007      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009942:	e018      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	4a0d      	ldr	r2, [pc, #52]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800994a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009950:	e019      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3304      	adds	r3, #4
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fecf 	bl	800b6fc <RCCEx_PLL2_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009962:	e010      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	2100      	movs	r1, #0
 800996a:	4618      	mov	r0, r3
 800996c:	f001 ff78 	bl	800b860 <RCCEx_PLL3_Config>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009974:	e007      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	75fb      	strb	r3, [r7, #23]
      break;
 800997a:	e004      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800997c:	bf00      	nop
 800997e:	e002      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009980:	58024400 	.word	0x58024400
      break;
 8009984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800998c:	4b99      	ldr	r3, [pc, #612]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800998e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009990:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800999a:	4996      	ldr	r1, [pc, #600]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800999c:	4313      	orrs	r3, r2
 800999e:	658b      	str	r3, [r1, #88]	; 0x58
 80099a0:	e001      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d032      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b6:	2b30      	cmp	r3, #48	; 0x30
 80099b8:	d01c      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80099ba:	2b30      	cmp	r3, #48	; 0x30
 80099bc:	d817      	bhi.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d00c      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d813      	bhi.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d016      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80099ca:	2b10      	cmp	r3, #16
 80099cc:	d10f      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ce:	4b89      	ldr	r3, [pc, #548]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	4a88      	ldr	r2, [pc, #544]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099da:	e00e      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3304      	adds	r3, #4
 80099e0:	2102      	movs	r1, #2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f001 fe8a 	bl	800b6fc <RCCEx_PLL2_Config>
 80099e8:	4603      	mov	r3, r0
 80099ea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099ec:	e005      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
      break;
 80099f2:	e002      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099f4:	bf00      	nop
 80099f6:	e000      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d109      	bne.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a00:	4b7c      	ldr	r3, [pc, #496]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0c:	4979      	ldr	r1, [pc, #484]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a12:	e001      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
 8009a16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d047      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a2c:	d030      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a32:	d82a      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a38:	d02c      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009a3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a3e:	d824      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a44:	d018      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a4a:	d81e      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a54:	d007      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009a56:	e018      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a58:	4b66      	ldr	r3, [pc, #408]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	4a65      	ldr	r2, [pc, #404]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a64:	e017      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f001 fe45 	bl	800b6fc <RCCEx_PLL2_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a76:	e00e      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3324      	adds	r3, #36	; 0x24
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 feee 	bl	800b860 <RCCEx_PLL3_Config>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a88:	e005      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8e:	e002      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a90:	bf00      	nop
 8009a92:	e000      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d109      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a9c:	4b55      	ldr	r3, [pc, #340]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa8:	4952      	ldr	r1, [pc, #328]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	650b      	str	r3, [r1, #80]	; 0x50
 8009aae:	e001      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d049      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ac8:	d02e      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ace:	d828      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ad4:	d02a      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ada:	d822      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009adc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ae0:	d026      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009ae2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ae6:	d81c      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aec:	d010      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af2:	d816      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01d      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009afc:	d111      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3304      	adds	r3, #4
 8009b02:	2101      	movs	r1, #1
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fdf9 	bl	800b6fc <RCCEx_PLL2_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b0e:	e012      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3324      	adds	r3, #36	; 0x24
 8009b14:	2101      	movs	r1, #1
 8009b16:	4618      	mov	r0, r3
 8009b18:	f001 fea2 	bl	800b860 <RCCEx_PLL3_Config>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b20:	e009      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	75fb      	strb	r3, [r7, #23]
      break;
 8009b26:	e006      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b28:	bf00      	nop
 8009b2a:	e004      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b2c:	bf00      	nop
 8009b2e:	e002      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b30:	bf00      	nop
 8009b32:	e000      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b3c:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b48:	492a      	ldr	r1, [pc, #168]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8009b4e:	e001      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d04d      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b6a:	d02e      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b70:	d828      	bhi.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b76:	d02a      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7c:	d822      	bhi.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b82:	d026      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009b84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b88:	d81c      	bhi.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b8e:	d010      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b94:	d816      	bhi.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01d      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b9e:	d111      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f001 fda8 	bl	800b6fc <RCCEx_PLL2_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bb0:	e012      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3324      	adds	r3, #36	; 0x24
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 fe51 	bl	800b860 <RCCEx_PLL3_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bc2:	e009      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc8:	e006      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bca:	bf00      	nop
 8009bcc:	e004      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bce:	bf00      	nop
 8009bd0:	e002      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bd2:	bf00      	nop
 8009bd4:	e000      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10c      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bec:	4901      	ldr	r1, [pc, #4]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	658b      	str	r3, [r1, #88]	; 0x58
 8009bf2:	e003      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d02f      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c10:	d00e      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c16:	d814      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d015      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c20:	d10f      	bne.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c22:	4baf      	ldr	r3, [pc, #700]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	4aae      	ldr	r2, [pc, #696]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c2e:	e00c      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	2101      	movs	r1, #1
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fd60 	bl	800b6fc <RCCEx_PLL2_Config>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c40:	e003      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	75fb      	strb	r3, [r7, #23]
      break;
 8009c46:	e000      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d109      	bne.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c50:	4ba3      	ldr	r3, [pc, #652]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5c:	49a0      	ldr	r1, [pc, #640]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	650b      	str	r3, [r1, #80]	; 0x50
 8009c62:	e001      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d032      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d81b      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009c7c:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009cbb 	.word	0x08009cbb
 8009c88:	08009c95 	.word	0x08009c95
 8009c8c:	08009ca3 	.word	0x08009ca3
 8009c90:	08009cbb 	.word	0x08009cbb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c94:	4b92      	ldr	r3, [pc, #584]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	4a91      	ldr	r2, [pc, #580]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ca0:	e00c      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	2102      	movs	r1, #2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f001 fd27 	bl	800b6fc <RCCEx_PLL2_Config>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009cb2:	e003      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d109      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cc2:	4b87      	ldr	r3, [pc, #540]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc6:	f023 0203 	bic.w	r2, r3, #3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cce:	4984      	ldr	r1, [pc, #528]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cd4:	e001      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 8086 	beq.w	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ce8:	4b7e      	ldr	r3, [pc, #504]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a7d      	ldr	r2, [pc, #500]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cf4:	f7f8 fe60 	bl	80029b8 <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cfa:	e009      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cfc:	f7f8 fe5c 	bl	80029b8 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b64      	cmp	r3, #100	; 0x64
 8009d08:	d902      	bls.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	75fb      	strb	r3, [r7, #23]
        break;
 8009d0e:	e005      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d10:	4b74      	ldr	r3, [pc, #464]	; (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0ef      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d166      	bne.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d22:	4b6f      	ldr	r3, [pc, #444]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d2c:	4053      	eors	r3, r2
 8009d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d013      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d36:	4b6a      	ldr	r3, [pc, #424]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d40:	4b67      	ldr	r3, [pc, #412]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	4a66      	ldr	r2, [pc, #408]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d4c:	4b64      	ldr	r3, [pc, #400]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d50:	4a63      	ldr	r2, [pc, #396]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d58:	4a61      	ldr	r2, [pc, #388]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d68:	d115      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d6a:	f7f8 fe25 	bl	80029b8 <HAL_GetTick>
 8009d6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d70:	e00b      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d72:	f7f8 fe21 	bl	80029b8 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d902      	bls.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	75fb      	strb	r3, [r7, #23]
            break;
 8009d88:	e005      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d8a:	4b55      	ldr	r3, [pc, #340]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0ed      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d126      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009daa:	d10d      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009dac:	4b4c      	ldr	r3, [pc, #304]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dba:	0919      	lsrs	r1, r3, #4
 8009dbc:	4b4a      	ldr	r3, [pc, #296]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009dbe:	400b      	ands	r3, r1
 8009dc0:	4947      	ldr	r1, [pc, #284]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	610b      	str	r3, [r1, #16]
 8009dc6:	e005      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009dc8:	4b45      	ldr	r3, [pc, #276]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	4a44      	ldr	r2, [pc, #272]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dd2:	6113      	str	r3, [r2, #16]
 8009dd4:	4b42      	ldr	r3, [pc, #264]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009de2:	493f      	ldr	r1, [pc, #252]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	670b      	str	r3, [r1, #112]	; 0x70
 8009de8:	e004      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	75bb      	strb	r3, [r7, #22]
 8009dee:	e001      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8085 	beq.w	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e06:	2b28      	cmp	r3, #40	; 0x28
 8009e08:	d866      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009e0a:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009eed 	.word	0x08009eed
 8009e14:	08009ed9 	.word	0x08009ed9
 8009e18:	08009ed9 	.word	0x08009ed9
 8009e1c:	08009ed9 	.word	0x08009ed9
 8009e20:	08009ed9 	.word	0x08009ed9
 8009e24:	08009ed9 	.word	0x08009ed9
 8009e28:	08009ed9 	.word	0x08009ed9
 8009e2c:	08009ed9 	.word	0x08009ed9
 8009e30:	08009eb5 	.word	0x08009eb5
 8009e34:	08009ed9 	.word	0x08009ed9
 8009e38:	08009ed9 	.word	0x08009ed9
 8009e3c:	08009ed9 	.word	0x08009ed9
 8009e40:	08009ed9 	.word	0x08009ed9
 8009e44:	08009ed9 	.word	0x08009ed9
 8009e48:	08009ed9 	.word	0x08009ed9
 8009e4c:	08009ed9 	.word	0x08009ed9
 8009e50:	08009ec7 	.word	0x08009ec7
 8009e54:	08009ed9 	.word	0x08009ed9
 8009e58:	08009ed9 	.word	0x08009ed9
 8009e5c:	08009ed9 	.word	0x08009ed9
 8009e60:	08009ed9 	.word	0x08009ed9
 8009e64:	08009ed9 	.word	0x08009ed9
 8009e68:	08009ed9 	.word	0x08009ed9
 8009e6c:	08009ed9 	.word	0x08009ed9
 8009e70:	08009eed 	.word	0x08009eed
 8009e74:	08009ed9 	.word	0x08009ed9
 8009e78:	08009ed9 	.word	0x08009ed9
 8009e7c:	08009ed9 	.word	0x08009ed9
 8009e80:	08009ed9 	.word	0x08009ed9
 8009e84:	08009ed9 	.word	0x08009ed9
 8009e88:	08009ed9 	.word	0x08009ed9
 8009e8c:	08009ed9 	.word	0x08009ed9
 8009e90:	08009eed 	.word	0x08009eed
 8009e94:	08009ed9 	.word	0x08009ed9
 8009e98:	08009ed9 	.word	0x08009ed9
 8009e9c:	08009ed9 	.word	0x08009ed9
 8009ea0:	08009ed9 	.word	0x08009ed9
 8009ea4:	08009ed9 	.word	0x08009ed9
 8009ea8:	08009ed9 	.word	0x08009ed9
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	08009eed 	.word	0x08009eed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	2101      	movs	r1, #1
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fc1e 	bl	800b6fc <RCCEx_PLL2_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ec4:	e013      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3324      	adds	r3, #36	; 0x24
 8009eca:	2101      	movs	r1, #1
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 fcc7 	bl	800b860 <RCCEx_PLL3_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ed6:	e00a      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	75fb      	strb	r3, [r7, #23]
      break;
 8009edc:	e007      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009ede:	bf00      	nop
 8009ee0:	58024400 	.word	0x58024400
 8009ee4:	58024800 	.word	0x58024800
 8009ee8:	00ffffcf 	.word	0x00ffffcf
      break;
 8009eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d109      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ef4:	4b96      	ldr	r3, [pc, #600]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f00:	4993      	ldr	r1, [pc, #588]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	654b      	str	r3, [r1, #84]	; 0x54
 8009f06:	e001      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d038      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f1c:	2b05      	cmp	r3, #5
 8009f1e:	d821      	bhi.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f6b 	.word	0x08009f6b
 8009f2c:	08009f41 	.word	0x08009f41
 8009f30:	08009f53 	.word	0x08009f53
 8009f34:	08009f6b 	.word	0x08009f6b
 8009f38:	08009f6b 	.word	0x08009f6b
 8009f3c:	08009f6b 	.word	0x08009f6b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3304      	adds	r3, #4
 8009f44:	2101      	movs	r1, #1
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fbd8 	bl	800b6fc <RCCEx_PLL2_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f50:	e00c      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3324      	adds	r3, #36	; 0x24
 8009f56:	2101      	movs	r1, #1
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fc81 	bl	800b860 <RCCEx_PLL3_Config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f62:	e003      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	75fb      	strb	r3, [r7, #23]
      break;
 8009f68:	e000      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f72:	4b77      	ldr	r3, [pc, #476]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f76:	f023 0207 	bic.w	r2, r3, #7
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f7e:	4974      	ldr	r1, [pc, #464]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	654b      	str	r3, [r1, #84]	; 0x54
 8009f84:	e001      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d03a      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f9c:	2b05      	cmp	r3, #5
 8009f9e:	d821      	bhi.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009fa0:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	08009feb 	.word	0x08009feb
 8009fac:	08009fc1 	.word	0x08009fc1
 8009fb0:	08009fd3 	.word	0x08009fd3
 8009fb4:	08009feb 	.word	0x08009feb
 8009fb8:	08009feb 	.word	0x08009feb
 8009fbc:	08009feb 	.word	0x08009feb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 fb98 	bl	800b6fc <RCCEx_PLL2_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fd0:	e00c      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3324      	adds	r3, #36	; 0x24
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f001 fc41 	bl	800b860 <RCCEx_PLL3_Config>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fe2:	e003      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe8:	e000      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ff2:	4b57      	ldr	r3, [pc, #348]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff6:	f023 0207 	bic.w	r2, r3, #7
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a000:	4953      	ldr	r1, [pc, #332]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a002:	4313      	orrs	r3, r2
 800a004:	658b      	str	r3, [r1, #88]	; 0x58
 800a006:	e001      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d04b      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a01e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a022:	d02e      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a028:	d828      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a02a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02e:	d02a      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a034:	d822      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a03a:	d026      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a03c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a040:	d81c      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a046:	d010      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a04c:	d816      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01d      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a056:	d111      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3304      	adds	r3, #4
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 fb4c 	bl	800b6fc <RCCEx_PLL2_Config>
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a068:	e012      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3324      	adds	r3, #36	; 0x24
 800a06e:	2102      	movs	r1, #2
 800a070:	4618      	mov	r0, r3
 800a072:	f001 fbf5 	bl	800b860 <RCCEx_PLL3_Config>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a07a:	e009      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	75fb      	strb	r3, [r7, #23]
      break;
 800a080:	e006      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a082:	bf00      	nop
 800a084:	e004      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a086:	bf00      	nop
 800a088:	e002      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a08a:	bf00      	nop
 800a08c:	e000      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a08e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10a      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a096:	4b2e      	ldr	r3, [pc, #184]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a4:	492a      	ldr	r1, [pc, #168]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	654b      	str	r3, [r1, #84]	; 0x54
 800a0aa:	e001      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d04d      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0c6:	d02e      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a0c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0cc:	d828      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d2:	d02a      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d8:	d822      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0de:	d026      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a0e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0e4:	d81c      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ea:	d010      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a0ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0f0:	d816      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01d      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a0f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0fa:	d111      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fafa 	bl	800b6fc <RCCEx_PLL2_Config>
 800a108:	4603      	mov	r3, r0
 800a10a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a10c:	e012      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3324      	adds	r3, #36	; 0x24
 800a112:	2102      	movs	r1, #2
 800a114:	4618      	mov	r0, r3
 800a116:	f001 fba3 	bl	800b860 <RCCEx_PLL3_Config>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a11e:	e009      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	75fb      	strb	r3, [r7, #23]
      break;
 800a124:	e006      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a126:	bf00      	nop
 800a128:	e004      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10c      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a148:	4901      	ldr	r1, [pc, #4]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	658b      	str	r3, [r1, #88]	; 0x58
 800a14e:	e003      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a160:	2b00      	cmp	r3, #0
 800a162:	d04b      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a16a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a16e:	d02e      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a170:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a174:	d828      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17a:	d02a      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a180:	d822      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a182:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a186:	d026      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a188:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a18c:	d81c      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a18e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a192:	d010      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a198:	d816      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01d      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a2:	d111      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f001 faa6 	bl	800b6fc <RCCEx_PLL2_Config>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1b4:	e012      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3324      	adds	r3, #36	; 0x24
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 fb4f 	bl	800b860 <RCCEx_PLL3_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1c6:	e009      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a1cc:	e006      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1ce:	bf00      	nop
 800a1d0:	e004      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1d2:	bf00      	nop
 800a1d4:	e002      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1d6:	bf00      	nop
 800a1d8:	e000      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10a      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1e2:	4b9d      	ldr	r3, [pc, #628]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1f0:	4999      	ldr	r1, [pc, #612]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	658b      	str	r3, [r1, #88]	; 0x58
 800a1f6:	e001      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f8:	7dfb      	ldrb	r3, [r7, #23]
 800a1fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0308 	and.w	r3, r3, #8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01a      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a212:	d10a      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3324      	adds	r3, #36	; 0x24
 800a218:	2102      	movs	r1, #2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fb20 	bl	800b860 <RCCEx_PLL3_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a22a:	4b8b      	ldr	r3, [pc, #556]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a238:	4987      	ldr	r1, [pc, #540]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01a      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a254:	d10a      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3324      	adds	r3, #36	; 0x24
 800a25a:	2102      	movs	r1, #2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 faff 	bl	800b860 <RCCEx_PLL3_Config>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a26c:	4b7a      	ldr	r3, [pc, #488]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a27a:	4977      	ldr	r1, [pc, #476]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d034      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a296:	d01d      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a29c:	d817      	bhi.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a6:	d009      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a2a8:	e011      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 fa23 	bl	800b6fc <RCCEx_PLL2_Config>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2ba:	e00c      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3324      	adds	r3, #36	; 0x24
 800a2c0:	2102      	movs	r1, #2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 facc 	bl	800b860 <RCCEx_PLL3_Config>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2cc:	e003      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2d2:	e000      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a2d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10a      	bne.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2dc:	4b5e      	ldr	r3, [pc, #376]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2ea:	495b      	ldr	r1, [pc, #364]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	658b      	str	r3, [r1, #88]	; 0x58
 800a2f0:	e001      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d033      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a30c:	d01c      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a30e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a312:	d816      	bhi.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a318:	d003      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a31a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a31e:	d007      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a320:	e00f      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a322:	4b4d      	ldr	r3, [pc, #308]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	4a4c      	ldr	r2, [pc, #304]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a32c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a32e:	e00c      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3324      	adds	r3, #36	; 0x24
 800a334:	2101      	movs	r1, #1
 800a336:	4618      	mov	r0, r3
 800a338:	f001 fa92 	bl	800b860 <RCCEx_PLL3_Config>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a340:	e003      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	75fb      	strb	r3, [r7, #23]
      break;
 800a346:	e000      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a350:	4b41      	ldr	r3, [pc, #260]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35e:	493e      	ldr	r1, [pc, #248]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a360:	4313      	orrs	r3, r2
 800a362:	654b      	str	r3, [r1, #84]	; 0x54
 800a364:	e001      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d029      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a382:	d007      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a384:	e00f      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a386:	4b34      	ldr	r3, [pc, #208]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	4a33      	ldr	r2, [pc, #204]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a38c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a392:	e00b      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	2102      	movs	r1, #2
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 f9ae 	bl	800b6fc <RCCEx_PLL2_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3a4:	e002      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3b2:	4b29      	ldr	r3, [pc, #164]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3be:	4926      	ldr	r1, [pc, #152]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3c4:	e001      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00a      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3324      	adds	r3, #36	; 0x24
 800a3da:	2102      	movs	r1, #2
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f001 fa3f 	bl	800b860 <RCCEx_PLL3_Config>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d033      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a400:	d017      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a406:	d811      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40c:	d013      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a412:	d80b      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d010      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41c:	d106      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a41e:	4b0e      	ldr	r3, [pc, #56]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	4a0d      	ldr	r2, [pc, #52]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a42a:	e007      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
      break;
 800a430:	e004      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a432:	bf00      	nop
 800a434:	e002      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a436:	bf00      	nop
 800a438:	e000      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a43a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10c      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a44e:	4902      	ldr	r1, [pc, #8]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a450:	4313      	orrs	r3, r2
 800a452:	654b      	str	r3, [r1, #84]	; 0x54
 800a454:	e004      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a456:	bf00      	nop
 800a458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d008      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a46c:	4b31      	ldr	r3, [pc, #196]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a470:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a478:	492e      	ldr	r1, [pc, #184]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a48a:	4b2a      	ldr	r3, [pc, #168]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a498:	4926      	ldr	r1, [pc, #152]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4aa:	4b22      	ldr	r3, [pc, #136]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4b6:	491f      	ldr	r1, [pc, #124]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00d      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4c8:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	4a19      	ldr	r2, [pc, #100]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4d2:	6113      	str	r3, [r2, #16]
 800a4d4:	4b17      	ldr	r3, [pc, #92]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4d6:	691a      	ldr	r2, [r3, #16]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4de:	4915      	ldr	r1, [pc, #84]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	da08      	bge.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4ec:	4b11      	ldr	r3, [pc, #68]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f8:	490e      	ldr	r1, [pc, #56]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a50a:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	4906      	ldr	r1, [pc, #24]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a51e:	7dbb      	ldrb	r3, [r7, #22]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	e000      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	58024400 	.word	0x58024400

0800a538 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b090      	sub	sp, #64	; 0x40
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a546:	f040 8095 	bne.w	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a54a:	4b97      	ldr	r3, [pc, #604]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	2b04      	cmp	r3, #4
 800a558:	f200 8088 	bhi.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a55c:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a579 	.word	0x0800a579
 800a568:	0800a5a1 	.word	0x0800a5a1
 800a56c:	0800a5c9 	.word	0x0800a5c9
 800a570:	0800a665 	.word	0x0800a665
 800a574:	0800a5f1 	.word	0x0800a5f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a578:	4b8b      	ldr	r3, [pc, #556]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a584:	d108      	bne.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 ff64 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a594:	f000 bc94 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a59c:	f000 bc90 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5a0:	4b81      	ldr	r3, [pc, #516]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5ac:	d108      	bne.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ae:	f107 0318 	add.w	r3, r7, #24
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fca8 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5bc:	f000 bc80 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5c4:	f000 bc7c 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5c8:	4b77      	ldr	r3, [pc, #476]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d4:	d108      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d6:	f107 030c 	add.w	r3, r7, #12
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fde8 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5e4:	f000 bc6c 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ec:	f000 bc68 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5f0:	4b6d      	ldr	r3, [pc, #436]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5fa:	4b6b      	ldr	r3, [pc, #428]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 0304 	and.w	r3, r3, #4
 800a602:	2b04      	cmp	r3, #4
 800a604:	d10c      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d109      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a60c:	4b66      	ldr	r3, [pc, #408]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	08db      	lsrs	r3, r3, #3
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	4a65      	ldr	r2, [pc, #404]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a61e:	e01f      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a620:	4b61      	ldr	r3, [pc, #388]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a62c:	d106      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a634:	d102      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a636:	4b5e      	ldr	r3, [pc, #376]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63a:	e011      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a63c:	4b5a      	ldr	r3, [pc, #360]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a648:	d106      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a650:	d102      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a652:	4b58      	ldr	r3, [pc, #352]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a656:	e003      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a65c:	f000 bc30 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a660:	f000 bc2e 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a664:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a668:	f000 bc2a 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a670:	f000 bc26 	b.w	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a67a:	f040 809f 	bne.w	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a67e:	4b4a      	ldr	r3, [pc, #296]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a682:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a686:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68e:	d04d      	beq.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a696:	f200 8084 	bhi.w	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	2bc0      	cmp	r3, #192	; 0xc0
 800a69e:	d07d      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	2bc0      	cmp	r3, #192	; 0xc0
 800a6a4:	d87d      	bhi.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	2b80      	cmp	r3, #128	; 0x80
 800a6aa:	d02d      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	2b80      	cmp	r3, #128	; 0x80
 800a6b0:	d877      	bhi.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	2b40      	cmp	r3, #64	; 0x40
 800a6bc:	d012      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6be:	e070      	b.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6c0:	4b39      	ldr	r3, [pc, #228]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6cc:	d107      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fec0 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6dc:	e3f0      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e2:	e3ed      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6e4:	4b30      	ldr	r3, [pc, #192]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6f0:	d107      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f2:	f107 0318 	add.w	r3, r7, #24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fc06 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a700:	e3de      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a706:	e3db      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a708:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a714:	d107      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fd48 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a724:	e3cc      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a72a:	e3c9      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a72c:	4b1e      	ldr	r3, [pc, #120]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a72e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a734:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a736:	4b1c      	ldr	r3, [pc, #112]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0304 	and.w	r3, r3, #4
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d10c      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	2b00      	cmp	r3, #0
 800a746:	d109      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a748:	4b17      	ldr	r3, [pc, #92]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	08db      	lsrs	r3, r3, #3
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	4a16      	ldr	r2, [pc, #88]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a754:	fa22 f303 	lsr.w	r3, r2, r3
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a75a:	e01e      	b.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a75c:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a768:	d106      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a770:	d102      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a772:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a776:	e010      	b.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a778:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a784:	d106      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a78c:	d102      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a78e:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a792:	e002      	b.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a798:	e392      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a79a:	e391      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7a0:	e38e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7a6:	e38b      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7a8:	58024400 	.word	0x58024400
 800a7ac:	03d09000 	.word	0x03d09000
 800a7b0:	003d0900 	.word	0x003d0900
 800a7b4:	017d7840 	.word	0x017d7840
 800a7b8:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c2:	f040 809c 	bne.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7c6:	4b9d      	ldr	r3, [pc, #628]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a7ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7d6:	d054      	beq.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7de:	f200 808b 	bhi.w	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7e8:	f000 8083 	beq.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7f2:	f200 8081 	bhi.w	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7fc:	d02f      	beq.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a804:	d878      	bhi.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a812:	d012      	beq.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a814:	e070      	b.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a816:	4b89      	ldr	r3, [pc, #548]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a81e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a822:	d107      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fe15 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a832:	e345      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a838:	e342      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a83a:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a846:	d107      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a848:	f107 0318 	add.w	r3, r7, #24
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fb5b 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a856:	e333      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a85c:	e330      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a85e:	4b77      	ldr	r3, [pc, #476]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a86a:	d107      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fc9d 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a87a:	e321      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a880:	e31e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a882:	4b6e      	ldr	r3, [pc, #440]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a88c:	4b6b      	ldr	r3, [pc, #428]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b04      	cmp	r3, #4
 800a896:	d10c      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d109      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a89e:	4b67      	ldr	r3, [pc, #412]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	08db      	lsrs	r3, r3, #3
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	4a65      	ldr	r2, [pc, #404]	; (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b0:	e01e      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8b2:	4b62      	ldr	r3, [pc, #392]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8be:	d106      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8c8:	4b5e      	ldr	r3, [pc, #376]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8cc:	e010      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8ce:	4b5b      	ldr	r3, [pc, #364]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8da:	d106      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e2:	d102      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8e4:	4b58      	ldr	r3, [pc, #352]	; (800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e8:	e002      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8ee:	e2e7      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8f0:	e2e6      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8f2:	4b56      	ldr	r3, [pc, #344]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f6:	e2e3      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8fc:	e2e0      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a904:	f040 80a7 	bne.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a908:	4b4c      	ldr	r3, [pc, #304]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a910:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a918:	d055      	beq.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a920:	f200 8096 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a92a:	f000 8084 	beq.w	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a934:	f200 808c 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a93e:	d030      	beq.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a946:	f200 8083 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a956:	d012      	beq.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a958:	e07a      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a95a:	4b38      	ldr	r3, [pc, #224]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a966:	d107      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 fd73 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a976:	e2a3      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a97c:	e2a0      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a97e:	4b2f      	ldr	r3, [pc, #188]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a98a:	d107      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98c:	f107 0318 	add.w	r3, r7, #24
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fab9 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a99a:	e291      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a0:	e28e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9a2:	4b26      	ldr	r3, [pc, #152]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b0:	f107 030c 	add.w	r3, r7, #12
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fbfb 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9be:	e27f      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c4:	e27c      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9c6:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9d0:	4b1a      	ldr	r3, [pc, #104]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d10c      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d109      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9e2:	4b16      	ldr	r3, [pc, #88]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	08db      	lsrs	r3, r3, #3
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f4:	e01e      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9f6:	4b11      	ldr	r3, [pc, #68]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa02:	d106      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa0a:	d102      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa0c:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa10:	e010      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa12:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa1e:	d106      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa26:	d102      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2c:	e002      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa32:	e245      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa34:	e244      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa36:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa3a:	e241      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa3c:	58024400 	.word	0x58024400
 800aa40:	03d09000 	.word	0x03d09000
 800aa44:	003d0900 	.word	0x003d0900
 800aa48:	017d7840 	.word	0x017d7840
 800aa4c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa54:	e234      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5c:	f040 809c 	bne.w	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aa60:	4b9b      	ldr	r3, [pc, #620]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa70:	d054      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa78:	f200 808b 	bhi.w	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa82:	f000 8083 	beq.w	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa8c:	f200 8081 	bhi.w	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa96:	d02f      	beq.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa9e:	d878      	bhi.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaac:	d012      	beq.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aaae:	e070      	b.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab0:	4b87      	ldr	r3, [pc, #540]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aabc:	d107      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aabe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fcc8 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aacc:	e1f8      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad2:	e1f5      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aad4:	4b7e      	ldr	r3, [pc, #504]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aadc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae0:	d107      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aae2:	f107 0318 	add.w	r3, r7, #24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fa0e 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaf0:	e1e6      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf6:	e1e3      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaf8:	4b75      	ldr	r3, [pc, #468]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab04:	d107      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab06:	f107 030c 	add.w	r3, r7, #12
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fb50 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab14:	e1d4      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1a:	e1d1      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab1c:	4b6c      	ldr	r3, [pc, #432]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab24:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab26:	4b6a      	ldr	r3, [pc, #424]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d10c      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d109      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab38:	4b65      	ldr	r3, [pc, #404]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	08db      	lsrs	r3, r3, #3
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	4a64      	ldr	r2, [pc, #400]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab44:	fa22 f303 	lsr.w	r3, r2, r3
 800ab48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab4a:	e01e      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab4c:	4b60      	ldr	r3, [pc, #384]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab58:	d106      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ab5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab60:	d102      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab62:	4b5d      	ldr	r3, [pc, #372]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab66:	e010      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab68:	4b59      	ldr	r3, [pc, #356]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab74:	d106      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab7c:	d102      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab7e:	4b57      	ldr	r3, [pc, #348]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ab80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab82:	e002      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab88:	e19a      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab8a:	e199      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab8c:	4b54      	ldr	r3, [pc, #336]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab90:	e196      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab96:	e193      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab9e:	d173      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aba0:	4b4b      	ldr	r3, [pc, #300]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aba8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb0:	d02f      	beq.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800abb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb8:	d863      	bhi.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc6:	d012      	beq.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800abc8:	e05b      	b.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abca:	4b41      	ldr	r3, [pc, #260]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abd6:	d107      	bne.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abd8:	f107 0318 	add.w	r3, r7, #24
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 f993 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abe6:	e16b      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abec:	e168      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abee:	4b38      	ldr	r3, [pc, #224]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abfa:	d107      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abfc:	f107 030c 	add.w	r3, r7, #12
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fad5 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac0a:	e159      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac10:	e156      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac12:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac1c:	4b2c      	ldr	r3, [pc, #176]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d10c      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ac28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac2e:	4b28      	ldr	r3, [pc, #160]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	08db      	lsrs	r3, r3, #3
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	4a26      	ldr	r2, [pc, #152]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ac3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac40:	e01e      	b.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac42:	4b23      	ldr	r3, [pc, #140]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4e:	d106      	bne.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ac50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac56:	d102      	bne.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac58:	4b1f      	ldr	r3, [pc, #124]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac5c:	e010      	b.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac5e:	4b1c      	ldr	r3, [pc, #112]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac6a:	d106      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac72:	d102      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac74:	4b19      	ldr	r3, [pc, #100]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ac76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac78:	e002      	b.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac7e:	e11f      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac80:	e11e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac86:	e11b      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8e:	d13e      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ac90:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d004      	beq.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca6:	d01d      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aca8:	e02e      	b.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acb6:	d107      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fbcb 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acc6:	e0fb      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800accc:	e0f8      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acce:	bf00      	nop
 800acd0:	58024400 	.word	0x58024400
 800acd4:	03d09000 	.word	0x03d09000
 800acd8:	003d0900 	.word	0x003d0900
 800acdc:	017d7840 	.word	0x017d7840
 800ace0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ace4:	4b79      	ldr	r3, [pc, #484]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acf0:	d107      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf2:	f107 0318 	add.w	r3, r7, #24
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f906 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad00:	e0de      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad06:	e0db      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad0c:	e0d8      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad14:	f040 8085 	bne.w	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ad18:	4b6c      	ldr	r3, [pc, #432]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad28:	d06b      	beq.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad30:	d874      	bhi.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad38:	d056      	beq.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad40:	d86c      	bhi.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad48:	d03b      	beq.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad50:	d864      	bhi.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad58:	d021      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad60:	d85c      	bhi.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad6e:	d004      	beq.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ad70:	e054      	b.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad72:	f000 f8b3 	bl	800aedc <HAL_RCCEx_GetD3PCLK1Freq>
 800ad76:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ad78:	e0a2      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad7a:	4b54      	ldr	r3, [pc, #336]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad86:	d107      	bne.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad88:	f107 0318 	add.w	r3, r7, #24
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 f8bb 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad96:	e093      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad9c:	e090      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad9e:	4b4b      	ldr	r3, [pc, #300]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ada6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adaa:	d107      	bne.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f9fd 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adba:	e081      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc0:	e07e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adc2:	4b42      	ldr	r3, [pc, #264]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0304 	and.w	r3, r3, #4
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d109      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adce:	4b3f      	ldr	r3, [pc, #252]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	08db      	lsrs	r3, r3, #3
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	4a3d      	ldr	r2, [pc, #244]	; (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800adda:	fa22 f303 	lsr.w	r3, r2, r3
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ade0:	e06e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ade6:	e06b      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ade8:	4b38      	ldr	r3, [pc, #224]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf4:	d102      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800adf6:	4b37      	ldr	r3, [pc, #220]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adfa:	e061      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae00:	e05e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae02:	4b32      	ldr	r3, [pc, #200]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae0e:	d102      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ae10:	4b31      	ldr	r3, [pc, #196]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae14:	e054      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae1a:	e051      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae20:	e04e      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae28:	d148      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae2a:	4b28      	ldr	r3, [pc, #160]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae32:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3a:	d02a      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae42:	d838      	bhi.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d004      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae50:	d00d      	beq.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ae52:	e030      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae54:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae60:	d102      	bne.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae66:	e02b      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae6c:	e028      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae6e:	4b17      	ldr	r3, [pc, #92]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae7a:	d107      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 fae9 	bl	800b458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae8a:	e019      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae90:	e016      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae92:	4b0e      	ldr	r3, [pc, #56]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae9e:	d107      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aea0:	f107 0318 	add.w	r3, r7, #24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f82f 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aeae:	e007      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb4:	e004      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeba:	e001      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3740      	adds	r7, #64	; 0x40
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	003d0900 	.word	0x003d0900
 800aed8:	017d7840 	.word	0x017d7840

0800aedc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aee0:	f7fe fb88 	bl	80095f4 <HAL_RCC_GetHCLKFreq>
 800aee4:	4602      	mov	r2, r0
 800aee6:	4b06      	ldr	r3, [pc, #24]	; (800af00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	091b      	lsrs	r3, r3, #4
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	4904      	ldr	r1, [pc, #16]	; (800af04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aef2:	5ccb      	ldrb	r3, [r1, r3]
 800aef4:	f003 031f 	and.w	r3, r3, #31
 800aef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	58024400 	.word	0x58024400
 800af04:	080106e0 	.word	0x080106e0

0800af08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800af08:	b480      	push	{r7}
 800af0a:	b089      	sub	sp, #36	; 0x24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af10:	4ba1      	ldr	r3, [pc, #644]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	f003 0303 	and.w	r3, r3, #3
 800af18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af1a:	4b9f      	ldr	r3, [pc, #636]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	0b1b      	lsrs	r3, r3, #12
 800af20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af26:	4b9c      	ldr	r3, [pc, #624]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	091b      	lsrs	r3, r3, #4
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af32:	4b99      	ldr	r3, [pc, #612]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af36:	08db      	lsrs	r3, r3, #3
 800af38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	fb02 f303 	mul.w	r3, r2, r3
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8111 	beq.w	800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	f000 8083 	beq.w	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b02      	cmp	r3, #2
 800af62:	f200 80a1 	bhi.w	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d056      	beq.n	800b020 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af72:	e099      	b.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af74:	4b88      	ldr	r3, [pc, #544]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0320 	and.w	r3, r3, #32
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d02d      	beq.n	800afdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af80:	4b85      	ldr	r3, [pc, #532]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	08db      	lsrs	r3, r3, #3
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	4a84      	ldr	r2, [pc, #528]	; (800b19c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af8c:	fa22 f303 	lsr.w	r3, r2, r3
 800af90:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afaa:	4b7b      	ldr	r3, [pc, #492]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afba:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afda:	e087      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afee:	4b6a      	ldr	r3, [pc, #424]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b002:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b01e:	e065      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b59      	ldr	r3, [pc, #356]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b062:	e043      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b48      	ldr	r3, [pc, #288]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0a6:	e021      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b37      	ldr	r3, [pc, #220]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b0ec:	4b2a      	ldr	r3, [pc, #168]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	0a5b      	lsrs	r3, r3, #9
 800b0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b102:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b106:	edd7 6a07 	vldr	s13, [r7, #28]
 800b10a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b112:	ee17 2a90 	vmov	r2, s15
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b11a:	4b1f      	ldr	r3, [pc, #124]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	0c1b      	lsrs	r3, r3, #16
 800b120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b124:	ee07 3a90 	vmov	s15, r3
 800b128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b130:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b134:	edd7 6a07 	vldr	s13, [r7, #28]
 800b138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b140:	ee17 2a90 	vmov	r2, s15
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b148:	4b13      	ldr	r3, [pc, #76]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14c:	0e1b      	lsrs	r3, r3, #24
 800b14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b15e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b162:	edd7 6a07 	vldr	s13, [r7, #28]
 800b166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16e:	ee17 2a90 	vmov	r2, s15
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b176:	e008      	b.n	800b18a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	609a      	str	r2, [r3, #8]
}
 800b18a:	bf00      	nop
 800b18c:	3724      	adds	r7, #36	; 0x24
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	58024400 	.word	0x58024400
 800b19c:	03d09000 	.word	0x03d09000
 800b1a0:	46000000 	.word	0x46000000
 800b1a4:	4c742400 	.word	0x4c742400
 800b1a8:	4a742400 	.word	0x4a742400
 800b1ac:	4bbebc20 	.word	0x4bbebc20

0800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b089      	sub	sp, #36	; 0x24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1b8:	4ba1      	ldr	r3, [pc, #644]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1c2:	4b9f      	ldr	r3, [pc, #636]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	0d1b      	lsrs	r3, r3, #20
 800b1c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1ce:	4b9c      	ldr	r3, [pc, #624]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1da:	4b99      	ldr	r3, [pc, #612]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1de:	08db      	lsrs	r3, r3, #3
 800b1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ea:	ee07 3a90 	vmov	s15, r3
 800b1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 8111 	beq.w	800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b02      	cmp	r3, #2
 800b202:	f000 8083 	beq.w	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	f200 80a1 	bhi.w	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d056      	beq.n	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b21a:	e099      	b.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b21c:	4b88      	ldr	r3, [pc, #544]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0320 	and.w	r3, r3, #32
 800b224:	2b00      	cmp	r3, #0
 800b226:	d02d      	beq.n	800b284 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b228:	4b85      	ldr	r3, [pc, #532]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	08db      	lsrs	r3, r3, #3
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	4a84      	ldr	r2, [pc, #528]	; (800b444 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b252:	4b7b      	ldr	r3, [pc, #492]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25a:	ee07 3a90 	vmov	s15, r3
 800b25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b262:	ed97 6a03 	vldr	s12, [r7, #12]
 800b266:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b282:	e087      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b44c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b296:	4b6a      	ldr	r3, [pc, #424]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2c6:	e065      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2da:	4b59      	ldr	r3, [pc, #356]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b30a:	e043      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b48      	ldr	r3, [pc, #288]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b34e:	e021      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b37      	ldr	r3, [pc, #220]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a03 	vldr	s12, [r7, #12]
 800b376:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b392:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b394:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	0a5b      	lsrs	r3, r3, #9
 800b39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ba:	ee17 2a90 	vmov	r2, s15
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3c2:	4b1f      	ldr	r3, [pc, #124]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	0c1b      	lsrs	r3, r3, #16
 800b3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e8:	ee17 2a90 	vmov	r2, s15
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b3f0:	4b13      	ldr	r3, [pc, #76]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f4:	0e1b      	lsrs	r3, r3, #24
 800b3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b40a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b416:	ee17 2a90 	vmov	r2, s15
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b41e:	e008      	b.n	800b432 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	609a      	str	r2, [r3, #8]
}
 800b432:	bf00      	nop
 800b434:	3724      	adds	r7, #36	; 0x24
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	58024400 	.word	0x58024400
 800b444:	03d09000 	.word	0x03d09000
 800b448:	46000000 	.word	0x46000000
 800b44c:	4c742400 	.word	0x4c742400
 800b450:	4a742400 	.word	0x4a742400
 800b454:	4bbebc20 	.word	0x4bbebc20

0800b458 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b458:	b480      	push	{r7}
 800b45a:	b089      	sub	sp, #36	; 0x24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b460:	4ba0      	ldr	r3, [pc, #640]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b464:	f003 0303 	and.w	r3, r3, #3
 800b468:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b46a:	4b9e      	ldr	r3, [pc, #632]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46e:	091b      	lsrs	r3, r3, #4
 800b470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b474:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b476:	4b9b      	ldr	r3, [pc, #620]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b480:	4b98      	ldr	r3, [pc, #608]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b484:	08db      	lsrs	r3, r3, #3
 800b486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	fb02 f303 	mul.w	r3, r2, r3
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b498:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 8111 	beq.w	800b6c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	f000 8083 	beq.w	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	f200 80a1 	bhi.w	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d056      	beq.n	800b56e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4c0:	e099      	b.n	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4c2:	4b88      	ldr	r3, [pc, #544]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0320 	and.w	r3, r3, #32
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d02d      	beq.n	800b52a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4ce:	4b85      	ldr	r3, [pc, #532]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	08db      	lsrs	r3, r3, #3
 800b4d4:	f003 0303 	and.w	r3, r3, #3
 800b4d8:	4a83      	ldr	r2, [pc, #524]	; (800b6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4da:	fa22 f303 	lsr.w	r3, r2, r3
 800b4de:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f8:	4b7a      	ldr	r3, [pc, #488]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b500:	ee07 3a90 	vmov	s15, r3
 800b504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b508:	ed97 6a03 	vldr	s12, [r7, #12]
 800b50c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b524:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b528:	e087      	b.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	ee07 3a90 	vmov	s15, r3
 800b530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b534:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53c:	4b69      	ldr	r3, [pc, #420]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b550:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b56c:	e065      	b.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	ee07 3a90 	vmov	s15, r3
 800b574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b578:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b580:	4b58      	ldr	r3, [pc, #352]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b590:	ed97 6a03 	vldr	s12, [r7, #12]
 800b594:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5b0:	e043      	b.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c4:	4b47      	ldr	r3, [pc, #284]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5f4:	e021      	b.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b600:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b608:	4b36      	ldr	r3, [pc, #216]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b618:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b638:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b63a:	4b2a      	ldr	r3, [pc, #168]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	0a5b      	lsrs	r3, r3, #9
 800b640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b644:	ee07 3a90 	vmov	s15, r3
 800b648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b650:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b654:	edd7 6a07 	vldr	s13, [r7, #28]
 800b658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b660:	ee17 2a90 	vmov	r2, s15
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b668:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66c:	0c1b      	lsrs	r3, r3, #16
 800b66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b682:	edd7 6a07 	vldr	s13, [r7, #28]
 800b686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68e:	ee17 2a90 	vmov	r2, s15
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b696:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	0e1b      	lsrs	r3, r3, #24
 800b69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6bc:	ee17 2a90 	vmov	r2, s15
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6c4:	e008      	b.n	800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	609a      	str	r2, [r3, #8]
}
 800b6d8:	bf00      	nop
 800b6da:	3724      	adds	r7, #36	; 0x24
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	03d09000 	.word	0x03d09000
 800b6ec:	46000000 	.word	0x46000000
 800b6f0:	4c742400 	.word	0x4c742400
 800b6f4:	4a742400 	.word	0x4a742400
 800b6f8:	4bbebc20 	.word	0x4bbebc20

0800b6fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b70a:	4b53      	ldr	r3, [pc, #332]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70e:	f003 0303 	and.w	r3, r3, #3
 800b712:	2b03      	cmp	r3, #3
 800b714:	d101      	bne.n	800b71a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e099      	b.n	800b84e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b71a:	4b4f      	ldr	r3, [pc, #316]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a4e      	ldr	r2, [pc, #312]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b726:	f7f7 f947 	bl	80029b8 <HAL_GetTick>
 800b72a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b72c:	e008      	b.n	800b740 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b72e:	f7f7 f943 	bl	80029b8 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d901      	bls.n	800b740 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e086      	b.n	800b84e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b740:	4b45      	ldr	r3, [pc, #276]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f0      	bne.n	800b72e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b74c:	4b42      	ldr	r3, [pc, #264]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b750:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	031b      	lsls	r3, r3, #12
 800b75a:	493f      	ldr	r1, [pc, #252]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	628b      	str	r3, [r1, #40]	; 0x28
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	3b01      	subs	r3, #1
 800b766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	3b01      	subs	r3, #1
 800b770:	025b      	lsls	r3, r3, #9
 800b772:	b29b      	uxth	r3, r3
 800b774:	431a      	orrs	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	041b      	lsls	r3, r3, #16
 800b77e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	3b01      	subs	r3, #1
 800b78a:	061b      	lsls	r3, r3, #24
 800b78c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b790:	4931      	ldr	r1, [pc, #196]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b792:	4313      	orrs	r3, r2
 800b794:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b796:	4b30      	ldr	r3, [pc, #192]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	492d      	ldr	r1, [pc, #180]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b7a8:	4b2b      	ldr	r3, [pc, #172]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	f023 0220 	bic.w	r2, r3, #32
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	4928      	ldr	r1, [pc, #160]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7ba:	4b27      	ldr	r3, [pc, #156]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7be:	4a26      	ldr	r2, [pc, #152]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	f023 0310 	bic.w	r3, r3, #16
 800b7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7c6:	4b24      	ldr	r3, [pc, #144]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ca:	4b24      	ldr	r3, [pc, #144]	; (800b85c <RCCEx_PLL2_Config+0x160>)
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	69d2      	ldr	r2, [r2, #28]
 800b7d2:	00d2      	lsls	r2, r2, #3
 800b7d4:	4920      	ldr	r1, [pc, #128]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7da:	4b1f      	ldr	r3, [pc, #124]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7de:	4a1e      	ldr	r2, [pc, #120]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7e0:	f043 0310 	orr.w	r3, r3, #16
 800b7e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7ec:	4b1a      	ldr	r3, [pc, #104]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4a19      	ldr	r2, [pc, #100]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b7f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7f8:	e00f      	b.n	800b81a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d106      	bne.n	800b80e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b800:	4b15      	ldr	r3, [pc, #84]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	4a14      	ldr	r2, [pc, #80]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b80a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b80c:	e005      	b.n	800b81a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b80e:	4b12      	ldr	r3, [pc, #72]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b812:	4a11      	ldr	r2, [pc, #68]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b818:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b81a:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a0e      	ldr	r2, [pc, #56]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b826:	f7f7 f8c7 	bl	80029b8 <HAL_GetTick>
 800b82a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b82c:	e008      	b.n	800b840 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b82e:	f7f7 f8c3 	bl	80029b8 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d901      	bls.n	800b840 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e006      	b.n	800b84e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b840:	4b05      	ldr	r3, [pc, #20]	; (800b858 <RCCEx_PLL2_Config+0x15c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0f0      	beq.n	800b82e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	58024400 	.word	0x58024400
 800b85c:	ffff0007 	.word	0xffff0007

0800b860 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b86e:	4b53      	ldr	r3, [pc, #332]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	2b03      	cmp	r3, #3
 800b878:	d101      	bne.n	800b87e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e099      	b.n	800b9b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b87e:	4b4f      	ldr	r3, [pc, #316]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a4e      	ldr	r2, [pc, #312]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b88a:	f7f7 f895 	bl	80029b8 <HAL_GetTick>
 800b88e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b890:	e008      	b.n	800b8a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b892:	f7f7 f891 	bl	80029b8 <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d901      	bls.n	800b8a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e086      	b.n	800b9b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8a4:	4b45      	ldr	r3, [pc, #276]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1f0      	bne.n	800b892 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b8b0:	4b42      	ldr	r3, [pc, #264]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	051b      	lsls	r3, r3, #20
 800b8be:	493f      	ldr	r1, [pc, #252]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	628b      	str	r3, [r1, #40]	; 0x28
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	025b      	lsls	r3, r3, #9
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	041b      	lsls	r3, r3, #16
 800b8e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8e6:	431a      	orrs	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	061b      	lsls	r3, r3, #24
 800b8f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8f4:	4931      	ldr	r1, [pc, #196]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8fa:	4b30      	ldr	r3, [pc, #192]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	492d      	ldr	r1, [pc, #180]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b908:	4313      	orrs	r3, r2
 800b90a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b90c:	4b2b      	ldr	r3, [pc, #172]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	4928      	ldr	r1, [pc, #160]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b91a:	4313      	orrs	r3, r2
 800b91c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b91e:	4b27      	ldr	r3, [pc, #156]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b922:	4a26      	ldr	r2, [pc, #152]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b92a:	4b24      	ldr	r3, [pc, #144]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b92e:	4b24      	ldr	r3, [pc, #144]	; (800b9c0 <RCCEx_PLL3_Config+0x160>)
 800b930:	4013      	ands	r3, r2
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	69d2      	ldr	r2, [r2, #28]
 800b936:	00d2      	lsls	r2, r2, #3
 800b938:	4920      	ldr	r1, [pc, #128]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b93e:	4b1f      	ldr	r3, [pc, #124]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b942:	4a1e      	ldr	r2, [pc, #120]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d106      	bne.n	800b95e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b950:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	4a19      	ldr	r2, [pc, #100]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b956:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b95a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b95c:	e00f      	b.n	800b97e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d106      	bne.n	800b972 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b964:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	4a14      	ldr	r2, [pc, #80]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b96a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b96e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b970:	e005      	b.n	800b97e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b972:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b976:	4a11      	ldr	r2, [pc, #68]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b97c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b97e:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a0e      	ldr	r2, [pc, #56]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b98a:	f7f7 f815 	bl	80029b8 <HAL_GetTick>
 800b98e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b990:	e008      	b.n	800b9a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b992:	f7f7 f811 	bl	80029b8 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d901      	bls.n	800b9a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e006      	b.n	800b9b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <RCCEx_PLL3_Config+0x15c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d0f0      	beq.n	800b992 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	ffff0007 	.word	0xffff0007

0800b9c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e0f1      	b.n	800bbba <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a78      	ldr	r2, [pc, #480]	; (800bbc4 <HAL_SPI_Init+0x200>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00f      	beq.n	800ba06 <HAL_SPI_Init+0x42>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a77      	ldr	r2, [pc, #476]	; (800bbc8 <HAL_SPI_Init+0x204>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d00a      	beq.n	800ba06 <HAL_SPI_Init+0x42>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a75      	ldr	r2, [pc, #468]	; (800bbcc <HAL_SPI_Init+0x208>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d005      	beq.n	800ba06 <HAL_SPI_Init+0x42>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	2b0f      	cmp	r3, #15
 800ba00:	d901      	bls.n	800ba06 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e0d9      	b.n	800bbba <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fd74 	bl	800c4f4 <SPI_GetPacketSize>
 800ba0c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a6c      	ldr	r2, [pc, #432]	; (800bbc4 <HAL_SPI_Init+0x200>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00c      	beq.n	800ba32 <HAL_SPI_Init+0x6e>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a6a      	ldr	r2, [pc, #424]	; (800bbc8 <HAL_SPI_Init+0x204>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d007      	beq.n	800ba32 <HAL_SPI_Init+0x6e>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a69      	ldr	r2, [pc, #420]	; (800bbcc <HAL_SPI_Init+0x208>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d002      	beq.n	800ba32 <HAL_SPI_Init+0x6e>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b08      	cmp	r3, #8
 800ba30:	d811      	bhi.n	800ba56 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba36:	4a63      	ldr	r2, [pc, #396]	; (800bbc4 <HAL_SPI_Init+0x200>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d009      	beq.n	800ba50 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a61      	ldr	r2, [pc, #388]	; (800bbc8 <HAL_SPI_Init+0x204>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d004      	beq.n	800ba50 <HAL_SPI_Init+0x8c>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a60      	ldr	r2, [pc, #384]	; (800bbcc <HAL_SPI_Init+0x208>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d104      	bne.n	800ba5a <HAL_SPI_Init+0x96>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b10      	cmp	r3, #16
 800ba54:	d901      	bls.n	800ba5a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e0af      	b.n	800bbba <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7f6 fb9a 	bl	80021a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0201 	bic.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ba96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800baa0:	d119      	bne.n	800bad6 <HAL_SPI_Init+0x112>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baaa:	d103      	bne.n	800bab4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d008      	beq.n	800bac6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10c      	bne.n	800bad6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bac4:	d107      	bne.n	800bad6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bad4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	69da      	ldr	r2, [r3, #28]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	431a      	orrs	r2, r3
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	431a      	orrs	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae8:	ea42 0103 	orr.w	r1, r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	430a      	orrs	r2, r1
 800baf6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	431a      	orrs	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	431a      	orrs	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb36:	ea42 0103 	orr.w	r1, r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d113      	bne.n	800bb76 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f022 0201 	bic.w	r2, r2, #1
 800bb84:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	40013000 	.word	0x40013000
 800bbc8:	40003800 	.word	0x40003800
 800bbcc:	40003c00 	.word	0x40003c00

0800bbd0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08a      	sub	sp, #40	; 0x28
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3330      	adds	r3, #48	; 0x30
 800bbea:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbf4:	d112      	bne.n	800bc1c <HAL_SPI_Receive+0x4c>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10e      	bne.n	800bc1c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2204      	movs	r2, #4
 800bc02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	68b9      	ldr	r1, [r7, #8]
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 f978 	bl	800bf08 <HAL_SPI_TransmitReceive>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	e16f      	b.n	800befc <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d101      	bne.n	800bc2a <HAL_SPI_Receive+0x5a>
 800bc26:	2302      	movs	r3, #2
 800bc28:	e168      	b.n	800befc <HAL_SPI_Receive+0x32c>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc32:	f7f6 fec1 	bl	80029b8 <HAL_GetTick>
 800bc36:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d007      	beq.n	800bc54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bc44:	2302      	movs	r3, #2
 800bc46:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc50:	7ffb      	ldrb	r3, [r7, #31]
 800bc52:	e153      	b.n	800befc <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <HAL_SPI_Receive+0x90>
 800bc5a:	88fb      	ldrh	r3, [r7, #6]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d107      	bne.n	800bc70 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc6c:	7ffb      	ldrb	r3, [r7, #31]
 800bc6e:	e145      	b.n	800befc <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2204      	movs	r2, #4
 800bc74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	88fa      	ldrh	r2, [r7, #6]
 800bc8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	88fa      	ldrh	r2, [r7, #6]
 800bc92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bcc0:	d107      	bne.n	800bcd2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	4b8a      	ldr	r3, [pc, #552]	; (800bf04 <HAL_SPI_Receive+0x334>)
 800bcda:	4013      	ands	r3, r2
 800bcdc:	88f9      	ldrh	r1, [r7, #6]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	430b      	orrs	r3, r1
 800bce4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f042 0201 	orr.w	r2, r2, #1
 800bcf4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcfe:	d107      	bne.n	800bd10 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	2b0f      	cmp	r3, #15
 800bd16:	d948      	bls.n	800bdaa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bd18:	e040      	b.n	800bd9c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	695a      	ldr	r2, [r3, #20]
 800bd20:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd24:	4013      	ands	r3, r2
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d014      	beq.n	800bd54 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd34:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd3a:	1d1a      	adds	r2, r3, #4
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd52:	e023      	b.n	800bd9c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd54:	f7f6 fe30 	bl	80029b8 <HAL_GetTick>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d803      	bhi.n	800bd6c <HAL_SPI_Receive+0x19c>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd6a:	d102      	bne.n	800bd72 <HAL_SPI_Receive+0x1a2>
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d114      	bne.n	800bd9c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 faf0 	bl	800c358 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e0af      	b.n	800befc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1b8      	bne.n	800bd1a <HAL_SPI_Receive+0x14a>
 800bda8:	e095      	b.n	800bed6 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	2b07      	cmp	r3, #7
 800bdb0:	f240 808b 	bls.w	800beca <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdb4:	e03f      	b.n	800be36 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d114      	bne.n	800bdee <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	8812      	ldrh	r2, [r2, #0]
 800bdcc:	b292      	uxth	r2, r2
 800bdce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdd4:	1c9a      	adds	r2, r3, #2
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	3b01      	subs	r3, #1
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bdec:	e023      	b.n	800be36 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdee:	f7f6 fde3 	bl	80029b8 <HAL_GetTick>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d803      	bhi.n	800be06 <HAL_SPI_Receive+0x236>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be04:	d102      	bne.n	800be0c <HAL_SPI_Receive+0x23c>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d114      	bne.n	800be36 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 faa3 	bl	800c358 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e062      	b.n	800befc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1b9      	bne.n	800bdb6 <HAL_SPI_Receive+0x1e6>
 800be42:	e048      	b.n	800bed6 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d117      	bne.n	800be82 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	b2d2      	uxtb	r2, r2
 800be62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be74:	b29b      	uxth	r3, r3
 800be76:	3b01      	subs	r3, #1
 800be78:	b29a      	uxth	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be80:	e023      	b.n	800beca <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be82:	f7f6 fd99 	bl	80029b8 <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d803      	bhi.n	800be9a <HAL_SPI_Receive+0x2ca>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be98:	d102      	bne.n	800bea0 <HAL_SPI_Receive+0x2d0>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d114      	bne.n	800beca <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 fa59 	bl	800c358 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	e018      	b.n	800befc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1b6      	bne.n	800be44 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f000 fa3e 	bl	800c358 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800befa:	7ffb      	ldrb	r3, [r7, #31]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	ffff0000 	.word	0xffff0000

0800bf08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08e      	sub	sp, #56	; 0x38
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3320      	adds	r3, #32
 800bf22:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3330      	adds	r3, #48	; 0x30
 800bf2a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_SPI_TransmitReceive+0x32>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e209      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf42:	f7f6 fd39 	bl	80029b8 <HAL_GetTick>
 800bf46:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bf48:	887b      	ldrh	r3, [r7, #2]
 800bf4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bf4c:	887b      	ldrh	r3, [r7, #2]
 800bf4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf5e:	7efb      	ldrb	r3, [r7, #27]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d014      	beq.n	800bf8e <HAL_SPI_TransmitReceive+0x86>
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf6a:	d106      	bne.n	800bf7a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf74:	7efb      	ldrb	r3, [r7, #27]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d009      	beq.n	800bf8e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf8c:	e1df      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d005      	beq.n	800bfa0 <HAL_SPI_TransmitReceive+0x98>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <HAL_SPI_TransmitReceive+0x98>
 800bf9a:	887b      	ldrh	r3, [r7, #2]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bfae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfb2:	e1cc      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b04      	cmp	r3, #4
 800bfbe:	d003      	beq.n	800bfc8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2205      	movs	r2, #5
 800bfc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	887a      	ldrh	r2, [r7, #2]
 800bfda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	887a      	ldrh	r2, [r7, #2]
 800bfe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	887a      	ldrh	r2, [r7, #2]
 800bff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	887a      	ldrh	r2, [r7, #2]
 800bff8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	4b82      	ldr	r3, [pc, #520]	; (800c218 <HAL_SPI_TransmitReceive+0x310>)
 800c010:	4013      	ands	r3, r2
 800c012:	8879      	ldrh	r1, [r7, #2]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	6812      	ldr	r2, [r2, #0]
 800c018:	430b      	orrs	r3, r1
 800c01a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f042 0201 	orr.w	r2, r2, #1
 800c02a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c034:	d107      	bne.n	800c046 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c044:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	2b0f      	cmp	r3, #15
 800c04c:	d970      	bls.n	800c130 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c04e:	e068      	b.n	800c122 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d11a      	bne.n	800c094 <HAL_SPI_TransmitReceive+0x18c>
 800c05e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c060:	2b00      	cmp	r3, #0
 800c062:	d017      	beq.n	800c094 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6812      	ldr	r2, [r2, #0]
 800c06e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c074:	1d1a      	adds	r2, r3, #4
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c080:	b29b      	uxth	r3, r3
 800c082:	3b01      	subs	r3, #1
 800c084:	b29a      	uxth	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c092:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	695a      	ldr	r2, [r3, #20]
 800c09a:	f248 0308 	movw	r3, #32776	; 0x8008
 800c09e:	4013      	ands	r3, r2
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d01a      	beq.n	800c0da <HAL_SPI_TransmitReceive+0x1d2>
 800c0a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d017      	beq.n	800c0da <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0ba:	1d1a      	adds	r2, r3, #4
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0da:	f7f6 fc6d 	bl	80029b8 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d803      	bhi.n	800c0f2 <HAL_SPI_TransmitReceive+0x1ea>
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0f0:	d102      	bne.n	800c0f8 <HAL_SPI_TransmitReceive+0x1f0>
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d114      	bne.n	800c122 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f92d 	bl	800c358 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c10c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c11e:	2303      	movs	r3, #3
 800c120:	e115      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c124:	2b00      	cmp	r3, #0
 800c126:	d193      	bne.n	800c050 <HAL_SPI_TransmitReceive+0x148>
 800c128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d190      	bne.n	800c050 <HAL_SPI_TransmitReceive+0x148>
 800c12e:	e0e7      	b.n	800c300 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2b07      	cmp	r3, #7
 800c136:	f240 80dd 	bls.w	800c2f4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c13a:	e066      	b.n	800c20a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	f003 0302 	and.w	r3, r3, #2
 800c146:	2b02      	cmp	r3, #2
 800c148:	d119      	bne.n	800c17e <HAL_SPI_TransmitReceive+0x276>
 800c14a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d016      	beq.n	800c17e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c154:	881a      	ldrh	r2, [r3, #0]
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c15e:	1c9a      	adds	r2, r3, #2
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	3b01      	subs	r3, #1
 800c16e:	b29a      	uxth	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c17c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d11a      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x2ba>
 800c18c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d017      	beq.n	800c1c2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c196:	6a3a      	ldr	r2, [r7, #32]
 800c198:	8812      	ldrh	r2, [r2, #0]
 800c19a:	b292      	uxth	r2, r2
 800c19c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1a2:	1c9a      	adds	r2, r3, #2
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1c2:	f7f6 fbf9 	bl	80029b8 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d803      	bhi.n	800c1da <HAL_SPI_TransmitReceive+0x2d2>
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1d8:	d102      	bne.n	800c1e0 <HAL_SPI_TransmitReceive+0x2d8>
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d114      	bne.n	800c20a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f000 f8b9 	bl	800c358 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e0a1      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c20a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d195      	bne.n	800c13c <HAL_SPI_TransmitReceive+0x234>
 800c210:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d192      	bne.n	800c13c <HAL_SPI_TransmitReceive+0x234>
 800c216:	e073      	b.n	800c300 <HAL_SPI_TransmitReceive+0x3f8>
 800c218:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b02      	cmp	r3, #2
 800c228:	d11b      	bne.n	800c262 <HAL_SPI_TransmitReceive+0x35a>
 800c22a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d018      	beq.n	800c262 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3320      	adds	r3, #32
 800c23a:	7812      	ldrb	r2, [r2, #0]
 800c23c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c24e:	b29b      	uxth	r3, r3
 800c250:	3b01      	subs	r3, #1
 800c252:	b29a      	uxth	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c260:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d11d      	bne.n	800c2ac <HAL_SPI_TransmitReceive+0x3a4>
 800c270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c272:	2b00      	cmp	r3, #0
 800c274:	d01a      	beq.n	800c2ac <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c282:	7812      	ldrb	r2, [r2, #0]
 800c284:	b2d2      	uxtb	r2, r2
 800c286:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c28c:	1c5a      	adds	r2, r3, #1
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c298:	b29b      	uxth	r3, r3
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ac:	f7f6 fb84 	bl	80029b8 <HAL_GetTick>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d803      	bhi.n	800c2c4 <HAL_SPI_TransmitReceive+0x3bc>
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c2:	d102      	bne.n	800c2ca <HAL_SPI_TransmitReceive+0x3c2>
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d114      	bne.n	800c2f4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 f844 	bl	800c358 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e02c      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c2f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d190      	bne.n	800c21c <HAL_SPI_TransmitReceive+0x314>
 800c2fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d18d      	bne.n	800c21c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	2200      	movs	r2, #0
 800c308:	2108      	movs	r1, #8
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 f8c4 	bl	800c498 <SPI_WaitOnFlagUntilTimeout>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d007      	beq.n	800c326 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31c:	f043 0220 	orr.w	r2, r3, #32
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 f816 	bl	800c358 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e001      	b.n	800c34e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c34a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3730      	adds	r7, #48	; 0x30
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop

0800c358 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	699a      	ldr	r2, [r3, #24]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f042 0208 	orr.w	r2, r2, #8
 800c376:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f042 0210 	orr.w	r2, r2, #16
 800c386:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f022 0201 	bic.w	r2, r2, #1
 800c396:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	6919      	ldr	r1, [r3, #16]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	4b3c      	ldr	r3, [pc, #240]	; (800c494 <SPI_CloseTransfer+0x13c>)
 800c3a4:	400b      	ands	r3, r1
 800c3a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	689a      	ldr	r2, [r3, #8]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c3b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b04      	cmp	r3, #4
 800c3c2:	d014      	beq.n	800c3ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f003 0320 	and.w	r3, r3, #32
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00f      	beq.n	800c3ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	699a      	ldr	r2, [r3, #24]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f042 0220 	orr.w	r2, r2, #32
 800c3ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d014      	beq.n	800c424 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00f      	beq.n	800c424 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c40a:	f043 0204 	orr.w	r2, r3, #4
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	699a      	ldr	r2, [r3, #24]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c422:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00f      	beq.n	800c44e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c434:	f043 0201 	orr.w	r2, r3, #1
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	699a      	ldr	r2, [r3, #24]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c44c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00f      	beq.n	800c478 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c45e:	f043 0208 	orr.w	r2, r3, #8
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	699a      	ldr	r2, [r3, #24]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c476:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c488:	bf00      	nop
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	fffffc90 	.word	0xfffffc90

0800c498 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4a8:	e010      	b.n	800c4cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4aa:	f7f6 fa85 	bl	80029b8 <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	69ba      	ldr	r2, [r7, #24]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d803      	bhi.n	800c4c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4c0:	d102      	bne.n	800c4c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e00f      	b.n	800c4ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	695a      	ldr	r2, [r3, #20]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	bf0c      	ite	eq
 800c4dc:	2301      	moveq	r3, #1
 800c4de:	2300      	movne	r3, #0
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	79fb      	ldrb	r3, [r7, #7]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d0df      	beq.n	800c4aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c500:	095b      	lsrs	r3, r3, #5
 800c502:	3301      	adds	r3, #1
 800c504:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	3301      	adds	r3, #1
 800c50c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	3307      	adds	r3, #7
 800c512:	08db      	lsrs	r3, r3, #3
 800c514:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e049      	b.n	800c5d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c542:	b2db      	uxtb	r3, r3
 800c544:	2b00      	cmp	r3, #0
 800c546:	d106      	bne.n	800c556 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7f5 ff19 	bl	8002388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2202      	movs	r2, #2
 800c55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3304      	adds	r3, #4
 800c566:	4619      	mov	r1, r3
 800c568:	4610      	mov	r0, r2
 800c56a:	f000 fe8d 	bl	800d288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d001      	beq.n	800c5f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e04c      	b.n	800c68a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a26      	ldr	r2, [pc, #152]	; (800c698 <HAL_TIM_Base_Start+0xc0>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d022      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60a:	d01d      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a22      	ldr	r2, [pc, #136]	; (800c69c <HAL_TIM_Base_Start+0xc4>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d018      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a21      	ldr	r2, [pc, #132]	; (800c6a0 <HAL_TIM_Base_Start+0xc8>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d013      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a1f      	ldr	r2, [pc, #124]	; (800c6a4 <HAL_TIM_Base_Start+0xcc>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d00e      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a1e      	ldr	r2, [pc, #120]	; (800c6a8 <HAL_TIM_Base_Start+0xd0>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d009      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a1c      	ldr	r2, [pc, #112]	; (800c6ac <HAL_TIM_Base_Start+0xd4>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d004      	beq.n	800c648 <HAL_TIM_Base_Start+0x70>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a1b      	ldr	r2, [pc, #108]	; (800c6b0 <HAL_TIM_Base_Start+0xd8>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d115      	bne.n	800c674 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689a      	ldr	r2, [r3, #8]
 800c64e:	4b19      	ldr	r3, [pc, #100]	; (800c6b4 <HAL_TIM_Base_Start+0xdc>)
 800c650:	4013      	ands	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b06      	cmp	r3, #6
 800c658:	d015      	beq.n	800c686 <HAL_TIM_Base_Start+0xae>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c660:	d011      	beq.n	800c686 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f042 0201 	orr.w	r2, r2, #1
 800c670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c672:	e008      	b.n	800c686 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0201 	orr.w	r2, r2, #1
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	e000      	b.n	800c688 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	40010000 	.word	0x40010000
 800c69c:	40000400 	.word	0x40000400
 800c6a0:	40000800 	.word	0x40000800
 800c6a4:	40000c00 	.word	0x40000c00
 800c6a8:	40010400 	.word	0x40010400
 800c6ac:	40001800 	.word	0x40001800
 800c6b0:	40014000 	.word	0x40014000
 800c6b4:	00010007 	.word	0x00010007

0800c6b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <HAL_TIM_OC_Start_IT+0x28>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	bf14      	ite	ne
 800c6d8:	2301      	movne	r3, #1
 800c6da:	2300      	moveq	r3, #0
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	e03c      	b.n	800c75a <HAL_TIM_OC_Start_IT+0xa2>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b04      	cmp	r3, #4
 800c6e4:	d109      	bne.n	800c6fa <HAL_TIM_OC_Start_IT+0x42>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	bf14      	ite	ne
 800c6f2:	2301      	movne	r3, #1
 800c6f4:	2300      	moveq	r3, #0
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	e02f      	b.n	800c75a <HAL_TIM_OC_Start_IT+0xa2>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d109      	bne.n	800c714 <HAL_TIM_OC_Start_IT+0x5c>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b01      	cmp	r3, #1
 800c70a:	bf14      	ite	ne
 800c70c:	2301      	movne	r3, #1
 800c70e:	2300      	moveq	r3, #0
 800c710:	b2db      	uxtb	r3, r3
 800c712:	e022      	b.n	800c75a <HAL_TIM_OC_Start_IT+0xa2>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b0c      	cmp	r3, #12
 800c718:	d109      	bne.n	800c72e <HAL_TIM_OC_Start_IT+0x76>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b01      	cmp	r3, #1
 800c724:	bf14      	ite	ne
 800c726:	2301      	movne	r3, #1
 800c728:	2300      	moveq	r3, #0
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	e015      	b.n	800c75a <HAL_TIM_OC_Start_IT+0xa2>
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	2b10      	cmp	r3, #16
 800c732:	d109      	bne.n	800c748 <HAL_TIM_OC_Start_IT+0x90>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	bf14      	ite	ne
 800c740:	2301      	movne	r3, #1
 800c742:	2300      	moveq	r3, #0
 800c744:	b2db      	uxtb	r3, r3
 800c746:	e008      	b.n	800c75a <HAL_TIM_OC_Start_IT+0xa2>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b01      	cmp	r3, #1
 800c752:	bf14      	ite	ne
 800c754:	2301      	movne	r3, #1
 800c756:	2300      	moveq	r3, #0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	e0ec      	b.n	800c93c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <HAL_TIM_OC_Start_IT+0xba>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2202      	movs	r2, #2
 800c76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c770:	e023      	b.n	800c7ba <HAL_TIM_OC_Start_IT+0x102>
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	2b04      	cmp	r3, #4
 800c776:	d104      	bne.n	800c782 <HAL_TIM_OC_Start_IT+0xca>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2202      	movs	r2, #2
 800c77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c780:	e01b      	b.n	800c7ba <HAL_TIM_OC_Start_IT+0x102>
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	2b08      	cmp	r3, #8
 800c786:	d104      	bne.n	800c792 <HAL_TIM_OC_Start_IT+0xda>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2202      	movs	r2, #2
 800c78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c790:	e013      	b.n	800c7ba <HAL_TIM_OC_Start_IT+0x102>
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b0c      	cmp	r3, #12
 800c796:	d104      	bne.n	800c7a2 <HAL_TIM_OC_Start_IT+0xea>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2202      	movs	r2, #2
 800c79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7a0:	e00b      	b.n	800c7ba <HAL_TIM_OC_Start_IT+0x102>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b10      	cmp	r3, #16
 800c7a6:	d104      	bne.n	800c7b2 <HAL_TIM_OC_Start_IT+0xfa>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7b0:	e003      	b.n	800c7ba <HAL_TIM_OC_Start_IT+0x102>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2202      	movs	r2, #2
 800c7b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	2b0c      	cmp	r3, #12
 800c7be:	d841      	bhi.n	800c844 <HAL_TIM_OC_Start_IT+0x18c>
 800c7c0:	a201      	add	r2, pc, #4	; (adr r2, 800c7c8 <HAL_TIM_OC_Start_IT+0x110>)
 800c7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c6:	bf00      	nop
 800c7c8:	0800c7fd 	.word	0x0800c7fd
 800c7cc:	0800c845 	.word	0x0800c845
 800c7d0:	0800c845 	.word	0x0800c845
 800c7d4:	0800c845 	.word	0x0800c845
 800c7d8:	0800c80f 	.word	0x0800c80f
 800c7dc:	0800c845 	.word	0x0800c845
 800c7e0:	0800c845 	.word	0x0800c845
 800c7e4:	0800c845 	.word	0x0800c845
 800c7e8:	0800c821 	.word	0x0800c821
 800c7ec:	0800c845 	.word	0x0800c845
 800c7f0:	0800c845 	.word	0x0800c845
 800c7f4:	0800c845 	.word	0x0800c845
 800c7f8:	0800c833 	.word	0x0800c833
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f042 0202 	orr.w	r2, r2, #2
 800c80a:	60da      	str	r2, [r3, #12]
      break;
 800c80c:	e01d      	b.n	800c84a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68da      	ldr	r2, [r3, #12]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f042 0204 	orr.w	r2, r2, #4
 800c81c:	60da      	str	r2, [r3, #12]
      break;
 800c81e:	e014      	b.n	800c84a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68da      	ldr	r2, [r3, #12]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f042 0208 	orr.w	r2, r2, #8
 800c82e:	60da      	str	r2, [r3, #12]
      break;
 800c830:	e00b      	b.n	800c84a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68da      	ldr	r2, [r3, #12]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f042 0210 	orr.w	r2, r2, #16
 800c840:	60da      	str	r2, [r3, #12]
      break;
 800c842:	e002      	b.n	800c84a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	73fb      	strb	r3, [r7, #15]
      break;
 800c848:	bf00      	nop
  }

  if (status == HAL_OK)
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d174      	bne.n	800c93a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2201      	movs	r2, #1
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f923 	bl	800daa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a38      	ldr	r2, [pc, #224]	; (800c944 <HAL_TIM_OC_Start_IT+0x28c>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d013      	beq.n	800c890 <HAL_TIM_OC_Start_IT+0x1d8>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a36      	ldr	r2, [pc, #216]	; (800c948 <HAL_TIM_OC_Start_IT+0x290>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d00e      	beq.n	800c890 <HAL_TIM_OC_Start_IT+0x1d8>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a35      	ldr	r2, [pc, #212]	; (800c94c <HAL_TIM_OC_Start_IT+0x294>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d009      	beq.n	800c890 <HAL_TIM_OC_Start_IT+0x1d8>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a33      	ldr	r2, [pc, #204]	; (800c950 <HAL_TIM_OC_Start_IT+0x298>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d004      	beq.n	800c890 <HAL_TIM_OC_Start_IT+0x1d8>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a32      	ldr	r2, [pc, #200]	; (800c954 <HAL_TIM_OC_Start_IT+0x29c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d101      	bne.n	800c894 <HAL_TIM_OC_Start_IT+0x1dc>
 800c890:	2301      	movs	r3, #1
 800c892:	e000      	b.n	800c896 <HAL_TIM_OC_Start_IT+0x1de>
 800c894:	2300      	movs	r3, #0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d007      	beq.n	800c8aa <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a25      	ldr	r2, [pc, #148]	; (800c944 <HAL_TIM_OC_Start_IT+0x28c>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d022      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8bc:	d01d      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a25      	ldr	r2, [pc, #148]	; (800c958 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d018      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a23      	ldr	r2, [pc, #140]	; (800c95c <HAL_TIM_OC_Start_IT+0x2a4>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d013      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a22      	ldr	r2, [pc, #136]	; (800c960 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00e      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a19      	ldr	r2, [pc, #100]	; (800c948 <HAL_TIM_OC_Start_IT+0x290>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d009      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a1e      	ldr	r2, [pc, #120]	; (800c964 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d004      	beq.n	800c8fa <HAL_TIM_OC_Start_IT+0x242>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a15      	ldr	r2, [pc, #84]	; (800c94c <HAL_TIM_OC_Start_IT+0x294>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d115      	bne.n	800c926 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	689a      	ldr	r2, [r3, #8]
 800c900:	4b19      	ldr	r3, [pc, #100]	; (800c968 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c902:	4013      	ands	r3, r2
 800c904:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	2b06      	cmp	r3, #6
 800c90a:	d015      	beq.n	800c938 <HAL_TIM_OC_Start_IT+0x280>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c912:	d011      	beq.n	800c938 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f042 0201 	orr.w	r2, r2, #1
 800c922:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c924:	e008      	b.n	800c938 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f042 0201 	orr.w	r2, r2, #1
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	e000      	b.n	800c93a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c938:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	40010000 	.word	0x40010000
 800c948:	40010400 	.word	0x40010400
 800c94c:	40014000 	.word	0x40014000
 800c950:	40014400 	.word	0x40014400
 800c954:	40014800 	.word	0x40014800
 800c958:	40000400 	.word	0x40000400
 800c95c:	40000800 	.word	0x40000800
 800c960:	40000c00 	.word	0x40000c00
 800c964:	40001800 	.word	0x40001800
 800c968:	00010007 	.word	0x00010007

0800c96c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b0c      	cmp	r3, #12
 800c97e:	d841      	bhi.n	800ca04 <HAL_TIM_OC_Stop_IT+0x98>
 800c980:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c986:	bf00      	nop
 800c988:	0800c9bd 	.word	0x0800c9bd
 800c98c:	0800ca05 	.word	0x0800ca05
 800c990:	0800ca05 	.word	0x0800ca05
 800c994:	0800ca05 	.word	0x0800ca05
 800c998:	0800c9cf 	.word	0x0800c9cf
 800c99c:	0800ca05 	.word	0x0800ca05
 800c9a0:	0800ca05 	.word	0x0800ca05
 800c9a4:	0800ca05 	.word	0x0800ca05
 800c9a8:	0800c9e1 	.word	0x0800c9e1
 800c9ac:	0800ca05 	.word	0x0800ca05
 800c9b0:	0800ca05 	.word	0x0800ca05
 800c9b4:	0800ca05 	.word	0x0800ca05
 800c9b8:	0800c9f3 	.word	0x0800c9f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68da      	ldr	r2, [r3, #12]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f022 0202 	bic.w	r2, r2, #2
 800c9ca:	60da      	str	r2, [r3, #12]
      break;
 800c9cc:	e01d      	b.n	800ca0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68da      	ldr	r2, [r3, #12]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f022 0204 	bic.w	r2, r2, #4
 800c9dc:	60da      	str	r2, [r3, #12]
      break;
 800c9de:	e014      	b.n	800ca0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68da      	ldr	r2, [r3, #12]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f022 0208 	bic.w	r2, r2, #8
 800c9ee:	60da      	str	r2, [r3, #12]
      break;
 800c9f0:	e00b      	b.n	800ca0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f022 0210 	bic.w	r2, r2, #16
 800ca00:	60da      	str	r2, [r3, #12]
      break;
 800ca02:	e002      	b.n	800ca0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	73fb      	strb	r3, [r7, #15]
      break;
 800ca08:	bf00      	nop
  }

  if (status == HAL_OK)
 800ca0a:	7bfb      	ldrb	r3, [r7, #15]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f040 8081 	bne.w	800cb14 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f001 f842 	bl	800daa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a3e      	ldr	r2, [pc, #248]	; (800cb20 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d013      	beq.n	800ca52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a3d      	ldr	r2, [pc, #244]	; (800cb24 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d00e      	beq.n	800ca52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a3b      	ldr	r2, [pc, #236]	; (800cb28 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d009      	beq.n	800ca52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a3a      	ldr	r2, [pc, #232]	; (800cb2c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d004      	beq.n	800ca52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a38      	ldr	r2, [pc, #224]	; (800cb30 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d101      	bne.n	800ca56 <HAL_TIM_OC_Stop_IT+0xea>
 800ca52:	2301      	movs	r3, #1
 800ca54:	e000      	b.n	800ca58 <HAL_TIM_OC_Stop_IT+0xec>
 800ca56:	2300      	movs	r3, #0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d017      	beq.n	800ca8c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6a1a      	ldr	r2, [r3, #32]
 800ca62:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca66:	4013      	ands	r3, r2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10f      	bne.n	800ca8c <HAL_TIM_OC_Stop_IT+0x120>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6a1a      	ldr	r2, [r3, #32]
 800ca72:	f240 4344 	movw	r3, #1092	; 0x444
 800ca76:	4013      	ands	r3, r2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d107      	bne.n	800ca8c <HAL_TIM_OC_Stop_IT+0x120>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6a1a      	ldr	r2, [r3, #32]
 800ca92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10f      	bne.n	800cabc <HAL_TIM_OC_Stop_IT+0x150>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6a1a      	ldr	r2, [r3, #32]
 800caa2:	f240 4344 	movw	r3, #1092	; 0x444
 800caa6:	4013      	ands	r3, r2
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d107      	bne.n	800cabc <HAL_TIM_OC_Stop_IT+0x150>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f022 0201 	bic.w	r2, r2, #1
 800caba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d104      	bne.n	800cacc <HAL_TIM_OC_Stop_IT+0x160>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caca:	e023      	b.n	800cb14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d104      	bne.n	800cadc <HAL_TIM_OC_Stop_IT+0x170>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cada:	e01b      	b.n	800cb14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b08      	cmp	r3, #8
 800cae0:	d104      	bne.n	800caec <HAL_TIM_OC_Stop_IT+0x180>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800caea:	e013      	b.n	800cb14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b0c      	cmp	r3, #12
 800caf0:	d104      	bne.n	800cafc <HAL_TIM_OC_Stop_IT+0x190>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cafa:	e00b      	b.n	800cb14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2b10      	cmp	r3, #16
 800cb00:	d104      	bne.n	800cb0c <HAL_TIM_OC_Stop_IT+0x1a0>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb0a:	e003      	b.n	800cb14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	40010000 	.word	0x40010000
 800cb24:	40010400 	.word	0x40010400
 800cb28:	40014000 	.word	0x40014000
 800cb2c:	40014400 	.word	0x40014400
 800cb30:	40014800 	.word	0x40014800

0800cb34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	e049      	b.n	800cbda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7f5 fbd4 	bl	8002308 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2202      	movs	r2, #2
 800cb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3304      	adds	r3, #4
 800cb70:	4619      	mov	r1, r3
 800cb72:	4610      	mov	r0, r2
 800cb74:	f000 fb88 	bl	800d288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d122      	bne.n	800cc3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d11b      	bne.n	800cc3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f06f 0202 	mvn.w	r2, #2
 800cc0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	f003 0303 	and.w	r3, r3, #3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fb11 	bl	800d24c <HAL_TIM_IC_CaptureCallback>
 800cc2a:	e005      	b.n	800cc38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7f3 ffb5 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fb14 	bl	800d260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d122      	bne.n	800cc92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f003 0304 	and.w	r3, r3, #4
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d11b      	bne.n	800cc92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f06f 0204 	mvn.w	r2, #4
 800cc62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2202      	movs	r2, #2
 800cc68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fae7 	bl	800d24c <HAL_TIM_IC_CaptureCallback>
 800cc7e:	e005      	b.n	800cc8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7f3 ff8b 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 faea 	bl	800d260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	f003 0308 	and.w	r3, r3, #8
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d122      	bne.n	800cce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	f003 0308 	and.w	r3, r3, #8
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d11b      	bne.n	800cce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f06f 0208 	mvn.w	r2, #8
 800ccb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2204      	movs	r2, #4
 800ccbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	f003 0303 	and.w	r3, r3, #3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fabd 	bl	800d24c <HAL_TIM_IC_CaptureCallback>
 800ccd2:	e005      	b.n	800cce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7f3 ff61 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fac0 	bl	800d260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b10      	cmp	r3, #16
 800ccf2:	d122      	bne.n	800cd3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	f003 0310 	and.w	r3, r3, #16
 800ccfe:	2b10      	cmp	r3, #16
 800cd00:	d11b      	bne.n	800cd3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f06f 0210 	mvn.w	r2, #16
 800cd0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2208      	movs	r2, #8
 800cd10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	69db      	ldr	r3, [r3, #28]
 800cd18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d003      	beq.n	800cd28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fa93 	bl	800d24c <HAL_TIM_IC_CaptureCallback>
 800cd26:	e005      	b.n	800cd34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7f3 ff37 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fa96 	bl	800d260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d10e      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d107      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f06f 0201 	mvn.w	r2, #1
 800cd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fa69 	bl	800d238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd70:	2b80      	cmp	r3, #128	; 0x80
 800cd72:	d10e      	bne.n	800cd92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd7e:	2b80      	cmp	r3, #128	; 0x80
 800cd80:	d107      	bne.n	800cd92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 ffc5 	bl	800dd1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda0:	d10e      	bne.n	800cdc0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdac:	2b80      	cmp	r3, #128	; 0x80
 800cdae:	d107      	bne.n	800cdc0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cdb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 ffb8 	bl	800dd30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdca:	2b40      	cmp	r3, #64	; 0x40
 800cdcc:	d10e      	bne.n	800cdec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd8:	2b40      	cmp	r3, #64	; 0x40
 800cdda:	d107      	bne.n	800cdec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cde4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fa44 	bl	800d274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	f003 0320 	and.w	r3, r3, #32
 800cdf6:	2b20      	cmp	r3, #32
 800cdf8:	d10e      	bne.n	800ce18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d107      	bne.n	800ce18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f06f 0220 	mvn.w	r2, #32
 800ce10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 ff78 	bl	800dd08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce18:	bf00      	nop
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d101      	bne.n	800ce3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	e0ff      	b.n	800d03e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b14      	cmp	r3, #20
 800ce4a:	f200 80f0 	bhi.w	800d02e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce4e:	a201      	add	r2, pc, #4	; (adr r2, 800ce54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce54:	0800cea9 	.word	0x0800cea9
 800ce58:	0800d02f 	.word	0x0800d02f
 800ce5c:	0800d02f 	.word	0x0800d02f
 800ce60:	0800d02f 	.word	0x0800d02f
 800ce64:	0800cee9 	.word	0x0800cee9
 800ce68:	0800d02f 	.word	0x0800d02f
 800ce6c:	0800d02f 	.word	0x0800d02f
 800ce70:	0800d02f 	.word	0x0800d02f
 800ce74:	0800cf2b 	.word	0x0800cf2b
 800ce78:	0800d02f 	.word	0x0800d02f
 800ce7c:	0800d02f 	.word	0x0800d02f
 800ce80:	0800d02f 	.word	0x0800d02f
 800ce84:	0800cf6b 	.word	0x0800cf6b
 800ce88:	0800d02f 	.word	0x0800d02f
 800ce8c:	0800d02f 	.word	0x0800d02f
 800ce90:	0800d02f 	.word	0x0800d02f
 800ce94:	0800cfad 	.word	0x0800cfad
 800ce98:	0800d02f 	.word	0x0800d02f
 800ce9c:	0800d02f 	.word	0x0800d02f
 800cea0:	0800d02f 	.word	0x0800d02f
 800cea4:	0800cfed 	.word	0x0800cfed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fa84 	bl	800d3bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0208 	orr.w	r2, r2, #8
 800cec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699a      	ldr	r2, [r3, #24]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0204 	bic.w	r2, r2, #4
 800ced2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6999      	ldr	r1, [r3, #24]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	619a      	str	r2, [r3, #24]
      break;
 800cee6:	e0a5      	b.n	800d034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68b9      	ldr	r1, [r7, #8]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 faf4 	bl	800d4dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6999      	ldr	r1, [r3, #24]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	021a      	lsls	r2, r3, #8
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	619a      	str	r2, [r3, #24]
      break;
 800cf28:	e084      	b.n	800d034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68b9      	ldr	r1, [r7, #8]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 fb5d 	bl	800d5f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69da      	ldr	r2, [r3, #28]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f042 0208 	orr.w	r2, r2, #8
 800cf44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69da      	ldr	r2, [r3, #28]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f022 0204 	bic.w	r2, r2, #4
 800cf54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69d9      	ldr	r1, [r3, #28]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	691a      	ldr	r2, [r3, #16]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	430a      	orrs	r2, r1
 800cf66:	61da      	str	r2, [r3, #28]
      break;
 800cf68:	e064      	b.n	800d034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fbc5 	bl	800d700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	69da      	ldr	r2, [r3, #28]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69da      	ldr	r2, [r3, #28]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69d9      	ldr	r1, [r3, #28]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	021a      	lsls	r2, r3, #8
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	61da      	str	r2, [r3, #28]
      break;
 800cfaa:	e043      	b.n	800d034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 fc0e 	bl	800d7d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f042 0208 	orr.w	r2, r2, #8
 800cfc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0204 	bic.w	r2, r2, #4
 800cfd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	691a      	ldr	r2, [r3, #16]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cfea:	e023      	b.n	800d034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 fc52 	bl	800d89c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d006:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	021a      	lsls	r2, r3, #8
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	430a      	orrs	r2, r1
 800d02a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d02c:	e002      	b.n	800d034 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	75fb      	strb	r3, [r7, #23]
      break;
 800d032:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop

0800d048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d101      	bne.n	800d064 <HAL_TIM_ConfigClockSource+0x1c>
 800d060:	2302      	movs	r3, #2
 800d062:	e0dc      	b.n	800d21e <HAL_TIM_ConfigClockSource+0x1d6>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2202      	movs	r2, #2
 800d070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	4b6a      	ldr	r3, [pc, #424]	; (800d228 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d080:	4013      	ands	r3, r2
 800d082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d08a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a64      	ldr	r2, [pc, #400]	; (800d22c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	f000 80a9 	beq.w	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0a0:	4a62      	ldr	r2, [pc, #392]	; (800d22c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	f200 80ae 	bhi.w	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0a8:	4a61      	ldr	r2, [pc, #388]	; (800d230 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	f000 80a1 	beq.w	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0b0:	4a5f      	ldr	r2, [pc, #380]	; (800d230 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	f200 80a6 	bhi.w	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0b8:	4a5e      	ldr	r2, [pc, #376]	; (800d234 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	f000 8099 	beq.w	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0c0:	4a5c      	ldr	r2, [pc, #368]	; (800d234 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	f200 809e 	bhi.w	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0cc:	f000 8091 	beq.w	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0d4:	f200 8096 	bhi.w	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0dc:	f000 8089 	beq.w	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0e4:	f200 808e 	bhi.w	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ec:	d03e      	beq.n	800d16c <HAL_TIM_ConfigClockSource+0x124>
 800d0ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0f2:	f200 8087 	bhi.w	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0fa:	f000 8086 	beq.w	800d20a <HAL_TIM_ConfigClockSource+0x1c2>
 800d0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d102:	d87f      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d104:	2b70      	cmp	r3, #112	; 0x70
 800d106:	d01a      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0xf6>
 800d108:	2b70      	cmp	r3, #112	; 0x70
 800d10a:	d87b      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d10c:	2b60      	cmp	r3, #96	; 0x60
 800d10e:	d050      	beq.n	800d1b2 <HAL_TIM_ConfigClockSource+0x16a>
 800d110:	2b60      	cmp	r3, #96	; 0x60
 800d112:	d877      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d114:	2b50      	cmp	r3, #80	; 0x50
 800d116:	d03c      	beq.n	800d192 <HAL_TIM_ConfigClockSource+0x14a>
 800d118:	2b50      	cmp	r3, #80	; 0x50
 800d11a:	d873      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d11c:	2b40      	cmp	r3, #64	; 0x40
 800d11e:	d058      	beq.n	800d1d2 <HAL_TIM_ConfigClockSource+0x18a>
 800d120:	2b40      	cmp	r3, #64	; 0x40
 800d122:	d86f      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d124:	2b30      	cmp	r3, #48	; 0x30
 800d126:	d064      	beq.n	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d128:	2b30      	cmp	r3, #48	; 0x30
 800d12a:	d86b      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d12c:	2b20      	cmp	r3, #32
 800d12e:	d060      	beq.n	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d130:	2b20      	cmp	r3, #32
 800d132:	d867      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
 800d134:	2b00      	cmp	r3, #0
 800d136:	d05c      	beq.n	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d138:	2b10      	cmp	r3, #16
 800d13a:	d05a      	beq.n	800d1f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d13c:	e062      	b.n	800d204 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6818      	ldr	r0, [r3, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	6899      	ldr	r1, [r3, #8]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	f000 fc89 	bl	800da64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	609a      	str	r2, [r3, #8]
      break;
 800d16a:	e04f      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6818      	ldr	r0, [r3, #0]
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	6899      	ldr	r1, [r3, #8]
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	f000 fc72 	bl	800da64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689a      	ldr	r2, [r3, #8]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d18e:	609a      	str	r2, [r3, #8]
      break;
 800d190:	e03c      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6818      	ldr	r0, [r3, #0]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	6859      	ldr	r1, [r3, #4]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f000 fbe2 	bl	800d968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2150      	movs	r1, #80	; 0x50
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fc3c 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d1b0:	e02c      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	6859      	ldr	r1, [r3, #4]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f000 fc01 	bl	800d9c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2160      	movs	r1, #96	; 0x60
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 fc2c 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d1d0:	e01c      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	6859      	ldr	r1, [r3, #4]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	461a      	mov	r2, r3
 800d1e0:	f000 fbc2 	bl	800d968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2140      	movs	r1, #64	; 0x40
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f000 fc1c 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d1f0:	e00c      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	f000 fc13 	bl	800da28 <TIM_ITRx_SetConfig>
      break;
 800d202:	e003      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	73fb      	strb	r3, [r7, #15]
      break;
 800d208:	e000      	b.n	800d20c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d20a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	ffceff88 	.word	0xffceff88
 800d22c:	00100040 	.word	0x00100040
 800d230:	00100030 	.word	0x00100030
 800d234:	00100020 	.word	0x00100020

0800d238 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d27c:	bf00      	nop
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a40      	ldr	r2, [pc, #256]	; (800d39c <TIM_Base_SetConfig+0x114>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d013      	beq.n	800d2c8 <TIM_Base_SetConfig+0x40>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2a6:	d00f      	beq.n	800d2c8 <TIM_Base_SetConfig+0x40>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a3d      	ldr	r2, [pc, #244]	; (800d3a0 <TIM_Base_SetConfig+0x118>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d00b      	beq.n	800d2c8 <TIM_Base_SetConfig+0x40>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4a3c      	ldr	r2, [pc, #240]	; (800d3a4 <TIM_Base_SetConfig+0x11c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d007      	beq.n	800d2c8 <TIM_Base_SetConfig+0x40>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a3b      	ldr	r2, [pc, #236]	; (800d3a8 <TIM_Base_SetConfig+0x120>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d003      	beq.n	800d2c8 <TIM_Base_SetConfig+0x40>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a3a      	ldr	r2, [pc, #232]	; (800d3ac <TIM_Base_SetConfig+0x124>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d108      	bne.n	800d2da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a2f      	ldr	r2, [pc, #188]	; (800d39c <TIM_Base_SetConfig+0x114>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d01f      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2e8:	d01b      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a2c      	ldr	r2, [pc, #176]	; (800d3a0 <TIM_Base_SetConfig+0x118>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d017      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a2b      	ldr	r2, [pc, #172]	; (800d3a4 <TIM_Base_SetConfig+0x11c>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d013      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a2a      	ldr	r2, [pc, #168]	; (800d3a8 <TIM_Base_SetConfig+0x120>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d00f      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a29      	ldr	r2, [pc, #164]	; (800d3ac <TIM_Base_SetConfig+0x124>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d00b      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a28      	ldr	r2, [pc, #160]	; (800d3b0 <TIM_Base_SetConfig+0x128>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d007      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a27      	ldr	r2, [pc, #156]	; (800d3b4 <TIM_Base_SetConfig+0x12c>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d003      	beq.n	800d322 <TIM_Base_SetConfig+0x9a>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a26      	ldr	r2, [pc, #152]	; (800d3b8 <TIM_Base_SetConfig+0x130>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d108      	bne.n	800d334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	4313      	orrs	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	689a      	ldr	r2, [r3, #8]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a10      	ldr	r2, [pc, #64]	; (800d39c <TIM_Base_SetConfig+0x114>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00f      	beq.n	800d380 <TIM_Base_SetConfig+0xf8>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a12      	ldr	r2, [pc, #72]	; (800d3ac <TIM_Base_SetConfig+0x124>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d00b      	beq.n	800d380 <TIM_Base_SetConfig+0xf8>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a11      	ldr	r2, [pc, #68]	; (800d3b0 <TIM_Base_SetConfig+0x128>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d007      	beq.n	800d380 <TIM_Base_SetConfig+0xf8>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a10      	ldr	r2, [pc, #64]	; (800d3b4 <TIM_Base_SetConfig+0x12c>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d003      	beq.n	800d380 <TIM_Base_SetConfig+0xf8>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a0f      	ldr	r2, [pc, #60]	; (800d3b8 <TIM_Base_SetConfig+0x130>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d103      	bne.n	800d388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	691a      	ldr	r2, [r3, #16]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	615a      	str	r2, [r3, #20]
}
 800d38e:	bf00      	nop
 800d390:	3714      	adds	r7, #20
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	40010000 	.word	0x40010000
 800d3a0:	40000400 	.word	0x40000400
 800d3a4:	40000800 	.word	0x40000800
 800d3a8:	40000c00 	.word	0x40000c00
 800d3ac:	40010400 	.word	0x40010400
 800d3b0:	40014000 	.word	0x40014000
 800d3b4:	40014400 	.word	0x40014400
 800d3b8:	40014800 	.word	0x40014800

0800d3bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b087      	sub	sp, #28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	f023 0201 	bic.w	r2, r3, #1
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4b37      	ldr	r3, [pc, #220]	; (800d4c4 <TIM_OC1_SetConfig+0x108>)
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 0303 	bic.w	r3, r3, #3
 800d3f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f023 0302 	bic.w	r3, r3, #2
 800d404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a2d      	ldr	r2, [pc, #180]	; (800d4c8 <TIM_OC1_SetConfig+0x10c>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d00f      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a2c      	ldr	r2, [pc, #176]	; (800d4cc <TIM_OC1_SetConfig+0x110>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d00b      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a2b      	ldr	r2, [pc, #172]	; (800d4d0 <TIM_OC1_SetConfig+0x114>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d007      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a2a      	ldr	r2, [pc, #168]	; (800d4d4 <TIM_OC1_SetConfig+0x118>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d003      	beq.n	800d438 <TIM_OC1_SetConfig+0x7c>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a29      	ldr	r2, [pc, #164]	; (800d4d8 <TIM_OC1_SetConfig+0x11c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d10c      	bne.n	800d452 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f023 0308 	bic.w	r3, r3, #8
 800d43e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	4313      	orrs	r3, r2
 800d448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f023 0304 	bic.w	r3, r3, #4
 800d450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a1c      	ldr	r2, [pc, #112]	; (800d4c8 <TIM_OC1_SetConfig+0x10c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d00f      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a1b      	ldr	r2, [pc, #108]	; (800d4cc <TIM_OC1_SetConfig+0x110>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d00b      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a1a      	ldr	r2, [pc, #104]	; (800d4d0 <TIM_OC1_SetConfig+0x114>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d007      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a19      	ldr	r2, [pc, #100]	; (800d4d4 <TIM_OC1_SetConfig+0x118>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d003      	beq.n	800d47a <TIM_OC1_SetConfig+0xbe>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a18      	ldr	r2, [pc, #96]	; (800d4d8 <TIM_OC1_SetConfig+0x11c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d111      	bne.n	800d49e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	4313      	orrs	r3, r2
 800d492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	697a      	ldr	r2, [r7, #20]
 800d4b6:	621a      	str	r2, [r3, #32]
}
 800d4b8:	bf00      	nop
 800d4ba:	371c      	adds	r7, #28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	fffeff8f 	.word	0xfffeff8f
 800d4c8:	40010000 	.word	0x40010000
 800d4cc:	40010400 	.word	0x40010400
 800d4d0:	40014000 	.word	0x40014000
 800d4d4:	40014400 	.word	0x40014400
 800d4d8:	40014800 	.word	0x40014800

0800d4dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b087      	sub	sp, #28
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	f023 0210 	bic.w	r2, r3, #16
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	4b34      	ldr	r3, [pc, #208]	; (800d5d8 <TIM_OC2_SetConfig+0xfc>)
 800d508:	4013      	ands	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f023 0320 	bic.w	r3, r3, #32
 800d526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	011b      	lsls	r3, r3, #4
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	4313      	orrs	r3, r2
 800d532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a29      	ldr	r2, [pc, #164]	; (800d5dc <TIM_OC2_SetConfig+0x100>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d003      	beq.n	800d544 <TIM_OC2_SetConfig+0x68>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a28      	ldr	r2, [pc, #160]	; (800d5e0 <TIM_OC2_SetConfig+0x104>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d10d      	bne.n	800d560 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d54a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	011b      	lsls	r3, r3, #4
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	4313      	orrs	r3, r2
 800d556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d55e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a1e      	ldr	r2, [pc, #120]	; (800d5dc <TIM_OC2_SetConfig+0x100>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d00f      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a1d      	ldr	r2, [pc, #116]	; (800d5e0 <TIM_OC2_SetConfig+0x104>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d00b      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a1c      	ldr	r2, [pc, #112]	; (800d5e4 <TIM_OC2_SetConfig+0x108>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d007      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a1b      	ldr	r2, [pc, #108]	; (800d5e8 <TIM_OC2_SetConfig+0x10c>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d003      	beq.n	800d588 <TIM_OC2_SetConfig+0xac>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a1a      	ldr	r2, [pc, #104]	; (800d5ec <TIM_OC2_SetConfig+0x110>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d113      	bne.n	800d5b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d58e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	693a      	ldr	r2, [r7, #16]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	693a      	ldr	r2, [r7, #16]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	693a      	ldr	r2, [r7, #16]
 800d5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	621a      	str	r2, [r3, #32]
}
 800d5ca:	bf00      	nop
 800d5cc:	371c      	adds	r7, #28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	feff8fff 	.word	0xfeff8fff
 800d5dc:	40010000 	.word	0x40010000
 800d5e0:	40010400 	.word	0x40010400
 800d5e4:	40014000 	.word	0x40014000
 800d5e8:	40014400 	.word	0x40014400
 800d5ec:	40014800 	.word	0x40014800

0800d5f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b087      	sub	sp, #28
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	69db      	ldr	r3, [r3, #28]
 800d616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	4b33      	ldr	r3, [pc, #204]	; (800d6e8 <TIM_OC3_SetConfig+0xf8>)
 800d61c:	4013      	ands	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f023 0303 	bic.w	r3, r3, #3
 800d626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	4313      	orrs	r3, r2
 800d630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	021b      	lsls	r3, r3, #8
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	4313      	orrs	r3, r2
 800d644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a28      	ldr	r2, [pc, #160]	; (800d6ec <TIM_OC3_SetConfig+0xfc>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d003      	beq.n	800d656 <TIM_OC3_SetConfig+0x66>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a27      	ldr	r2, [pc, #156]	; (800d6f0 <TIM_OC3_SetConfig+0x100>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d10d      	bne.n	800d672 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d65c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	021b      	lsls	r3, r3, #8
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	4313      	orrs	r3, r2
 800d668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a1d      	ldr	r2, [pc, #116]	; (800d6ec <TIM_OC3_SetConfig+0xfc>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00f      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a1c      	ldr	r2, [pc, #112]	; (800d6f0 <TIM_OC3_SetConfig+0x100>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00b      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a1b      	ldr	r2, [pc, #108]	; (800d6f4 <TIM_OC3_SetConfig+0x104>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a1a      	ldr	r2, [pc, #104]	; (800d6f8 <TIM_OC3_SetConfig+0x108>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d003      	beq.n	800d69a <TIM_OC3_SetConfig+0xaa>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a19      	ldr	r2, [pc, #100]	; (800d6fc <TIM_OC3_SetConfig+0x10c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d113      	bne.n	800d6c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	011b      	lsls	r3, r3, #4
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	621a      	str	r2, [r3, #32]
}
 800d6dc:	bf00      	nop
 800d6de:	371c      	adds	r7, #28
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	fffeff8f 	.word	0xfffeff8f
 800d6ec:	40010000 	.word	0x40010000
 800d6f0:	40010400 	.word	0x40010400
 800d6f4:	40014000 	.word	0x40014000
 800d6f8:	40014400 	.word	0x40014400
 800d6fc:	40014800 	.word	0x40014800

0800d700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d700:	b480      	push	{r7}
 800d702:	b087      	sub	sp, #28
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	4b24      	ldr	r3, [pc, #144]	; (800d7bc <TIM_OC4_SetConfig+0xbc>)
 800d72c:	4013      	ands	r3, r2
 800d72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	4313      	orrs	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d74a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	031b      	lsls	r3, r3, #12
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	4313      	orrs	r3, r2
 800d756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a19      	ldr	r2, [pc, #100]	; (800d7c0 <TIM_OC4_SetConfig+0xc0>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d00f      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a18      	ldr	r2, [pc, #96]	; (800d7c4 <TIM_OC4_SetConfig+0xc4>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d00b      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a17      	ldr	r2, [pc, #92]	; (800d7c8 <TIM_OC4_SetConfig+0xc8>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d007      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a16      	ldr	r2, [pc, #88]	; (800d7cc <TIM_OC4_SetConfig+0xcc>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d003      	beq.n	800d780 <TIM_OC4_SetConfig+0x80>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a15      	ldr	r2, [pc, #84]	; (800d7d0 <TIM_OC4_SetConfig+0xd0>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d109      	bne.n	800d794 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	695b      	ldr	r3, [r3, #20]
 800d78c:	019b      	lsls	r3, r3, #6
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	4313      	orrs	r3, r2
 800d792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	621a      	str	r2, [r3, #32]
}
 800d7ae:	bf00      	nop
 800d7b0:	371c      	adds	r7, #28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	feff8fff 	.word	0xfeff8fff
 800d7c0:	40010000 	.word	0x40010000
 800d7c4:	40010400 	.word	0x40010400
 800d7c8:	40014000 	.word	0x40014000
 800d7cc:	40014400 	.word	0x40014400
 800d7d0:	40014800 	.word	0x40014800

0800d7d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	4b21      	ldr	r3, [pc, #132]	; (800d884 <TIM_OC5_SetConfig+0xb0>)
 800d800:	4013      	ands	r3, r2
 800d802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	041b      	lsls	r3, r3, #16
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	4313      	orrs	r3, r2
 800d820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a18      	ldr	r2, [pc, #96]	; (800d888 <TIM_OC5_SetConfig+0xb4>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d00f      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a17      	ldr	r2, [pc, #92]	; (800d88c <TIM_OC5_SetConfig+0xb8>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d00b      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a16      	ldr	r2, [pc, #88]	; (800d890 <TIM_OC5_SetConfig+0xbc>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d007      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a15      	ldr	r2, [pc, #84]	; (800d894 <TIM_OC5_SetConfig+0xc0>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d003      	beq.n	800d84a <TIM_OC5_SetConfig+0x76>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a14      	ldr	r2, [pc, #80]	; (800d898 <TIM_OC5_SetConfig+0xc4>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d109      	bne.n	800d85e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	021b      	lsls	r3, r3, #8
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	693a      	ldr	r2, [r7, #16]
 800d876:	621a      	str	r2, [r3, #32]
}
 800d878:	bf00      	nop
 800d87a:	371c      	adds	r7, #28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	fffeff8f 	.word	0xfffeff8f
 800d888:	40010000 	.word	0x40010000
 800d88c:	40010400 	.word	0x40010400
 800d890:	40014000 	.word	0x40014000
 800d894:	40014400 	.word	0x40014400
 800d898:	40014800 	.word	0x40014800

0800d89c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b087      	sub	sp, #28
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	4b22      	ldr	r3, [pc, #136]	; (800d950 <TIM_OC6_SetConfig+0xb4>)
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	021b      	lsls	r3, r3, #8
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	051b      	lsls	r3, r3, #20
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a19      	ldr	r2, [pc, #100]	; (800d954 <TIM_OC6_SetConfig+0xb8>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d00f      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a18      	ldr	r2, [pc, #96]	; (800d958 <TIM_OC6_SetConfig+0xbc>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d00b      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a17      	ldr	r2, [pc, #92]	; (800d95c <TIM_OC6_SetConfig+0xc0>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d007      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a16      	ldr	r2, [pc, #88]	; (800d960 <TIM_OC6_SetConfig+0xc4>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d003      	beq.n	800d914 <TIM_OC6_SetConfig+0x78>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a15      	ldr	r2, [pc, #84]	; (800d964 <TIM_OC6_SetConfig+0xc8>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d109      	bne.n	800d928 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d91a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	029b      	lsls	r3, r3, #10
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	4313      	orrs	r3, r2
 800d926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	621a      	str	r2, [r3, #32]
}
 800d942:	bf00      	nop
 800d944:	371c      	adds	r7, #28
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	feff8fff 	.word	0xfeff8fff
 800d954:	40010000 	.word	0x40010000
 800d958:	40010400 	.word	0x40010400
 800d95c:	40014000 	.word	0x40014000
 800d960:	40014400 	.word	0x40014400
 800d964:	40014800 	.word	0x40014800

0800d968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d968:	b480      	push	{r7}
 800d96a:	b087      	sub	sp, #28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	f023 0201 	bic.w	r2, r3, #1
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	011b      	lsls	r3, r3, #4
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	4313      	orrs	r3, r2
 800d99c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f023 030a 	bic.w	r3, r3, #10
 800d9a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	621a      	str	r2, [r3, #32]
}
 800d9ba:	bf00      	nop
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	b087      	sub	sp, #28
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	60f8      	str	r0, [r7, #12]
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	f023 0210 	bic.w	r2, r3, #16
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6a1b      	ldr	r3, [r3, #32]
 800d9e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	031b      	lsls	r3, r3, #12
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	011b      	lsls	r3, r3, #4
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	621a      	str	r2, [r3, #32]
}
 800da1a:	bf00      	nop
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	4b09      	ldr	r3, [pc, #36]	; (800da60 <TIM_ITRx_SetConfig+0x38>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	4313      	orrs	r3, r2
 800da46:	f043 0307 	orr.w	r3, r3, #7
 800da4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	609a      	str	r2, [r3, #8]
}
 800da52:	bf00      	nop
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	ffcfff8f 	.word	0xffcfff8f

0800da64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	021a      	lsls	r2, r3, #8
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	431a      	orrs	r2, r3
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	4313      	orrs	r3, r2
 800da90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	609a      	str	r2, [r3, #8]
}
 800da98:	bf00      	nop
 800da9a:	371c      	adds	r7, #28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	f003 031f 	and.w	r3, r3, #31
 800dab6:	2201      	movs	r2, #1
 800dab8:	fa02 f303 	lsl.w	r3, r2, r3
 800dabc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6a1a      	ldr	r2, [r3, #32]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	43db      	mvns	r3, r3
 800dac6:	401a      	ands	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6a1a      	ldr	r2, [r3, #32]
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	f003 031f 	and.w	r3, r3, #31
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	fa01 f303 	lsl.w	r3, r1, r3
 800dadc:	431a      	orrs	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	621a      	str	r2, [r3, #32]
}
 800dae2:	bf00      	nop
 800dae4:	371c      	adds	r7, #28
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
	...

0800daf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db04:	2302      	movs	r3, #2
 800db06:	e06d      	b.n	800dbe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2202      	movs	r2, #2
 800db14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a30      	ldr	r2, [pc, #192]	; (800dbf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d004      	beq.n	800db3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a2f      	ldr	r2, [pc, #188]	; (800dbf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d108      	bne.n	800db4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a20      	ldr	r2, [pc, #128]	; (800dbf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d022      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db7a:	d01d      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a1d      	ldr	r2, [pc, #116]	; (800dbf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d018      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a1c      	ldr	r2, [pc, #112]	; (800dbfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d013      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a1a      	ldr	r2, [pc, #104]	; (800dc00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d00e      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a15      	ldr	r2, [pc, #84]	; (800dbf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d009      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a16      	ldr	r2, [pc, #88]	; (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d004      	beq.n	800dbb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a15      	ldr	r2, [pc, #84]	; (800dc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d10c      	bne.n	800dbd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	40010000 	.word	0x40010000
 800dbf4:	40010400 	.word	0x40010400
 800dbf8:	40000400 	.word	0x40000400
 800dbfc:	40000800 	.word	0x40000800
 800dc00:	40000c00 	.word	0x40000c00
 800dc04:	40001800 	.word	0x40001800
 800dc08:	40014000 	.word	0x40014000

0800dc0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d101      	bne.n	800dc28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc24:	2302      	movs	r3, #2
 800dc26:	e065      	b.n	800dcf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	4313      	orrs	r3, r2
 800dc82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a16      	ldr	r2, [pc, #88]	; (800dd00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d004      	beq.n	800dcb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a14      	ldr	r2, [pc, #80]	; (800dd04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d115      	bne.n	800dce2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	051b      	lsls	r3, r3, #20
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	40010000 	.word	0x40010000
 800dd04:	40010400 	.word	0x40010400

0800dd08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e042      	b.n	800dddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7f4 fbb7 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2224      	movs	r2, #36	; 0x24
 800dd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f022 0201 	bic.w	r2, r2, #1
 800dd84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fcd6 	bl	800e738 <UART_SetConfig>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d101      	bne.n	800dd96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e022      	b.n	800dddc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d002      	beq.n	800dda4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f001 fa32 	bl	800f208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ddc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f042 0201 	orr.w	r2, r2, #1
 800ddd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 fab9 	bl	800f34c <UART_CheckIdleState>
 800ddda:	4603      	mov	r3, r0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08a      	sub	sp, #40	; 0x28
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddfa:	2b20      	cmp	r3, #32
 800ddfc:	f040 8083 	bne.w	800df06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d002      	beq.n	800de0c <HAL_UART_Transmit+0x28>
 800de06:	88fb      	ldrh	r3, [r7, #6]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	e07b      	b.n	800df08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de16:	2b01      	cmp	r3, #1
 800de18:	d101      	bne.n	800de1e <HAL_UART_Transmit+0x3a>
 800de1a:	2302      	movs	r3, #2
 800de1c:	e074      	b.n	800df08 <HAL_UART_Transmit+0x124>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2200      	movs	r2, #0
 800de2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2221      	movs	r2, #33	; 0x21
 800de32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de36:	f7f4 fdbf 	bl	80029b8 <HAL_GetTick>
 800de3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	88fa      	ldrh	r2, [r7, #6]
 800de40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	88fa      	ldrh	r2, [r7, #6]
 800de48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de54:	d108      	bne.n	800de68 <HAL_UART_Transmit+0x84>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d104      	bne.n	800de68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800de5e:	2300      	movs	r3, #0
 800de60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	61bb      	str	r3, [r7, #24]
 800de66:	e003      	b.n	800de70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2200      	movs	r2, #0
 800de74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800de78:	e02c      	b.n	800ded4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2200      	movs	r2, #0
 800de82:	2180      	movs	r1, #128	; 0x80
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f001 faac 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800de90:	2303      	movs	r3, #3
 800de92:	e039      	b.n	800df08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10b      	bne.n	800deb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	461a      	mov	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dea8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	3302      	adds	r3, #2
 800deae:	61bb      	str	r3, [r7, #24]
 800deb0:	e007      	b.n	800dec2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	781a      	ldrb	r2, [r3, #0]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	3301      	adds	r3, #1
 800dec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dec8:	b29b      	uxth	r3, r3
 800deca:	3b01      	subs	r3, #1
 800decc:	b29a      	uxth	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800deda:	b29b      	uxth	r3, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1cc      	bne.n	800de7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	2200      	movs	r2, #0
 800dee8:	2140      	movs	r1, #64	; 0x40
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f001 fa79 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800def6:	2303      	movs	r3, #3
 800def8:	e006      	b.n	800df08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2220      	movs	r2, #32
 800defe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800df02:	2300      	movs	r3, #0
 800df04:	e000      	b.n	800df08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800df06:	2302      	movs	r3, #2
  }
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3720      	adds	r7, #32
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08a      	sub	sp, #40	; 0x28
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	4613      	mov	r3, r2
 800df1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df24:	2b20      	cmp	r3, #32
 800df26:	d142      	bne.n	800dfae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d002      	beq.n	800df34 <HAL_UART_Receive_IT+0x24>
 800df2e:	88fb      	ldrh	r3, [r7, #6]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	e03b      	b.n	800dfb0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d101      	bne.n	800df46 <HAL_UART_Receive_IT+0x36>
 800df42:	2302      	movs	r3, #2
 800df44:	e034      	b.n	800dfb0 <HAL_UART_Receive_IT+0xa0>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a17      	ldr	r2, [pc, #92]	; (800dfb8 <HAL_UART_Receive_IT+0xa8>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d01f      	beq.n	800df9e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d018      	beq.n	800df9e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	e853 3f00 	ldrex	r3, [r3]
 800df78:	613b      	str	r3, [r7, #16]
   return(result);
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df80:	627b      	str	r3, [r7, #36]	; 0x24
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	461a      	mov	r2, r3
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	623b      	str	r3, [r7, #32]
 800df8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8e:	69f9      	ldr	r1, [r7, #28]
 800df90:	6a3a      	ldr	r2, [r7, #32]
 800df92:	e841 2300 	strex	r3, r2, [r1]
 800df96:	61bb      	str	r3, [r7, #24]
   return(result);
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1e6      	bne.n	800df6c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800df9e:	88fb      	ldrh	r3, [r7, #6]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	68b9      	ldr	r1, [r7, #8]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f001 fae5 	bl	800f574 <UART_Start_Receive_IT>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	e000      	b.n	800dfb0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dfae:	2302      	movs	r3, #2
  }
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3728      	adds	r7, #40	; 0x28
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	58000c00 	.word	0x58000c00

0800dfbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b0ba      	sub	sp, #232	; 0xe8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	69db      	ldr	r3, [r3, #28]
 800dfca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dfe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dfe6:	f640 030f 	movw	r3, #2063	; 0x80f
 800dfea:	4013      	ands	r3, r2
 800dfec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d11b      	bne.n	800e030 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dffc:	f003 0320 	and.w	r3, r3, #32
 800e000:	2b00      	cmp	r3, #0
 800e002:	d015      	beq.n	800e030 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e008:	f003 0320 	and.w	r3, r3, #32
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d105      	bne.n	800e01c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d009      	beq.n	800e030 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e020:	2b00      	cmp	r3, #0
 800e022:	f000 835a 	beq.w	800e6da <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	4798      	blx	r3
      }
      return;
 800e02e:	e354      	b.n	800e6da <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 811f 	beq.w	800e278 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e03a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e03e:	4b8b      	ldr	r3, [pc, #556]	; (800e26c <HAL_UART_IRQHandler+0x2b0>)
 800e040:	4013      	ands	r3, r2
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e046:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e04a:	4b89      	ldr	r3, [pc, #548]	; (800e270 <HAL_UART_IRQHandler+0x2b4>)
 800e04c:	4013      	ands	r3, r2
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 8112 	beq.w	800e278 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d011      	beq.n	800e084 <HAL_UART_IRQHandler+0xc8>
 800e060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00b      	beq.n	800e084 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2201      	movs	r2, #1
 800e072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e07a:	f043 0201 	orr.w	r2, r3, #1
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e088:	f003 0302 	and.w	r3, r3, #2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d011      	beq.n	800e0b4 <HAL_UART_IRQHandler+0xf8>
 800e090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00b      	beq.n	800e0b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2202      	movs	r2, #2
 800e0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0aa:	f043 0204 	orr.w	r2, r3, #4
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d011      	beq.n	800e0e4 <HAL_UART_IRQHandler+0x128>
 800e0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00b      	beq.n	800e0e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2204      	movs	r2, #4
 800e0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0da:	f043 0202 	orr.w	r2, r3, #2
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0e8:	f003 0308 	and.w	r3, r3, #8
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d017      	beq.n	800e120 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0f4:	f003 0320 	and.w	r3, r3, #32
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d105      	bne.n	800e108 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e0fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e100:	4b5a      	ldr	r3, [pc, #360]	; (800e26c <HAL_UART_IRQHandler+0x2b0>)
 800e102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00b      	beq.n	800e120 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2208      	movs	r2, #8
 800e10e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e116:	f043 0208 	orr.w	r2, r3, #8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d012      	beq.n	800e152 <HAL_UART_IRQHandler+0x196>
 800e12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00c      	beq.n	800e152 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e148:	f043 0220 	orr.w	r2, r3, #32
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 82c0 	beq.w	800e6de <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e162:	f003 0320 	and.w	r3, r3, #32
 800e166:	2b00      	cmp	r3, #0
 800e168:	d013      	beq.n	800e192 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e16e:	f003 0320 	and.w	r3, r3, #32
 800e172:	2b00      	cmp	r3, #0
 800e174:	d105      	bne.n	800e182 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e17a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d007      	beq.n	800e192 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1a6:	2b40      	cmp	r3, #64	; 0x40
 800e1a8:	d005      	beq.n	800e1b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d04f      	beq.n	800e256 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f001 fb06 	bl	800f7c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1c6:	2b40      	cmp	r3, #64	; 0x40
 800e1c8:	d141      	bne.n	800e24e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1d8:	e853 3f00 	ldrex	r3, [r3]
 800e1dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e1e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e1f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e1fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e206:	e841 2300 	strex	r3, r2, [r1]
 800e20a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1d9      	bne.n	800e1ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d013      	beq.n	800e246 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e222:	4a14      	ldr	r2, [pc, #80]	; (800e274 <HAL_UART_IRQHandler+0x2b8>)
 800e224:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7f7 fd4a 	bl	8005cc4 <HAL_DMA_Abort_IT>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d017      	beq.n	800e266 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e240:	4610      	mov	r0, r2
 800e242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e244:	e00f      	b.n	800e266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fa60 	bl	800e70c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e24c:	e00b      	b.n	800e266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fa5c 	bl	800e70c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e254:	e007      	b.n	800e266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 fa58 	bl	800e70c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e264:	e23b      	b.n	800e6de <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e266:	bf00      	nop
    return;
 800e268:	e239      	b.n	800e6de <HAL_UART_IRQHandler+0x722>
 800e26a:	bf00      	nop
 800e26c:	10000001 	.word	0x10000001
 800e270:	04000120 	.word	0x04000120
 800e274:	0800f895 	.word	0x0800f895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	f040 81ce 	bne.w	800e61e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e286:	f003 0310 	and.w	r3, r3, #16
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 81c7 	beq.w	800e61e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e294:	f003 0310 	and.w	r3, r3, #16
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 81c0 	beq.w	800e61e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2210      	movs	r2, #16
 800e2a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b0:	2b40      	cmp	r3, #64	; 0x40
 800e2b2:	f040 813b 	bne.w	800e52c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a8b      	ldr	r2, [pc, #556]	; (800e4ec <HAL_UART_IRQHandler+0x530>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d059      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a89      	ldr	r2, [pc, #548]	; (800e4f0 <HAL_UART_IRQHandler+0x534>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d053      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a87      	ldr	r2, [pc, #540]	; (800e4f4 <HAL_UART_IRQHandler+0x538>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d04d      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a85      	ldr	r2, [pc, #532]	; (800e4f8 <HAL_UART_IRQHandler+0x53c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d047      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a83      	ldr	r2, [pc, #524]	; (800e4fc <HAL_UART_IRQHandler+0x540>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d041      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a81      	ldr	r2, [pc, #516]	; (800e500 <HAL_UART_IRQHandler+0x544>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d03b      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a7f      	ldr	r2, [pc, #508]	; (800e504 <HAL_UART_IRQHandler+0x548>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d035      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a7d      	ldr	r2, [pc, #500]	; (800e508 <HAL_UART_IRQHandler+0x54c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d02f      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a7b      	ldr	r2, [pc, #492]	; (800e50c <HAL_UART_IRQHandler+0x550>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d029      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a79      	ldr	r2, [pc, #484]	; (800e510 <HAL_UART_IRQHandler+0x554>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d023      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a77      	ldr	r2, [pc, #476]	; (800e514 <HAL_UART_IRQHandler+0x558>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d01d      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a75      	ldr	r2, [pc, #468]	; (800e518 <HAL_UART_IRQHandler+0x55c>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d017      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a73      	ldr	r2, [pc, #460]	; (800e51c <HAL_UART_IRQHandler+0x560>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d011      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a71      	ldr	r2, [pc, #452]	; (800e520 <HAL_UART_IRQHandler+0x564>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d00b      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a6f      	ldr	r2, [pc, #444]	; (800e524 <HAL_UART_IRQHandler+0x568>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d005      	beq.n	800e376 <HAL_UART_IRQHandler+0x3ba>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a6d      	ldr	r2, [pc, #436]	; (800e528 <HAL_UART_IRQHandler+0x56c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d105      	bne.n	800e382 <HAL_UART_IRQHandler+0x3c6>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	b29b      	uxth	r3, r3
 800e380:	e004      	b.n	800e38c <HAL_UART_IRQHandler+0x3d0>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e394:	2b00      	cmp	r3, #0
 800e396:	f000 81a4 	beq.w	800e6e2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	f080 819c 	bcs.w	800e6e2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b8:	69db      	ldr	r3, [r3, #28]
 800e3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3be:	f000 8086 	beq.w	800e4ce <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3ce:	e853 3f00 	ldrex	r3, [r3]
 800e3d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e3d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e3f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e3f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e3fc:	e841 2300 	strex	r3, r2, [r1]
 800e400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1da      	bne.n	800e3c2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3308      	adds	r3, #8
 800e412:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e416:	e853 3f00 	ldrex	r3, [r3]
 800e41a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e41c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e41e:	f023 0301 	bic.w	r3, r3, #1
 800e422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3308      	adds	r3, #8
 800e42c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e430:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e434:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e436:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e43c:	e841 2300 	strex	r3, r2, [r1]
 800e440:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1e1      	bne.n	800e40c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3308      	adds	r3, #8
 800e44e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e452:	e853 3f00 	ldrex	r3, [r3]
 800e456:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e45a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e45e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3308      	adds	r3, #8
 800e468:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e46c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e46e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e472:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e3      	bne.n	800e448 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2220      	movs	r2, #32
 800e484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e496:	e853 3f00 	ldrex	r3, [r3]
 800e49a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e49e:	f023 0310 	bic.w	r3, r3, #16
 800e4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4b8:	e841 2300 	strex	r3, r2, [r1]
 800e4bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e4      	bne.n	800e48e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7f7 f8dd 	bl	8005688 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f91c 	bl	800e720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4e8:	e0fb      	b.n	800e6e2 <HAL_UART_IRQHandler+0x726>
 800e4ea:	bf00      	nop
 800e4ec:	40020010 	.word	0x40020010
 800e4f0:	40020028 	.word	0x40020028
 800e4f4:	40020040 	.word	0x40020040
 800e4f8:	40020058 	.word	0x40020058
 800e4fc:	40020070 	.word	0x40020070
 800e500:	40020088 	.word	0x40020088
 800e504:	400200a0 	.word	0x400200a0
 800e508:	400200b8 	.word	0x400200b8
 800e50c:	40020410 	.word	0x40020410
 800e510:	40020428 	.word	0x40020428
 800e514:	40020440 	.word	0x40020440
 800e518:	40020458 	.word	0x40020458
 800e51c:	40020470 	.word	0x40020470
 800e520:	40020488 	.word	0x40020488
 800e524:	400204a0 	.word	0x400204a0
 800e528:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e538:	b29b      	uxth	r3, r3
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e546:	b29b      	uxth	r3, r3
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f000 80cc 	beq.w	800e6e6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e54e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 80c7 	beq.w	800e6e6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	e853 3f00 	ldrex	r3, [r3]
 800e564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e56c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	461a      	mov	r2, r3
 800e576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e57a:	647b      	str	r3, [r7, #68]	; 0x44
 800e57c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e582:	e841 2300 	strex	r3, r2, [r1]
 800e586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1e4      	bne.n	800e558 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3308      	adds	r3, #8
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	e853 3f00 	ldrex	r3, [r3]
 800e59c:	623b      	str	r3, [r7, #32]
   return(result);
 800e59e:	6a3a      	ldr	r2, [r7, #32]
 800e5a0:	4b54      	ldr	r3, [pc, #336]	; (800e6f4 <HAL_UART_IRQHandler+0x738>)
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e5b2:	633a      	str	r2, [r7, #48]	; 0x30
 800e5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ba:	e841 2300 	strex	r3, r2, [r1]
 800e5be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1e3      	bne.n	800e58e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2220      	movs	r2, #32
 800e5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	e853 3f00 	ldrex	r3, [r3]
 800e5e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f023 0310 	bic.w	r3, r3, #16
 800e5ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e5fc:	61fb      	str	r3, [r7, #28]
 800e5fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e600:	69b9      	ldr	r1, [r7, #24]
 800e602:	69fa      	ldr	r2, [r7, #28]
 800e604:	e841 2300 	strex	r3, r2, [r1]
 800e608:	617b      	str	r3, [r7, #20]
   return(result);
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1e4      	bne.n	800e5da <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e614:	4619      	mov	r1, r3
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 f882 	bl	800e720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e61c:	e063      	b.n	800e6e6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00e      	beq.n	800e648 <HAL_UART_IRQHandler+0x68c>
 800e62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d008      	beq.n	800e648 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e63e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f001 fdc5 	bl	80101d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e646:	e051      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e650:	2b00      	cmp	r3, #0
 800e652:	d014      	beq.n	800e67e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d105      	bne.n	800e66c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d008      	beq.n	800e67e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e670:	2b00      	cmp	r3, #0
 800e672:	d03a      	beq.n	800e6ea <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	4798      	blx	r3
    }
    return;
 800e67c:	e035      	b.n	800e6ea <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e686:	2b00      	cmp	r3, #0
 800e688:	d009      	beq.n	800e69e <HAL_UART_IRQHandler+0x6e2>
 800e68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e692:	2b00      	cmp	r3, #0
 800e694:	d003      	beq.n	800e69e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f001 f912 	bl	800f8c0 <UART_EndTransmit_IT>
    return;
 800e69c:	e026      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d009      	beq.n	800e6be <HAL_UART_IRQHandler+0x702>
 800e6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d003      	beq.n	800e6be <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f001 fd9e 	bl	80101f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6bc:	e016      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d010      	beq.n	800e6ec <HAL_UART_IRQHandler+0x730>
 800e6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da0c      	bge.n	800e6ec <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 fd86 	bl	80101e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6d8:	e008      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
      return;
 800e6da:	bf00      	nop
 800e6dc:	e006      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
    return;
 800e6de:	bf00      	nop
 800e6e0:	e004      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
      return;
 800e6e2:	bf00      	nop
 800e6e4:	e002      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
      return;
 800e6e6:	bf00      	nop
 800e6e8:	e000      	b.n	800e6ec <HAL_UART_IRQHandler+0x730>
    return;
 800e6ea:	bf00      	nop
  }
}
 800e6ec:	37e8      	adds	r7, #232	; 0xe8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	effffffe 	.word	0xeffffffe

0800e6f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	460b      	mov	r3, r1
 800e72a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e73c:	b092      	sub	sp, #72	; 0x48
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	689a      	ldr	r2, [r3, #8]
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	691b      	ldr	r3, [r3, #16]
 800e750:	431a      	orrs	r2, r3
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	695b      	ldr	r3, [r3, #20]
 800e756:	431a      	orrs	r2, r3
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	69db      	ldr	r3, [r3, #28]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	4bbe      	ldr	r3, [pc, #760]	; (800ea60 <UART_SetConfig+0x328>)
 800e768:	4013      	ands	r3, r2
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	6812      	ldr	r2, [r2, #0]
 800e76e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e770:	430b      	orrs	r3, r1
 800e772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	68da      	ldr	r2, [r3, #12]
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	430a      	orrs	r2, r1
 800e788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4ab3      	ldr	r2, [pc, #716]	; (800ea64 <UART_SetConfig+0x32c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d004      	beq.n	800e7a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	6a1b      	ldr	r3, [r3, #32]
 800e79e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	689a      	ldr	r2, [r3, #8]
 800e7aa:	4baf      	ldr	r3, [pc, #700]	; (800ea68 <UART_SetConfig+0x330>)
 800e7ac:	4013      	ands	r3, r2
 800e7ae:	697a      	ldr	r2, [r7, #20]
 800e7b0:	6812      	ldr	r2, [r2, #0]
 800e7b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7b4:	430b      	orrs	r3, r1
 800e7b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7be:	f023 010f 	bic.w	r1, r3, #15
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4aa6      	ldr	r2, [pc, #664]	; (800ea6c <UART_SetConfig+0x334>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d177      	bne.n	800e8c8 <UART_SetConfig+0x190>
 800e7d8:	4ba5      	ldr	r3, [pc, #660]	; (800ea70 <UART_SetConfig+0x338>)
 800e7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e7e0:	2b28      	cmp	r3, #40	; 0x28
 800e7e2:	d86d      	bhi.n	800e8c0 <UART_SetConfig+0x188>
 800e7e4:	a201      	add	r2, pc, #4	; (adr r2, 800e7ec <UART_SetConfig+0xb4>)
 800e7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ea:	bf00      	nop
 800e7ec:	0800e891 	.word	0x0800e891
 800e7f0:	0800e8c1 	.word	0x0800e8c1
 800e7f4:	0800e8c1 	.word	0x0800e8c1
 800e7f8:	0800e8c1 	.word	0x0800e8c1
 800e7fc:	0800e8c1 	.word	0x0800e8c1
 800e800:	0800e8c1 	.word	0x0800e8c1
 800e804:	0800e8c1 	.word	0x0800e8c1
 800e808:	0800e8c1 	.word	0x0800e8c1
 800e80c:	0800e899 	.word	0x0800e899
 800e810:	0800e8c1 	.word	0x0800e8c1
 800e814:	0800e8c1 	.word	0x0800e8c1
 800e818:	0800e8c1 	.word	0x0800e8c1
 800e81c:	0800e8c1 	.word	0x0800e8c1
 800e820:	0800e8c1 	.word	0x0800e8c1
 800e824:	0800e8c1 	.word	0x0800e8c1
 800e828:	0800e8c1 	.word	0x0800e8c1
 800e82c:	0800e8a1 	.word	0x0800e8a1
 800e830:	0800e8c1 	.word	0x0800e8c1
 800e834:	0800e8c1 	.word	0x0800e8c1
 800e838:	0800e8c1 	.word	0x0800e8c1
 800e83c:	0800e8c1 	.word	0x0800e8c1
 800e840:	0800e8c1 	.word	0x0800e8c1
 800e844:	0800e8c1 	.word	0x0800e8c1
 800e848:	0800e8c1 	.word	0x0800e8c1
 800e84c:	0800e8a9 	.word	0x0800e8a9
 800e850:	0800e8c1 	.word	0x0800e8c1
 800e854:	0800e8c1 	.word	0x0800e8c1
 800e858:	0800e8c1 	.word	0x0800e8c1
 800e85c:	0800e8c1 	.word	0x0800e8c1
 800e860:	0800e8c1 	.word	0x0800e8c1
 800e864:	0800e8c1 	.word	0x0800e8c1
 800e868:	0800e8c1 	.word	0x0800e8c1
 800e86c:	0800e8b1 	.word	0x0800e8b1
 800e870:	0800e8c1 	.word	0x0800e8c1
 800e874:	0800e8c1 	.word	0x0800e8c1
 800e878:	0800e8c1 	.word	0x0800e8c1
 800e87c:	0800e8c1 	.word	0x0800e8c1
 800e880:	0800e8c1 	.word	0x0800e8c1
 800e884:	0800e8c1 	.word	0x0800e8c1
 800e888:	0800e8c1 	.word	0x0800e8c1
 800e88c:	0800e8b9 	.word	0x0800e8b9
 800e890:	2301      	movs	r3, #1
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e896:	e222      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e898:	2304      	movs	r3, #4
 800e89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89e:	e21e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a6:	e21a      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e8a8:	2310      	movs	r3, #16
 800e8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ae:	e216      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e8b0:	2320      	movs	r3, #32
 800e8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b6:	e212      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e8b8:	2340      	movs	r3, #64	; 0x40
 800e8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8be:	e20e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e8c0:	2380      	movs	r3, #128	; 0x80
 800e8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c6:	e20a      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a69      	ldr	r2, [pc, #420]	; (800ea74 <UART_SetConfig+0x33c>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d130      	bne.n	800e934 <UART_SetConfig+0x1fc>
 800e8d2:	4b67      	ldr	r3, [pc, #412]	; (800ea70 <UART_SetConfig+0x338>)
 800e8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8d6:	f003 0307 	and.w	r3, r3, #7
 800e8da:	2b05      	cmp	r3, #5
 800e8dc:	d826      	bhi.n	800e92c <UART_SetConfig+0x1f4>
 800e8de:	a201      	add	r2, pc, #4	; (adr r2, 800e8e4 <UART_SetConfig+0x1ac>)
 800e8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e4:	0800e8fd 	.word	0x0800e8fd
 800e8e8:	0800e905 	.word	0x0800e905
 800e8ec:	0800e90d 	.word	0x0800e90d
 800e8f0:	0800e915 	.word	0x0800e915
 800e8f4:	0800e91d 	.word	0x0800e91d
 800e8f8:	0800e925 	.word	0x0800e925
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e902:	e1ec      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e904:	2304      	movs	r3, #4
 800e906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e90a:	e1e8      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e90c:	2308      	movs	r3, #8
 800e90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e912:	e1e4      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e914:	2310      	movs	r3, #16
 800e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91a:	e1e0      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e91c:	2320      	movs	r3, #32
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e922:	e1dc      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e924:	2340      	movs	r3, #64	; 0x40
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92a:	e1d8      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e92c:	2380      	movs	r3, #128	; 0x80
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e932:	e1d4      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a4f      	ldr	r2, [pc, #316]	; (800ea78 <UART_SetConfig+0x340>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d130      	bne.n	800e9a0 <UART_SetConfig+0x268>
 800e93e:	4b4c      	ldr	r3, [pc, #304]	; (800ea70 <UART_SetConfig+0x338>)
 800e940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e942:	f003 0307 	and.w	r3, r3, #7
 800e946:	2b05      	cmp	r3, #5
 800e948:	d826      	bhi.n	800e998 <UART_SetConfig+0x260>
 800e94a:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <UART_SetConfig+0x218>)
 800e94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e950:	0800e969 	.word	0x0800e969
 800e954:	0800e971 	.word	0x0800e971
 800e958:	0800e979 	.word	0x0800e979
 800e95c:	0800e981 	.word	0x0800e981
 800e960:	0800e989 	.word	0x0800e989
 800e964:	0800e991 	.word	0x0800e991
 800e968:	2300      	movs	r3, #0
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e1b6      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e970:	2304      	movs	r3, #4
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e1b2      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e978:	2308      	movs	r3, #8
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e1ae      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e980:	2310      	movs	r3, #16
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e1aa      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e988:	2320      	movs	r3, #32
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98e:	e1a6      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e990:	2340      	movs	r3, #64	; 0x40
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e996:	e1a2      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e998:	2380      	movs	r3, #128	; 0x80
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e99e:	e19e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a35      	ldr	r2, [pc, #212]	; (800ea7c <UART_SetConfig+0x344>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d130      	bne.n	800ea0c <UART_SetConfig+0x2d4>
 800e9aa:	4b31      	ldr	r3, [pc, #196]	; (800ea70 <UART_SetConfig+0x338>)
 800e9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ae:	f003 0307 	and.w	r3, r3, #7
 800e9b2:	2b05      	cmp	r3, #5
 800e9b4:	d826      	bhi.n	800ea04 <UART_SetConfig+0x2cc>
 800e9b6:	a201      	add	r2, pc, #4	; (adr r2, 800e9bc <UART_SetConfig+0x284>)
 800e9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9bc:	0800e9d5 	.word	0x0800e9d5
 800e9c0:	0800e9dd 	.word	0x0800e9dd
 800e9c4:	0800e9e5 	.word	0x0800e9e5
 800e9c8:	0800e9ed 	.word	0x0800e9ed
 800e9cc:	0800e9f5 	.word	0x0800e9f5
 800e9d0:	0800e9fd 	.word	0x0800e9fd
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e180      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e9dc:	2304      	movs	r3, #4
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e17c      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e9e4:	2308      	movs	r3, #8
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e178      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e9ec:	2310      	movs	r3, #16
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e174      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e9f4:	2320      	movs	r3, #32
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e170      	b.n	800ecde <UART_SetConfig+0x5a6>
 800e9fc:	2340      	movs	r3, #64	; 0x40
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea02:	e16c      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea04:	2380      	movs	r3, #128	; 0x80
 800ea06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0a:	e168      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a1b      	ldr	r2, [pc, #108]	; (800ea80 <UART_SetConfig+0x348>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d142      	bne.n	800ea9c <UART_SetConfig+0x364>
 800ea16:	4b16      	ldr	r3, [pc, #88]	; (800ea70 <UART_SetConfig+0x338>)
 800ea18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	2b05      	cmp	r3, #5
 800ea20:	d838      	bhi.n	800ea94 <UART_SetConfig+0x35c>
 800ea22:	a201      	add	r2, pc, #4	; (adr r2, 800ea28 <UART_SetConfig+0x2f0>)
 800ea24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea28:	0800ea41 	.word	0x0800ea41
 800ea2c:	0800ea49 	.word	0x0800ea49
 800ea30:	0800ea51 	.word	0x0800ea51
 800ea34:	0800ea59 	.word	0x0800ea59
 800ea38:	0800ea85 	.word	0x0800ea85
 800ea3c:	0800ea8d 	.word	0x0800ea8d
 800ea40:	2300      	movs	r3, #0
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e14a      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea48:	2304      	movs	r3, #4
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4e:	e146      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea50:	2308      	movs	r3, #8
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea56:	e142      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea58:	2310      	movs	r3, #16
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e13e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea60:	cfff69f3 	.word	0xcfff69f3
 800ea64:	58000c00 	.word	0x58000c00
 800ea68:	11fff4ff 	.word	0x11fff4ff
 800ea6c:	40011000 	.word	0x40011000
 800ea70:	58024400 	.word	0x58024400
 800ea74:	40004400 	.word	0x40004400
 800ea78:	40004800 	.word	0x40004800
 800ea7c:	40004c00 	.word	0x40004c00
 800ea80:	40005000 	.word	0x40005000
 800ea84:	2320      	movs	r3, #32
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8a:	e128      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea8c:	2340      	movs	r3, #64	; 0x40
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea92:	e124      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea94:	2380      	movs	r3, #128	; 0x80
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9a:	e120      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4acb      	ldr	r2, [pc, #812]	; (800edd0 <UART_SetConfig+0x698>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d176      	bne.n	800eb94 <UART_SetConfig+0x45c>
 800eaa6:	4bcb      	ldr	r3, [pc, #812]	; (800edd4 <UART_SetConfig+0x69c>)
 800eaa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eaae:	2b28      	cmp	r3, #40	; 0x28
 800eab0:	d86c      	bhi.n	800eb8c <UART_SetConfig+0x454>
 800eab2:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <UART_SetConfig+0x380>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800eb5d 	.word	0x0800eb5d
 800eabc:	0800eb8d 	.word	0x0800eb8d
 800eac0:	0800eb8d 	.word	0x0800eb8d
 800eac4:	0800eb8d 	.word	0x0800eb8d
 800eac8:	0800eb8d 	.word	0x0800eb8d
 800eacc:	0800eb8d 	.word	0x0800eb8d
 800ead0:	0800eb8d 	.word	0x0800eb8d
 800ead4:	0800eb8d 	.word	0x0800eb8d
 800ead8:	0800eb65 	.word	0x0800eb65
 800eadc:	0800eb8d 	.word	0x0800eb8d
 800eae0:	0800eb8d 	.word	0x0800eb8d
 800eae4:	0800eb8d 	.word	0x0800eb8d
 800eae8:	0800eb8d 	.word	0x0800eb8d
 800eaec:	0800eb8d 	.word	0x0800eb8d
 800eaf0:	0800eb8d 	.word	0x0800eb8d
 800eaf4:	0800eb8d 	.word	0x0800eb8d
 800eaf8:	0800eb6d 	.word	0x0800eb6d
 800eafc:	0800eb8d 	.word	0x0800eb8d
 800eb00:	0800eb8d 	.word	0x0800eb8d
 800eb04:	0800eb8d 	.word	0x0800eb8d
 800eb08:	0800eb8d 	.word	0x0800eb8d
 800eb0c:	0800eb8d 	.word	0x0800eb8d
 800eb10:	0800eb8d 	.word	0x0800eb8d
 800eb14:	0800eb8d 	.word	0x0800eb8d
 800eb18:	0800eb75 	.word	0x0800eb75
 800eb1c:	0800eb8d 	.word	0x0800eb8d
 800eb20:	0800eb8d 	.word	0x0800eb8d
 800eb24:	0800eb8d 	.word	0x0800eb8d
 800eb28:	0800eb8d 	.word	0x0800eb8d
 800eb2c:	0800eb8d 	.word	0x0800eb8d
 800eb30:	0800eb8d 	.word	0x0800eb8d
 800eb34:	0800eb8d 	.word	0x0800eb8d
 800eb38:	0800eb7d 	.word	0x0800eb7d
 800eb3c:	0800eb8d 	.word	0x0800eb8d
 800eb40:	0800eb8d 	.word	0x0800eb8d
 800eb44:	0800eb8d 	.word	0x0800eb8d
 800eb48:	0800eb8d 	.word	0x0800eb8d
 800eb4c:	0800eb8d 	.word	0x0800eb8d
 800eb50:	0800eb8d 	.word	0x0800eb8d
 800eb54:	0800eb8d 	.word	0x0800eb8d
 800eb58:	0800eb85 	.word	0x0800eb85
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e0bc      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb64:	2304      	movs	r3, #4
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e0b8      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb6c:	2308      	movs	r3, #8
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e0b4      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb74:	2310      	movs	r3, #16
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e0b0      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb7c:	2320      	movs	r3, #32
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb82:	e0ac      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb84:	2340      	movs	r3, #64	; 0x40
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8a:	e0a8      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb8c:	2380      	movs	r3, #128	; 0x80
 800eb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb92:	e0a4      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a8f      	ldr	r2, [pc, #572]	; (800edd8 <UART_SetConfig+0x6a0>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d130      	bne.n	800ec00 <UART_SetConfig+0x4c8>
 800eb9e:	4b8d      	ldr	r3, [pc, #564]	; (800edd4 <UART_SetConfig+0x69c>)
 800eba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eba2:	f003 0307 	and.w	r3, r3, #7
 800eba6:	2b05      	cmp	r3, #5
 800eba8:	d826      	bhi.n	800ebf8 <UART_SetConfig+0x4c0>
 800ebaa:	a201      	add	r2, pc, #4	; (adr r2, 800ebb0 <UART_SetConfig+0x478>)
 800ebac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb0:	0800ebc9 	.word	0x0800ebc9
 800ebb4:	0800ebd1 	.word	0x0800ebd1
 800ebb8:	0800ebd9 	.word	0x0800ebd9
 800ebbc:	0800ebe1 	.word	0x0800ebe1
 800ebc0:	0800ebe9 	.word	0x0800ebe9
 800ebc4:	0800ebf1 	.word	0x0800ebf1
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e086      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ebd0:	2304      	movs	r3, #4
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e082      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ebd8:	2308      	movs	r3, #8
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e07e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ebe0:	2310      	movs	r3, #16
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e07a      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ebe8:	2320      	movs	r3, #32
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e076      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ebf0:	2340      	movs	r3, #64	; 0x40
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf6:	e072      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ebf8:	2380      	movs	r3, #128	; 0x80
 800ebfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfe:	e06e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a75      	ldr	r2, [pc, #468]	; (800eddc <UART_SetConfig+0x6a4>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d130      	bne.n	800ec6c <UART_SetConfig+0x534>
 800ec0a:	4b72      	ldr	r3, [pc, #456]	; (800edd4 <UART_SetConfig+0x69c>)
 800ec0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec0e:	f003 0307 	and.w	r3, r3, #7
 800ec12:	2b05      	cmp	r3, #5
 800ec14:	d826      	bhi.n	800ec64 <UART_SetConfig+0x52c>
 800ec16:	a201      	add	r2, pc, #4	; (adr r2, 800ec1c <UART_SetConfig+0x4e4>)
 800ec18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec1c:	0800ec35 	.word	0x0800ec35
 800ec20:	0800ec3d 	.word	0x0800ec3d
 800ec24:	0800ec45 	.word	0x0800ec45
 800ec28:	0800ec4d 	.word	0x0800ec4d
 800ec2c:	0800ec55 	.word	0x0800ec55
 800ec30:	0800ec5d 	.word	0x0800ec5d
 800ec34:	2300      	movs	r3, #0
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e050      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec3c:	2304      	movs	r3, #4
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e04c      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec44:	2308      	movs	r3, #8
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e048      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec4c:	2310      	movs	r3, #16
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e044      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec54:	2320      	movs	r3, #32
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5a:	e040      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec5c:	2340      	movs	r3, #64	; 0x40
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec62:	e03c      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec64:	2380      	movs	r3, #128	; 0x80
 800ec66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec6a:	e038      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a5b      	ldr	r2, [pc, #364]	; (800ede0 <UART_SetConfig+0x6a8>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d130      	bne.n	800ecd8 <UART_SetConfig+0x5a0>
 800ec76:	4b57      	ldr	r3, [pc, #348]	; (800edd4 <UART_SetConfig+0x69c>)
 800ec78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec7a:	f003 0307 	and.w	r3, r3, #7
 800ec7e:	2b05      	cmp	r3, #5
 800ec80:	d826      	bhi.n	800ecd0 <UART_SetConfig+0x598>
 800ec82:	a201      	add	r2, pc, #4	; (adr r2, 800ec88 <UART_SetConfig+0x550>)
 800ec84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec88:	0800eca1 	.word	0x0800eca1
 800ec8c:	0800eca9 	.word	0x0800eca9
 800ec90:	0800ecb1 	.word	0x0800ecb1
 800ec94:	0800ecb9 	.word	0x0800ecb9
 800ec98:	0800ecc1 	.word	0x0800ecc1
 800ec9c:	0800ecc9 	.word	0x0800ecc9
 800eca0:	2302      	movs	r3, #2
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e01a      	b.n	800ecde <UART_SetConfig+0x5a6>
 800eca8:	2304      	movs	r3, #4
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e016      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ecb0:	2308      	movs	r3, #8
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb6:	e012      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ecb8:	2310      	movs	r3, #16
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecbe:	e00e      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ecc0:	2320      	movs	r3, #32
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc6:	e00a      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ecc8:	2340      	movs	r3, #64	; 0x40
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecce:	e006      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ecd0:	2380      	movs	r3, #128	; 0x80
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd6:	e002      	b.n	800ecde <UART_SetConfig+0x5a6>
 800ecd8:	2380      	movs	r3, #128	; 0x80
 800ecda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a3f      	ldr	r2, [pc, #252]	; (800ede0 <UART_SetConfig+0x6a8>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	f040 80f8 	bne.w	800eeda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecee:	2b20      	cmp	r3, #32
 800ecf0:	dc46      	bgt.n	800ed80 <UART_SetConfig+0x648>
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	f2c0 8082 	blt.w	800edfc <UART_SetConfig+0x6c4>
 800ecf8:	3b02      	subs	r3, #2
 800ecfa:	2b1e      	cmp	r3, #30
 800ecfc:	d87e      	bhi.n	800edfc <UART_SetConfig+0x6c4>
 800ecfe:	a201      	add	r2, pc, #4	; (adr r2, 800ed04 <UART_SetConfig+0x5cc>)
 800ed00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed04:	0800ed87 	.word	0x0800ed87
 800ed08:	0800edfd 	.word	0x0800edfd
 800ed0c:	0800ed8f 	.word	0x0800ed8f
 800ed10:	0800edfd 	.word	0x0800edfd
 800ed14:	0800edfd 	.word	0x0800edfd
 800ed18:	0800edfd 	.word	0x0800edfd
 800ed1c:	0800ed9f 	.word	0x0800ed9f
 800ed20:	0800edfd 	.word	0x0800edfd
 800ed24:	0800edfd 	.word	0x0800edfd
 800ed28:	0800edfd 	.word	0x0800edfd
 800ed2c:	0800edfd 	.word	0x0800edfd
 800ed30:	0800edfd 	.word	0x0800edfd
 800ed34:	0800edfd 	.word	0x0800edfd
 800ed38:	0800edfd 	.word	0x0800edfd
 800ed3c:	0800edaf 	.word	0x0800edaf
 800ed40:	0800edfd 	.word	0x0800edfd
 800ed44:	0800edfd 	.word	0x0800edfd
 800ed48:	0800edfd 	.word	0x0800edfd
 800ed4c:	0800edfd 	.word	0x0800edfd
 800ed50:	0800edfd 	.word	0x0800edfd
 800ed54:	0800edfd 	.word	0x0800edfd
 800ed58:	0800edfd 	.word	0x0800edfd
 800ed5c:	0800edfd 	.word	0x0800edfd
 800ed60:	0800edfd 	.word	0x0800edfd
 800ed64:	0800edfd 	.word	0x0800edfd
 800ed68:	0800edfd 	.word	0x0800edfd
 800ed6c:	0800edfd 	.word	0x0800edfd
 800ed70:	0800edfd 	.word	0x0800edfd
 800ed74:	0800edfd 	.word	0x0800edfd
 800ed78:	0800edfd 	.word	0x0800edfd
 800ed7c:	0800edef 	.word	0x0800edef
 800ed80:	2b40      	cmp	r3, #64	; 0x40
 800ed82:	d037      	beq.n	800edf4 <UART_SetConfig+0x6bc>
 800ed84:	e03a      	b.n	800edfc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed86:	f7fc f8a9 	bl	800aedc <HAL_RCCEx_GetD3PCLK1Freq>
 800ed8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed8c:	e03c      	b.n	800ee08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fc f8b8 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed9c:	e034      	b.n	800ee08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed9e:	f107 0318 	add.w	r3, r7, #24
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fc fa04 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edac:	e02c      	b.n	800ee08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edae:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <UART_SetConfig+0x69c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f003 0320 	and.w	r3, r3, #32
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d016      	beq.n	800ede8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edba:	4b06      	ldr	r3, [pc, #24]	; (800edd4 <UART_SetConfig+0x69c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	08db      	lsrs	r3, r3, #3
 800edc0:	f003 0303 	and.w	r3, r3, #3
 800edc4:	4a07      	ldr	r2, [pc, #28]	; (800ede4 <UART_SetConfig+0x6ac>)
 800edc6:	fa22 f303 	lsr.w	r3, r2, r3
 800edca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edcc:	e01c      	b.n	800ee08 <UART_SetConfig+0x6d0>
 800edce:	bf00      	nop
 800edd0:	40011400 	.word	0x40011400
 800edd4:	58024400 	.word	0x58024400
 800edd8:	40007800 	.word	0x40007800
 800eddc:	40007c00 	.word	0x40007c00
 800ede0:	58000c00 	.word	0x58000c00
 800ede4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ede8:	4b9d      	ldr	r3, [pc, #628]	; (800f060 <UART_SetConfig+0x928>)
 800edea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edec:	e00c      	b.n	800ee08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edee:	4b9d      	ldr	r3, [pc, #628]	; (800f064 <UART_SetConfig+0x92c>)
 800edf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edf2:	e009      	b.n	800ee08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edfa:	e005      	b.n	800ee08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800edfc:	2300      	movs	r3, #0
 800edfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee00:	2301      	movs	r3, #1
 800ee02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 81de 	beq.w	800f1cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee14:	4a94      	ldr	r2, [pc, #592]	; (800f068 <UART_SetConfig+0x930>)
 800ee16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee22:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	685a      	ldr	r2, [r3, #4]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	4413      	add	r3, r2
 800ee2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d305      	bcc.n	800ee40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d903      	bls.n	800ee48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ee40:	2301      	movs	r3, #1
 800ee42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee46:	e1c1      	b.n	800f1cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	60bb      	str	r3, [r7, #8]
 800ee4e:	60fa      	str	r2, [r7, #12]
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee54:	4a84      	ldr	r2, [pc, #528]	; (800f068 <UART_SetConfig+0x930>)
 800ee56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	607a      	str	r2, [r7, #4]
 800ee62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee6a:	f7f1 fa35 	bl	80002d8 <__aeabi_uldivmod>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4610      	mov	r0, r2
 800ee74:	4619      	mov	r1, r3
 800ee76:	f04f 0200 	mov.w	r2, #0
 800ee7a:	f04f 0300 	mov.w	r3, #0
 800ee7e:	020b      	lsls	r3, r1, #8
 800ee80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee84:	0202      	lsls	r2, r0, #8
 800ee86:	6979      	ldr	r1, [r7, #20]
 800ee88:	6849      	ldr	r1, [r1, #4]
 800ee8a:	0849      	lsrs	r1, r1, #1
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	4605      	mov	r5, r0
 800ee92:	eb12 0804 	adds.w	r8, r2, r4
 800ee96:	eb43 0905 	adc.w	r9, r3, r5
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	469a      	mov	sl, r3
 800eea2:	4693      	mov	fp, r2
 800eea4:	4652      	mov	r2, sl
 800eea6:	465b      	mov	r3, fp
 800eea8:	4640      	mov	r0, r8
 800eeaa:	4649      	mov	r1, r9
 800eeac:	f7f1 fa14 	bl	80002d8 <__aeabi_uldivmod>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eebe:	d308      	bcc.n	800eed2 <UART_SetConfig+0x79a>
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eec6:	d204      	bcs.n	800eed2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eece:	60da      	str	r2, [r3, #12]
 800eed0:	e17c      	b.n	800f1cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eed8:	e178      	b.n	800f1cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	69db      	ldr	r3, [r3, #28]
 800eede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eee2:	f040 80c5 	bne.w	800f070 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eee6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eeea:	2b20      	cmp	r3, #32
 800eeec:	dc48      	bgt.n	800ef80 <UART_SetConfig+0x848>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	db7b      	blt.n	800efea <UART_SetConfig+0x8b2>
 800eef2:	2b20      	cmp	r3, #32
 800eef4:	d879      	bhi.n	800efea <UART_SetConfig+0x8b2>
 800eef6:	a201      	add	r2, pc, #4	; (adr r2, 800eefc <UART_SetConfig+0x7c4>)
 800eef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefc:	0800ef87 	.word	0x0800ef87
 800ef00:	0800ef8f 	.word	0x0800ef8f
 800ef04:	0800efeb 	.word	0x0800efeb
 800ef08:	0800efeb 	.word	0x0800efeb
 800ef0c:	0800ef97 	.word	0x0800ef97
 800ef10:	0800efeb 	.word	0x0800efeb
 800ef14:	0800efeb 	.word	0x0800efeb
 800ef18:	0800efeb 	.word	0x0800efeb
 800ef1c:	0800efa7 	.word	0x0800efa7
 800ef20:	0800efeb 	.word	0x0800efeb
 800ef24:	0800efeb 	.word	0x0800efeb
 800ef28:	0800efeb 	.word	0x0800efeb
 800ef2c:	0800efeb 	.word	0x0800efeb
 800ef30:	0800efeb 	.word	0x0800efeb
 800ef34:	0800efeb 	.word	0x0800efeb
 800ef38:	0800efeb 	.word	0x0800efeb
 800ef3c:	0800efb7 	.word	0x0800efb7
 800ef40:	0800efeb 	.word	0x0800efeb
 800ef44:	0800efeb 	.word	0x0800efeb
 800ef48:	0800efeb 	.word	0x0800efeb
 800ef4c:	0800efeb 	.word	0x0800efeb
 800ef50:	0800efeb 	.word	0x0800efeb
 800ef54:	0800efeb 	.word	0x0800efeb
 800ef58:	0800efeb 	.word	0x0800efeb
 800ef5c:	0800efeb 	.word	0x0800efeb
 800ef60:	0800efeb 	.word	0x0800efeb
 800ef64:	0800efeb 	.word	0x0800efeb
 800ef68:	0800efeb 	.word	0x0800efeb
 800ef6c:	0800efeb 	.word	0x0800efeb
 800ef70:	0800efeb 	.word	0x0800efeb
 800ef74:	0800efeb 	.word	0x0800efeb
 800ef78:	0800efeb 	.word	0x0800efeb
 800ef7c:	0800efdd 	.word	0x0800efdd
 800ef80:	2b40      	cmp	r3, #64	; 0x40
 800ef82:	d02e      	beq.n	800efe2 <UART_SetConfig+0x8aa>
 800ef84:	e031      	b.n	800efea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef86:	f7fa fb65 	bl	8009654 <HAL_RCC_GetPCLK1Freq>
 800ef8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef8c:	e033      	b.n	800eff6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef8e:	f7fa fb77 	bl	8009680 <HAL_RCC_GetPCLK2Freq>
 800ef92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef94:	e02f      	b.n	800eff6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fb ffb4 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa4:	e027      	b.n	800eff6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efa6:	f107 0318 	add.w	r3, r7, #24
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fc f900 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efb4:	e01f      	b.n	800eff6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efb6:	4b2d      	ldr	r3, [pc, #180]	; (800f06c <UART_SetConfig+0x934>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f003 0320 	and.w	r3, r3, #32
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d009      	beq.n	800efd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efc2:	4b2a      	ldr	r3, [pc, #168]	; (800f06c <UART_SetConfig+0x934>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	08db      	lsrs	r3, r3, #3
 800efc8:	f003 0303 	and.w	r3, r3, #3
 800efcc:	4a24      	ldr	r2, [pc, #144]	; (800f060 <UART_SetConfig+0x928>)
 800efce:	fa22 f303 	lsr.w	r3, r2, r3
 800efd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efd4:	e00f      	b.n	800eff6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800efd6:	4b22      	ldr	r3, [pc, #136]	; (800f060 <UART_SetConfig+0x928>)
 800efd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efda:	e00c      	b.n	800eff6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efdc:	4b21      	ldr	r3, [pc, #132]	; (800f064 <UART_SetConfig+0x92c>)
 800efde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efe0:	e009      	b.n	800eff6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efe8:	e005      	b.n	800eff6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800efea:	2300      	movs	r3, #0
 800efec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 80e7 	beq.w	800f1cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f002:	4a19      	ldr	r2, [pc, #100]	; (800f068 <UART_SetConfig+0x930>)
 800f004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f008:	461a      	mov	r2, r3
 800f00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f010:	005a      	lsls	r2, r3, #1
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	085b      	lsrs	r3, r3, #1
 800f018:	441a      	add	r2, r3
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f022:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f026:	2b0f      	cmp	r3, #15
 800f028:	d916      	bls.n	800f058 <UART_SetConfig+0x920>
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f030:	d212      	bcs.n	800f058 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f034:	b29b      	uxth	r3, r3
 800f036:	f023 030f 	bic.w	r3, r3, #15
 800f03a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	085b      	lsrs	r3, r3, #1
 800f040:	b29b      	uxth	r3, r3
 800f042:	f003 0307 	and.w	r3, r3, #7
 800f046:	b29a      	uxth	r2, r3
 800f048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f04a:	4313      	orrs	r3, r2
 800f04c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f054:	60da      	str	r2, [r3, #12]
 800f056:	e0b9      	b.n	800f1cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f05e:	e0b5      	b.n	800f1cc <UART_SetConfig+0xa94>
 800f060:	03d09000 	.word	0x03d09000
 800f064:	003d0900 	.word	0x003d0900
 800f068:	080106f8 	.word	0x080106f8
 800f06c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f070:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f074:	2b20      	cmp	r3, #32
 800f076:	dc49      	bgt.n	800f10c <UART_SetConfig+0x9d4>
 800f078:	2b00      	cmp	r3, #0
 800f07a:	db7c      	blt.n	800f176 <UART_SetConfig+0xa3e>
 800f07c:	2b20      	cmp	r3, #32
 800f07e:	d87a      	bhi.n	800f176 <UART_SetConfig+0xa3e>
 800f080:	a201      	add	r2, pc, #4	; (adr r2, 800f088 <UART_SetConfig+0x950>)
 800f082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f086:	bf00      	nop
 800f088:	0800f113 	.word	0x0800f113
 800f08c:	0800f11b 	.word	0x0800f11b
 800f090:	0800f177 	.word	0x0800f177
 800f094:	0800f177 	.word	0x0800f177
 800f098:	0800f123 	.word	0x0800f123
 800f09c:	0800f177 	.word	0x0800f177
 800f0a0:	0800f177 	.word	0x0800f177
 800f0a4:	0800f177 	.word	0x0800f177
 800f0a8:	0800f133 	.word	0x0800f133
 800f0ac:	0800f177 	.word	0x0800f177
 800f0b0:	0800f177 	.word	0x0800f177
 800f0b4:	0800f177 	.word	0x0800f177
 800f0b8:	0800f177 	.word	0x0800f177
 800f0bc:	0800f177 	.word	0x0800f177
 800f0c0:	0800f177 	.word	0x0800f177
 800f0c4:	0800f177 	.word	0x0800f177
 800f0c8:	0800f143 	.word	0x0800f143
 800f0cc:	0800f177 	.word	0x0800f177
 800f0d0:	0800f177 	.word	0x0800f177
 800f0d4:	0800f177 	.word	0x0800f177
 800f0d8:	0800f177 	.word	0x0800f177
 800f0dc:	0800f177 	.word	0x0800f177
 800f0e0:	0800f177 	.word	0x0800f177
 800f0e4:	0800f177 	.word	0x0800f177
 800f0e8:	0800f177 	.word	0x0800f177
 800f0ec:	0800f177 	.word	0x0800f177
 800f0f0:	0800f177 	.word	0x0800f177
 800f0f4:	0800f177 	.word	0x0800f177
 800f0f8:	0800f177 	.word	0x0800f177
 800f0fc:	0800f177 	.word	0x0800f177
 800f100:	0800f177 	.word	0x0800f177
 800f104:	0800f177 	.word	0x0800f177
 800f108:	0800f169 	.word	0x0800f169
 800f10c:	2b40      	cmp	r3, #64	; 0x40
 800f10e:	d02e      	beq.n	800f16e <UART_SetConfig+0xa36>
 800f110:	e031      	b.n	800f176 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f112:	f7fa fa9f 	bl	8009654 <HAL_RCC_GetPCLK1Freq>
 800f116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f118:	e033      	b.n	800f182 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f11a:	f7fa fab1 	bl	8009680 <HAL_RCC_GetPCLK2Freq>
 800f11e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f120:	e02f      	b.n	800f182 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f126:	4618      	mov	r0, r3
 800f128:	f7fb feee 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f130:	e027      	b.n	800f182 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f132:	f107 0318 	add.w	r3, r7, #24
 800f136:	4618      	mov	r0, r3
 800f138:	f7fc f83a 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f140:	e01f      	b.n	800f182 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f142:	4b2d      	ldr	r3, [pc, #180]	; (800f1f8 <UART_SetConfig+0xac0>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f003 0320 	and.w	r3, r3, #32
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d009      	beq.n	800f162 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f14e:	4b2a      	ldr	r3, [pc, #168]	; (800f1f8 <UART_SetConfig+0xac0>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	08db      	lsrs	r3, r3, #3
 800f154:	f003 0303 	and.w	r3, r3, #3
 800f158:	4a28      	ldr	r2, [pc, #160]	; (800f1fc <UART_SetConfig+0xac4>)
 800f15a:	fa22 f303 	lsr.w	r3, r2, r3
 800f15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f160:	e00f      	b.n	800f182 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f162:	4b26      	ldr	r3, [pc, #152]	; (800f1fc <UART_SetConfig+0xac4>)
 800f164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f166:	e00c      	b.n	800f182 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f168:	4b25      	ldr	r3, [pc, #148]	; (800f200 <UART_SetConfig+0xac8>)
 800f16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f16c:	e009      	b.n	800f182 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f16e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f174:	e005      	b.n	800f182 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f176:	2300      	movs	r3, #0
 800f178:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f180:	bf00      	nop
    }

    if (pclk != 0U)
 800f182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f184:	2b00      	cmp	r3, #0
 800f186:	d021      	beq.n	800f1cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18c:	4a1d      	ldr	r2, [pc, #116]	; (800f204 <UART_SetConfig+0xacc>)
 800f18e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f192:	461a      	mov	r2, r3
 800f194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f196:	fbb3 f2f2 	udiv	r2, r3, r2
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	085b      	lsrs	r3, r3, #1
 800f1a0:	441a      	add	r2, r3
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ae:	2b0f      	cmp	r3, #15
 800f1b0:	d909      	bls.n	800f1c6 <UART_SetConfig+0xa8e>
 800f1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1b8:	d205      	bcs.n	800f1c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	60da      	str	r2, [r3, #12]
 800f1c4:	e002      	b.n	800f1cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f1e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3748      	adds	r7, #72	; 0x48
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1f6:	bf00      	nop
 800f1f8:	58024400 	.word	0x58024400
 800f1fc:	03d09000 	.word	0x03d09000
 800f200:	003d0900 	.word	0x003d0900
 800f204:	080106f8 	.word	0x080106f8

0800f208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f214:	f003 0301 	and.w	r3, r3, #1
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00a      	beq.n	800f232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	430a      	orrs	r2, r1
 800f230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f236:	f003 0302 	and.w	r3, r3, #2
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00a      	beq.n	800f254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	430a      	orrs	r2, r1
 800f252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f258:	f003 0304 	and.w	r3, r3, #4
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00a      	beq.n	800f276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	430a      	orrs	r2, r1
 800f274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27a:	f003 0308 	and.w	r3, r3, #8
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00a      	beq.n	800f298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	430a      	orrs	r2, r1
 800f296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29c:	f003 0310 	and.w	r3, r3, #16
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00a      	beq.n	800f2ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	430a      	orrs	r2, r1
 800f2b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2be:	f003 0320 	and.w	r3, r3, #32
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00a      	beq.n	800f2dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	430a      	orrs	r2, r1
 800f2da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d01a      	beq.n	800f31e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	430a      	orrs	r2, r1
 800f2fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f306:	d10a      	bne.n	800f31e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	430a      	orrs	r2, r1
 800f31c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00a      	beq.n	800f340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	430a      	orrs	r2, r1
 800f33e:	605a      	str	r2, [r3, #4]
  }
}
 800f340:	bf00      	nop
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af02      	add	r7, sp, #8
 800f352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f35c:	f7f3 fb2c 	bl	80029b8 <HAL_GetTick>
 800f360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f003 0308 	and.w	r3, r3, #8
 800f36c:	2b08      	cmp	r3, #8
 800f36e:	d10e      	bne.n	800f38e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f82f 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f38a:	2303      	movs	r3, #3
 800f38c:	e025      	b.n	800f3da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f003 0304 	and.w	r3, r3, #4
 800f398:	2b04      	cmp	r3, #4
 800f39a:	d10e      	bne.n	800f3ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f39c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f819 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3b6:	2303      	movs	r3, #3
 800f3b8:	e00f      	b.n	800f3da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2220      	movs	r2, #32
 800f3be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2220      	movs	r2, #32
 800f3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b09c      	sub	sp, #112	; 0x70
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	60f8      	str	r0, [r7, #12]
 800f3ea:	60b9      	str	r1, [r7, #8]
 800f3ec:	603b      	str	r3, [r7, #0]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3f2:	e0a9      	b.n	800f548 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3fa:	f000 80a5 	beq.w	800f548 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3fe:	f7f3 fadb 	bl	80029b8 <HAL_GetTick>
 800f402:	4602      	mov	r2, r0
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d302      	bcc.n	800f414 <UART_WaitOnFlagUntilTimeout+0x32>
 800f40e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f410:	2b00      	cmp	r3, #0
 800f412:	d140      	bne.n	800f496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41c:	e853 3f00 	ldrex	r3, [r3]
 800f420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f428:	667b      	str	r3, [r7, #100]	; 0x64
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	461a      	mov	r2, r3
 800f430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f43a:	e841 2300 	strex	r3, r2, [r1]
 800f43e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e6      	bne.n	800f414 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3308      	adds	r3, #8
 800f44c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	e853 3f00 	ldrex	r3, [r3]
 800f454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f458:	f023 0301 	bic.w	r3, r3, #1
 800f45c:	663b      	str	r3, [r7, #96]	; 0x60
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3308      	adds	r3, #8
 800f464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f466:	64ba      	str	r2, [r7, #72]	; 0x48
 800f468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f46c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f46e:	e841 2300 	strex	r3, r2, [r1]
 800f472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1e5      	bne.n	800f446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2220      	movs	r2, #32
 800f47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2220      	movs	r2, #32
 800f486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f492:	2303      	movs	r3, #3
 800f494:	e069      	b.n	800f56a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f003 0304 	and.w	r3, r3, #4
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d051      	beq.n	800f548 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	69db      	ldr	r3, [r3, #28]
 800f4aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4b2:	d149      	bne.n	800f548 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c6:	e853 3f00 	ldrex	r3, [r3]
 800f4ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4dc:	637b      	str	r3, [r7, #52]	; 0x34
 800f4de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e4:	e841 2300 	strex	r3, r2, [r1]
 800f4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d1e6      	bne.n	800f4be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	e853 3f00 	ldrex	r3, [r3]
 800f4fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	f023 0301 	bic.w	r3, r3, #1
 800f506:	66bb      	str	r3, [r7, #104]	; 0x68
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	3308      	adds	r3, #8
 800f50e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f510:	623a      	str	r2, [r7, #32]
 800f512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f514:	69f9      	ldr	r1, [r7, #28]
 800f516:	6a3a      	ldr	r2, [r7, #32]
 800f518:	e841 2300 	strex	r3, r2, [r1]
 800f51c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1e5      	bne.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2220      	movs	r2, #32
 800f528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2220      	movs	r2, #32
 800f530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2220      	movs	r2, #32
 800f538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f544:	2303      	movs	r3, #3
 800f546:	e010      	b.n	800f56a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	69da      	ldr	r2, [r3, #28]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	4013      	ands	r3, r2
 800f552:	68ba      	ldr	r2, [r7, #8]
 800f554:	429a      	cmp	r2, r3
 800f556:	bf0c      	ite	eq
 800f558:	2301      	moveq	r3, #1
 800f55a:	2300      	movne	r3, #0
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	461a      	mov	r2, r3
 800f560:	79fb      	ldrb	r3, [r7, #7]
 800f562:	429a      	cmp	r2, r3
 800f564:	f43f af46 	beq.w	800f3f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3770      	adds	r7, #112	; 0x70
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f574:	b480      	push	{r7}
 800f576:	b0a3      	sub	sp, #140	; 0x8c
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	4613      	mov	r3, r2
 800f580:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	88fa      	ldrh	r2, [r7, #6]
 800f58c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	88fa      	ldrh	r2, [r7, #6]
 800f594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2200      	movs	r2, #0
 800f59c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5a6:	d10e      	bne.n	800f5c6 <UART_Start_Receive_IT+0x52>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	691b      	ldr	r3, [r3, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d105      	bne.n	800f5bc <UART_Start_Receive_IT+0x48>
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f5b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5ba:	e02d      	b.n	800f618 <UART_Start_Receive_IT+0xa4>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	22ff      	movs	r2, #255	; 0xff
 800f5c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5c4:	e028      	b.n	800f618 <UART_Start_Receive_IT+0xa4>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10d      	bne.n	800f5ea <UART_Start_Receive_IT+0x76>
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d104      	bne.n	800f5e0 <UART_Start_Receive_IT+0x6c>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	22ff      	movs	r2, #255	; 0xff
 800f5da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5de:	e01b      	b.n	800f618 <UART_Start_Receive_IT+0xa4>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	227f      	movs	r2, #127	; 0x7f
 800f5e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5e8:	e016      	b.n	800f618 <UART_Start_Receive_IT+0xa4>
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5f2:	d10d      	bne.n	800f610 <UART_Start_Receive_IT+0x9c>
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d104      	bne.n	800f606 <UART_Start_Receive_IT+0x92>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	227f      	movs	r2, #127	; 0x7f
 800f600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f604:	e008      	b.n	800f618 <UART_Start_Receive_IT+0xa4>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	223f      	movs	r2, #63	; 0x3f
 800f60a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f60e:	e003      	b.n	800f618 <UART_Start_Receive_IT+0xa4>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2222      	movs	r2, #34	; 0x22
 800f624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3308      	adds	r3, #8
 800f62e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f632:	e853 3f00 	ldrex	r3, [r3]
 800f636:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f63a:	f043 0301 	orr.w	r3, r3, #1
 800f63e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3308      	adds	r3, #8
 800f648:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f64c:	673a      	str	r2, [r7, #112]	; 0x70
 800f64e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f650:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f652:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f654:	e841 2300 	strex	r3, r2, [r1]
 800f658:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f65a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e3      	bne.n	800f628 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f668:	d153      	bne.n	800f712 <UART_Start_Receive_IT+0x19e>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f670:	88fa      	ldrh	r2, [r7, #6]
 800f672:	429a      	cmp	r2, r3
 800f674:	d34d      	bcc.n	800f712 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f67e:	d107      	bne.n	800f690 <UART_Start_Receive_IT+0x11c>
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	4a4b      	ldr	r2, [pc, #300]	; (800f7b8 <UART_Start_Receive_IT+0x244>)
 800f68c:	671a      	str	r2, [r3, #112]	; 0x70
 800f68e:	e002      	b.n	800f696 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4a4a      	ldr	r2, [pc, #296]	; (800f7bc <UART_Start_Receive_IT+0x248>)
 800f694:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2200      	movs	r2, #0
 800f69a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	691b      	ldr	r3, [r3, #16]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d01a      	beq.n	800f6dc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ae:	e853 3f00 	ldrex	r3, [r3]
 800f6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6d0:	e841 2300 	strex	r3, r2, [r1]
 800f6d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1e4      	bne.n	800f6a6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e6:	e853 3f00 	ldrex	r3, [r3]
 800f6ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	3308      	adds	r3, #8
 800f6fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f6fc:	64ba      	str	r2, [r7, #72]	; 0x48
 800f6fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f704:	e841 2300 	strex	r3, r2, [r1]
 800f708:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1e5      	bne.n	800f6dc <UART_Start_Receive_IT+0x168>
 800f710:	e04a      	b.n	800f7a8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f71a:	d107      	bne.n	800f72c <UART_Start_Receive_IT+0x1b8>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d103      	bne.n	800f72c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	4a26      	ldr	r2, [pc, #152]	; (800f7c0 <UART_Start_Receive_IT+0x24c>)
 800f728:	671a      	str	r2, [r3, #112]	; 0x70
 800f72a:	e002      	b.n	800f732 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	4a25      	ldr	r2, [pc, #148]	; (800f7c4 <UART_Start_Receive_IT+0x250>)
 800f730:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d019      	beq.n	800f776 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74a:	e853 3f00 	ldrex	r3, [r3]
 800f74e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f756:	677b      	str	r3, [r7, #116]	; 0x74
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
 800f75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f760:	637b      	str	r3, [r7, #52]	; 0x34
 800f762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f768:	e841 2300 	strex	r3, r2, [r1]
 800f76c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1e6      	bne.n	800f742 <UART_Start_Receive_IT+0x1ce>
 800f774:	e018      	b.n	800f7a8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	e853 3f00 	ldrex	r3, [r3]
 800f782:	613b      	str	r3, [r7, #16]
   return(result);
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	f043 0320 	orr.w	r3, r3, #32
 800f78a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	461a      	mov	r2, r3
 800f792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f794:	623b      	str	r3, [r7, #32]
 800f796:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f798:	69f9      	ldr	r1, [r7, #28]
 800f79a:	6a3a      	ldr	r2, [r7, #32]
 800f79c:	e841 2300 	strex	r3, r2, [r1]
 800f7a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1e6      	bne.n	800f776 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	378c      	adds	r7, #140	; 0x8c
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	0800fed1 	.word	0x0800fed1
 800f7bc:	0800fbd9 	.word	0x0800fbd9
 800f7c0:	0800fa77 	.word	0x0800fa77
 800f7c4:	0800f917 	.word	0x0800f917

0800f7c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b095      	sub	sp, #84	; 0x54
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d8:	e853 3f00 	ldrex	r3, [r3]
 800f7dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f7e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ee:	643b      	str	r3, [r7, #64]	; 0x40
 800f7f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7f6:	e841 2300 	strex	r3, r2, [r1]
 800f7fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1e6      	bne.n	800f7d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3308      	adds	r3, #8
 800f808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	e853 3f00 	ldrex	r3, [r3]
 800f810:	61fb      	str	r3, [r7, #28]
   return(result);
 800f812:	69fa      	ldr	r2, [r7, #28]
 800f814:	4b1e      	ldr	r3, [pc, #120]	; (800f890 <UART_EndRxTransfer+0xc8>)
 800f816:	4013      	ands	r3, r2
 800f818:	64bb      	str	r3, [r7, #72]	; 0x48
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	3308      	adds	r3, #8
 800f820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f822:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f824:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f82a:	e841 2300 	strex	r3, r2, [r1]
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1e5      	bne.n	800f802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d118      	bne.n	800f870 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	e853 3f00 	ldrex	r3, [r3]
 800f84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f023 0310 	bic.w	r3, r3, #16
 800f852:	647b      	str	r3, [r7, #68]	; 0x44
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	461a      	mov	r2, r3
 800f85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f85c:	61bb      	str	r3, [r7, #24]
 800f85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f860:	6979      	ldr	r1, [r7, #20]
 800f862:	69ba      	ldr	r2, [r7, #24]
 800f864:	e841 2300 	strex	r3, r2, [r1]
 800f868:	613b      	str	r3, [r7, #16]
   return(result);
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1e6      	bne.n	800f83e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2220      	movs	r2, #32
 800f874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f884:	bf00      	nop
 800f886:	3754      	adds	r7, #84	; 0x54
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr
 800f890:	effffffe 	.word	0xeffffffe

0800f894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f7fe ff2a 	bl	800e70c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8b8:	bf00      	nop
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b088      	sub	sp, #32
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8dc:	61fb      	str	r3, [r7, #28]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	61bb      	str	r3, [r7, #24]
 800f8e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ea:	6979      	ldr	r1, [r7, #20]
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	e841 2300 	strex	r3, r2, [r1]
 800f8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e6      	bne.n	800f8c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2220      	movs	r2, #32
 800f8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7fe fef5 	bl	800e6f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f90e:	bf00      	nop
 800f910:	3720      	adds	r7, #32
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b096      	sub	sp, #88	; 0x58
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f92e:	2b22      	cmp	r3, #34	; 0x22
 800f930:	f040 8095 	bne.w	800fa5e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f93e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f942:	b2d9      	uxtb	r1, r3
 800f944:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f948:	b2da      	uxtb	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f94e:	400a      	ands	r2, r1
 800f950:	b2d2      	uxtb	r2, r2
 800f952:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f964:	b29b      	uxth	r3, r3
 800f966:	3b01      	subs	r3, #1
 800f968:	b29a      	uxth	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f976:	b29b      	uxth	r3, r3
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d178      	bne.n	800fa6e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	e853 3f00 	ldrex	r3, [r3]
 800f988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f990:	653b      	str	r3, [r7, #80]	; 0x50
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	461a      	mov	r2, r3
 800f998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f99a:	647b      	str	r3, [r7, #68]	; 0x44
 800f99c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f9a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9a2:	e841 2300 	strex	r3, r2, [r1]
 800f9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1e6      	bne.n	800f97c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	3308      	adds	r3, #8
 800f9b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	e853 3f00 	ldrex	r3, [r3]
 800f9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800f9be:	6a3b      	ldr	r3, [r7, #32]
 800f9c0:	f023 0301 	bic.w	r3, r3, #1
 800f9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3308      	adds	r3, #8
 800f9cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9ce:	633a      	str	r2, [r7, #48]	; 0x30
 800f9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d6:	e841 2300 	strex	r3, r2, [r1]
 800f9da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1e5      	bne.n	800f9ae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2220      	movs	r2, #32
 800f9e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d12e      	bne.n	800fa56 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	e853 3f00 	ldrex	r3, [r3]
 800fa0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f023 0310 	bic.w	r3, r3, #16
 800fa12:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa1c:	61fb      	str	r3, [r7, #28]
 800fa1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa20:	69b9      	ldr	r1, [r7, #24]
 800fa22:	69fa      	ldr	r2, [r7, #28]
 800fa24:	e841 2300 	strex	r3, r2, [r1]
 800fa28:	617b      	str	r3, [r7, #20]
   return(result);
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1e6      	bne.n	800f9fe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	f003 0310 	and.w	r3, r3, #16
 800fa3a:	2b10      	cmp	r3, #16
 800fa3c:	d103      	bne.n	800fa46 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2210      	movs	r2, #16
 800fa44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7fe fe66 	bl	800e720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa54:	e00b      	b.n	800fa6e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7f1 f92c 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 800fa5c:	e007      	b.n	800fa6e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	699a      	ldr	r2, [r3, #24]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f042 0208 	orr.w	r2, r2, #8
 800fa6c:	619a      	str	r2, [r3, #24]
}
 800fa6e:	bf00      	nop
 800fa70:	3758      	adds	r7, #88	; 0x58
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b096      	sub	sp, #88	; 0x58
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa8e:	2b22      	cmp	r3, #34	; 0x22
 800fa90:	f040 8095 	bne.w	800fbbe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faa2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800faa4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800faa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800faac:	4013      	ands	r3, r2
 800faae:	b29a      	uxth	r2, r3
 800fab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fab8:	1c9a      	adds	r2, r3, #2
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	3b01      	subs	r3, #1
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d178      	bne.n	800fbce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae4:	e853 3f00 	ldrex	r3, [r3]
 800fae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800faea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800faf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fafa:	643b      	str	r3, [r7, #64]	; 0x40
 800fafc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb02:	e841 2300 	strex	r3, r2, [r1]
 800fb06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1e6      	bne.n	800fadc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb16:	6a3b      	ldr	r3, [r7, #32]
 800fb18:	e853 3f00 	ldrex	r3, [r3]
 800fb1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	f023 0301 	bic.w	r3, r3, #1
 800fb24:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb36:	e841 2300 	strex	r3, r2, [r1]
 800fb3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d1e5      	bne.n	800fb0e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2220      	movs	r2, #32
 800fb46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d12e      	bne.n	800fbb6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	e853 3f00 	ldrex	r3, [r3]
 800fb6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	f023 0310 	bic.w	r3, r3, #16
 800fb72:	647b      	str	r3, [r7, #68]	; 0x44
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb7c:	61bb      	str	r3, [r7, #24]
 800fb7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb80:	6979      	ldr	r1, [r7, #20]
 800fb82:	69ba      	ldr	r2, [r7, #24]
 800fb84:	e841 2300 	strex	r3, r2, [r1]
 800fb88:	613b      	str	r3, [r7, #16]
   return(result);
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e6      	bne.n	800fb5e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	f003 0310 	and.w	r3, r3, #16
 800fb9a:	2b10      	cmp	r3, #16
 800fb9c:	d103      	bne.n	800fba6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2210      	movs	r2, #16
 800fba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f7fe fdb6 	bl	800e720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fbb4:	e00b      	b.n	800fbce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7f1 f87c 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 800fbbc:	e007      	b.n	800fbce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	699a      	ldr	r2, [r3, #24]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f042 0208 	orr.w	r2, r2, #8
 800fbcc:	619a      	str	r2, [r3, #24]
}
 800fbce:	bf00      	nop
 800fbd0:	3758      	adds	r7, #88	; 0x58
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
	...

0800fbd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b0a6      	sub	sp, #152	; 0x98
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbe6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	69db      	ldr	r3, [r3, #28]
 800fbf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc0e:	2b22      	cmp	r3, #34	; 0x22
 800fc10:	f040 814d 	bne.w	800feae <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc1a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc1e:	e0f4      	b.n	800fe0a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc26:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fc2a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fc2e:	b2d9      	uxtb	r1, r3
 800fc30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fc34:	b2da      	uxtb	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc3a:	400a      	ands	r2, r1
 800fc3c:	b2d2      	uxtb	r2, r2
 800fc3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	3b01      	subs	r3, #1
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	69db      	ldr	r3, [r3, #28]
 800fc62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fc66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc6a:	f003 0307 	and.w	r3, r3, #7
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d053      	beq.n	800fd1a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc76:	f003 0301 	and.w	r3, r3, #1
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d011      	beq.n	800fca2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fc7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00b      	beq.n	800fca2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc98:	f043 0201 	orr.w	r2, r3, #1
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fca6:	f003 0302 	and.w	r3, r3, #2
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d011      	beq.n	800fcd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fcae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fcb2:	f003 0301 	and.w	r3, r3, #1
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00b      	beq.n	800fcd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2202      	movs	r2, #2
 800fcc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcc8:	f043 0204 	orr.w	r2, r3, #4
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fcd6:	f003 0304 	and.w	r3, r3, #4
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d011      	beq.n	800fd02 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fcde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fce2:	f003 0301 	and.w	r3, r3, #1
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d00b      	beq.n	800fd02 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2204      	movs	r2, #4
 800fcf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcf8:	f043 0202 	orr.w	r2, r3, #2
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d006      	beq.n	800fd1a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7fe fcfd 	bl	800e70c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d171      	bne.n	800fe0a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd2e:	e853 3f00 	ldrex	r3, [r3]
 800fd32:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fd34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	461a      	mov	r2, r3
 800fd44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd48:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd4a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd4c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fd4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd50:	e841 2300 	strex	r3, r2, [r1]
 800fd54:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fd56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1e4      	bne.n	800fd26 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3308      	adds	r3, #8
 800fd62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd66:	e853 3f00 	ldrex	r3, [r3]
 800fd6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fd6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd6e:	4b56      	ldr	r3, [pc, #344]	; (800fec8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800fd70:	4013      	ands	r3, r2
 800fd72:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	3308      	adds	r3, #8
 800fd7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd7c:	657a      	str	r2, [r7, #84]	; 0x54
 800fd7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd84:	e841 2300 	strex	r3, r2, [r1]
 800fd88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1e5      	bne.n	800fd5c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2220      	movs	r2, #32
 800fd94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d12e      	bne.n	800fe04 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb4:	e853 3f00 	ldrex	r3, [r3]
 800fdb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	f023 0310 	bic.w	r3, r3, #16
 800fdc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdca:	643b      	str	r3, [r7, #64]	; 0x40
 800fdcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fdd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdd2:	e841 2300 	strex	r3, r2, [r1]
 800fdd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1e6      	bne.n	800fdac <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	69db      	ldr	r3, [r3, #28]
 800fde4:	f003 0310 	and.w	r3, r3, #16
 800fde8:	2b10      	cmp	r3, #16
 800fdea:	d103      	bne.n	800fdf4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2210      	movs	r2, #16
 800fdf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f7fe fc8f 	bl	800e720 <HAL_UARTEx_RxEventCallback>
 800fe02:	e002      	b.n	800fe0a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7f0 ff55 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d006      	beq.n	800fe20 <UART_RxISR_8BIT_FIFOEN+0x248>
 800fe12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe16:	f003 0320 	and.w	r3, r3, #32
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f47f af00 	bne.w	800fc20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe2a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d045      	beq.n	800febe <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d23e      	bcs.n	800febe <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	3308      	adds	r3, #8
 800fe46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe48:	6a3b      	ldr	r3, [r7, #32]
 800fe4a:	e853 3f00 	ldrex	r3, [r3]
 800fe4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe56:	673b      	str	r3, [r7, #112]	; 0x70
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	3308      	adds	r3, #8
 800fe5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe60:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe68:	e841 2300 	strex	r3, r2, [r1]
 800fe6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1e5      	bne.n	800fe40 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a15      	ldr	r2, [pc, #84]	; (800fecc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800fe78:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	e853 3f00 	ldrex	r3, [r3]
 800fe86:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	f043 0320 	orr.w	r3, r3, #32
 800fe8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	461a      	mov	r2, r3
 800fe96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe98:	61bb      	str	r3, [r7, #24]
 800fe9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9c:	6979      	ldr	r1, [r7, #20]
 800fe9e:	69ba      	ldr	r2, [r7, #24]
 800fea0:	e841 2300 	strex	r3, r2, [r1]
 800fea4:	613b      	str	r3, [r7, #16]
   return(result);
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1e6      	bne.n	800fe7a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800feac:	e007      	b.n	800febe <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	699a      	ldr	r2, [r3, #24]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f042 0208 	orr.w	r2, r2, #8
 800febc:	619a      	str	r2, [r3, #24]
}
 800febe:	bf00      	nop
 800fec0:	3798      	adds	r7, #152	; 0x98
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	effffffe 	.word	0xeffffffe
 800fecc:	0800f917 	.word	0x0800f917

0800fed0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b0a8      	sub	sp, #160	; 0xa0
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fede:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	69db      	ldr	r3, [r3, #28]
 800fee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff06:	2b22      	cmp	r3, #34	; 0x22
 800ff08:	f040 8151 	bne.w	80101ae <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff16:	e0f8      	b.n	801010a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ff2a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ff2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ff32:	4013      	ands	r3, r2
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff40:	1c9a      	adds	r2, r3, #2
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	3b01      	subs	r3, #1
 800ff50:	b29a      	uxth	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	69db      	ldr	r3, [r3, #28]
 800ff5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ff62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff66:	f003 0307 	and.w	r3, r3, #7
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d053      	beq.n	8010016 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff72:	f003 0301 	and.w	r3, r3, #1
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d011      	beq.n	800ff9e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ff7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00b      	beq.n	800ff9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff94:	f043 0201 	orr.w	r2, r3, #1
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffa2:	f003 0302 	and.w	r3, r3, #2
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d011      	beq.n	800ffce <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ffaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00b      	beq.n	800ffce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2202      	movs	r2, #2
 800ffbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffc4:	f043 0204 	orr.w	r2, r3, #4
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffd2:	f003 0304 	and.w	r3, r3, #4
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d011      	beq.n	800fffe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ffda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00b      	beq.n	800fffe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2204      	movs	r2, #4
 800ffec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fff4:	f043 0202 	orr.w	r2, r3, #2
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010004:	2b00      	cmp	r3, #0
 8010006:	d006      	beq.n	8010016 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7fe fb7f 	bl	800e70c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801001c:	b29b      	uxth	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	d173      	bne.n	801010a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801002a:	e853 3f00 	ldrex	r3, [r3]
 801002e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	461a      	mov	r2, r3
 8010040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010046:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010048:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801004a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801004c:	e841 2300 	strex	r3, r2, [r1]
 8010050:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e4      	bne.n	8010022 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	3308      	adds	r3, #8
 801005e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010062:	e853 3f00 	ldrex	r3, [r3]
 8010066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801006a:	4b57      	ldr	r3, [pc, #348]	; (80101c8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 801006c:	4013      	ands	r3, r2
 801006e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3308      	adds	r3, #8
 8010078:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801007c:	65ba      	str	r2, [r7, #88]	; 0x58
 801007e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010082:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010084:	e841 2300 	strex	r3, r2, [r1]
 8010088:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801008a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1e3      	bne.n	8010058 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2220      	movs	r2, #32
 8010094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d12e      	bne.n	8010104 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	e853 3f00 	ldrex	r3, [r3]
 80100b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100bc:	f023 0310 	bic.w	r3, r3, #16
 80100c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100ca:	647b      	str	r3, [r7, #68]	; 0x44
 80100cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100d2:	e841 2300 	strex	r3, r2, [r1]
 80100d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80100d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1e6      	bne.n	80100ac <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	69db      	ldr	r3, [r3, #28]
 80100e4:	f003 0310 	and.w	r3, r3, #16
 80100e8:	2b10      	cmp	r3, #16
 80100ea:	d103      	bne.n	80100f4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2210      	movs	r2, #16
 80100f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100fa:	4619      	mov	r1, r3
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7fe fb0f 	bl	800e720 <HAL_UARTEx_RxEventCallback>
 8010102:	e002      	b.n	801010a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7f0 fdd5 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801010a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801010e:	2b00      	cmp	r3, #0
 8010110:	d006      	beq.n	8010120 <UART_RxISR_16BIT_FIFOEN+0x250>
 8010112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010116:	f003 0320 	and.w	r3, r3, #32
 801011a:	2b00      	cmp	r3, #0
 801011c:	f47f aefc 	bne.w	800ff18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010126:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801012a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801012e:	2b00      	cmp	r3, #0
 8010130:	d045      	beq.n	80101be <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010138:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801013c:	429a      	cmp	r2, r3
 801013e:	d23e      	bcs.n	80101be <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	3308      	adds	r3, #8
 8010146:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014a:	e853 3f00 	ldrex	r3, [r3]
 801014e:	623b      	str	r3, [r7, #32]
   return(result);
 8010150:	6a3b      	ldr	r3, [r7, #32]
 8010152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010156:	677b      	str	r3, [r7, #116]	; 0x74
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3308      	adds	r3, #8
 801015e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010160:	633a      	str	r2, [r7, #48]	; 0x30
 8010162:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010168:	e841 2300 	strex	r3, r2, [r1]
 801016c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801016e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1e5      	bne.n	8010140 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	4a15      	ldr	r2, [pc, #84]	; (80101cc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8010178:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	e853 3f00 	ldrex	r3, [r3]
 8010186:	60fb      	str	r3, [r7, #12]
   return(result);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f043 0320 	orr.w	r3, r3, #32
 801018e:	673b      	str	r3, [r7, #112]	; 0x70
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	461a      	mov	r2, r3
 8010196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010198:	61fb      	str	r3, [r7, #28]
 801019a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019c:	69b9      	ldr	r1, [r7, #24]
 801019e:	69fa      	ldr	r2, [r7, #28]
 80101a0:	e841 2300 	strex	r3, r2, [r1]
 80101a4:	617b      	str	r3, [r7, #20]
   return(result);
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1e6      	bne.n	801017a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101ac:	e007      	b.n	80101be <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	699a      	ldr	r2, [r3, #24]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f042 0208 	orr.w	r2, r2, #8
 80101bc:	619a      	str	r2, [r3, #24]
}
 80101be:	bf00      	nop
 80101c0:	37a0      	adds	r7, #160	; 0xa0
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	effffffe 	.word	0xeffffffe
 80101cc:	0800fa77 	.word	0x0800fa77

080101d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80101d8:	bf00      	nop
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80101ec:	bf00      	nop
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010200:	bf00      	nop
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801021a:	2b01      	cmp	r3, #1
 801021c:	d101      	bne.n	8010222 <HAL_UARTEx_DisableFifoMode+0x16>
 801021e:	2302      	movs	r3, #2
 8010220:	e027      	b.n	8010272 <HAL_UARTEx_DisableFifoMode+0x66>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2201      	movs	r2, #1
 8010226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2224      	movs	r2, #36	; 0x24
 801022e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f022 0201 	bic.w	r2, r2, #1
 8010248:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010250:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2200      	movs	r2, #0
 8010256:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2220      	movs	r2, #32
 8010264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2200      	movs	r2, #0
 801026c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3714      	adds	r7, #20
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b084      	sub	sp, #16
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
 8010286:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801028e:	2b01      	cmp	r3, #1
 8010290:	d101      	bne.n	8010296 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010292:	2302      	movs	r3, #2
 8010294:	e02d      	b.n	80102f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2201      	movs	r2, #1
 801029a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2224      	movs	r2, #36	; 0x24
 80102a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f022 0201 	bic.w	r2, r2, #1
 80102bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	683a      	ldr	r2, [r7, #0]
 80102ce:	430a      	orrs	r2, r1
 80102d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 f850 	bl	8010378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2220      	movs	r2, #32
 80102e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801030a:	2b01      	cmp	r3, #1
 801030c:	d101      	bne.n	8010312 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801030e:	2302      	movs	r3, #2
 8010310:	e02d      	b.n	801036e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2201      	movs	r2, #1
 8010316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2224      	movs	r2, #36	; 0x24
 801031e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f022 0201 	bic.w	r2, r2, #1
 8010338:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	683a      	ldr	r2, [r7, #0]
 801034a:	430a      	orrs	r2, r1
 801034c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 f812 	bl	8010378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2220      	movs	r2, #32
 8010360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010384:	2b00      	cmp	r3, #0
 8010386:	d108      	bne.n	801039a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010398:	e031      	b.n	80103fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801039a:	2310      	movs	r3, #16
 801039c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801039e:	2310      	movs	r3, #16
 80103a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	689b      	ldr	r3, [r3, #8]
 80103a8:	0e5b      	lsrs	r3, r3, #25
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	f003 0307 	and.w	r3, r3, #7
 80103b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	0f5b      	lsrs	r3, r3, #29
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	f003 0307 	and.w	r3, r3, #7
 80103c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103c2:	7bbb      	ldrb	r3, [r7, #14]
 80103c4:	7b3a      	ldrb	r2, [r7, #12]
 80103c6:	4911      	ldr	r1, [pc, #68]	; (801040c <UARTEx_SetNbDataToProcess+0x94>)
 80103c8:	5c8a      	ldrb	r2, [r1, r2]
 80103ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80103ce:	7b3a      	ldrb	r2, [r7, #12]
 80103d0:	490f      	ldr	r1, [pc, #60]	; (8010410 <UARTEx_SetNbDataToProcess+0x98>)
 80103d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80103d8:	b29a      	uxth	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
 80103e2:	7b7a      	ldrb	r2, [r7, #13]
 80103e4:	4909      	ldr	r1, [pc, #36]	; (801040c <UARTEx_SetNbDataToProcess+0x94>)
 80103e6:	5c8a      	ldrb	r2, [r1, r2]
 80103e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80103ec:	7b7a      	ldrb	r2, [r7, #13]
 80103ee:	4908      	ldr	r1, [pc, #32]	; (8010410 <UARTEx_SetNbDataToProcess+0x98>)
 80103f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80103fe:	bf00      	nop
 8010400:	3714      	adds	r7, #20
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	08010710 	.word	0x08010710
 8010410:	08010718 	.word	0x08010718

08010414 <__errno>:
 8010414:	4b01      	ldr	r3, [pc, #4]	; (801041c <__errno+0x8>)
 8010416:	6818      	ldr	r0, [r3, #0]
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	24000054 	.word	0x24000054

08010420 <__libc_init_array>:
 8010420:	b570      	push	{r4, r5, r6, lr}
 8010422:	4d0d      	ldr	r5, [pc, #52]	; (8010458 <__libc_init_array+0x38>)
 8010424:	4c0d      	ldr	r4, [pc, #52]	; (801045c <__libc_init_array+0x3c>)
 8010426:	1b64      	subs	r4, r4, r5
 8010428:	10a4      	asrs	r4, r4, #2
 801042a:	2600      	movs	r6, #0
 801042c:	42a6      	cmp	r6, r4
 801042e:	d109      	bne.n	8010444 <__libc_init_array+0x24>
 8010430:	4d0b      	ldr	r5, [pc, #44]	; (8010460 <__libc_init_array+0x40>)
 8010432:	4c0c      	ldr	r4, [pc, #48]	; (8010464 <__libc_init_array+0x44>)
 8010434:	f000 f93c 	bl	80106b0 <_init>
 8010438:	1b64      	subs	r4, r4, r5
 801043a:	10a4      	asrs	r4, r4, #2
 801043c:	2600      	movs	r6, #0
 801043e:	42a6      	cmp	r6, r4
 8010440:	d105      	bne.n	801044e <__libc_init_array+0x2e>
 8010442:	bd70      	pop	{r4, r5, r6, pc}
 8010444:	f855 3b04 	ldr.w	r3, [r5], #4
 8010448:	4798      	blx	r3
 801044a:	3601      	adds	r6, #1
 801044c:	e7ee      	b.n	801042c <__libc_init_array+0xc>
 801044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010452:	4798      	blx	r3
 8010454:	3601      	adds	r6, #1
 8010456:	e7f2      	b.n	801043e <__libc_init_array+0x1e>
 8010458:	08010728 	.word	0x08010728
 801045c:	08010728 	.word	0x08010728
 8010460:	08010728 	.word	0x08010728
 8010464:	0801072c 	.word	0x0801072c

08010468 <malloc>:
 8010468:	4b02      	ldr	r3, [pc, #8]	; (8010474 <malloc+0xc>)
 801046a:	4601      	mov	r1, r0
 801046c:	6818      	ldr	r0, [r3, #0]
 801046e:	f000 b88d 	b.w	801058c <_malloc_r>
 8010472:	bf00      	nop
 8010474:	24000054 	.word	0x24000054

08010478 <free>:
 8010478:	4b02      	ldr	r3, [pc, #8]	; (8010484 <free+0xc>)
 801047a:	4601      	mov	r1, r0
 801047c:	6818      	ldr	r0, [r3, #0]
 801047e:	f000 b819 	b.w	80104b4 <_free_r>
 8010482:	bf00      	nop
 8010484:	24000054 	.word	0x24000054

08010488 <memcpy>:
 8010488:	440a      	add	r2, r1
 801048a:	4291      	cmp	r1, r2
 801048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010490:	d100      	bne.n	8010494 <memcpy+0xc>
 8010492:	4770      	bx	lr
 8010494:	b510      	push	{r4, lr}
 8010496:	f811 4b01 	ldrb.w	r4, [r1], #1
 801049a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801049e:	4291      	cmp	r1, r2
 80104a0:	d1f9      	bne.n	8010496 <memcpy+0xe>
 80104a2:	bd10      	pop	{r4, pc}

080104a4 <memset>:
 80104a4:	4402      	add	r2, r0
 80104a6:	4603      	mov	r3, r0
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d100      	bne.n	80104ae <memset+0xa>
 80104ac:	4770      	bx	lr
 80104ae:	f803 1b01 	strb.w	r1, [r3], #1
 80104b2:	e7f9      	b.n	80104a8 <memset+0x4>

080104b4 <_free_r>:
 80104b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104b6:	2900      	cmp	r1, #0
 80104b8:	d044      	beq.n	8010544 <_free_r+0x90>
 80104ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104be:	9001      	str	r0, [sp, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f1a1 0404 	sub.w	r4, r1, #4
 80104c6:	bfb8      	it	lt
 80104c8:	18e4      	addlt	r4, r4, r3
 80104ca:	f000 f8e3 	bl	8010694 <__malloc_lock>
 80104ce:	4a1e      	ldr	r2, [pc, #120]	; (8010548 <_free_r+0x94>)
 80104d0:	9801      	ldr	r0, [sp, #4]
 80104d2:	6813      	ldr	r3, [r2, #0]
 80104d4:	b933      	cbnz	r3, 80104e4 <_free_r+0x30>
 80104d6:	6063      	str	r3, [r4, #4]
 80104d8:	6014      	str	r4, [r2, #0]
 80104da:	b003      	add	sp, #12
 80104dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104e0:	f000 b8de 	b.w	80106a0 <__malloc_unlock>
 80104e4:	42a3      	cmp	r3, r4
 80104e6:	d908      	bls.n	80104fa <_free_r+0x46>
 80104e8:	6825      	ldr	r5, [r4, #0]
 80104ea:	1961      	adds	r1, r4, r5
 80104ec:	428b      	cmp	r3, r1
 80104ee:	bf01      	itttt	eq
 80104f0:	6819      	ldreq	r1, [r3, #0]
 80104f2:	685b      	ldreq	r3, [r3, #4]
 80104f4:	1949      	addeq	r1, r1, r5
 80104f6:	6021      	streq	r1, [r4, #0]
 80104f8:	e7ed      	b.n	80104d6 <_free_r+0x22>
 80104fa:	461a      	mov	r2, r3
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	b10b      	cbz	r3, 8010504 <_free_r+0x50>
 8010500:	42a3      	cmp	r3, r4
 8010502:	d9fa      	bls.n	80104fa <_free_r+0x46>
 8010504:	6811      	ldr	r1, [r2, #0]
 8010506:	1855      	adds	r5, r2, r1
 8010508:	42a5      	cmp	r5, r4
 801050a:	d10b      	bne.n	8010524 <_free_r+0x70>
 801050c:	6824      	ldr	r4, [r4, #0]
 801050e:	4421      	add	r1, r4
 8010510:	1854      	adds	r4, r2, r1
 8010512:	42a3      	cmp	r3, r4
 8010514:	6011      	str	r1, [r2, #0]
 8010516:	d1e0      	bne.n	80104da <_free_r+0x26>
 8010518:	681c      	ldr	r4, [r3, #0]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	6053      	str	r3, [r2, #4]
 801051e:	4421      	add	r1, r4
 8010520:	6011      	str	r1, [r2, #0]
 8010522:	e7da      	b.n	80104da <_free_r+0x26>
 8010524:	d902      	bls.n	801052c <_free_r+0x78>
 8010526:	230c      	movs	r3, #12
 8010528:	6003      	str	r3, [r0, #0]
 801052a:	e7d6      	b.n	80104da <_free_r+0x26>
 801052c:	6825      	ldr	r5, [r4, #0]
 801052e:	1961      	adds	r1, r4, r5
 8010530:	428b      	cmp	r3, r1
 8010532:	bf04      	itt	eq
 8010534:	6819      	ldreq	r1, [r3, #0]
 8010536:	685b      	ldreq	r3, [r3, #4]
 8010538:	6063      	str	r3, [r4, #4]
 801053a:	bf04      	itt	eq
 801053c:	1949      	addeq	r1, r1, r5
 801053e:	6021      	streq	r1, [r4, #0]
 8010540:	6054      	str	r4, [r2, #4]
 8010542:	e7ca      	b.n	80104da <_free_r+0x26>
 8010544:	b003      	add	sp, #12
 8010546:	bd30      	pop	{r4, r5, pc}
 8010548:	240006ac 	.word	0x240006ac

0801054c <sbrk_aligned>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	4e0e      	ldr	r6, [pc, #56]	; (8010588 <sbrk_aligned+0x3c>)
 8010550:	460c      	mov	r4, r1
 8010552:	6831      	ldr	r1, [r6, #0]
 8010554:	4605      	mov	r5, r0
 8010556:	b911      	cbnz	r1, 801055e <sbrk_aligned+0x12>
 8010558:	f000 f88c 	bl	8010674 <_sbrk_r>
 801055c:	6030      	str	r0, [r6, #0]
 801055e:	4621      	mov	r1, r4
 8010560:	4628      	mov	r0, r5
 8010562:	f000 f887 	bl	8010674 <_sbrk_r>
 8010566:	1c43      	adds	r3, r0, #1
 8010568:	d00a      	beq.n	8010580 <sbrk_aligned+0x34>
 801056a:	1cc4      	adds	r4, r0, #3
 801056c:	f024 0403 	bic.w	r4, r4, #3
 8010570:	42a0      	cmp	r0, r4
 8010572:	d007      	beq.n	8010584 <sbrk_aligned+0x38>
 8010574:	1a21      	subs	r1, r4, r0
 8010576:	4628      	mov	r0, r5
 8010578:	f000 f87c 	bl	8010674 <_sbrk_r>
 801057c:	3001      	adds	r0, #1
 801057e:	d101      	bne.n	8010584 <sbrk_aligned+0x38>
 8010580:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010584:	4620      	mov	r0, r4
 8010586:	bd70      	pop	{r4, r5, r6, pc}
 8010588:	240006b0 	.word	0x240006b0

0801058c <_malloc_r>:
 801058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010590:	1ccd      	adds	r5, r1, #3
 8010592:	f025 0503 	bic.w	r5, r5, #3
 8010596:	3508      	adds	r5, #8
 8010598:	2d0c      	cmp	r5, #12
 801059a:	bf38      	it	cc
 801059c:	250c      	movcc	r5, #12
 801059e:	2d00      	cmp	r5, #0
 80105a0:	4607      	mov	r7, r0
 80105a2:	db01      	blt.n	80105a8 <_malloc_r+0x1c>
 80105a4:	42a9      	cmp	r1, r5
 80105a6:	d905      	bls.n	80105b4 <_malloc_r+0x28>
 80105a8:	230c      	movs	r3, #12
 80105aa:	603b      	str	r3, [r7, #0]
 80105ac:	2600      	movs	r6, #0
 80105ae:	4630      	mov	r0, r6
 80105b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b4:	4e2e      	ldr	r6, [pc, #184]	; (8010670 <_malloc_r+0xe4>)
 80105b6:	f000 f86d 	bl	8010694 <__malloc_lock>
 80105ba:	6833      	ldr	r3, [r6, #0]
 80105bc:	461c      	mov	r4, r3
 80105be:	bb34      	cbnz	r4, 801060e <_malloc_r+0x82>
 80105c0:	4629      	mov	r1, r5
 80105c2:	4638      	mov	r0, r7
 80105c4:	f7ff ffc2 	bl	801054c <sbrk_aligned>
 80105c8:	1c43      	adds	r3, r0, #1
 80105ca:	4604      	mov	r4, r0
 80105cc:	d14d      	bne.n	801066a <_malloc_r+0xde>
 80105ce:	6834      	ldr	r4, [r6, #0]
 80105d0:	4626      	mov	r6, r4
 80105d2:	2e00      	cmp	r6, #0
 80105d4:	d140      	bne.n	8010658 <_malloc_r+0xcc>
 80105d6:	6823      	ldr	r3, [r4, #0]
 80105d8:	4631      	mov	r1, r6
 80105da:	4638      	mov	r0, r7
 80105dc:	eb04 0803 	add.w	r8, r4, r3
 80105e0:	f000 f848 	bl	8010674 <_sbrk_r>
 80105e4:	4580      	cmp	r8, r0
 80105e6:	d13a      	bne.n	801065e <_malloc_r+0xd2>
 80105e8:	6821      	ldr	r1, [r4, #0]
 80105ea:	3503      	adds	r5, #3
 80105ec:	1a6d      	subs	r5, r5, r1
 80105ee:	f025 0503 	bic.w	r5, r5, #3
 80105f2:	3508      	adds	r5, #8
 80105f4:	2d0c      	cmp	r5, #12
 80105f6:	bf38      	it	cc
 80105f8:	250c      	movcc	r5, #12
 80105fa:	4629      	mov	r1, r5
 80105fc:	4638      	mov	r0, r7
 80105fe:	f7ff ffa5 	bl	801054c <sbrk_aligned>
 8010602:	3001      	adds	r0, #1
 8010604:	d02b      	beq.n	801065e <_malloc_r+0xd2>
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	442b      	add	r3, r5
 801060a:	6023      	str	r3, [r4, #0]
 801060c:	e00e      	b.n	801062c <_malloc_r+0xa0>
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	1b52      	subs	r2, r2, r5
 8010612:	d41e      	bmi.n	8010652 <_malloc_r+0xc6>
 8010614:	2a0b      	cmp	r2, #11
 8010616:	d916      	bls.n	8010646 <_malloc_r+0xba>
 8010618:	1961      	adds	r1, r4, r5
 801061a:	42a3      	cmp	r3, r4
 801061c:	6025      	str	r5, [r4, #0]
 801061e:	bf18      	it	ne
 8010620:	6059      	strne	r1, [r3, #4]
 8010622:	6863      	ldr	r3, [r4, #4]
 8010624:	bf08      	it	eq
 8010626:	6031      	streq	r1, [r6, #0]
 8010628:	5162      	str	r2, [r4, r5]
 801062a:	604b      	str	r3, [r1, #4]
 801062c:	4638      	mov	r0, r7
 801062e:	f104 060b 	add.w	r6, r4, #11
 8010632:	f000 f835 	bl	80106a0 <__malloc_unlock>
 8010636:	f026 0607 	bic.w	r6, r6, #7
 801063a:	1d23      	adds	r3, r4, #4
 801063c:	1af2      	subs	r2, r6, r3
 801063e:	d0b6      	beq.n	80105ae <_malloc_r+0x22>
 8010640:	1b9b      	subs	r3, r3, r6
 8010642:	50a3      	str	r3, [r4, r2]
 8010644:	e7b3      	b.n	80105ae <_malloc_r+0x22>
 8010646:	6862      	ldr	r2, [r4, #4]
 8010648:	42a3      	cmp	r3, r4
 801064a:	bf0c      	ite	eq
 801064c:	6032      	streq	r2, [r6, #0]
 801064e:	605a      	strne	r2, [r3, #4]
 8010650:	e7ec      	b.n	801062c <_malloc_r+0xa0>
 8010652:	4623      	mov	r3, r4
 8010654:	6864      	ldr	r4, [r4, #4]
 8010656:	e7b2      	b.n	80105be <_malloc_r+0x32>
 8010658:	4634      	mov	r4, r6
 801065a:	6876      	ldr	r6, [r6, #4]
 801065c:	e7b9      	b.n	80105d2 <_malloc_r+0x46>
 801065e:	230c      	movs	r3, #12
 8010660:	603b      	str	r3, [r7, #0]
 8010662:	4638      	mov	r0, r7
 8010664:	f000 f81c 	bl	80106a0 <__malloc_unlock>
 8010668:	e7a1      	b.n	80105ae <_malloc_r+0x22>
 801066a:	6025      	str	r5, [r4, #0]
 801066c:	e7de      	b.n	801062c <_malloc_r+0xa0>
 801066e:	bf00      	nop
 8010670:	240006ac 	.word	0x240006ac

08010674 <_sbrk_r>:
 8010674:	b538      	push	{r3, r4, r5, lr}
 8010676:	4d06      	ldr	r5, [pc, #24]	; (8010690 <_sbrk_r+0x1c>)
 8010678:	2300      	movs	r3, #0
 801067a:	4604      	mov	r4, r0
 801067c:	4608      	mov	r0, r1
 801067e:	602b      	str	r3, [r5, #0]
 8010680:	f7f2 f82c 	bl	80026dc <_sbrk>
 8010684:	1c43      	adds	r3, r0, #1
 8010686:	d102      	bne.n	801068e <_sbrk_r+0x1a>
 8010688:	682b      	ldr	r3, [r5, #0]
 801068a:	b103      	cbz	r3, 801068e <_sbrk_r+0x1a>
 801068c:	6023      	str	r3, [r4, #0]
 801068e:	bd38      	pop	{r3, r4, r5, pc}
 8010690:	240006b4 	.word	0x240006b4

08010694 <__malloc_lock>:
 8010694:	4801      	ldr	r0, [pc, #4]	; (801069c <__malloc_lock+0x8>)
 8010696:	f000 b809 	b.w	80106ac <__retarget_lock_acquire_recursive>
 801069a:	bf00      	nop
 801069c:	240006b8 	.word	0x240006b8

080106a0 <__malloc_unlock>:
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__malloc_unlock+0x8>)
 80106a2:	f000 b804 	b.w	80106ae <__retarget_lock_release_recursive>
 80106a6:	bf00      	nop
 80106a8:	240006b8 	.word	0x240006b8

080106ac <__retarget_lock_acquire_recursive>:
 80106ac:	4770      	bx	lr

080106ae <__retarget_lock_release_recursive>:
 80106ae:	4770      	bx	lr

080106b0 <_init>:
 80106b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b2:	bf00      	nop
 80106b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106b6:	bc08      	pop	{r3}
 80106b8:	469e      	mov	lr, r3
 80106ba:	4770      	bx	lr

080106bc <_fini>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	bf00      	nop
 80106c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106c2:	bc08      	pop	{r3}
 80106c4:	469e      	mov	lr, r3
 80106c6:	4770      	bx	lr
