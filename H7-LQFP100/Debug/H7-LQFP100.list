
H7-LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010228  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080104c0  080104c0  000204c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010518  08010518  00020518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010520  08010520  00020520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010524  08010524  00020524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08010528  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000674  240000a0  080105b8  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000714  080105b8  00030714  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022526  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003866  00000000  00000000  00052627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b60  00000000  00000000  00055e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001594  00000000  00000000  000579f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b2ea  00000000  00000000  00058f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023f43  00000000  00000000  0009426e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180a00  00000000  00000000  000b81b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007a9c  00000000  00000000  00238bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00240650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080104a8 	.word	0x080104a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	080104a8 	.word	0x080104a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_SystemReset+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <__NVIC_SystemReset+0x20>
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	05fa0004 	.word	0x05fa0004

08000600 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	b299      	uxth	r1, r3
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <poll_i2c_sensor+0x94>)
 8000620:	f007 f96a 	bl	80078f8 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <poll_i2c_sensor+0x98>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e022      	b.n	8000688 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b299      	uxth	r1, r3
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <poll_i2c_sensor+0x94>)
 8000654:	f007 fa44 	bl	8007ae0 <HAL_I2C_Master_Receive>
 8000658:	4603      	mov	r3, r0
 800065a:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <poll_i2c_sensor+0x9c>)
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	c303      	stmia	r3!, {r0, r1}
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 800067c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000680:	7a7a      	ldrb	r2, [r7, #9]
 8000682:	4313      	orrs	r3, r2
 8000684:	10db      	asrs	r3, r3, #3
 8000686:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000288 	.word	0x24000288
 8000698:	080104c0 	.word	0x080104c0
 800069c:	080104cc 	.word	0x080104cc

080006a0 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa9 	bl	8000600 <poll_i2c_sensor>
 80006ae:	4603      	mov	r3, r0
 80006b0:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006b2:	2394      	movs	r3, #148	; 0x94
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffa3 	bl	8000600 <poll_i2c_sensor>
 80006ba:	4603      	mov	r3, r0
 80006bc:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006be:	2392      	movs	r3, #146	; 0x92
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff9d 	bl	8000600 <poll_i2c_sensor>
 80006c6:	4603      	mov	r3, r0
 80006c8:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006ca:	2396      	movs	r3, #150	; 0x96
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff97 	bl	8000600 <poll_i2c_sensor>
 80006d2:	4603      	mov	r3, r0
 80006d4:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006d6:	2008      	movs	r0, #8
 80006d8:	f00f fd8c 	bl	80101f4 <malloc>
 80006dc:	4603      	mov	r3, r0
 80006de:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3304      	adds	r3, #4
 80006f2:	897a      	ldrh	r2, [r7, #10]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3306      	adds	r3, #6
 80006fa:	893a      	ldrh	r2, [r7, #8]
 80006fc:	801a      	strh	r2, [r3, #0]
  return results;
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	if (step == 9)
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <do_auto_sweep+0x78>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b09      	cmp	r3, #9
 8000712:	d109      	bne.n	8000728 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <do_auto_sweep+0x7c>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		  step--;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <do_auto_sweep+0x78>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <do_auto_sweep+0x78>)
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e00c      	b.n	8000742 <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <do_auto_sweep+0x78>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d108      	bne.n	8000742 <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <do_auto_sweep+0x7c>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
	    step++;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <do_auto_sweep+0x78>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <do_auto_sweep+0x78>)
 8000740:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <do_auto_sweep+0x7c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <do_auto_sweep+0x50>
	  {
	    step++;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <do_auto_sweep+0x78>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <do_auto_sweep+0x78>)
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e005      	b.n	8000764 <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <do_auto_sweep+0x78>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	3b01      	subs	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <do_auto_sweep+0x78>)
 8000762:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <do_auto_sweep+0x78>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <do_auto_sweep+0x80>)
 800076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <do_auto_sweep+0x84>)
 8000776:	f003 febc 	bl	80044f2 <HAL_DAC_SetValue>

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	240005a8 	.word	0x240005a8
 8000784:	24000028 	.word	0x24000028
 8000788:	24000000 	.word	0x24000000
 800078c:	24000274 	.word	0x24000274

08000790 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 8000790:	b084      	sub	sp, #16
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	f107 0c18 	add.w	ip, r7, #24
 800079c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	2301      	movs	r3, #1
 80007a4:	2201      	movs	r2, #1
 80007a6:	f107 0018 	add.w	r0, r7, #24
 80007aa:	f00b f861 	bl	800b870 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007b2:	797b      	ldrb	r3, [r7, #5]
 80007b4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007c0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007c2:	2002      	movs	r0, #2
 80007c4:	f00f fd16 	bl	80101f4 <malloc>
 80007c8:	4603      	mov	r3, r0
 80007ca:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	7bba      	ldrb	r2, [r7, #14]
 80007d0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	3301      	adds	r3, #1
 80007d6:	7bfa      	ldrb	r2, [r7, #15]
 80007d8:	701a      	strb	r2, [r3, #0]
	return results;
 80007da:	68bb      	ldr	r3, [r7, #8]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e6:	b004      	add	sp, #16
 80007e8:	4770      	bx	lr
	...

080007ec <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <set_erpa_sweep+0x28>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <set_erpa_sweep+0x2c>)
 80007f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <set_erpa_sweep+0x30>)
 8000802:	f003 fe76 	bl	80044f2 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000806:	2100      	movs	r1, #0
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <set_erpa_sweep+0x30>)
 800080a:	f003 fe20 	bl	800444e <HAL_DAC_Start>

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	240005a8 	.word	0x240005a8
 8000818:	24000000 	.word	0x24000000
 800081c:	24000274 	.word	0x24000274

08000820 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <erpa_adc+0x34>)
 8000828:	885b      	ldrh	r3, [r3, #2]
 800082a:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified doesn't need to change
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <erpa_adc+0x34>)
 800082e:	895b      	ldrh	r3, [r3, #10]
 8000830:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(2 * sizeof(uint16_t));
 8000832:	2004      	movs	r0, #4
 8000834:	f00f fcde 	bl	80101f4 <malloc>
 8000838:	4603      	mov	r3, r0
 800083a:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	88fa      	ldrh	r2, [r7, #6]
 8000840:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	3302      	adds	r3, #2
 8000846:	88ba      	ldrh	r2, [r7, #4]
 8000848:	801a      	strh	r2, [r3, #0]

	return results;
 800084a:	683b      	ldr	r3, [r7, #0]


}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	24000580 	.word	0x24000580

08000858 <hk_adc1>:

uint16_t* hk_adc1() {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];			// BUSVmon -- verified doesn't need to change
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <hk_adc1+0x98>)
 8000860:	8a9b      	ldrh	r3, [r3, #20]
 8000862:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];				// BUSImon -- verified doesn't need to change
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <hk_adc1+0x98>)
 8000866:	8a1b      	ldrh	r3, [r3, #16]
 8000868:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified doesn't need to change
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <hk_adc1+0x98>)
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <hk_adc1+0x98>)
 8000872:	8a5b      	ldrh	r3, [r3, #18]
 8000874:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];				// n200v -- verified doesn't need to change
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <hk_adc1+0x98>)
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <hk_adc1+0x98>)
 800087e:	88db      	ldrh	r3, [r3, #6]
 8000880:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <hk_adc1+0x98>)
 8000884:	89db      	ldrh	r3, [r3, #14]
 8000886:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified doesn't need to change
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <hk_adc1+0x98>)
 800088a:	891b      	ldrh	r3, [r3, #8]
 800088c:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <hk_adc1+0x98>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 8000894:	2012      	movs	r0, #18
 8000896:	f00f fcad 	bl	80101f4 <malloc>
 800089a:	4603      	mov	r3, r0
 800089c:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	8afa      	ldrh	r2, [r7, #22]
 80008a2:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	3302      	adds	r3, #2
 80008a8:	8aba      	ldrh	r2, [r7, #20]
 80008aa:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	3304      	adds	r3, #4
 80008b0:	8a7a      	ldrh	r2, [r7, #18]
 80008b2:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	3306      	adds	r3, #6
 80008b8:	8a3a      	ldrh	r2, [r7, #16]
 80008ba:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3308      	adds	r3, #8
 80008c0:	89fa      	ldrh	r2, [r7, #14]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	330a      	adds	r3, #10
 80008c8:	89ba      	ldrh	r2, [r7, #12]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	330c      	adds	r3, #12
 80008d0:	897a      	ldrh	r2, [r7, #10]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	330e      	adds	r3, #14
 80008d8:	893a      	ldrh	r2, [r7, #8]
 80008da:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	3310      	adds	r3, #16
 80008e0:	88fa      	ldrh	r2, [r7, #6]
 80008e2:	801a      	strh	r2, [r3, #0]

	return results;
 80008e4:	683b      	ldr	r3, [r7, #0]

}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	24000580 	.word	0x24000580

080008f4 <hk_adc3>:

uint16_t* hk_adc3() {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <hk_adc3+0x50>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <hk_adc3+0x50>)
 8000902:	885b      	ldrh	r3, [r3, #2]
 8000904:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <hk_adc3+0x50>)
 8000908:	889b      	ldrh	r3, [r3, #4]
 800090a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <hk_adc3+0x50>)
 800090e:	88db      	ldrh	r3, [r3, #6]
 8000910:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000912:	2008      	movs	r0, #8
 8000914:	f00f fc6e 	bl	80101f4 <malloc>
 8000918:	4603      	mov	r3, r0
 800091a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	89fa      	ldrh	r2, [r7, #14]
 8000920:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3302      	adds	r3, #2
 8000926:	89ba      	ldrh	r2, [r7, #12]
 8000928:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3304      	adds	r3, #4
 800092e:	897a      	ldrh	r2, [r7, #10]
 8000930:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3306      	adds	r3, #6
 8000936:	893a      	ldrh	r2, [r7, #8]
 8000938:	801a      	strh	r2, [r3, #0]

	return results;
 800093a:	687b      	ldr	r3, [r7, #4]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	240005a0 	.word	0x240005a0

08000948 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 8000952:	23aa      	movs	r3, #170	; 0xaa
 8000954:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 8000956:	23aa      	movs	r3, #170	; 0xaa
 8000958:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <send_erpa_packet+0x90>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	b29b      	uxth	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <send_erpa_packet+0x90>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  							// ENDmon MSB
 800096e:	2300      	movs	r3, #0
 8000970:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               						// ENDmon LSB
 8000972:	2300      	movs	r3, #0
 8000974:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);               		// SWP Monitored LSB
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	3302      	adds	r3, #2
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	b29b      	uxth	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);               		// TEMPURATURE 1 LSB
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3302      	adds	r3, #2
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009a2:	2300      	movs	r3, #0
 80009a4:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009a6:	2300      	movs	r3, #0
 80009a8:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009b6:	f107 0108 	add.w	r1, r7, #8
 80009ba:	2364      	movs	r3, #100	; 0x64
 80009bc:	220e      	movs	r2, #14
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <send_erpa_packet+0x94>)
 80009c0:	f00d f900 	bl	800dbc4 <HAL_UART_Transmit>
	erpa_seq++;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <send_erpa_packet+0x90>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <send_erpa_packet+0x90>)
 80009ce:	801a      	strh	r2, [r3, #0]

}
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	240005b8 	.word	0x240005b8
 80009dc:	2400047c 	.word	0x2400047c

080009e0 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 80009ec:	23cc      	movs	r3, #204	; 0xcc
 80009ee:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 80009f0:	23cc      	movs	r3, #204	; 0xcc
 80009f2:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 80009f4:	4b7d      	ldr	r3, [pc, #500]	; (8000bec <send_hk_packet+0x20c>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000a00:	4b7a      	ldr	r3, [pc, #488]	; (8000bec <send_hk_packet+0x20c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	0a1b      	lsrs	r3, r3, #8
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3a:	121b      	asrs	r3, r3, #8
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	121b      	asrs	r3, r3, #8
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3304      	adds	r3, #4
 8000a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6c:	121b      	asrs	r3, r3, #8
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3304      	adds	r3, #4
 8000a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3306      	adds	r3, #6
 8000a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a86:	121b      	asrs	r3, r3, #8
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3306      	adds	r3, #6
 8000a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3306      	adds	r3, #6
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	0a1b      	lsrs	r3, r3, #8
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3306      	adds	r3, #6
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	330c      	adds	r3, #12
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	330c      	adds	r3, #12
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3306      	adds	r3, #6
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3306      	adds	r3, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	330e      	adds	r3, #14
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	330e      	adds	r3, #14
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3310      	adds	r3, #16
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3310      	adds	r3, #16
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	3308      	adds	r3, #8
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	330a      	adds	r3, #10
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	330a      	adds	r3, #10
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bc8:	f107 0110 	add.w	r1, r7, #16
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	2226      	movs	r2, #38	; 0x26
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <send_hk_packet+0x210>)
 8000bd2:	f00c fff7 	bl	800dbc4 <HAL_UART_Transmit>
	hk_seq++;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <send_hk_packet+0x20c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	4b03      	ldr	r3, [pc, #12]	; (8000bec <send_hk_packet+0x20c>)
 8000be0:	801a      	strh	r2, [r3, #0]


}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240005bc 	.word	0x240005bc
 8000bf0:	2400047c 	.word	0x2400047c

08000bf4 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000bfc:	23bb      	movs	r3, #187	; 0xbb
 8000bfe:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000c00:	23bb      	movs	r3, #187	; 0xbb
 8000c02:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <send_pmt_packet+0x54>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <send_pmt_packet+0x54>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c24:	f107 0108 	add.w	r1, r7, #8
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <send_pmt_packet+0x58>)
 8000c2e:	f00c ffc9 	bl	800dbc4 <HAL_UART_Transmit>
	pmt_seq++;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <send_pmt_packet+0x54>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <send_pmt_packet+0x54>)
 8000c3c:	801a      	strh	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	240005ba 	.word	0x240005ba
 8000c4c:	2400047c 	.word	0x2400047c

08000c50 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b0a7      	sub	sp, #156	; 0x9c
 8000c54:	af1e      	add	r7, sp, #120	; 0x78
 8000c56:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d15a      	bne.n	8000d16 <HAL_TIM_OC_DelayElapsedCallback+0xc6>
  {
	  SWP_FACTOR_COUNTER++;
 8000c60:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a41      	ldr	r2, [pc, #260]	; (8000d6c <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000c68:	6013      	str	r3, [r2, #0]
		  if (ERPA_ON)
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d035      	beq.n	8000cde <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		  {

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000c72:	bf00      	nop
 8000c74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c78:	483e      	ldr	r0, [pc, #248]	; (8000d74 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8000c7a:	f006 fd7b 	bl	8007774 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f7      	bne.n	8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x24>

			uint8_t* spi2_results = spi(hspi2);
 8000c84:	4c3c      	ldr	r4, [pc, #240]	; (8000d78 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8000c86:	4668      	mov	r0, sp
 8000c88:	f104 0310 	add.w	r3, r4, #16
 8000c8c:	2278      	movs	r2, #120	; 0x78
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f00f fbb0 	bl	80103f4 <memcpy>
 8000c94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c98:	f7ff fd7a 	bl	8000790 <spi>
 8000c9c:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000c9e:	f7ff fdbf 	bl	8000820 <erpa_adc>
 8000ca2:	6178      	str	r0, [r7, #20]

			if (SWP_FACTOR_COUNTER == (SAMPLING_FACTOR * 2)) {
 8000ca4:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	005a      	lsls	r2, r3, #1
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d10b      	bne.n	8000cca <HAL_TIM_OC_DelayElapsedCallback+0x7a>
				if (auto_sweep)
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x70>
				{
					do_auto_sweep();
 8000cba:	f7ff fd25 	bl	8000708 <do_auto_sweep>
 8000cbe:	e001      	b.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x74>
				} else {
					set_erpa_sweep();
 8000cc0:	f7ff fd94 	bl	80007ec <set_erpa_sweep>
				}
				SWP_FACTOR_COUNTER = 0;
 8000cc4:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
			}


			send_erpa_packet(spi2_results, erpa_adc_results);
 8000cca:	6979      	ldr	r1, [r7, #20]
 8000ccc:	69b8      	ldr	r0, [r7, #24]
 8000cce:	f7ff fe3b 	bl	8000948 <send_erpa_packet>

			free(spi2_results);
 8000cd2:	69b8      	ldr	r0, [r7, #24]
 8000cd4:	f00f fa96 	bl	8010204 <free>
			free(erpa_adc_results);
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f00f fa93 	bl	8010204 <free>
		  }
		  if (HK_ON)
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d03b      	beq.n	8000d5e <HAL_TIM_OC_DelayElapsedCallback+0x10e>
		  {
			  int16_t *i2c_values = i2c();
 8000ce6:	f7ff fcdb 	bl	80006a0 <i2c>
 8000cea:	6138      	str	r0, [r7, #16]
			  uint16_t* hk_adc1_results = hk_adc1();
 8000cec:	f7ff fdb4 	bl	8000858 <hk_adc1>
 8000cf0:	60f8      	str	r0, [r7, #12]
			  uint16_t* hk_adc3_results = hk_adc3();
 8000cf2:	f7ff fdff 	bl	80008f4 <hk_adc3>
 8000cf6:	60b8      	str	r0, [r7, #8]


			  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	68f9      	ldr	r1, [r7, #12]
 8000cfc:	6938      	ldr	r0, [r7, #16]
 8000cfe:	f7ff fe6f 	bl	80009e0 <send_hk_packet>


			  free(i2c_values);
 8000d02:	6938      	ldr	r0, [r7, #16]
 8000d04:	f00f fa7e 	bl	8010204 <free>
			  free(hk_adc1_results);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f00f fa7b 	bl	8010204 <free>
			  free(hk_adc3_results);
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f00f fa78 	bl	8010204 <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d14:	e023      	b.n	8000d5e <HAL_TIM_OC_DelayElapsedCallback+0x10e>
  else if (htim == &htim1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11f      	bne.n	8000d5e <HAL_TIM_OC_DelayElapsedCallback+0x10e>
      if (PMT_ON)
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01b      	beq.n	8000d5e <HAL_TIM_OC_DelayElapsedCallback+0x10e>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d26:	bf00      	nop
 8000d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2c:	4818      	ldr	r0, [pc, #96]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000d2e:	f006 fd21 	bl	8007774 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f7      	bne.n	8000d28 <HAL_TIM_OC_DelayElapsedCallback+0xd8>
  		uint8_t* spi1_results = spi(hspi1);
 8000d38:	4c16      	ldr	r4, [pc, #88]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000d3a:	4668      	mov	r0, sp
 8000d3c:	f104 0310 	add.w	r3, r4, #16
 8000d40:	2278      	movs	r2, #120	; 0x78
 8000d42:	4619      	mov	r1, r3
 8000d44:	f00f fb56 	bl	80103f4 <memcpy>
 8000d48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d4c:	f7ff fd20 	bl	8000790 <spi>
 8000d50:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000d52:	69f8      	ldr	r0, [r7, #28]
 8000d54:	f7ff ff4e 	bl	8000bf4 <send_pmt_packet>
		free(spi1_results);
 8000d58:	69f8      	ldr	r0, [r7, #28]
 8000d5a:	f00f fa53 	bl	8010204 <free>
}
 8000d5e:	bf00      	nop
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000430 	.word	0x24000430
 8000d6c:	240005b4 	.word	0x240005b4
 8000d70:	240005bf 	.word	0x240005bf
 8000d74:	58020400 	.word	0x58020400
 8000d78:	2400035c 	.word	0x2400035c
 8000d7c:	2400002c 	.word	0x2400002c
 8000d80:	240005ac 	.word	0x240005ac
 8000d84:	240005c0 	.word	0x240005c0
 8000d88:	240003e4 	.word	0x240003e4
 8000d8c:	240005be 	.word	0x240005be
 8000d90:	58020000 	.word	0x58020000
 8000d94:	240002d4 	.word	0x240002d4

08000d98 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	49b6      	ldr	r1, [pc, #728]	; (800107c <HAL_UART_RxCpltCallback+0x2e4>)
 8000da4:	48b6      	ldr	r0, [pc, #728]	; (8001080 <HAL_UART_RxCpltCallback+0x2e8>)
 8000da6:	f00c ffa3 	bl	800dcf0 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000daa:	4bb4      	ldr	r3, [pc, #720]	; (800107c <HAL_UART_RxCpltCallback+0x2e4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b25      	cmp	r3, #37	; 0x25
 8000db4:	f200 815d 	bhi.w	8001072 <HAL_UART_RxCpltCallback+0x2da>
 8000db8:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <HAL_UART_RxCpltCallback+0x28>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000f15 	.word	0x08000f15
 8000dc4:	08000f31 	.word	0x08000f31
 8000dc8:	08000f4d 	.word	0x08000f4d
 8000dcc:	08000f6d 	.word	0x08000f6d
 8000dd0:	08000f8d 	.word	0x08000f8d
 8000dd4:	08000fa9 	.word	0x08000fa9
 8000dd8:	08000fc9 	.word	0x08000fc9
 8000ddc:	08000fe9 	.word	0x08000fe9
 8000de0:	08001073 	.word	0x08001073
 8000de4:	08001073 	.word	0x08001073
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e59 	.word	0x08000e59
 8000df0:	08001005 	.word	0x08001005
 8000df4:	08001015 	.word	0x08001015
 8000df8:	08001035 	.word	0x08001035
 8000dfc:	08001055 	.word	0x08001055
 8000e00:	08001025 	.word	0x08001025
 8000e04:	08001045 	.word	0x08001045
 8000e08:	0800105d 	.word	0x0800105d
 8000e0c:	08000f23 	.word	0x08000f23
 8000e10:	08000f3f 	.word	0x08000f3f
 8000e14:	08000f5d 	.word	0x08000f5d
 8000e18:	08000f7d 	.word	0x08000f7d
 8000e1c:	08000f9b 	.word	0x08000f9b
 8000e20:	08000fb9 	.word	0x08000fb9
 8000e24:	08000fd9 	.word	0x08000fd9
 8000e28:	08000ff7 	.word	0x08000ff7
 8000e2c:	08000e75 	.word	0x08000e75
 8000e30:	08000e8d 	.word	0x08000e8d
 8000e34:	08000ea5 	.word	0x08000ea5
 8000e38:	08001073 	.word	0x08001073
 8000e3c:	08001073 	.word	0x08001073
 8000e40:	08001073 	.word	0x08001073
 8000e44:	08001073 	.word	0x08001073
 8000e48:	08001073 	.word	0x08001073
 8000e4c:	08001073 	.word	0x08001073
 8000e50:	08000ec9 	.word	0x08000ec9
 8000e54:	08000eeb 	.word	0x08000eeb
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e58:	4b8a      	ldr	r3, [pc, #552]	; (8001084 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fca0 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000e64:	e105      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e66:	4b87      	ldr	r3, [pc, #540]	; (8001084 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e68:	2104      	movs	r1, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 fc99 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000e72:	e0fe      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000e74:	4b84      	ldr	r3, [pc, #528]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	f200 80f3 	bhi.w	8001064 <HAL_UART_RxCpltCallback+0x2cc>
	  {
		step++;
 8000e7e:	4b82      	ldr	r3, [pc, #520]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b80      	ldr	r3, [pc, #512]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000e88:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000e8a:	e0eb      	b.n	8001064 <HAL_UART_RxCpltCallback+0x2cc>
  }
  case 0x1C:
  {
    if (step > 0)
 8000e8c:	4b7e      	ldr	r3, [pc, #504]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80e9 	beq.w	8001068 <HAL_UART_RxCpltCallback+0x2d0>
    {
      step--;
 8000e96:	4b7c      	ldr	r3, [pc, #496]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b7a      	ldr	r3, [pc, #488]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ea0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ea2:	e0e1      	b.n	8001068 <HAL_UART_RxCpltCallback+0x2d0>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ea4:	4b79      	ldr	r3, [pc, #484]	; (800108c <HAL_UART_RxCpltCallback+0x2f4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d106      	bne.n	8000eba <HAL_UART_RxCpltCallback+0x122>
		auto_sweep = 1;
 8000eac:	4b77      	ldr	r3, [pc, #476]	; (800108c <HAL_UART_RxCpltCallback+0x2f4>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
		step = 0;
 8000eb2:	4b75      	ldr	r3, [pc, #468]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000eb8:	e0db      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
		auto_sweep = 0;
 8000eba:	4b74      	ldr	r3, [pc, #464]	; (800108c <HAL_UART_RxCpltCallback+0x2f4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ec0:	4b71      	ldr	r3, [pc, #452]	; (8001088 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
  	break;
 8000ec6:	e0d4      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
   }
  case 0x24:
  {
	  if (SAMPLING_FACTOR < 32)
 8000ec8:	4b71      	ldr	r3, [pc, #452]	; (8001090 <HAL_UART_RxCpltCallback+0x2f8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b1f      	cmp	r3, #31
 8000ece:	f300 80cd 	bgt.w	800106c <HAL_UART_RxCpltCallback+0x2d4>
	  {
		  SAMPLING_FACTOR *= 2;
 8000ed2:	4b6f      	ldr	r3, [pc, #444]	; (8001090 <HAL_UART_RxCpltCallback+0x2f8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <HAL_UART_RxCpltCallback+0x2f8>)
 8000eda:	6013      	str	r3, [r2, #0]
		  FACTOR_COUNTER = 0;
 8000edc:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <HAL_UART_RxCpltCallback+0x2fc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000ee2:	4b6d      	ldr	r3, [pc, #436]	; (8001098 <HAL_UART_RxCpltCallback+0x300>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000ee8:	e0c0      	b.n	800106c <HAL_UART_RxCpltCallback+0x2d4>
  }
  case 0x25:
  {
	  if (SAMPLING_FACTOR > 1)
 8000eea:	4b69      	ldr	r3, [pc, #420]	; (8001090 <HAL_UART_RxCpltCallback+0x2f8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f340 80be 	ble.w	8001070 <HAL_UART_RxCpltCallback+0x2d8>
	  {
		  SAMPLING_FACTOR /= 2;
 8000ef4:	4b66      	ldr	r3, [pc, #408]	; (8001090 <HAL_UART_RxCpltCallback+0x2f8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da00      	bge.n	8000efe <HAL_UART_RxCpltCallback+0x166>
 8000efc:	3301      	adds	r3, #1
 8000efe:	105b      	asrs	r3, r3, #1
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b63      	ldr	r3, [pc, #396]	; (8001090 <HAL_UART_RxCpltCallback+0x2f8>)
 8000f04:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000f06:	4b63      	ldr	r3, [pc, #396]	; (8001094 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f0c:	4b62      	ldr	r3, [pc, #392]	; (8001098 <HAL_UART_RxCpltCallback+0x300>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f12:	e0ad      	b.n	8001070 <HAL_UART_RxCpltCallback+0x2d8>
  }
  case 0x00:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f14:	4b5b      	ldr	r3, [pc, #364]	; (8001084 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f16:	2120      	movs	r1, #32
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fc42 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f20:	e0a7      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f22:	4b58      	ldr	r3, [pc, #352]	; (8001084 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f24:	2120      	movs	r1, #32
 8000f26:	2200      	movs	r2, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 fc3b 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f2e:	e0a0      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x01:
  {

    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f30:	4b54      	ldr	r3, [pc, #336]	; (8001084 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	2201      	movs	r2, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f006 fc34 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f3c:	e099      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f3e:	4b51      	ldr	r3, [pc, #324]	; (8001084 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	2200      	movs	r2, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f006 fc2d 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f4a:	e092      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f4c:	4b53      	ldr	r3, [pc, #332]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	2201      	movs	r2, #1
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 fc25 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f5a:	e08a      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	2200      	movs	r2, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f006 fc1d 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f6a:	e082      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f6c:	4b4b      	ldr	r3, [pc, #300]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f72:	2201      	movs	r2, #1
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 fc15 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f7a:	e07a      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	2200      	movs	r2, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 fc0d 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f8a:	e072      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000f8c:	4b43      	ldr	r3, [pc, #268]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	2201      	movs	r2, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fc06 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000f98:	e06b      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fbff 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000fa6:	e064      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fbf7 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000fb6:	e05c      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 fbef 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000fc6:	e054      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fbe7 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000fd6:	e04c      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000fd8:	4b30      	ldr	r3, [pc, #192]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 fbdf 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000fe6:	e044      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	2201      	movs	r2, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fbd8 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8000ff4:	e03d      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <HAL_UART_RxCpltCallback+0x304>)
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fbd1 	bl	80077a4 <HAL_GPIO_WritePin>
    break;
 8001002:	e036      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001004:	f001 fcc4 	bl	8002990 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001008:	2101      	movs	r1, #1
 800100a:	2001      	movs	r0, #1
 800100c:	f007 f96e 	bl	80082ec <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8001010:	f7ff fae0 	bl	80005d4 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_UART_RxCpltCallback+0x308>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800101a:	2100      	movs	r1, #0
 800101c:	4821      	ldr	r0, [pc, #132]	; (80010a4 <HAL_UART_RxCpltCallback+0x30c>)
 800101e:	f00b f92b 	bl	800c278 <HAL_TIM_OC_Start_IT>
    break;
 8001022:	e026      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_UART_RxCpltCallback+0x308>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800102a:	2100      	movs	r1, #0
 800102c:	481d      	ldr	r0, [pc, #116]	; (80010a4 <HAL_UART_RxCpltCallback+0x30c>)
 800102e:	f00b fa7d 	bl	800c52c <HAL_TIM_OC_Stop_IT>

    break;
 8001032:	e01e      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_UART_RxCpltCallback+0x310>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800103a:	210c      	movs	r1, #12
 800103c:	481b      	ldr	r0, [pc, #108]	; (80010ac <HAL_UART_RxCpltCallback+0x314>)
 800103e:	f00b f91b 	bl	800c278 <HAL_TIM_OC_Start_IT>
    break;
 8001042:	e016      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UART_RxCpltCallback+0x310>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800104a:	210c      	movs	r1, #12
 800104c:	4817      	ldr	r0, [pc, #92]	; (80010ac <HAL_UART_RxCpltCallback+0x314>)
 800104e:	f00b fa6d 	bl	800c52c <HAL_TIM_OC_Stop_IT>

    break;
 8001052:	e00e      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_UART_RxCpltCallback+0x318>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
    break;
 800105a:	e00a      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x12:
  {
    HK_ON = 0;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_UART_RxCpltCallback+0x318>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    break;
 8001062:	e006      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 8001064:	bf00      	nop
 8001066:	e004      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
    break;
 8001068:	bf00      	nop
 800106a:	e002      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <HAL_UART_RxCpltCallback+0x2da>
	  break;
 8001070:	bf00      	nop
  }
  }
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2400050c 	.word	0x2400050c
 8001080:	2400047c 	.word	0x2400047c
 8001084:	58020400 	.word	0x58020400
 8001088:	240005a8 	.word	0x240005a8
 800108c:	240005ac 	.word	0x240005ac
 8001090:	2400002c 	.word	0x2400002c
 8001094:	240005b0 	.word	0x240005b0
 8001098:	240005b4 	.word	0x240005b4
 800109c:	58020800 	.word	0x58020800
 80010a0:	240005be 	.word	0x240005be
 80010a4:	240003e4 	.word	0x240003e4
 80010a8:	240005bf 	.word	0x240005bf
 80010ac:	24000430 	.word	0x24000430
 80010b0:	240005c0 	.word	0x240005c0

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f001 fbb4 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f894 	bl	80011e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010c0:	f000 f918 	bl	80012f4 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80010c4:	f000 fd98 	bl	8001bf8 <MX_GPIO_Init>
   MX_DAC1_Init();
 80010c8:	f000 fafa 	bl	80016c0 <MX_DAC1_Init>
   MX_TIM1_Init();
 80010cc:	f000 fc1a 	bl	8001904 <MX_TIM1_Init>
   MX_TIM2_Init();
 80010d0:	f000 fca8 	bl	8001a24 <MX_TIM2_Init>
   MX_I2C1_Init();
 80010d4:	f000 fb26 	bl	8001724 <MX_I2C1_Init>
   MX_SPI1_Init();
 80010d8:	f000 fb64 	bl	80017a4 <MX_SPI1_Init>
   MX_DMA_Init();
 80010dc:	f000 fd64 	bl	8001ba8 <MX_DMA_Init>
   MX_ADC1_Init();
 80010e0:	f000 f936 	bl	8001350 <MX_ADC1_Init>
   MX_USART1_UART_Init();
 80010e4:	f000 fd14 	bl	8001b10 <MX_USART1_UART_Init>
   MX_ADC3_Init();
 80010e8:	f000 fa54 	bl	8001594 <MX_ADC3_Init>
   MX_SPI2_Init();
 80010ec:	f000 fbb2 	bl	8001854 <MX_SPI2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f000 fd82 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f4:	f000 fd58 	bl	8001ba8 <MX_DMA_Init>
  MX_ADC1_Init();
 80010f8:	f000 f92a 	bl	8001350 <MX_ADC1_Init>
  MX_ADC3_Init();
 80010fc:	f000 fa4a 	bl	8001594 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001100:	f000 fade 	bl	80016c0 <MX_DAC1_Init>
  MX_I2C1_Init();
 8001104:	f000 fb0e 	bl	8001724 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001108:	f000 fb4c 	bl	80017a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800110c:	f000 fba2 	bl	8001854 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001110:	f000 fbf8 	bl	8001904 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001114:	f000 fcfc 	bl	8001b10 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001118:	f000 fc84 	bl	8001a24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM2->CCR4 = 312;
 800111c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001120:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001126:	210c      	movs	r1, #12
 8001128:	4827      	ldr	r0, [pc, #156]	; (80011c8 <main+0x114>)
 800112a:	f00b fb3b 	bl	800c7a4 <HAL_TIM_PWM_Start>

  // Moved from the do_auto_sweep function, it should only need to be started once.
	if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4826      	ldr	r0, [pc, #152]	; (80011cc <main+0x118>)
 8001132:	f003 f98c 	bl	800444e <HAL_DAC_Start>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <main+0x8c>
	{
		Error_Handler();
 800113c:	f000 fe42 	bl	8001dc4 <Error_Handler>


//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001140:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001144:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <main+0x11c>)
 800114a:	f002 ff0d 	bl	8003f68 <HAL_ADCEx_Calibration_Start>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <main+0xa4>
  {
    /* Calibration Error */
    Error_Handler();
 8001154:	f000 fe36 	bl	8001dc4 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 8001158:	220b      	movs	r2, #11
 800115a:	491e      	ldr	r1, [pc, #120]	; (80011d4 <main+0x120>)
 800115c:	481c      	ldr	r0, [pc, #112]	; (80011d0 <main+0x11c>)
 800115e:	f001 fff9 	bl	8003154 <HAL_ADC_Start_DMA>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <main+0xb8>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 8001168:	f000 fe2c 	bl	8001dc4 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800116c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <main+0x124>)
 8001176:	f002 fef7 	bl	8003f68 <HAL_ADCEx_Calibration_Start>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <main+0xd0>
  {
	/* Calibration Error */
	Error_Handler();
 8001180:	f000 fe20 	bl	8001dc4 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 8001184:	2204      	movs	r2, #4
 8001186:	4915      	ldr	r1, [pc, #84]	; (80011dc <main+0x128>)
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <main+0x124>)
 800118a:	f001 ffe3 	bl	8003154 <HAL_ADC_Start_DMA>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <main+0xe4>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 8001194:	f000 fe16 	bl	8001dc4 <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001198:	bf00      	nop
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <main+0x12c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d0f7      	beq.n	800119a <main+0xe6>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80011aa:	bf00      	nop
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <main+0x12c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ba:	d1f7      	bne.n	80011ac <main+0xf8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	4909      	ldr	r1, [pc, #36]	; (80011e4 <main+0x130>)
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <main+0x12c>)
 80011c2:	f00c fd95 	bl	800dcf0 <HAL_UART_Receive_IT>
 80011c6:	e7f9      	b.n	80011bc <main+0x108>
 80011c8:	24000430 	.word	0x24000430
 80011cc:	24000274 	.word	0x24000274
 80011d0:	240000bc 	.word	0x240000bc
 80011d4:	24000580 	.word	0x24000580
 80011d8:	24000120 	.word	0x24000120
 80011dc:	240005a0 	.word	0x240005a0
 80011e0:	2400047c 	.word	0x2400047c
 80011e4:	2400050c 	.word	0x2400050c

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b09c      	sub	sp, #112	; 0x70
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	224c      	movs	r2, #76	; 0x4c
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00f f8b8 	bl	801036c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2220      	movs	r2, #32
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00f f8b2 	bl	801036c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001208:	2002      	movs	r0, #2
 800120a:	f007 f8ab 	bl	8008364 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <SystemClock_Config+0x100>)
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	4a34      	ldr	r2, [pc, #208]	; (80012e8 <SystemClock_Config+0x100>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <SystemClock_Config+0x100>)
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <SystemClock_Config+0x104>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001230:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <SystemClock_Config+0x104>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <SystemClock_Config+0x104>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001244:	bf00      	nop
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <SystemClock_Config+0x104>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800124e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001252:	d1f8      	bne.n	8001246 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <SystemClock_Config+0x108>)
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <SystemClock_Config+0x108>)
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001264:	2301      	movs	r3, #1
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2340      	movs	r3, #64	; 0x40
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001278:	230c      	movs	r3, #12
 800127a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800127c:	2304      	movs	r3, #4
 800127e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001288:	230c      	movs	r3, #12
 800128a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800128c:	2300      	movs	r3, #0
 800128e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4618      	mov	r0, r3
 800129a:	f007 f89d 	bl	80083d8 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012a4:	f000 fd8e 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	233f      	movs	r3, #63	; 0x3f
 80012aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012bc:	2340      	movs	r3, #64	; 0x40
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f007 fcb0 	bl	8008c34 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80012da:	f000 fd73 	bl	8001dc4 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3770      	adds	r7, #112	; 0x70
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	58000400 	.word	0x58000400
 80012ec:	58024800 	.word	0x58024800
 80012f0:	58024400 	.word	0x58024400

080012f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0b0      	sub	sp, #192	; 0xc0
 80012f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	22bc      	movs	r2, #188	; 0xbc
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00f f833 	bl	801036c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001306:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800130a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800130c:	2304      	movs	r3, #4
 800130e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001310:	2309      	movs	r3, #9
 8001312:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001320:	23c0      	movs	r3, #192	; 0xc0
 8001322:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001324:	2320      	movs	r3, #32
 8001326:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001328:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4618      	mov	r0, r3
 8001338:	f008 f808 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001342:	f000 fd3f 	bl	8001dc4 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	37c0      	adds	r7, #192	; 0xc0
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001374:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <MX_ADC1_Init+0x210>)
 8001376:	4a7b      	ldr	r2, [pc, #492]	; (8001564 <MX_ADC1_Init+0x214>)
 8001378:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800137a:	4b79      	ldr	r3, [pc, #484]	; (8001560 <MX_ADC1_Init+0x210>)
 800137c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001380:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <MX_ADC1_Init+0x210>)
 8001384:	2208      	movs	r2, #8
 8001386:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001388:	4b75      	ldr	r3, [pc, #468]	; (8001560 <MX_ADC1_Init+0x210>)
 800138a:	2201      	movs	r2, #1
 800138c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <MX_ADC1_Init+0x210>)
 8001390:	2204      	movs	r2, #4
 8001392:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001394:	4b72      	ldr	r3, [pc, #456]	; (8001560 <MX_ADC1_Init+0x210>)
 8001396:	2200      	movs	r2, #0
 8001398:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800139a:	4b71      	ldr	r3, [pc, #452]	; (8001560 <MX_ADC1_Init+0x210>)
 800139c:	2201      	movs	r2, #1
 800139e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80013a0:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <MX_ADC1_Init+0x210>)
 80013a2:	220b      	movs	r2, #11
 80013a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <MX_ADC1_Init+0x210>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ac:	4b6c      	ldr	r3, [pc, #432]	; (8001560 <MX_ADC1_Init+0x210>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b2:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <MX_ADC1_Init+0x210>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <MX_ADC1_Init+0x210>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013be:	4b68      	ldr	r3, [pc, #416]	; (8001560 <MX_ADC1_Init+0x210>)
 80013c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013c6:	4b66      	ldr	r3, [pc, #408]	; (8001560 <MX_ADC1_Init+0x210>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <MX_ADC1_Init+0x210>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d4:	4862      	ldr	r0, [pc, #392]	; (8001560 <MX_ADC1_Init+0x210>)
 80013d6:	f001 fd1b 	bl	8002e10 <HAL_ADC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013e0:	f000 fcf0 	bl	8001dc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	485c      	ldr	r0, [pc, #368]	; (8001560 <MX_ADC1_Init+0x210>)
 80013f0:	f002 fe1e 	bl	8004030 <HAL_ADCEx_MultiModeConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80013fa:	f000 fce3 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013fe:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <MX_ADC1_Init+0x218>)
 8001400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001402:	2306      	movs	r3, #6
 8001404:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001406:	2307      	movs	r3, #7
 8001408:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800140a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800140e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001410:	2304      	movs	r3, #4
 8001412:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	484f      	ldr	r0, [pc, #316]	; (8001560 <MX_ADC1_Init+0x210>)
 8001422:	f001 ff6f 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800142c:	f000 fcca 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <MX_ADC1_Init+0x21c>)
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001434:	230c      	movs	r3, #12
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4848      	ldr	r0, [pc, #288]	; (8001560 <MX_ADC1_Init+0x210>)
 800143e:	f001 ff61 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001448:	f000 fcbc 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <MX_ADC1_Init+0x220>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001450:	2312      	movs	r3, #18
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4841      	ldr	r0, [pc, #260]	; (8001560 <MX_ADC1_Init+0x210>)
 800145a:	f001 ff53 	bl	8003304 <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001464:	f000 fcae 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <MX_ADC1_Init+0x224>)
 800146a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800146c:	2318      	movs	r3, #24
 800146e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	4619      	mov	r1, r3
 8001474:	483a      	ldr	r0, [pc, #232]	; (8001560 <MX_ADC1_Init+0x210>)
 8001476:	f001 ff45 	bl	8003304 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001480:	f000 fca0 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001484:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <MX_ADC1_Init+0x228>)
 8001486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4833      	ldr	r0, [pc, #204]	; (8001560 <MX_ADC1_Init+0x210>)
 8001494:	f001 ff36 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800149e:	f000 fc91 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <MX_ADC1_Init+0x22c>)
 80014a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80014a6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80014aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	482b      	ldr	r0, [pc, #172]	; (8001560 <MX_ADC1_Init+0x210>)
 80014b2:	f001 ff27 	bl	8003304 <HAL_ADC_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80014bc:	f000 fc82 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_ADC1_Init+0x230>)
 80014c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014c4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4824      	ldr	r0, [pc, #144]	; (8001560 <MX_ADC1_Init+0x210>)
 80014d0:	f001 ff18 	bl	8003304 <HAL_ADC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80014da:	f000 fc73 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_ADC1_Init+0x234>)
 80014e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014e2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	481c      	ldr	r0, [pc, #112]	; (8001560 <MX_ADC1_Init+0x210>)
 80014ee:	f001 ff09 	bl	8003304 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80014f8:	f000 fc64 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_ADC1_Init+0x238>)
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001500:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001504:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <MX_ADC1_Init+0x210>)
 800150c:	f001 fefa 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001516:	f000 fc55 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_ADC1_Init+0x23c>)
 800151c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_ADC1_Init+0x210>)
 800152a:	f001 feeb 	bl	8003304 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001534:	f000 fc46 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC1_Init+0x240>)
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800153c:	f240 2306 	movw	r3, #518	; 0x206
 8001540:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_ADC1_Init+0x210>)
 8001548:	f001 fedc 	bl	8003304 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001552:	f000 fc37 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240000bc 	.word	0x240000bc
 8001564:	40022000 	.word	0x40022000
 8001568:	0c900008 	.word	0x0c900008
 800156c:	10c00010 	.word	0x10c00010
 8001570:	14f00020 	.word	0x14f00020
 8001574:	1d500080 	.word	0x1d500080
 8001578:	21800100 	.word	0x21800100
 800157c:	25b00200 	.word	0x25b00200
 8001580:	2a000400 	.word	0x2a000400
 8001584:	2e300800 	.word	0x2e300800
 8001588:	3ac04000 	.word	0x3ac04000
 800158c:	3ef08000 	.word	0x3ef08000
 8001590:	47520000 	.word	0x47520000

08001594 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <MX_ADC3_Init+0x118>)
 80015ae:	4a40      	ldr	r2, [pc, #256]	; (80016b0 <MX_ADC3_Init+0x11c>)
 80015b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <MX_ADC3_Init+0x118>)
 80015b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015b8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <MX_ADC3_Init+0x118>)
 80015bc:	2208      	movs	r2, #8
 80015be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <MX_ADC3_Init+0x118>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <MX_ADC3_Init+0x118>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <MX_ADC3_Init+0x118>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <MX_ADC3_Init+0x118>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <MX_ADC3_Init+0x118>)
 80015da:	2204      	movs	r2, #4
 80015dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <MX_ADC3_Init+0x118>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <MX_ADC3_Init+0x118>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <MX_ADC3_Init+0x118>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <MX_ADC3_Init+0x118>)
 80015f2:	2203      	movs	r2, #3
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <MX_ADC3_Init+0x118>)
 80015f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <MX_ADC3_Init+0x118>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_ADC3_Init+0x118>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <MX_ADC3_Init+0x118>)
 800160e:	f001 fbff 	bl	8002e10 <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8001618:	f000 fbd4 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <MX_ADC3_Init+0x120>)
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2306      	movs	r3, #6
 8001622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001624:	2307      	movs	r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001628:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800162c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800162e:	2304      	movs	r3, #4
 8001630:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	481b      	ldr	r0, [pc, #108]	; (80016ac <MX_ADC3_Init+0x118>)
 8001640:	f001 fe60 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800164a:	f000 fbbb 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_ADC3_Init+0x124>)
 8001650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001652:	230c      	movs	r3, #12
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_ADC3_Init+0x118>)
 800165c:	f001 fe52 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8001666:	f000 fbad 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800166a:	2301      	movs	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800166e:	2312      	movs	r3, #18
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_ADC3_Init+0x118>)
 8001678:	f001 fe44 	bl	8003304 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 8001682:	f000 fb9f 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <MX_ADC3_Init+0x128>)
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800168a:	2318      	movs	r3, #24
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_ADC3_Init+0x118>)
 8001694:	f001 fe36 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 800169e:	f000 fb91 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	24000120 	.word	0x24000120
 80016b0:	58026000 	.word	0x58026000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	cfb80000 	.word	0xcfb80000
 80016bc:	04300002 	.word	0x04300002

080016c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2224      	movs	r2, #36	; 0x24
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00e fe4d 	bl	801036c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_DAC1_Init+0x5c>)
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_DAC1_Init+0x60>)
 80016d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <MX_DAC1_Init+0x5c>)
 80016da:	f002 fe96 	bl	800440a <HAL_DAC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016e4:	f000 fb6e 	bl	8001dc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_DAC1_Init+0x5c>)
 8001704:	f002 ff1a 	bl	800453c <HAL_DAC_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800170e:	f000 fb59 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24000274 	.word	0x24000274
 8001720:	40007400 	.word	0x40007400

08001724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_I2C1_Init+0x74>)
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <MX_I2C1_Init+0x78>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_I2C1_Init+0x74>)
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <MX_I2C1_Init+0x7c>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_I2C1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_I2C1_Init+0x74>)
 800173c:	2201      	movs	r2, #1
 800173e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_I2C1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_I2C1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <MX_I2C1_Init+0x74>)
 8001760:	f006 f83a 	bl	80077d8 <HAL_I2C_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800176a:	f000 fb2b 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <MX_I2C1_Init+0x74>)
 8001772:	f006 fd23 	bl	80081bc <HAL_I2CEx_ConfigAnalogFilter>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800177c:	f000 fb22 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_I2C1_Init+0x74>)
 8001784:	f006 fd65 	bl	8008252 <HAL_I2CEx_ConfigDigitalFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800178e:	f000 fb19 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000288 	.word	0x24000288
 800179c:	40005400 	.word	0x40005400
 80017a0:	00506682 	.word	0x00506682

080017a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <MX_SPI1_Init+0xa8>)
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <MX_SPI1_Init+0xac>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <MX_SPI1_Init+0xa8>)
 80017b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <MX_SPI1_Init+0xa8>)
 80017b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <MX_SPI1_Init+0xa8>)
 80017c0:	220f      	movs	r2, #15
 80017c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_SPI1_Init+0xa8>)
 80017d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_SPI1_Init+0xa8>)
 80017da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_SPI1_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_SPI1_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI1_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI1_Init+0xa8>)
 80017fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_SPI1_Init+0xa8>)
 8001802:	2200      	movs	r2, #0
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI1_Init+0xa8>)
 8001808:	2200      	movs	r2, #0
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI1_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI1_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI1_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_SPI1_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI1_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_SPI1_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI1_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_SPI1_Init+0xa8>)
 8001838:	f009 ff14 	bl	800b664 <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001842:	f000 fabf 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	240002d4 	.word	0x240002d4
 8001850:	40013000 	.word	0x40013000

08001854 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <MX_SPI2_Init+0xa8>)
 800185a:	4a29      	ldr	r2, [pc, #164]	; (8001900 <MX_SPI2_Init+0xac>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001860:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001864:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001868:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800186c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001870:	220f      	movs	r2, #15
 8001872:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001882:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001886:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_SPI2_Init+0xa8>)
 800188a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800188e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_SPI2_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_SPI2_Init+0xa8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_SPI2_Init+0xa8>)
 80018e8:	f009 febc 	bl	800b664 <HAL_SPI_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018f2:	f000 fa67 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2400035c 	.word	0x2400035c
 8001900:	40003800 	.word	0x40003800

08001904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	222c      	movs	r2, #44	; 0x2c
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00e fd1b 	bl	801036c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001938:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <MX_TIM1_Init+0x11c>)
 800193a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <MX_TIM1_Init+0x118>)
 800193e:	2263      	movs	r2, #99	; 0x63
 8001940:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <MX_TIM1_Init+0x118>)
 800194a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800194e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_TIM1_Init+0x118>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001962:	482e      	ldr	r0, [pc, #184]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001964:	f00a fec6 	bl	800c6f4 <HAL_TIM_PWM_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800196e:	f000 fa29 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001982:	4619      	mov	r1, r3
 8001984:	4825      	ldr	r0, [pc, #148]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001986:	f00b ffa3 	bl	800d8d0 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001990:	f000 fa18 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 - 1;
 8001998:	f240 13df 	movw	r3, #479	; 0x1df
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM1_Init+0x118>)
 80019bc:	f00b f920 	bl	800cc00 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019c6:	f000 f9fd 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001a00:	f00b fff4 	bl	800d9ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a0a:	f000 f9db 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM1_Init+0x118>)
 8001a10:	f000 fcd4 	bl	80023bc <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3758      	adds	r7, #88	; 0x58
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	240003e4 	.word	0x240003e4
 8001a20:	40010000 	.word	0x40010000

08001a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a44:	463b      	mov	r3, r7
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48 - 1;
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a60:	222f      	movs	r2, #47	; 0x2f
 8001a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125 - 1;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a6c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7e:	4823      	ldr	r0, [pc, #140]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a80:	f00a fba3 	bl	800c1ca <HAL_TIM_Base_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a8a:	f000 f99b 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481c      	ldr	r0, [pc, #112]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a9c:	f00b f9c4 	bl	800ce28 <HAL_TIM_ConfigClockSource>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001aa6:	f000 f98d 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aaa:	4818      	ldr	r0, [pc, #96]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001aac:	f00a fe22 	bl	800c6f4 <HAL_TIM_PWM_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ab6:	f000 f985 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4810      	ldr	r0, [pc, #64]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001aca:	f00b ff01 	bl	800d8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ad4:	f000 f976 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad8:	2360      	movs	r3, #96	; 0x60
 8001ada:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	220c      	movs	r2, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001af0:	f00b f886 	bl	800cc00 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001afa:	f000 f963 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001b00:	f000 fc5c 	bl	80023bc <HAL_TIM_MspPostInit>

}
 8001b04:	bf00      	nop
 8001b06:	3738      	adds	r7, #56	; 0x38
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	24000430 	.word	0x24000430

08001b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b16:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <MX_USART1_UART_Init+0x94>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b1c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b58:	4811      	ldr	r0, [pc, #68]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b5a:	f00b ffe3 	bl	800db24 <HAL_UART_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b64:	f000 f92e 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b6c:	f00e fa77 	bl	801005e <HAL_UARTEx_SetTxFifoThreshold>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b76:	f000 f925 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b7e:	f00e faac 	bl	80100da <HAL_UARTEx_SetRxFifoThreshold>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b88:	f000 f91c 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_USART1_UART_Init+0x90>)
 8001b8e:	f00e fa2d 	bl	800ffec <HAL_UARTEx_DisableFifoMode>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b98:	f000 f914 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2400047c 	.word	0x2400047c
 8001ba4:	40011000 	.word	0x40011000

08001ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_DMA_Init+0x4c>)
 8001bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <MX_DMA_Init+0x4c>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <MX_DMA_Init+0x4c>)
 8001bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	200b      	movs	r0, #11
 8001bd2:	f002 fbe6 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bd6:	200b      	movs	r0, #11
 8001bd8:	f002 fbfd 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	200c      	movs	r0, #12
 8001be2:	f002 fbde 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001be6:	200c      	movs	r0, #12
 8001be8:	f002 fbf5 	bl	80043d6 <HAL_NVIC_EnableIRQ>

}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58024400 	.word	0x58024400

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c8c:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <MX_GPIO_Init+0xec>)
 8001c8e:	f005 fd89 	bl	80077a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2164      	movs	r1, #100	; 0x64
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0xf0>)
 8001c98:	f005 fd84 	bl	80077a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c9c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001ca0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <MX_GPIO_Init+0xec>)
 8001cb6:	f005 fbad 	bl	8007414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cba:	2364      	movs	r3, #100	; 0x64
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_GPIO_Init+0xf0>)
 8001cd2:	f005 fb9f 	bl	8007414 <HAL_GPIO_Init>

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58020800 	.word	0x58020800
 8001ce8:	58020400 	.word	0x58020400

08001cec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b08b      	sub	sp, #44	; 0x2c
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d125      	bne.n	8001d48 <HAL_ADC_ConvCpltCallback+0x5c>
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001d00:	230b      	movs	r3, #11
 8001d02:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dd48      	ble.n	8001d9c <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	4413      	add	r3, r2
 8001d14:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1a:	f3bf 8f4f 	dsb	sy
}
 8001d1e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d20:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	3320      	adds	r3, #32
 8001d2c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b20      	subs	r3, #32
 8001d32:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dcf2      	bgt.n	8001d20 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3a:	f3bf 8f4f 	dsb	sy
}
 8001d3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d40:	f3bf 8f6f 	isb	sy
}
 8001d44:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d46:	e029      	b.n	8001d9c <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d128      	bne.n	8001da2 <HAL_ADC_ConvCpltCallback+0xb6>
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	2304      	movs	r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	dd20      	ble.n	8001da0 <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6e:	f3bf 8f4f 	dsb	sy
}
 8001d72:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d74:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3320      	adds	r3, #32
 8001d80:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3b20      	subs	r3, #32
 8001d86:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	dcf2      	bgt.n	8001d74 <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8e:	f3bf 8f4f 	dsb	sy
}
 8001d92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d94:	f3bf 8f6f 	isb	sy
}
 8001d98:	bf00      	nop
}
 8001d9a:	e001      	b.n	8001da0 <HAL_ADC_ConvCpltCallback+0xb4>
 8001d9c:	bf00      	nop
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_ConvCpltCallback+0xb6>
 8001da0:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001da2:	bf00      	nop
 8001da4:	372c      	adds	r7, #44	; 0x2c
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	240000bc 	.word	0x240000bc
 8001db4:	2400058a 	.word	0x2400058a
 8001db8:	e000ed00 	.word	0xe000ed00
 8001dbc:	24000120 	.word	0x24000120
 8001dc0:	240005a4 	.word	0x240005a4

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_MspInit+0x30>)
 8001dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x30>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x30>)
 8001de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	58024400 	.word	0x58024400

08001e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7b      	ldr	r2, [pc, #492]	; (8002010 <HAL_ADC_MspInit+0x20c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	f040 8091 	bne.w	8001f4a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e28:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e2e:	4a79      	ldr	r2, [pc, #484]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e38:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	4a71      	ldr	r2, [pc, #452]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e56:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b6b      	ldr	r3, [pc, #428]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	4a6a      	ldr	r2, [pc, #424]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e74:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e88:	4a62      	ldr	r2, [pc, #392]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ea0:	2333      	movs	r3, #51	; 0x33
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4859      	ldr	r0, [pc, #356]	; (8002018 <HAL_ADC_MspInit+0x214>)
 8001eb4:	f005 faae 	bl	8007414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001eb8:	23ce      	movs	r3, #206	; 0xce
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4854      	ldr	r0, [pc, #336]	; (800201c <HAL_ADC_MspInit+0x218>)
 8001ecc:	f005 faa2 	bl	8007414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	484f      	ldr	r0, [pc, #316]	; (8002020 <HAL_ADC_MspInit+0x21c>)
 8001ee4:	f005 fa96 	bl	8007414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ee8:	4b4e      	ldr	r3, [pc, #312]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001eea:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_ADC_MspInit+0x224>)
 8001eec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001ef0:	2209      	movs	r2, #9
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef4:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efa:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f00:	4b48      	ldr	r3, [pc, #288]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f10:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f26:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f2c:	483d      	ldr	r0, [pc, #244]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f2e:	f002 fc35 	bl	800479c <HAL_DMA_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001f38:	f7ff ff44 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f40:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f42:	4a38      	ldr	r2, [pc, #224]	; (8002024 <HAL_ADC_MspInit+0x220>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f48:	e05e      	b.n	8002008 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <HAL_ADC_MspInit+0x228>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d159      	bne.n	8002008 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f54:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_ADC_MspInit+0x210>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f90:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f94:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f98:	f000 fd16 	bl	80029c8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001fa0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001fa4:	f000 fd10 	bl	80029c8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001faa:	4a22      	ldr	r2, [pc, #136]	; (8002034 <HAL_ADC_MspInit+0x230>)
 8001fac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fb0:	2273      	movs	r2, #115	; 0x73
 8001fb2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fce:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fde:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fec:	4810      	ldr	r0, [pc, #64]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8001fee:	f002 fbd5 	bl	800479c <HAL_DMA_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001ff8:	f7ff fee4 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8002000:	64da      	str	r2, [r3, #76]	; 0x4c
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_ADC_MspInit+0x22c>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40022000 	.word	0x40022000
 8002014:	58024400 	.word	0x58024400
 8002018:	58020800 	.word	0x58020800
 800201c:	58020000 	.word	0x58020000
 8002020:	58020400 	.word	0x58020400
 8002024:	24000184 	.word	0x24000184
 8002028:	40020010 	.word	0x40020010
 800202c:	58026000 	.word	0x58026000
 8002030:	240001fc 	.word	0x240001fc
 8002034:	40020028 	.word	0x40020028

08002038 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_DAC_MspInit+0x80>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d129      	bne.n	80020ae <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_DAC_MspInit+0x84>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002060:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HAL_DAC_MspInit+0x84>)
 8002062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_DAC_MspInit+0x84>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_DAC_MspInit+0x84>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_DAC_MspInit+0x84>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_DAC_MspInit+0x84>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002096:	2310      	movs	r3, #16
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209a:	2303      	movs	r3, #3
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <HAL_DAC_MspInit+0x88>)
 80020aa:	f005 f9b3 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40007400 	.word	0x40007400
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020000 	.word	0x58020000

080020c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0b8      	sub	sp, #224	; 0xe0
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	22bc      	movs	r2, #188	; 0xbc
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00e f941 	bl	801036c <memset>
  if(hi2c->Instance==I2C1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a25      	ldr	r2, [pc, #148]	; (8002184 <HAL_I2C_MspInit+0xc0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d142      	bne.n	800217a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020f4:	2308      	movs	r3, #8
 80020f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4618      	mov	r0, r3
 8002104:	f007 f922 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800210e:	f7ff fe59 	bl	8001dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_I2C_MspInit+0xc4>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_I2C_MspInit+0xc4>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_I2C_MspInit+0xc4>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002130:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002138:	2312      	movs	r3, #18
 800213a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800214a:	2304      	movs	r3, #4
 800214c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002154:	4619      	mov	r1, r3
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <HAL_I2C_MspInit+0xc8>)
 8002158:	f005 f95c 	bl	8007414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_I2C_MspInit+0xc4>)
 800215e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_I2C_MspInit+0xc4>)
 8002164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002168:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_I2C_MspInit+0xc4>)
 800216e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	37e0      	adds	r7, #224	; 0xe0
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40005400 	.word	0x40005400
 8002188:	58024400 	.word	0x58024400
 800218c:	58020400 	.word	0x58020400

08002190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0ba      	sub	sp, #232	; 0xe8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	22bc      	movs	r2, #188	; 0xbc
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00e f8db 	bl	801036c <memset>
  if(hspi->Instance==SPI1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a49      	ldr	r2, [pc, #292]	; (80022e0 <HAL_SPI_MspInit+0x150>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d142      	bne.n	8002246 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 f8bc 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021da:	f7ff fdf3 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 80021e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e4:	4a3f      	ldr	r2, [pc, #252]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 80021e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 80021f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800221a:	2318      	movs	r3, #24
 800221c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002232:	2305      	movs	r3, #5
 8002234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800223c:	4619      	mov	r1, r3
 800223e:	482a      	ldr	r0, [pc, #168]	; (80022e8 <HAL_SPI_MspInit+0x158>)
 8002240:	f005 f8e8 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002244:	e047      	b.n	80022d6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a28      	ldr	r2, [pc, #160]	; (80022ec <HAL_SPI_MspInit+0x15c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d142      	bne.n	80022d6 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002256:	2300      	movs	r3, #0
 8002258:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	4618      	mov	r0, r3
 8002260:	f007 f874 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800226a:	f7ff fdab 	bl	8001dc4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 8002270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 8002276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 8002280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_SPI_MspInit+0x154>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80022aa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c4:	2305      	movs	r3, #5
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_SPI_MspInit+0x158>)
 80022d2:	f005 f89f 	bl	8007414 <HAL_GPIO_Init>
}
 80022d6:	bf00      	nop
 80022d8:	37e8      	adds	r7, #232	; 0xe8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40013000 	.word	0x40013000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58020400 	.word	0x58020400
 80022ec:	40003800 	.word	0x40003800

080022f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_TIM_PWM_MspInit+0x78>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12e      	bne.n	8002360 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2018      	movs	r0, #24
 8002326:	f002 f83c 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800232a:	2018      	movs	r0, #24
 800232c:	f002 f853 	bl	80043d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2019      	movs	r0, #25
 8002336:	f002 f834 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800233a:	2019      	movs	r0, #25
 800233c:	f002 f84b 	bl	80043d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	201a      	movs	r0, #26
 8002346:	f002 f82c 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800234a:	201a      	movs	r0, #26
 800234c:	f002 f843 	bl	80043d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	201b      	movs	r0, #27
 8002356:	f002 f824 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800235a:	201b      	movs	r0, #27
 800235c:	f002 f83b 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40010000 	.word	0x40010000
 800236c:	58024400 	.word	0x58024400

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d116      	bne.n	80023b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_TIM_Base_MspInit+0x48>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <HAL_TIM_Base_MspInit+0x48>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_TIM_Base_MspInit+0x48>)
 8002394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2101      	movs	r1, #1
 80023a4:	201c      	movs	r0, #28
 80023a6:	f001 fffc 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023aa:	201c      	movs	r0, #28
 80023ac:	f002 f813 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	58024400 	.word	0x58024400

080023bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_TIM_MspPostInit+0xb8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d120      	bne.n	8002420 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800240e:	2301      	movs	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4818      	ldr	r0, [pc, #96]	; (800247c <HAL_TIM_MspPostInit+0xc0>)
 800241a:	f004 fffb 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800241e:	e024      	b.n	800246a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d11f      	bne.n	800246a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245a:	2301      	movs	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <HAL_TIM_MspPostInit+0xc4>)
 8002466:	f004 ffd5 	bl	8007414 <HAL_GPIO_Init>
}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	58024400 	.word	0x58024400
 800247c:	58020000 	.word	0x58020000
 8002480:	58020400 	.word	0x58020400

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0b8      	sub	sp, #224	; 0xe0
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	22bc      	movs	r2, #188	; 0xbc
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00d ff61 	bl	801036c <memset>
  if(huart->Instance==USART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_UART_MspInit+0xd0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d14a      	bne.n	800254a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4618      	mov	r0, r3
 80024c4:	f006 ff42 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ce:	f7ff fc79 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_UART_MspInit+0xd4>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002528:	2307      	movs	r3, #7
 800252a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002532:	4619      	mov	r1, r3
 8002534:	4809      	ldr	r0, [pc, #36]	; (800255c <HAL_UART_MspInit+0xd8>)
 8002536:	f004 ff6d 	bl	8007414 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2025      	movs	r0, #37	; 0x25
 8002540:	f001 ff2f 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002544:	2025      	movs	r0, #37	; 0x25
 8002546:	f001 ff46 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	37e0      	adds	r7, #224	; 0xe0
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40011000 	.word	0x40011000
 8002558:	58024400 	.word	0x58024400
 800255c:	58020000 	.word	0x58020000

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 f9ac 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Stream0_IRQHandler+0x10>)
 80025ba:	f003 fc19 	bl	8005df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	24000184 	.word	0x24000184

080025c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Stream1_IRQHandler+0x10>)
 80025ce:	f003 fc0f 	bl	8005df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	240001fc 	.word	0x240001fc

080025dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM1_BRK_IRQHandler+0x10>)
 80025e2:	f00a f9ed 	bl	800c9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	240003e4 	.word	0x240003e4

080025f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM1_UP_IRQHandler+0x10>)
 80025f6:	f00a f9e3 	bl	800c9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	240003e4 	.word	0x240003e4

08002604 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM1_TRG_COM_IRQHandler+0x10>)
 800260a:	f00a f9d9 	bl	800c9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	240003e4 	.word	0x240003e4

08002618 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM1_CC_IRQHandler+0x10>)
 800261e:	f00a f9cf 	bl	800c9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	240003e4 	.word	0x240003e4

0800262c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TIM2_IRQHandler+0x10>)
 8002632:	f00a f9c5 	bl	800c9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000430 	.word	0x24000430

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f00b fba9 	bl	800dd9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2400047c 	.word	0x2400047c

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f00d fe8a 	bl	801039c <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	24080000 	.word	0x24080000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	240005c4 	.word	0x240005c4
 80026bc:	24000718 	.word	0x24000718

080026c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c4:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <SystemInit+0xe4>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <SystemInit+0xe4>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <SystemInit+0xe8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	2b06      	cmp	r3, #6
 80026de:	d807      	bhi.n	80026f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <SystemInit+0xe8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 030f 	bic.w	r3, r3, #15
 80026e8:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <SystemInit+0xe8>)
 80026ea:	f043 0307 	orr.w	r3, r3, #7
 80026ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <SystemInit+0xec>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <SystemInit+0xec>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <SystemInit+0xec>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <SystemInit+0xec>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4929      	ldr	r1, [pc, #164]	; (80027ac <SystemInit+0xec>)
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <SystemInit+0xf0>)
 800270a:	4013      	ands	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <SystemInit+0xe8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <SystemInit+0xe8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 030f 	bic.w	r3, r3, #15
 8002722:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <SystemInit+0xe8>)
 8002724:	f043 0307 	orr.w	r3, r3, #7
 8002728:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <SystemInit+0xec>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002730:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <SystemInit+0xec>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <SystemInit+0xec>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <SystemInit+0xec>)
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <SystemInit+0xf4>)
 8002740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <SystemInit+0xec>)
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <SystemInit+0xf8>)
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002748:	4b18      	ldr	r3, [pc, #96]	; (80027ac <SystemInit+0xec>)
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <SystemInit+0xfc>)
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <SystemInit+0xec>)
 8002750:	2200      	movs	r2, #0
 8002752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <SystemInit+0xec>)
 8002756:	4a19      	ldr	r2, [pc, #100]	; (80027bc <SystemInit+0xfc>)
 8002758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <SystemInit+0xec>)
 800275c:	2200      	movs	r2, #0
 800275e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <SystemInit+0xec>)
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <SystemInit+0xfc>)
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <SystemInit+0xec>)
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <SystemInit+0xec>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <SystemInit+0xec>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <SystemInit+0xec>)
 800277a:	2200      	movs	r2, #0
 800277c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <SystemInit+0x100>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <SystemInit+0x104>)
 8002784:	4013      	ands	r3, r2
 8002786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278a:	d202      	bcs.n	8002792 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <SystemInit+0x108>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <SystemInit+0x10c>)
 8002794:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002798:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00
 80027a8:	52002000 	.word	0x52002000
 80027ac:	58024400 	.word	0x58024400
 80027b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80027b4:	02020200 	.word	0x02020200
 80027b8:	01ff0000 	.word	0x01ff0000
 80027bc:	01010280 	.word	0x01010280
 80027c0:	5c001000 	.word	0x5c001000
 80027c4:	ffff0000 	.word	0xffff0000
 80027c8:	51008108 	.word	0x51008108
 80027cc:	52004000 	.word	0x52004000

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d4:	f7ff ff74 	bl	80026c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027da:	490d      	ldr	r1, [pc, #52]	; (8002810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e0:	e002      	b.n	80027e8 <LoopCopyDataInit>

080027e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e6:	3304      	adds	r3, #4

080027e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ec:	d3f9      	bcc.n	80027e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f0:	4c0a      	ldr	r4, [pc, #40]	; (800281c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f4:	e001      	b.n	80027fa <LoopFillZerobss>

080027f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f8:	3204      	adds	r2, #4

080027fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027fc:	d3fb      	bcc.n	80027f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fe:	f00d fdd3 	bl	80103a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7fe fc57 	bl	80010b4 <main>
  bx  lr
 8002806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002808:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800280c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002810:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8002814:	08010528 	.word	0x08010528
  ldr r2, =_sbss
 8002818:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 800281c:	24000714 	.word	0x24000714

08002820 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC3_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282a:	2003      	movs	r0, #3
 800282c:	f001 fdae 	bl	800438c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002830:	f006 fbb6 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_Init+0x68>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	4913      	ldr	r1, [pc, #76]	; (8002890 <HAL_Init+0x6c>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_Init+0x68>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_Init+0x6c>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_Init+0x70>)
 8002866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_Init+0x74>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800286e:	200f      	movs	r0, #15
 8002870:	f000 f814 	bl	800289c <HAL_InitTick>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e002      	b.n	8002884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800287e:	f7ff faa7 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	58024400 	.word	0x58024400
 8002890:	080104d8 	.word	0x080104d8
 8002894:	24000034 	.word	0x24000034
 8002898:	24000030 	.word	0x24000030

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_InitTick+0x60>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e021      	b.n	80028f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_InitTick+0x64>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_InitTick+0x60>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 fd93 	bl	80043f2 <HAL_SYSTICK_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00e      	b.n	80028f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d80a      	bhi.n	80028f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028dc:	2200      	movs	r2, #0
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	f001 fd5d 	bl	80043a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_InitTick+0x68>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2400003c 	.word	0x2400003c
 8002900:	24000030 	.word	0x24000030
 8002904:	24000038 	.word	0x24000038

08002908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x20>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x24>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_IncTick+0x24>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	2400003c 	.word	0x2400003c
 800292c:	240005c8 	.word	0x240005c8

08002930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_GetTick+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	240005c8 	.word	0x240005c8

08002948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002960:	d005      	beq.n	800296e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_Delay+0x44>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296e:	bf00      	nop
 8002970:	f7ff ffde 	bl	8002930 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d8f7      	bhi.n	8002970 <HAL_Delay+0x28>
  {
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2400003c 	.word	0x2400003c

08002990 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_SuspendTick+0x1c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_SuspendTick+0x1c>)
 800299a:	f023 0302 	bic.w	r3, r3, #2
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_GetREVID+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0c1b      	lsrs	r3, r3, #16
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	5c001000 	.word	0x5c001000

080029c8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	58000400 	.word	0x58000400

080029f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3360      	adds	r3, #96	; 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]
  }
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3330      	adds	r3, #48	; 0x30
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	4413      	add	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	211f      	movs	r1, #31
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	f003 011f 	and.w	r1, r3, #31
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f023 0203 	bic.w	r2, r3, #3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	0e5b      	lsrs	r3, r3, #25
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	0d1b      	lsrs	r3, r3, #20
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2107      	movs	r1, #7
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0d1b      	lsrs	r3, r3, #20
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0318 	and.w	r3, r3, #24
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c24:	40d9      	lsrs	r1, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	400b      	ands	r3, r1
 8002c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	000fffff 	.word	0x000fffff

08002c48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 031f 	and.w	r3, r3, #31
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6093      	str	r3, [r2, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	5fffffc0 	.word	0x5fffffc0

08002c88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	6fffffc0 	.word	0x6fffffc0

08002cd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cec:	d101      	bne.n	8002cf2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <LL_ADC_Enable+0x24>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	7fffffc0 	.word	0x7fffffc0

08002d28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <LL_ADC_Disable+0x24>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	f043 0202 	orr.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	7fffffc0 	.word	0x7fffffc0

08002d50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <LL_ADC_IsEnabled+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_ADC_IsEnabled+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d101      	bne.n	8002d8e <LL_ADC_IsDisableOngoing+0x18>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <LL_ADC_IsDisableOngoing+0x1a>
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <LL_ADC_REG_StartConversion+0x24>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	f043 0204 	orr.w	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	7fffffc0 	.word	0x7fffffc0

08002dc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d101      	bne.n	8002ddc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d101      	bne.n	8002e02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e18f      	b.n	800314a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fe ffe3 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff19 	bl	8002c88 <LL_ADC_IsDeepPowerDownEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff feff 	bl	8002c64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff34 	bl	8002cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff18 	bl	8002cb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e80:	4b87      	ldr	r3, [pc, #540]	; (80030a0 <HAL_ADC_Init+0x290>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_ADC_Init+0x294>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f9      	bne.n	8002e94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff17 	bl	8002cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff77 	bl	8002dc4 <LL_ADC_REG_IsConversionOngoing>
 8002ed6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 8129 	bne.w	8003138 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 8125 	bne.w	8003138 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff24 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d136      	bne.n	8002f7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_ADC_Init+0x298>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_Init+0x112>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_ADC_Init+0x29c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10e      	bne.n	8002f40 <HAL_ADC_Init+0x130>
 8002f22:	4861      	ldr	r0, [pc, #388]	; (80030a8 <HAL_ADC_Init+0x298>)
 8002f24:	f7ff ff14 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f28:	4604      	mov	r4, r0
 8002f2a:	4860      	ldr	r0, [pc, #384]	; (80030ac <HAL_ADC_Init+0x29c>)
 8002f2c:	f7ff ff10 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4323      	orrs	r3, r4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e008      	b.n	8002f52 <HAL_ADC_Init+0x142>
 8002f40:	485b      	ldr	r0, [pc, #364]	; (80030b0 <HAL_ADC_Init+0x2a0>)
 8002f42:	f7ff ff05 	bl	8002d50 <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a53      	ldr	r2, [pc, #332]	; (80030a8 <HAL_ADC_Init+0x298>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_ADC_Init+0x15a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_ADC_Init+0x29c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Init+0x15e>
 8002f6a:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_ADC_Init+0x2a4>)
 8002f6c:	e000      	b.n	8002f70 <HAL_ADC_Init+0x160>
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_ADC_Init+0x2a8>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f7ff fd3c 	bl	80029f4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f7c:	f7ff fd18 	bl	80029b0 <HAL_GetREVID>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d914      	bls.n	8002fb4 <HAL_ADC_Init+0x1a4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d110      	bne.n	8002fb4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7d5b      	ldrb	r3, [r3, #21]
 8002f96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f9c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fa2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7f1b      	ldrb	r3, [r3, #28]
 8002fa8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002faa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fac:	f043 030c 	orr.w	r3, r3, #12
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e00d      	b.n	8002fd0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7d5b      	ldrb	r3, [r3, #21]
 8002fb8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fbe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fc4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7f1b      	ldrb	r3, [r3, #28]
 8002fca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7f1b      	ldrb	r3, [r3, #28]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	045b      	lsls	r3, r3, #17
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_ADC_Init+0x2ac>)
 800300a:	4013      	ands	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	69b9      	ldr	r1, [r7, #24]
 8003012:	430b      	orrs	r3, r1
 8003014:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fed2 	bl	8002dc4 <LL_ADC_REG_IsConversionOngoing>
 8003020:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fedf 	bl	8002dea <LL_ADC_INJ_IsConversionOngoing>
 800302c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15f      	bne.n	80030f4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d15c      	bne.n	80030f4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7d1b      	ldrb	r3, [r3, #20]
 800303e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_ADC_Init+0x2b0>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	430b      	orrs	r3, r1
 800305a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003062:	2b01      	cmp	r3, #1
 8003064:	d130      	bne.n	80030c8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_ADC_Init+0x2b4>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800307a:	3a01      	subs	r2, #1
 800307c:	0411      	lsls	r1, r2, #16
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800308e:	430a      	orrs	r2, r1
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	611a      	str	r2, [r3, #16]
 800309c:	e01c      	b.n	80030d8 <HAL_ADC_Init+0x2c8>
 800309e:	bf00      	nop
 80030a0:	24000030 	.word	0x24000030
 80030a4:	053e2d63 	.word	0x053e2d63
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40022100 	.word	0x40022100
 80030b0:	58026000 	.word	0x58026000
 80030b4:	40022300 	.word	0x40022300
 80030b8:	58026300 	.word	0x58026300
 80030bc:	fff0c003 	.word	0xfff0c003
 80030c0:	ffffbffc 	.word	0xffffbffc
 80030c4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fdd6 	bl	8003ca0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10c      	bne.n	8003116 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f023 010f 	bic.w	r1, r3, #15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
 8003114:	e007      	b.n	8003126 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 020f 	bic.w	r2, r2, #15
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
 8003136:	e007      	b.n	8003148 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003148:	7ffb      	ldrb	r3, [r7, #31]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	bf00      	nop

08003154 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a55      	ldr	r2, [pc, #340]	; (80032bc <HAL_ADC_Start_DMA+0x168>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_ADC_Start_DMA+0x20>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a54      	ldr	r2, [pc, #336]	; (80032c0 <HAL_ADC_Start_DMA+0x16c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_ADC_Start_DMA+0x24>
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_ADC_Start_DMA+0x170>)
 8003176:	e000      	b.n	800317a <HAL_ADC_Start_DMA+0x26>
 8003178:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_ADC_Start_DMA+0x174>)
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fd64 	bl	8002c48 <LL_ADC_GetMultimode>
 8003180:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe1c 	bl	8002dc4 <LL_ADC_REG_IsConversionOngoing>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 808c 	bne.w	80032ac <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Start_DMA+0x4e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e087      	b.n	80032b2 <HAL_ADC_Start_DMA+0x15e>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d002      	beq.n	80031bc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d170      	bne.n	800329e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fbf1 	bl	80039a4 <ADC_Enable>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d163      	bne.n	8003294 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031d0:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_ADC_Start_DMA+0x178>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a37      	ldr	r2, [pc, #220]	; (80032c0 <HAL_ADC_Start_DMA+0x16c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d002      	beq.n	80031ec <HAL_ADC_Start_DMA+0x98>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	e000      	b.n	80031ee <HAL_ADC_Start_DMA+0x9a>
 80031ec:	4b33      	ldr	r3, [pc, #204]	; (80032bc <HAL_ADC_Start_DMA+0x168>)
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d002      	beq.n	80031fc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f023 0206 	bic.w	r2, r3, #6
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	659a      	str	r2, [r3, #88]	; 0x58
 8003220:	e002      	b.n	8003228 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_ADC_Start_DMA+0x17c>)
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	4a27      	ldr	r2, [pc, #156]	; (80032d4 <HAL_ADC_Start_DMA+0x180>)
 8003236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_ADC_Start_DMA+0x184>)
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	221c      	movs	r2, #28
 8003246:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0210 	orr.w	r2, r2, #16
 800325e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f7ff fc89 	bl	8002b82 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3340      	adds	r3, #64	; 0x40
 800327a:	4619      	mov	r1, r3
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f001 fde8 	bl	8004e54 <HAL_DMA_Start_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fd85 	bl	8002d9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003292:	e00d      	b.n	80032b0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800329c:	e008      	b.n	80032b0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032aa:	e001      	b.n	80032b0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
 80032ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40022100 	.word	0x40022100
 80032c4:	40022300 	.word	0x40022300
 80032c8:	58026300 	.word	0x58026300
 80032cc:	fffff0fe 	.word	0xfffff0fe
 80032d0:	08003b77 	.word	0x08003b77
 80032d4:	08003c4f 	.word	0x08003c4f
 80032d8:	08003c6b 	.word	0x08003c6b

080032dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b0a1      	sub	sp, #132	; 0x84
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a9d      	ldr	r2, [pc, #628]	; (8003594 <HAL_ADC_ConfigChannel+0x290>)
 800331e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x2a>
 800332a:	2302      	movs	r3, #2
 800332c:	e321      	b.n	8003972 <HAL_ADC_ConfigChannel+0x66e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fd42 	bl	8002dc4 <LL_ADC_REG_IsConversionOngoing>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 8306 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003350:	2b00      	cmp	r3, #0
 8003352:	d108      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x62>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0e9b      	lsrs	r3, r3, #26
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2201      	movs	r2, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	e016      	b.n	8003394 <HAL_ADC_ConfigChannel+0x90>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2201      	movs	r2, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	69d1      	ldr	r1, [r2, #28]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	430b      	orrs	r3, r1
 80033a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7ff fbbb 	bl	8002b2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fd03 	bl	8002dc4 <LL_ADC_REG_IsConversionOngoing>
 80033be:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fd10 	bl	8002dea <LL_ADC_INJ_IsConversionOngoing>
 80033ca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 80b3 	bne.w	800353a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 80af 	bne.w	800353a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f7ff fbdd 	bl	8002ba8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033ee:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_ADC_ConfigChannel+0x294>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033fa:	d10b      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x110>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	e01d      	b.n	8003450 <HAL_ADC_ConfigChannel+0x14c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_ADC_ConfigChannel+0x136>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	e00a      	b.n	8003450 <HAL_ADC_ConfigChannel+0x14c>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d027      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003468:	f7ff faf8 	bl	8002a5c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	7e5b      	ldrb	r3, [r3, #25]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x17e>
 800347c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003480:	e000      	b.n	8003484 <HAL_ADC_ConfigChannel+0x180>
 8003482:	2300      	movs	r3, #0
 8003484:	461a      	mov	r2, r3
 8003486:	f7ff fb22 	bl	8002ace <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6919      	ldr	r1, [r3, #16]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	7e1b      	ldrb	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x19c>
 800349a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800349e:	e000      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x19e>
 80034a0:	2300      	movs	r3, #0
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7ff fafa 	bl	8002a9c <LL_ADC_SetDataRightShift>
 80034a8:	e047      	b.n	800353a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	069b      	lsls	r3, r3, #26
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d107      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	069b      	lsls	r3, r3, #26
 80034de:	429a      	cmp	r2, r3
 80034e0:	d107      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	069b      	lsls	r3, r3, #26
 8003502:	429a      	cmp	r2, r3
 8003504:	d107      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003514:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	069b      	lsls	r3, r3, #26
 8003526:	429a      	cmp	r2, r3
 8003528:	d107      	bne.n	800353a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003538:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fc06 	bl	8002d50 <LL_ADC_IsEnabled>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 820d 	bne.w	8003966 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	f7ff fb51 	bl	8002c00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <HAL_ADC_ConfigChannel+0x290>)
 8003564:	4293      	cmp	r3, r2
 8003566:	f040 8133 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003576:	2b00      	cmp	r3, #0
 8003578:	d110      	bne.n	800359c <HAL_ADC_ConfigChannel+0x298>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	3301      	adds	r3, #1
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2b09      	cmp	r3, #9
 8003588:	bf94      	ite	ls
 800358a:	2301      	movls	r3, #1
 800358c:	2300      	movhi	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e01e      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x2cc>
 8003592:	bf00      	nop
 8003594:	47ff0000 	.word	0x47ff0000
 8003598:	5c001000 	.word	0x5c001000
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80035b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	bf94      	ite	ls
 80035ca:	2301      	movls	r3, #1
 80035cc:	2300      	movhi	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d079      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2ec>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	069b      	lsls	r3, r3, #26
 80035ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ee:	e015      	b.n	800361c <HAL_ADC_ConfigChannel+0x318>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003600:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003608:	2320      	movs	r3, #32
 800360a:	e003      	b.n	8003614 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	069b      	lsls	r3, r3, #26
 8003618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_ADC_ConfigChannel+0x338>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	e017      	b.n	800366c <HAL_ADC_ConfigChannel+0x368>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800364a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800364e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003654:	2320      	movs	r3, #32
 8003656:	e003      	b.n	8003660 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	ea42 0103 	orr.w	r1, r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x38e>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	051b      	lsls	r3, r3, #20
 8003690:	e018      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x3c0>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80036aa:	2320      	movs	r3, #32
 80036ac:	e003      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c4:	430b      	orrs	r3, r1
 80036c6:	e07e      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x3e0>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	3301      	adds	r3, #1
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e2:	e015      	b.n	8003710 <HAL_ADC_ConfigChannel+0x40c>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	069b      	lsls	r3, r3, #26
 800370c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x42c>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	3301      	adds	r3, #1
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	e017      	b.n	8003760 <HAL_ADC_ConfigChannel+0x45c>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	61bb      	str	r3, [r7, #24]
  return result;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e003      	b.n	8003754 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	ea42 0103 	orr.w	r1, r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_ADC_ConfigChannel+0x488>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	3301      	adds	r3, #1
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	3b1e      	subs	r3, #30
 8003784:	051b      	lsls	r3, r3, #20
 8003786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378a:	e01b      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x4c0>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	60fb      	str	r3, [r7, #12]
  return result;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f003 021f 	and.w	r2, r3, #31
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	3b1e      	subs	r3, #30
 80037be:	051b      	lsls	r3, r3, #20
 80037c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c4:	430b      	orrs	r3, r1
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7ff f9ec 	bl	8002ba8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f280 80c6 	bge.w	8003966 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a67      	ldr	r2, [pc, #412]	; (800397c <HAL_ADC_ConfigChannel+0x678>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x4ea>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a65      	ldr	r2, [pc, #404]	; (8003980 <HAL_ADC_ConfigChannel+0x67c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x4ee>
 80037ee:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_ADC_ConfigChannel+0x680>)
 80037f0:	e000      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x4f0>
 80037f2:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_ADC_ConfigChannel+0x684>)
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f923 	bl	8002a40 <LL_ADC_GetCommonPathInternalCh>
 80037fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5e      	ldr	r2, [pc, #376]	; (800397c <HAL_ADC_ConfigChannel+0x678>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x50c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5d      	ldr	r2, [pc, #372]	; (8003980 <HAL_ADC_ConfigChannel+0x67c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10e      	bne.n	800382e <HAL_ADC_ConfigChannel+0x52a>
 8003810:	485a      	ldr	r0, [pc, #360]	; (800397c <HAL_ADC_ConfigChannel+0x678>)
 8003812:	f7ff fa9d 	bl	8002d50 <LL_ADC_IsEnabled>
 8003816:	4604      	mov	r4, r0
 8003818:	4859      	ldr	r0, [pc, #356]	; (8003980 <HAL_ADC_ConfigChannel+0x67c>)
 800381a:	f7ff fa99 	bl	8002d50 <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	4323      	orrs	r3, r4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e008      	b.n	8003840 <HAL_ADC_ConfigChannel+0x53c>
 800382e:	4857      	ldr	r0, [pc, #348]	; (800398c <HAL_ADC_ConfigChannel+0x688>)
 8003830:	f7ff fa8e 	bl	8002d50 <LL_ADC_IsEnabled>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d07d      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a51      	ldr	r2, [pc, #324]	; (8003990 <HAL_ADC_ConfigChannel+0x68c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d130      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x5ac>
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d12b      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a4b      	ldr	r2, [pc, #300]	; (800398c <HAL_ADC_ConfigChannel+0x688>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f040 8081 	bne.w	8003966 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a44      	ldr	r2, [pc, #272]	; (800397c <HAL_ADC_ConfigChannel+0x678>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x574>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a43      	ldr	r2, [pc, #268]	; (8003980 <HAL_ADC_ConfigChannel+0x67c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x578>
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_ADC_ConfigChannel+0x680>)
 800387a:	e000      	b.n	800387e <HAL_ADC_ConfigChannel+0x57a>
 800387c:	4a42      	ldr	r2, [pc, #264]	; (8003988 <HAL_ADC_ConfigChannel+0x684>)
 800387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7ff f8c7 	bl	8002a1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800388c:	4b41      	ldr	r3, [pc, #260]	; (8003994 <HAL_ADC_ConfigChannel+0x690>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	4a41      	ldr	r2, [pc, #260]	; (8003998 <HAL_ADC_ConfigChannel+0x694>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038a0:	e002      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f9      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ae:	e05a      	b.n	8003966 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a39      	ldr	r2, [pc, #228]	; (800399c <HAL_ADC_ConfigChannel+0x698>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d11e      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x5f4>
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d119      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a30      	ldr	r2, [pc, #192]	; (800398c <HAL_ADC_ConfigChannel+0x688>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d14b      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_ADC_ConfigChannel+0x678>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x5de>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <HAL_ADC_ConfigChannel+0x67c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x5e2>
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_ADC_ConfigChannel+0x680>)
 80038e4:	e000      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x5e4>
 80038e6:	4a28      	ldr	r2, [pc, #160]	; (8003988 <HAL_ADC_ConfigChannel+0x684>)
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f7ff f892 	bl	8002a1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f6:	e036      	b.n	8003966 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <HAL_ADC_ConfigChannel+0x69c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d131      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x662>
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d12c      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_ADC_ConfigChannel+0x688>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d127      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_ADC_ConfigChannel+0x678>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_ADC_ConfigChannel+0x626>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a16      	ldr	r2, [pc, #88]	; (8003980 <HAL_ADC_ConfigChannel+0x67c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x62a>
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_ADC_ConfigChannel+0x680>)
 800392c:	e000      	b.n	8003930 <HAL_ADC_ConfigChannel+0x62c>
 800392e:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_ADC_ConfigChannel+0x684>)
 8003930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7ff f86e 	bl	8002a1a <LL_ADC_SetCommonPathInternalCh>
 800393e:	e012      	b.n	8003966 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003952:	e008      	b.n	8003966 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800396e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003972:	4618      	mov	r0, r3
 8003974:	3784      	adds	r7, #132	; 0x84
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	40022000 	.word	0x40022000
 8003980:	40022100 	.word	0x40022100
 8003984:	40022300 	.word	0x40022300
 8003988:	58026300 	.word	0x58026300
 800398c:	58026000 	.word	0x58026000
 8003990:	cb840000 	.word	0xcb840000
 8003994:	24000030 	.word	0x24000030
 8003998:	053e2d63 	.word	0x053e2d63
 800399c:	c7520000 	.word	0xc7520000
 80039a0:	cfb80000 	.word	0xcfb80000

080039a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff f9cd 	bl	8002d50 <LL_ADC_IsEnabled>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d16e      	bne.n	8003a9a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <ADC_Enable+0x100>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e05a      	b.n	8003a9c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f988 	bl	8002d00 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039f0:	f7fe ff9e 	bl	8002930 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <ADC_Enable+0x104>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <ADC_Enable+0x66>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a29      	ldr	r2, [pc, #164]	; (8003aac <ADC_Enable+0x108>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <ADC_Enable+0x6a>
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <ADC_Enable+0x10c>)
 8003a0c:	e000      	b.n	8003a10 <ADC_Enable+0x6c>
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <ADC_Enable+0x110>)
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f919 	bl	8002c48 <LL_ADC_GetMultimode>
 8003a16:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a23      	ldr	r2, [pc, #140]	; (8003aac <ADC_Enable+0x108>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d002      	beq.n	8003a28 <ADC_Enable+0x84>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e000      	b.n	8003a2a <ADC_Enable+0x86>
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <ADC_Enable+0x104>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d130      	bne.n	8003a9a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a38:	e028      	b.n	8003a8c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f986 	bl	8002d50 <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f956 	bl	8002d00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a54:	f7fe ff6c 	bl	8002930 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d914      	bls.n	8003a8c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00d      	beq.n	8003a8c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	f043 0210 	orr.w	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e007      	b.n	8003a9c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d1cf      	bne.n	8003a3a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	8000003f 	.word	0x8000003f
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40022100 	.word	0x40022100
 8003ab0:	40022300 	.word	0x40022300
 8003ab4:	58026300 	.word	0x58026300

08003ab8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f956 	bl	8002d76 <LL_ADC_IsDisableOngoing>
 8003aca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff f93d 	bl	8002d50 <LL_ADC_IsEnabled>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d047      	beq.n	8003b6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d144      	bne.n	8003b6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030d 	and.w	r3, r3, #13
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10c      	bne.n	8003b0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f917 	bl	8002d28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2203      	movs	r2, #3
 8003b00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b02:	f7fe ff15 	bl	8002930 <HAL_GetTick>
 8003b06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b08:	e029      	b.n	8003b5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0210 	orr.w	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e023      	b.n	8003b6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b26:	f7fe ff03 	bl	8002930 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d914      	bls.n	8003b5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e007      	b.n	8003b6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1dc      	bne.n	8003b26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d14b      	bne.n	8003c28 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d021      	beq.n	8003bee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe ffa8 	bl	8002b04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d032      	beq.n	8003c20 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d12b      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11f      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
 8003bec:	e018      	b.n	8003c20 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7fe f863 	bl	8001cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c26:	e00e      	b.n	8003c46 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff fb5b 	bl	80032f0 <HAL_ADC_ErrorCallback>
}
 8003c3a:	e004      	b.n	8003c46 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fb3d 	bl	80032dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fb2d 	bl	80032f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a79      	ldr	r2, [pc, #484]	; (8003e94 <ADC_ConfigureBoostMode+0x1f4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <ADC_ConfigureBoostMode+0x1c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a78      	ldr	r2, [pc, #480]	; (8003e98 <ADC_ConfigureBoostMode+0x1f8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d109      	bne.n	8003cd0 <ADC_ConfigureBoostMode+0x30>
 8003cbc:	4b77      	ldr	r3, [pc, #476]	; (8003e9c <ADC_ConfigureBoostMode+0x1fc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e008      	b.n	8003ce2 <ADC_ConfigureBoostMode+0x42>
 8003cd0:	4b73      	ldr	r3, [pc, #460]	; (8003ea0 <ADC_ConfigureBoostMode+0x200>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ce6:	f005 fad5 	bl	8009294 <HAL_RCC_GetHCLKFreq>
 8003cea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cf4:	d010      	beq.n	8003d18 <ADC_ConfigureBoostMode+0x78>
 8003cf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cfa:	d871      	bhi.n	8003de0 <ADC_ConfigureBoostMode+0x140>
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d00:	d002      	beq.n	8003d08 <ADC_ConfigureBoostMode+0x68>
 8003d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d06:	d16b      	bne.n	8003de0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	60fb      	str	r3, [r7, #12]
        break;
 8003d16:	e066      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	60fb      	str	r3, [r7, #12]
        break;
 8003d1e:	e062      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d24:	f006 fa58 	bl	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d32:	d051      	beq.n	8003dd8 <ADC_ConfigureBoostMode+0x138>
 8003d34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d38:	d854      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d3e:	d047      	beq.n	8003dd0 <ADC_ConfigureBoostMode+0x130>
 8003d40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d44:	d84e      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d4a:	d03d      	beq.n	8003dc8 <ADC_ConfigureBoostMode+0x128>
 8003d4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d50:	d848      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d56:	d033      	beq.n	8003dc0 <ADC_ConfigureBoostMode+0x120>
 8003d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5c:	d842      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d62:	d029      	beq.n	8003db8 <ADC_ConfigureBoostMode+0x118>
 8003d64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d68:	d83c      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d6e:	d01a      	beq.n	8003da6 <ADC_ConfigureBoostMode+0x106>
 8003d70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d74:	d836      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d7a:	d014      	beq.n	8003da6 <ADC_ConfigureBoostMode+0x106>
 8003d7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d80:	d830      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d86:	d00e      	beq.n	8003da6 <ADC_ConfigureBoostMode+0x106>
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d82a      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d92:	d008      	beq.n	8003da6 <ADC_ConfigureBoostMode+0x106>
 8003d94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d98:	d824      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x144>
 8003d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9e:	d002      	beq.n	8003da6 <ADC_ConfigureBoostMode+0x106>
 8003da0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da4:	d11e      	bne.n	8003de4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	0c9b      	lsrs	r3, r3, #18
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	60fb      	str	r3, [r7, #12]
        break;
 8003db6:	e016      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]
        break;
 8003dbe:	e012      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	60fb      	str	r3, [r7, #12]
        break;
 8003dc6:	e00e      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	099b      	lsrs	r3, r3, #6
 8003dcc:	60fb      	str	r3, [r7, #12]
        break;
 8003dce:	e00a      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	09db      	lsrs	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
        break;
 8003dd6:	e006      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	60fb      	str	r3, [r7, #12]
        break;
 8003dde:	e002      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
        break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003de4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003de6:	f7fe fde3 	bl	80029b0 <HAL_GetREVID>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d815      	bhi.n	8003e20 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <ADC_ConfigureBoostMode+0x204>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d908      	bls.n	8003e0e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e0c:	e03e      	b.n	8003e8c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1c:	609a      	str	r2, [r3, #8]
}
 8003e1e:	e035      	b.n	8003e8c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <ADC_ConfigureBoostMode+0x208>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d808      	bhi.n	8003e40 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	e025      	b.n	8003e8c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <ADC_ConfigureBoostMode+0x20c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d80a      	bhi.n	8003e5e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5a:	609a      	str	r2, [r3, #8]
}
 8003e5c:	e016      	b.n	8003e8c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <ADC_ConfigureBoostMode+0x210>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d80a      	bhi.n	8003e7c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	609a      	str	r2, [r3, #8]
}
 8003e7a:	e007      	b.n	8003e8c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40022000 	.word	0x40022000
 8003e98:	40022100 	.word	0x40022100
 8003e9c:	40022300 	.word	0x40022300
 8003ea0:	58026300 	.word	0x58026300
 8003ea4:	01312d00 	.word	0x01312d00
 8003ea8:	005f5e10 	.word	0x005f5e10
 8003eac:	00bebc20 	.word	0x00bebc20
 8003eb0:	017d7840 	.word	0x017d7840

08003eb4 <LL_ADC_IsEnabled>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <LL_ADC_IsEnabled+0x18>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <LL_ADC_IsEnabled+0x1a>
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <LL_ADC_StartCalibration>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <LL_ADC_StartCalibration+0x38>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003efc:	430a      	orrs	r2, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	3ffeffc0 	.word	0x3ffeffc0

08003f18 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2c:	d101      	bne.n	8003f32 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d101      	bne.n	8003f58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e04c      	b.n	8004020 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fd92 	bl	8003ab8 <ADC_Disable>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d135      	bne.n	800400a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa2:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	f043 0202 	orr.w	r2, r3, #2
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff90 	bl	8003edc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fbc:	e014      	b.n	8003fe8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4a19      	ldr	r2, [pc, #100]	; (800402c <HAL_ADCEx_Calibration_Start+0xc4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d30d      	bcc.n	8003fe8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f023 0312 	bic.w	r3, r3, #18
 8003fd4:	f043 0210 	orr.w	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e01b      	b.n	8004020 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff93 	bl	8003f18 <LL_ADC_IsCalibrationOnGoing>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e2      	bne.n	8003fbe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f023 0303 	bic.w	r3, r3, #3
 8004000:	f043 0201 	orr.w	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
 8004008:	e005      	b.n	8004016 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f043 0210 	orr.w	r2, r3, #16
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	ffffeefd 	.word	0xffffeefd
 800402c:	25c3f800 	.word	0x25c3f800

08004030 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b09f      	sub	sp, #124	; 0x7c
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800404a:	2302      	movs	r3, #2
 800404c:	e0be      	b.n	80041cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004056:	2300      	movs	r3, #0
 8004058:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800405a:	2300      	movs	r3, #0
 800405c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5c      	ldr	r2, [pc, #368]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d102      	bne.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004068:	4b5b      	ldr	r3, [pc, #364]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	e001      	b.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e09d      	b.n	80041cc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff54 	bl	8003f40 <LL_ADC_REG_IsConversionOngoing>
 8004098:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff4e 	bl	8003f40 <LL_ADC_REG_IsConversionOngoing>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d17f      	bne.n	80041aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d17c      	bne.n	80041aa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a46      	ldr	r2, [pc, #280]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040c6:	e000      	b.n	80040ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040c8:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d039      	beq.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10e      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040fa:	4836      	ldr	r0, [pc, #216]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040fc:	f7ff feda 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004100:	4604      	mov	r4, r0
 8004102:	4835      	ldr	r0, [pc, #212]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004104:	f7ff fed6 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004108:	4603      	mov	r3, r0
 800410a:	4323      	orrs	r3, r4
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004118:	4832      	ldr	r0, [pc, #200]	; (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800411a:	f7ff fecb 	bl	8003eb4 <LL_ADC_IsEnabled>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d047      	beq.n	80041be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800412e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004134:	4013      	ands	r3, r2
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	6811      	ldr	r1, [r2, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	6892      	ldr	r2, [r2, #8]
 800413e:	430a      	orrs	r2, r1
 8004140:	431a      	orrs	r2, r3
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004146:	e03a      	b.n	80041be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10e      	bne.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004168:	481a      	ldr	r0, [pc, #104]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800416a:	f7ff fea3 	bl	8003eb4 <LL_ADC_IsEnabled>
 800416e:	4604      	mov	r4, r0
 8004170:	4819      	ldr	r0, [pc, #100]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004172:	f7ff fe9f 	bl	8003eb4 <LL_ADC_IsEnabled>
 8004176:	4603      	mov	r3, r0
 8004178:	4323      	orrs	r3, r4
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e008      	b.n	8004198 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004186:	4817      	ldr	r0, [pc, #92]	; (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004188:	f7ff fe94 	bl	8003eb4 <LL_ADC_IsEnabled>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041a8:	e009      	b.n	80041be <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041bc:	e000      	b.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	377c      	adds	r7, #124	; 0x7c
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	40022000 	.word	0x40022000
 80041d8:	40022100 	.word	0x40022100
 80041dc:	40022300 	.word	0x40022300
 80041e0:	58026300 	.word	0x58026300
 80041e4:	58026000 	.word	0x58026000
 80041e8:	fffff0e0 	.word	0xfffff0e0

080041ec <__NVIC_SetPriorityGrouping>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <__NVIC_SetPriorityGrouping+0x40>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004216:	4313      	orrs	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421a:	4a04      	ldr	r2, [pc, #16]	; (800422c <__NVIC_SetPriorityGrouping+0x40>)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60d3      	str	r3, [r2, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00
 8004230:	05fa0000 	.word	0x05fa0000

08004234 <__NVIC_GetPriorityGrouping>:
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004358:	d301      	bcc.n	800435e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435a:	2301      	movs	r3, #1
 800435c:	e00f      	b.n	800437e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <SysTick_Config+0x40>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004366:	210f      	movs	r1, #15
 8004368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800436c:	f7ff ff8e 	bl	800428c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <SysTick_Config+0x40>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <SysTick_Config+0x40>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000e010 	.word	0xe000e010

0800438c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff29 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043b0:	f7ff ff40 	bl	8004234 <__NVIC_GetPriorityGrouping>
 80043b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	f7ff ff90 	bl	80042e0 <NVIC_EncodePriority>
 80043c0:	4602      	mov	r2, r0
 80043c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ff5f 	bl	800428c <__NVIC_SetPriority>
}
 80043ce:	bf00      	nop
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	4603      	mov	r3, r0
 80043de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff33 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ffa4 	bl	8004348 <SysTick_Config>
 8004400:	4603      	mov	r3, r0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e014      	b.n	8004446 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	791b      	ldrb	r3, [r3, #4]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d105      	bne.n	8004432 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fd fe03 	bl	8002038 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	795b      	ldrb	r3, [r3, #5]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_DAC_Start+0x16>
 8004460:	2302      	movs	r3, #2
 8004462:	e040      	b.n	80044e6 <HAL_DAC_Start+0x98>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2201      	movs	r2, #1
 800447e:	409a      	lsls	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11d      	bne.n	80044d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e014      	b.n	80044d8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2102      	movs	r1, #2
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d107      	bne.n	80044d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0202 	orr.w	r2, r2, #2
 80044d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	3308      	adds	r3, #8
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e004      	b.n	8004526 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	3314      	adds	r3, #20
 8004524:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	461a      	mov	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	795b      	ldrb	r3, [r3, #5]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_DAC_ConfigChannel+0x18>
 8004550:	2302      	movs	r3, #2
 8004552:	e11d      	b.n	8004790 <HAL_DAC_ConfigChannel+0x254>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d174      	bne.n	8004652 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004568:	f7fe f9e2 	bl	8002930 <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d134      	bne.n	80045de <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004574:	e011      	b.n	800459a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004576:	f7fe f9db 	bl	8002930 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d90a      	bls.n	800459a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f043 0208 	orr.w	r2, r3, #8
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0fa      	b.n	8004790 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a0:	4b7d      	ldr	r3, [pc, #500]	; (8004798 <HAL_DAC_ConfigChannel+0x25c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e6      	bne.n	8004576 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80045a8:	2001      	movs	r0, #1
 80045aa:	f7fe f9cd 	bl	8002948 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	6992      	ldr	r2, [r2, #24]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
 80045b8:	e01e      	b.n	80045f8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045ba:	f7fe f9b9 	bl	8002930 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d90a      	bls.n	80045de <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f043 0208 	orr.w	r2, r3, #8
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2203      	movs	r2, #3
 80045d8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0d8      	b.n	8004790 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dbe8      	blt.n	80045ba <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80045e8:	2001      	movs	r0, #1
 80045ea:	f7fe f9ad 	bl	8002948 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	6992      	ldr	r2, [r2, #24]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	ea02 0103 	and.w	r1, r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	409a      	lsls	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	21ff      	movs	r1, #255	; 0xff
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	ea02 0103 	and.w	r1, r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d11d      	bne.n	8004696 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	221f      	movs	r2, #31
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4013      	ands	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2207      	movs	r2, #7
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4013      	ands	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e00f      	b.n	80046e0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d102      	bne.n	80046ce <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80046c8:	2301      	movs	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e008      	b.n	80046e0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e001      	b.n	80046e0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	400a      	ands	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	f640 72fe 	movw	r2, #4094	; 0xffe
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4013      	ands	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	22c0      	movs	r2, #192	; 0xc0
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43da      	mvns	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	400a      	ands	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20008000 	.word	0x20008000

0800479c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7fe f8c4 	bl	8002930 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e316      	b.n	8004de2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a66      	ldr	r2, [pc, #408]	; (8004954 <HAL_DMA_Init+0x1b8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04a      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_DMA_Init+0x1bc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d045      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a63      	ldr	r2, [pc, #396]	; (800495c <HAL_DMA_Init+0x1c0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d040      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a62      	ldr	r2, [pc, #392]	; (8004960 <HAL_DMA_Init+0x1c4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d03b      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a60      	ldr	r2, [pc, #384]	; (8004964 <HAL_DMA_Init+0x1c8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d036      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_DMA_Init+0x1cc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d031      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5d      	ldr	r2, [pc, #372]	; (800496c <HAL_DMA_Init+0x1d0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02c      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5c      	ldr	r2, [pc, #368]	; (8004970 <HAL_DMA_Init+0x1d4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d027      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5a      	ldr	r2, [pc, #360]	; (8004974 <HAL_DMA_Init+0x1d8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a59      	ldr	r2, [pc, #356]	; (8004978 <HAL_DMA_Init+0x1dc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01d      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_DMA_Init+0x1e0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a56      	ldr	r2, [pc, #344]	; (8004980 <HAL_DMA_Init+0x1e4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_DMA_Init+0x1e8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a53      	ldr	r2, [pc, #332]	; (8004988 <HAL_DMA_Init+0x1ec>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a51      	ldr	r2, [pc, #324]	; (800498c <HAL_DMA_Init+0x1f0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_DMA_Init+0xb8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a50      	ldr	r2, [pc, #320]	; (8004990 <HAL_DMA_Init+0x1f4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_DMA_Init+0xbc>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_DMA_Init+0xbe>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 813b 	beq.w	8004ad6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a37      	ldr	r2, [pc, #220]	; (8004954 <HAL_DMA_Init+0x1b8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d04a      	beq.n	8004910 <HAL_DMA_Init+0x174>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a36      	ldr	r2, [pc, #216]	; (8004958 <HAL_DMA_Init+0x1bc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d045      	beq.n	8004910 <HAL_DMA_Init+0x174>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a34      	ldr	r2, [pc, #208]	; (800495c <HAL_DMA_Init+0x1c0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d040      	beq.n	8004910 <HAL_DMA_Init+0x174>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a33      	ldr	r2, [pc, #204]	; (8004960 <HAL_DMA_Init+0x1c4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d03b      	beq.n	8004910 <HAL_DMA_Init+0x174>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a31      	ldr	r2, [pc, #196]	; (8004964 <HAL_DMA_Init+0x1c8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d036      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a30      	ldr	r2, [pc, #192]	; (8004968 <HAL_DMA_Init+0x1cc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d031      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2e      	ldr	r2, [pc, #184]	; (800496c <HAL_DMA_Init+0x1d0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d02c      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <HAL_DMA_Init+0x1d4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d027      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2b      	ldr	r2, [pc, #172]	; (8004974 <HAL_DMA_Init+0x1d8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a2a      	ldr	r2, [pc, #168]	; (8004978 <HAL_DMA_Init+0x1dc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d01d      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a28      	ldr	r2, [pc, #160]	; (800497c <HAL_DMA_Init+0x1e0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a27      	ldr	r2, [pc, #156]	; (8004980 <HAL_DMA_Init+0x1e4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a25      	ldr	r2, [pc, #148]	; (8004984 <HAL_DMA_Init+0x1e8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a24      	ldr	r2, [pc, #144]	; (8004988 <HAL_DMA_Init+0x1ec>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_DMA_Init+0x174>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	; (800498c <HAL_DMA_Init+0x1f0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_DMA_Init+0x174>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a21      	ldr	r2, [pc, #132]	; (8004990 <HAL_DMA_Init+0x1f4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <HAL_DMA_Init+0x186>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e007      	b.n	8004932 <HAL_DMA_Init+0x196>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004932:	e02f      	b.n	8004994 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004934:	f7fd fffc 	bl	8002930 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b05      	cmp	r3, #5
 8004940:	d928      	bls.n	8004994 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2203      	movs	r2, #3
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e246      	b.n	8004de2 <HAL_DMA_Init+0x646>
 8004954:	40020010 	.word	0x40020010
 8004958:	40020028 	.word	0x40020028
 800495c:	40020040 	.word	0x40020040
 8004960:	40020058 	.word	0x40020058
 8004964:	40020070 	.word	0x40020070
 8004968:	40020088 	.word	0x40020088
 800496c:	400200a0 	.word	0x400200a0
 8004970:	400200b8 	.word	0x400200b8
 8004974:	40020410 	.word	0x40020410
 8004978:	40020428 	.word	0x40020428
 800497c:	40020440 	.word	0x40020440
 8004980:	40020458 	.word	0x40020458
 8004984:	40020470 	.word	0x40020470
 8004988:	40020488 	.word	0x40020488
 800498c:	400204a0 	.word	0x400204a0
 8004990:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1c8      	bne.n	8004934 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4b83      	ldr	r3, [pc, #524]	; (8004bbc <HAL_DMA_Init+0x420>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d107      	bne.n	80049f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	4313      	orrs	r3, r2
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049f8:	4b71      	ldr	r3, [pc, #452]	; (8004bc0 <HAL_DMA_Init+0x424>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b71      	ldr	r3, [pc, #452]	; (8004bc4 <HAL_DMA_Init+0x428>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a04:	d328      	bcc.n	8004a58 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b28      	cmp	r3, #40	; 0x28
 8004a0c:	d903      	bls.n	8004a16 <HAL_DMA_Init+0x27a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b2e      	cmp	r3, #46	; 0x2e
 8004a14:	d917      	bls.n	8004a46 <HAL_DMA_Init+0x2aa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a1c:	d903      	bls.n	8004a26 <HAL_DMA_Init+0x28a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b42      	cmp	r3, #66	; 0x42
 8004a24:	d90f      	bls.n	8004a46 <HAL_DMA_Init+0x2aa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b46      	cmp	r3, #70	; 0x46
 8004a2c:	d903      	bls.n	8004a36 <HAL_DMA_Init+0x29a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b48      	cmp	r3, #72	; 0x48
 8004a34:	d907      	bls.n	8004a46 <HAL_DMA_Init+0x2aa>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b4e      	cmp	r3, #78	; 0x4e
 8004a3c:	d905      	bls.n	8004a4a <HAL_DMA_Init+0x2ae>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b52      	cmp	r3, #82	; 0x52
 8004a44:	d801      	bhi.n	8004a4a <HAL_DMA_Init+0x2ae>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_DMA_Init+0x2b0>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a56:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d117      	bne.n	8004ab2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f002 fb33 	bl	8007100 <DMA_CheckFifoParam>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e197      	b.n	8004de2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f002 fa6e 	bl	8006f9c <DMA_CalcBaseAndBitshift>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	223f      	movs	r2, #63	; 0x3f
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	e0cd      	b.n	8004c72 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a3b      	ldr	r2, [pc, #236]	; (8004bc8 <HAL_DMA_Init+0x42c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d022      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <HAL_DMA_Init+0x430>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01d      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <HAL_DMA_Init+0x434>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d018      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_DMA_Init+0x438>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a35      	ldr	r2, [pc, #212]	; (8004bd8 <HAL_DMA_Init+0x43c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_DMA_Init+0x440>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <HAL_DMA_Init+0x444>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_DMA_Init+0x38a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <HAL_DMA_Init+0x448>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_DMA_Init+0x38e>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_DMA_Init+0x390>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8097 	beq.w	8004c60 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <HAL_DMA_Init+0x42c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d021      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_DMA_Init+0x430>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01c      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <HAL_DMA_Init+0x434>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d017      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <HAL_DMA_Init+0x438>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d012      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <HAL_DMA_Init+0x43c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00d      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_DMA_Init+0x440>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d008      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <HAL_DMA_Init+0x444>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <HAL_DMA_Init+0x3e4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_DMA_Init+0x448>)
 8004b7e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_DMA_Init+0x44c>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d021      	beq.n	8004bec <HAL_DMA_Init+0x450>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d102      	bne.n	8004bb6 <HAL_DMA_Init+0x41a>
 8004bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bb4:	e01b      	b.n	8004bee <HAL_DMA_Init+0x452>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e019      	b.n	8004bee <HAL_DMA_Init+0x452>
 8004bba:	bf00      	nop
 8004bbc:	fe10803f 	.word	0xfe10803f
 8004bc0:	5c001000 	.word	0x5c001000
 8004bc4:	ffff0000 	.word	0xffff0000
 8004bc8:	58025408 	.word	0x58025408
 8004bcc:	5802541c 	.word	0x5802541c
 8004bd0:	58025430 	.word	0x58025430
 8004bd4:	58025444 	.word	0x58025444
 8004bd8:	58025458 	.word	0x58025458
 8004bdc:	5802546c 	.word	0x5802546c
 8004be0:	58025480 	.word	0x58025480
 8004be4:	58025494 	.word	0x58025494
 8004be8:	fffe000f 	.word	0xfffe000f
 8004bec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68d2      	ldr	r2, [r2, #12]
 8004bf2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b6e      	ldr	r3, [pc, #440]	; (8004dec <HAL_DMA_Init+0x650>)
 8004c34:	4413      	add	r3, r2
 8004c36:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <HAL_DMA_Init+0x654>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f002 f9a9 	bl	8006f9c <DMA_CalcBaseAndBitshift>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	2201      	movs	r2, #1
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	e008      	b.n	8004c72 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0b7      	b.n	8004de2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a5f      	ldr	r2, [pc, #380]	; (8004df4 <HAL_DMA_Init+0x658>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d072      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a5d      	ldr	r2, [pc, #372]	; (8004df8 <HAL_DMA_Init+0x65c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d06d      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a5c      	ldr	r2, [pc, #368]	; (8004dfc <HAL_DMA_Init+0x660>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d068      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5a      	ldr	r2, [pc, #360]	; (8004e00 <HAL_DMA_Init+0x664>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d063      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a59      	ldr	r2, [pc, #356]	; (8004e04 <HAL_DMA_Init+0x668>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d05e      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a57      	ldr	r2, [pc, #348]	; (8004e08 <HAL_DMA_Init+0x66c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d059      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a56      	ldr	r2, [pc, #344]	; (8004e0c <HAL_DMA_Init+0x670>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d054      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a54      	ldr	r2, [pc, #336]	; (8004e10 <HAL_DMA_Init+0x674>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04f      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a53      	ldr	r2, [pc, #332]	; (8004e14 <HAL_DMA_Init+0x678>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04a      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a51      	ldr	r2, [pc, #324]	; (8004e18 <HAL_DMA_Init+0x67c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d045      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a50      	ldr	r2, [pc, #320]	; (8004e1c <HAL_DMA_Init+0x680>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d040      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a4e      	ldr	r2, [pc, #312]	; (8004e20 <HAL_DMA_Init+0x684>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d03b      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a4d      	ldr	r2, [pc, #308]	; (8004e24 <HAL_DMA_Init+0x688>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d036      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4b      	ldr	r2, [pc, #300]	; (8004e28 <HAL_DMA_Init+0x68c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d031      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a4a      	ldr	r2, [pc, #296]	; (8004e2c <HAL_DMA_Init+0x690>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d02c      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a48      	ldr	r2, [pc, #288]	; (8004e30 <HAL_DMA_Init+0x694>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d027      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a47      	ldr	r2, [pc, #284]	; (8004e34 <HAL_DMA_Init+0x698>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a45      	ldr	r2, [pc, #276]	; (8004e38 <HAL_DMA_Init+0x69c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01d      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a44      	ldr	r2, [pc, #272]	; (8004e3c <HAL_DMA_Init+0x6a0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a42      	ldr	r2, [pc, #264]	; (8004e40 <HAL_DMA_Init+0x6a4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	; (8004e44 <HAL_DMA_Init+0x6a8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <HAL_DMA_Init+0x6ac>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3e      	ldr	r2, [pc, #248]	; (8004e4c <HAL_DMA_Init+0x6b0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_DMA_Init+0x5c6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a3c      	ldr	r2, [pc, #240]	; (8004e50 <HAL_DMA_Init+0x6b4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_DMA_Init+0x5ca>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_DMA_Init+0x5cc>
 8004d66:	2300      	movs	r3, #0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d032      	beq.n	8004dd2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f002 fa43 	bl	80071f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d102      	bne.n	8004d80 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_DMA_Init+0x624>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d80c      	bhi.n	8004dc0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f002 fac0 	bl	800732c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e008      	b.n	8004dd2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	a7fdabf8 	.word	0xa7fdabf8
 8004df0:	cccccccd 	.word	0xcccccccd
 8004df4:	40020010 	.word	0x40020010
 8004df8:	40020028 	.word	0x40020028
 8004dfc:	40020040 	.word	0x40020040
 8004e00:	40020058 	.word	0x40020058
 8004e04:	40020070 	.word	0x40020070
 8004e08:	40020088 	.word	0x40020088
 8004e0c:	400200a0 	.word	0x400200a0
 8004e10:	400200b8 	.word	0x400200b8
 8004e14:	40020410 	.word	0x40020410
 8004e18:	40020428 	.word	0x40020428
 8004e1c:	40020440 	.word	0x40020440
 8004e20:	40020458 	.word	0x40020458
 8004e24:	40020470 	.word	0x40020470
 8004e28:	40020488 	.word	0x40020488
 8004e2c:	400204a0 	.word	0x400204a0
 8004e30:	400204b8 	.word	0x400204b8
 8004e34:	58025408 	.word	0x58025408
 8004e38:	5802541c 	.word	0x5802541c
 8004e3c:	58025430 	.word	0x58025430
 8004e40:	58025444 	.word	0x58025444
 8004e44:	58025458 	.word	0x58025458
 8004e48:	5802546c 	.word	0x5802546c
 8004e4c:	58025480 	.word	0x58025480
 8004e50:	58025494 	.word	0x58025494

08004e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e226      	b.n	80052be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_DMA_Start_IT+0x2a>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e21f      	b.n	80052be <HAL_DMA_Start_IT+0x46a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	f040 820a 	bne.w	80052a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a68      	ldr	r2, [pc, #416]	; (8005048 <HAL_DMA_Start_IT+0x1f4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d04a      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a66      	ldr	r2, [pc, #408]	; (800504c <HAL_DMA_Start_IT+0x1f8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d045      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a65      	ldr	r2, [pc, #404]	; (8005050 <HAL_DMA_Start_IT+0x1fc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d040      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a63      	ldr	r2, [pc, #396]	; (8005054 <HAL_DMA_Start_IT+0x200>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d03b      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a62      	ldr	r2, [pc, #392]	; (8005058 <HAL_DMA_Start_IT+0x204>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d036      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a60      	ldr	r2, [pc, #384]	; (800505c <HAL_DMA_Start_IT+0x208>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a5f      	ldr	r2, [pc, #380]	; (8005060 <HAL_DMA_Start_IT+0x20c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d02c      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a5d      	ldr	r2, [pc, #372]	; (8005064 <HAL_DMA_Start_IT+0x210>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5c      	ldr	r2, [pc, #368]	; (8005068 <HAL_DMA_Start_IT+0x214>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5a      	ldr	r2, [pc, #360]	; (800506c <HAL_DMA_Start_IT+0x218>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a59      	ldr	r2, [pc, #356]	; (8005070 <HAL_DMA_Start_IT+0x21c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a57      	ldr	r2, [pc, #348]	; (8005074 <HAL_DMA_Start_IT+0x220>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_DMA_Start_IT+0x224>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a54      	ldr	r2, [pc, #336]	; (800507c <HAL_DMA_Start_IT+0x228>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a53      	ldr	r2, [pc, #332]	; (8005080 <HAL_DMA_Start_IT+0x22c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_DMA_Start_IT+0xee>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a51      	ldr	r2, [pc, #324]	; (8005084 <HAL_DMA_Start_IT+0x230>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <HAL_DMA_Start_IT+0x100>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e007      	b.n	8004f64 <HAL_DMA_Start_IT+0x110>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f001 fe6a 	bl	8006c44 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a34      	ldr	r2, [pc, #208]	; (8005048 <HAL_DMA_Start_IT+0x1f4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d04a      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a33      	ldr	r2, [pc, #204]	; (800504c <HAL_DMA_Start_IT+0x1f8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d045      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a31      	ldr	r2, [pc, #196]	; (8005050 <HAL_DMA_Start_IT+0x1fc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d040      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a30      	ldr	r2, [pc, #192]	; (8005054 <HAL_DMA_Start_IT+0x200>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d03b      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <HAL_DMA_Start_IT+0x204>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d036      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2d      	ldr	r2, [pc, #180]	; (800505c <HAL_DMA_Start_IT+0x208>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d031      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <HAL_DMA_Start_IT+0x20c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d02c      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <HAL_DMA_Start_IT+0x210>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d027      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a28      	ldr	r2, [pc, #160]	; (8005068 <HAL_DMA_Start_IT+0x214>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a27      	ldr	r2, [pc, #156]	; (800506c <HAL_DMA_Start_IT+0x218>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d01d      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <HAL_DMA_Start_IT+0x21c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a24      	ldr	r2, [pc, #144]	; (8005074 <HAL_DMA_Start_IT+0x220>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a22      	ldr	r2, [pc, #136]	; (8005078 <HAL_DMA_Start_IT+0x224>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a21      	ldr	r2, [pc, #132]	; (800507c <HAL_DMA_Start_IT+0x228>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <HAL_DMA_Start_IT+0x22c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_DMA_Start_IT+0x1bc>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_DMA_Start_IT+0x230>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d101      	bne.n	8005014 <HAL_DMA_Start_IT+0x1c0>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <HAL_DMA_Start_IT+0x1c2>
 8005014:	2300      	movs	r3, #0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d036      	beq.n	8005088 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 021e 	bic.w	r2, r3, #30
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0216 	orr.w	r2, r2, #22
 800502c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03e      	beq.n	80050b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0208 	orr.w	r2, r2, #8
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e035      	b.n	80050b4 <HAL_DMA_Start_IT+0x260>
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 020e 	bic.w	r2, r3, #14
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 020a 	orr.w	r2, r2, #10
 800509a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0204 	orr.w	r2, r2, #4
 80050b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a83      	ldr	r2, [pc, #524]	; (80052c8 <HAL_DMA_Start_IT+0x474>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d072      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a82      	ldr	r2, [pc, #520]	; (80052cc <HAL_DMA_Start_IT+0x478>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d06d      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a80      	ldr	r2, [pc, #512]	; (80052d0 <HAL_DMA_Start_IT+0x47c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d068      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7f      	ldr	r2, [pc, #508]	; (80052d4 <HAL_DMA_Start_IT+0x480>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d063      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a7d      	ldr	r2, [pc, #500]	; (80052d8 <HAL_DMA_Start_IT+0x484>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d05e      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7c      	ldr	r2, [pc, #496]	; (80052dc <HAL_DMA_Start_IT+0x488>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d059      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a7a      	ldr	r2, [pc, #488]	; (80052e0 <HAL_DMA_Start_IT+0x48c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d054      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a79      	ldr	r2, [pc, #484]	; (80052e4 <HAL_DMA_Start_IT+0x490>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04f      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a77      	ldr	r2, [pc, #476]	; (80052e8 <HAL_DMA_Start_IT+0x494>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d04a      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a76      	ldr	r2, [pc, #472]	; (80052ec <HAL_DMA_Start_IT+0x498>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d045      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a74      	ldr	r2, [pc, #464]	; (80052f0 <HAL_DMA_Start_IT+0x49c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d040      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a73      	ldr	r2, [pc, #460]	; (80052f4 <HAL_DMA_Start_IT+0x4a0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d03b      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <HAL_DMA_Start_IT+0x4a4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d036      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a70      	ldr	r2, [pc, #448]	; (80052fc <HAL_DMA_Start_IT+0x4a8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d031      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a6e      	ldr	r2, [pc, #440]	; (8005300 <HAL_DMA_Start_IT+0x4ac>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d02c      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a6d      	ldr	r2, [pc, #436]	; (8005304 <HAL_DMA_Start_IT+0x4b0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d027      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6b      	ldr	r2, [pc, #428]	; (8005308 <HAL_DMA_Start_IT+0x4b4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d022      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a6a      	ldr	r2, [pc, #424]	; (800530c <HAL_DMA_Start_IT+0x4b8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d01d      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a68      	ldr	r2, [pc, #416]	; (8005310 <HAL_DMA_Start_IT+0x4bc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d018      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a67      	ldr	r2, [pc, #412]	; (8005314 <HAL_DMA_Start_IT+0x4c0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a65      	ldr	r2, [pc, #404]	; (8005318 <HAL_DMA_Start_IT+0x4c4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00e      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a64      	ldr	r2, [pc, #400]	; (800531c <HAL_DMA_Start_IT+0x4c8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d009      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a62      	ldr	r2, [pc, #392]	; (8005320 <HAL_DMA_Start_IT+0x4cc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_DMA_Start_IT+0x350>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a61      	ldr	r2, [pc, #388]	; (8005324 <HAL_DMA_Start_IT+0x4d0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <HAL_DMA_Start_IT+0x354>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_DMA_Start_IT+0x356>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01a      	beq.n	80051e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a37      	ldr	r2, [pc, #220]	; (80052c8 <HAL_DMA_Start_IT+0x474>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04a      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a36      	ldr	r2, [pc, #216]	; (80052cc <HAL_DMA_Start_IT+0x478>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d045      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a34      	ldr	r2, [pc, #208]	; (80052d0 <HAL_DMA_Start_IT+0x47c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d040      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <HAL_DMA_Start_IT+0x480>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d03b      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a31      	ldr	r2, [pc, #196]	; (80052d8 <HAL_DMA_Start_IT+0x484>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d036      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a30      	ldr	r2, [pc, #192]	; (80052dc <HAL_DMA_Start_IT+0x488>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d031      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2e      	ldr	r2, [pc, #184]	; (80052e0 <HAL_DMA_Start_IT+0x48c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02c      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HAL_DMA_Start_IT+0x490>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d027      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_DMA_Start_IT+0x494>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <HAL_DMA_Start_IT+0x498>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d01d      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a28      	ldr	r2, [pc, #160]	; (80052f0 <HAL_DMA_Start_IT+0x49c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <HAL_DMA_Start_IT+0x4a0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <HAL_DMA_Start_IT+0x4a4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a24      	ldr	r2, [pc, #144]	; (80052fc <HAL_DMA_Start_IT+0x4a8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a22      	ldr	r2, [pc, #136]	; (8005300 <HAL_DMA_Start_IT+0x4ac>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_DMA_Start_IT+0x430>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_DMA_Start_IT+0x4b0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d108      	bne.n	8005296 <HAL_DMA_Start_IT+0x442>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e012      	b.n	80052bc <HAL_DMA_Start_IT+0x468>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e009      	b.n	80052bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40020010 	.word	0x40020010
 80052cc:	40020028 	.word	0x40020028
 80052d0:	40020040 	.word	0x40020040
 80052d4:	40020058 	.word	0x40020058
 80052d8:	40020070 	.word	0x40020070
 80052dc:	40020088 	.word	0x40020088
 80052e0:	400200a0 	.word	0x400200a0
 80052e4:	400200b8 	.word	0x400200b8
 80052e8:	40020410 	.word	0x40020410
 80052ec:	40020428 	.word	0x40020428
 80052f0:	40020440 	.word	0x40020440
 80052f4:	40020458 	.word	0x40020458
 80052f8:	40020470 	.word	0x40020470
 80052fc:	40020488 	.word	0x40020488
 8005300:	400204a0 	.word	0x400204a0
 8005304:	400204b8 	.word	0x400204b8
 8005308:	58025408 	.word	0x58025408
 800530c:	5802541c 	.word	0x5802541c
 8005310:	58025430 	.word	0x58025430
 8005314:	58025444 	.word	0x58025444
 8005318:	58025458 	.word	0x58025458
 800531c:	5802546c 	.word	0x5802546c
 8005320:	58025480 	.word	0x58025480
 8005324:	58025494 	.word	0x58025494

08005328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005330:	f7fd fafe 	bl	8002930 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e2dc      	b.n	80058fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d008      	beq.n	800535e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e2cd      	b.n	80058fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a76      	ldr	r2, [pc, #472]	; (800553c <HAL_DMA_Abort+0x214>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d04a      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a74      	ldr	r2, [pc, #464]	; (8005540 <HAL_DMA_Abort+0x218>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d045      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_DMA_Abort+0x21c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d040      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a71      	ldr	r2, [pc, #452]	; (8005548 <HAL_DMA_Abort+0x220>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d03b      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a70      	ldr	r2, [pc, #448]	; (800554c <HAL_DMA_Abort+0x224>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d036      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a6e      	ldr	r2, [pc, #440]	; (8005550 <HAL_DMA_Abort+0x228>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d031      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6d      	ldr	r2, [pc, #436]	; (8005554 <HAL_DMA_Abort+0x22c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d02c      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6b      	ldr	r2, [pc, #428]	; (8005558 <HAL_DMA_Abort+0x230>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d027      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6a      	ldr	r2, [pc, #424]	; (800555c <HAL_DMA_Abort+0x234>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_DMA_Abort+0x238>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01d      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a67      	ldr	r2, [pc, #412]	; (8005564 <HAL_DMA_Abort+0x23c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a65      	ldr	r2, [pc, #404]	; (8005568 <HAL_DMA_Abort+0x240>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a64      	ldr	r2, [pc, #400]	; (800556c <HAL_DMA_Abort+0x244>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a62      	ldr	r2, [pc, #392]	; (8005570 <HAL_DMA_Abort+0x248>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a61      	ldr	r2, [pc, #388]	; (8005574 <HAL_DMA_Abort+0x24c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_DMA_Abort+0xd6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a5f      	ldr	r2, [pc, #380]	; (8005578 <HAL_DMA_Abort+0x250>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_DMA_Abort+0xda>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_DMA_Abort+0xdc>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 021e 	bic.w	r2, r2, #30
 8005416:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005426:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e00a      	b.n	8005446 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020e 	bic.w	r2, r2, #14
 800543e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a3c      	ldr	r2, [pc, #240]	; (800553c <HAL_DMA_Abort+0x214>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d072      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <HAL_DMA_Abort+0x218>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d06d      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a39      	ldr	r2, [pc, #228]	; (8005544 <HAL_DMA_Abort+0x21c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d068      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a37      	ldr	r2, [pc, #220]	; (8005548 <HAL_DMA_Abort+0x220>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d063      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a36      	ldr	r2, [pc, #216]	; (800554c <HAL_DMA_Abort+0x224>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d05e      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_DMA_Abort+0x228>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d059      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a33      	ldr	r2, [pc, #204]	; (8005554 <HAL_DMA_Abort+0x22c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d054      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_DMA_Abort+0x230>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d04f      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a30      	ldr	r2, [pc, #192]	; (800555c <HAL_DMA_Abort+0x234>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d04a      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <HAL_DMA_Abort+0x238>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d045      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <HAL_DMA_Abort+0x23c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d040      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <HAL_DMA_Abort+0x240>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03b      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2a      	ldr	r2, [pc, #168]	; (800556c <HAL_DMA_Abort+0x244>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d036      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_DMA_Abort+0x248>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <HAL_DMA_Abort+0x24c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d02c      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_DMA_Abort+0x250>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d027      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <HAL_DMA_Abort+0x254>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_DMA_Abort+0x258>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <HAL_DMA_Abort+0x25c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <HAL_DMA_Abort+0x260>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <HAL_DMA_Abort+0x264>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_DMA_Abort+0x268>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_DMA_Abort+0x26c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_DMA_Abort+0x20e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <HAL_DMA_Abort+0x270>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d132      	bne.n	800559c <HAL_DMA_Abort+0x274>
 8005536:	2301      	movs	r3, #1
 8005538:	e031      	b.n	800559e <HAL_DMA_Abort+0x276>
 800553a:	bf00      	nop
 800553c:	40020010 	.word	0x40020010
 8005540:	40020028 	.word	0x40020028
 8005544:	40020040 	.word	0x40020040
 8005548:	40020058 	.word	0x40020058
 800554c:	40020070 	.word	0x40020070
 8005550:	40020088 	.word	0x40020088
 8005554:	400200a0 	.word	0x400200a0
 8005558:	400200b8 	.word	0x400200b8
 800555c:	40020410 	.word	0x40020410
 8005560:	40020428 	.word	0x40020428
 8005564:	40020440 	.word	0x40020440
 8005568:	40020458 	.word	0x40020458
 800556c:	40020470 	.word	0x40020470
 8005570:	40020488 	.word	0x40020488
 8005574:	400204a0 	.word	0x400204a0
 8005578:	400204b8 	.word	0x400204b8
 800557c:	58025408 	.word	0x58025408
 8005580:	5802541c 	.word	0x5802541c
 8005584:	58025430 	.word	0x58025430
 8005588:	58025444 	.word	0x58025444
 800558c:	58025458 	.word	0x58025458
 8005590:	5802546c 	.word	0x5802546c
 8005594:	58025480 	.word	0x58025480
 8005598:	58025494 	.word	0x58025494
 800559c:	2300      	movs	r3, #0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6d      	ldr	r2, [pc, #436]	; (800576c <HAL_DMA_Abort+0x444>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d04a      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a6b      	ldr	r2, [pc, #428]	; (8005770 <HAL_DMA_Abort+0x448>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d045      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6a      	ldr	r2, [pc, #424]	; (8005774 <HAL_DMA_Abort+0x44c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d040      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a68      	ldr	r2, [pc, #416]	; (8005778 <HAL_DMA_Abort+0x450>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d03b      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a67      	ldr	r2, [pc, #412]	; (800577c <HAL_DMA_Abort+0x454>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d036      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a65      	ldr	r2, [pc, #404]	; (8005780 <HAL_DMA_Abort+0x458>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d031      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a64      	ldr	r2, [pc, #400]	; (8005784 <HAL_DMA_Abort+0x45c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d02c      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a62      	ldr	r2, [pc, #392]	; (8005788 <HAL_DMA_Abort+0x460>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d027      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a61      	ldr	r2, [pc, #388]	; (800578c <HAL_DMA_Abort+0x464>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5f      	ldr	r2, [pc, #380]	; (8005790 <HAL_DMA_Abort+0x468>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01d      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a5e      	ldr	r2, [pc, #376]	; (8005794 <HAL_DMA_Abort+0x46c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5c      	ldr	r2, [pc, #368]	; (8005798 <HAL_DMA_Abort+0x470>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5b      	ldr	r2, [pc, #364]	; (800579c <HAL_DMA_Abort+0x474>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a59      	ldr	r2, [pc, #356]	; (80057a0 <HAL_DMA_Abort+0x478>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a58      	ldr	r2, [pc, #352]	; (80057a4 <HAL_DMA_Abort+0x47c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_DMA_Abort+0x32a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a56      	ldr	r2, [pc, #344]	; (80057a8 <HAL_DMA_Abort+0x480>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d108      	bne.n	8005664 <HAL_DMA_Abort+0x33c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e007      	b.n	8005674 <HAL_DMA_Abort+0x34c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005674:	e013      	b.n	800569e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005676:	f7fd f95b 	bl	8002930 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b05      	cmp	r3, #5
 8005682:	d90c      	bls.n	800569e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2203      	movs	r2, #3
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e12d      	b.n	80058fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2f      	ldr	r2, [pc, #188]	; (800576c <HAL_DMA_Abort+0x444>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d04a      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2d      	ldr	r2, [pc, #180]	; (8005770 <HAL_DMA_Abort+0x448>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d045      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	; (8005774 <HAL_DMA_Abort+0x44c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d040      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2a      	ldr	r2, [pc, #168]	; (8005778 <HAL_DMA_Abort+0x450>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d03b      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a29      	ldr	r2, [pc, #164]	; (800577c <HAL_DMA_Abort+0x454>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d036      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <HAL_DMA_Abort+0x458>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d031      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a26      	ldr	r2, [pc, #152]	; (8005784 <HAL_DMA_Abort+0x45c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d02c      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a24      	ldr	r2, [pc, #144]	; (8005788 <HAL_DMA_Abort+0x460>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d027      	beq.n	800574a <HAL_DMA_Abort+0x422>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a23      	ldr	r2, [pc, #140]	; (800578c <HAL_DMA_Abort+0x464>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <HAL_DMA_Abort+0x422>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a21      	ldr	r2, [pc, #132]	; (8005790 <HAL_DMA_Abort+0x468>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01d      	beq.n	800574a <HAL_DMA_Abort+0x422>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_DMA_Abort+0x46c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_DMA_Abort+0x422>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_DMA_Abort+0x470>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_DMA_Abort+0x422>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_DMA_Abort+0x474>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00e      	beq.n	800574a <HAL_DMA_Abort+0x422>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_DMA_Abort+0x478>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_DMA_Abort+0x422>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <HAL_DMA_Abort+0x47c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_DMA_Abort+0x422>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <HAL_DMA_Abort+0x480>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_DMA_Abort+0x426>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <HAL_DMA_Abort+0x428>
 800574e:	2300      	movs	r3, #0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d02b      	beq.n	80057ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	223f      	movs	r2, #63	; 0x3f
 8005764:	409a      	lsls	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	609a      	str	r2, [r3, #8]
 800576a:	e02a      	b.n	80057c2 <HAL_DMA_Abort+0x49a>
 800576c:	40020010 	.word	0x40020010
 8005770:	40020028 	.word	0x40020028
 8005774:	40020040 	.word	0x40020040
 8005778:	40020058 	.word	0x40020058
 800577c:	40020070 	.word	0x40020070
 8005780:	40020088 	.word	0x40020088
 8005784:	400200a0 	.word	0x400200a0
 8005788:	400200b8 	.word	0x400200b8
 800578c:	40020410 	.word	0x40020410
 8005790:	40020428 	.word	0x40020428
 8005794:	40020440 	.word	0x40020440
 8005798:	40020458 	.word	0x40020458
 800579c:	40020470 	.word	0x40020470
 80057a0:	40020488 	.word	0x40020488
 80057a4:	400204a0 	.word	0x400204a0
 80057a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2201      	movs	r2, #1
 80057bc:	409a      	lsls	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a4f      	ldr	r2, [pc, #316]	; (8005904 <HAL_DMA_Abort+0x5dc>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d072      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a4d      	ldr	r2, [pc, #308]	; (8005908 <HAL_DMA_Abort+0x5e0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d06d      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a4c      	ldr	r2, [pc, #304]	; (800590c <HAL_DMA_Abort+0x5e4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d068      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <HAL_DMA_Abort+0x5e8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d063      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a49      	ldr	r2, [pc, #292]	; (8005914 <HAL_DMA_Abort+0x5ec>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d05e      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a47      	ldr	r2, [pc, #284]	; (8005918 <HAL_DMA_Abort+0x5f0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d059      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a46      	ldr	r2, [pc, #280]	; (800591c <HAL_DMA_Abort+0x5f4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d054      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a44      	ldr	r2, [pc, #272]	; (8005920 <HAL_DMA_Abort+0x5f8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d04f      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a43      	ldr	r2, [pc, #268]	; (8005924 <HAL_DMA_Abort+0x5fc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d04a      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a41      	ldr	r2, [pc, #260]	; (8005928 <HAL_DMA_Abort+0x600>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d045      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a40      	ldr	r2, [pc, #256]	; (800592c <HAL_DMA_Abort+0x604>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d040      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a3e      	ldr	r2, [pc, #248]	; (8005930 <HAL_DMA_Abort+0x608>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d03b      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a3d      	ldr	r2, [pc, #244]	; (8005934 <HAL_DMA_Abort+0x60c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d036      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a3b      	ldr	r2, [pc, #236]	; (8005938 <HAL_DMA_Abort+0x610>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d031      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a3a      	ldr	r2, [pc, #232]	; (800593c <HAL_DMA_Abort+0x614>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d02c      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a38      	ldr	r2, [pc, #224]	; (8005940 <HAL_DMA_Abort+0x618>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d027      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a37      	ldr	r2, [pc, #220]	; (8005944 <HAL_DMA_Abort+0x61c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d022      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a35      	ldr	r2, [pc, #212]	; (8005948 <HAL_DMA_Abort+0x620>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01d      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a34      	ldr	r2, [pc, #208]	; (800594c <HAL_DMA_Abort+0x624>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d018      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a32      	ldr	r2, [pc, #200]	; (8005950 <HAL_DMA_Abort+0x628>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a31      	ldr	r2, [pc, #196]	; (8005954 <HAL_DMA_Abort+0x62c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00e      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <HAL_DMA_Abort+0x630>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2e      	ldr	r2, [pc, #184]	; (800595c <HAL_DMA_Abort+0x634>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d004      	beq.n	80058b2 <HAL_DMA_Abort+0x58a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2c      	ldr	r2, [pc, #176]	; (8005960 <HAL_DMA_Abort+0x638>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d101      	bne.n	80058b6 <HAL_DMA_Abort+0x58e>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_DMA_Abort+0x590>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d015      	beq.n	80058e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40020010 	.word	0x40020010
 8005908:	40020028 	.word	0x40020028
 800590c:	40020040 	.word	0x40020040
 8005910:	40020058 	.word	0x40020058
 8005914:	40020070 	.word	0x40020070
 8005918:	40020088 	.word	0x40020088
 800591c:	400200a0 	.word	0x400200a0
 8005920:	400200b8 	.word	0x400200b8
 8005924:	40020410 	.word	0x40020410
 8005928:	40020428 	.word	0x40020428
 800592c:	40020440 	.word	0x40020440
 8005930:	40020458 	.word	0x40020458
 8005934:	40020470 	.word	0x40020470
 8005938:	40020488 	.word	0x40020488
 800593c:	400204a0 	.word	0x400204a0
 8005940:	400204b8 	.word	0x400204b8
 8005944:	58025408 	.word	0x58025408
 8005948:	5802541c 	.word	0x5802541c
 800594c:	58025430 	.word	0x58025430
 8005950:	58025444 	.word	0x58025444
 8005954:	58025458 	.word	0x58025458
 8005958:	5802546c 	.word	0x5802546c
 800595c:	58025480 	.word	0x58025480
 8005960:	58025494 	.word	0x58025494

08005964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e237      	b.n	8005de6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d004      	beq.n	800598c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e22c      	b.n	8005de6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5c      	ldr	r2, [pc, #368]	; (8005b04 <HAL_DMA_Abort_IT+0x1a0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d04a      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a5b      	ldr	r2, [pc, #364]	; (8005b08 <HAL_DMA_Abort_IT+0x1a4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d045      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a59      	ldr	r2, [pc, #356]	; (8005b0c <HAL_DMA_Abort_IT+0x1a8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d040      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a58      	ldr	r2, [pc, #352]	; (8005b10 <HAL_DMA_Abort_IT+0x1ac>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d03b      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a56      	ldr	r2, [pc, #344]	; (8005b14 <HAL_DMA_Abort_IT+0x1b0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d036      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a55      	ldr	r2, [pc, #340]	; (8005b18 <HAL_DMA_Abort_IT+0x1b4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d031      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a53      	ldr	r2, [pc, #332]	; (8005b1c <HAL_DMA_Abort_IT+0x1b8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02c      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a52      	ldr	r2, [pc, #328]	; (8005b20 <HAL_DMA_Abort_IT+0x1bc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d027      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a50      	ldr	r2, [pc, #320]	; (8005b24 <HAL_DMA_Abort_IT+0x1c0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4f      	ldr	r2, [pc, #316]	; (8005b28 <HAL_DMA_Abort_IT+0x1c4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d01d      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a4d      	ldr	r2, [pc, #308]	; (8005b2c <HAL_DMA_Abort_IT+0x1c8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4c      	ldr	r2, [pc, #304]	; (8005b30 <HAL_DMA_Abort_IT+0x1cc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a4a      	ldr	r2, [pc, #296]	; (8005b34 <HAL_DMA_Abort_IT+0x1d0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a49      	ldr	r2, [pc, #292]	; (8005b38 <HAL_DMA_Abort_IT+0x1d4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a47      	ldr	r2, [pc, #284]	; (8005b3c <HAL_DMA_Abort_IT+0x1d8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_DMA_Abort_IT+0xc8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a46      	ldr	r2, [pc, #280]	; (8005b40 <HAL_DMA_Abort_IT+0x1dc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_DMA_Abort_IT+0xcc>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <HAL_DMA_Abort_IT+0xce>
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8086 	beq.w	8005b44 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <HAL_DMA_Abort_IT+0x1a0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d04a      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2e      	ldr	r2, [pc, #184]	; (8005b08 <HAL_DMA_Abort_IT+0x1a4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d045      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <HAL_DMA_Abort_IT+0x1a8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d040      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2b      	ldr	r2, [pc, #172]	; (8005b10 <HAL_DMA_Abort_IT+0x1ac>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d03b      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <HAL_DMA_Abort_IT+0x1b0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d036      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <HAL_DMA_Abort_IT+0x1b4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d031      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <HAL_DMA_Abort_IT+0x1b8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02c      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <HAL_DMA_Abort_IT+0x1bc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d027      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a23      	ldr	r2, [pc, #140]	; (8005b24 <HAL_DMA_Abort_IT+0x1c0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <HAL_DMA_Abort_IT+0x1c4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <HAL_DMA_Abort_IT+0x1c8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <HAL_DMA_Abort_IT+0x1cc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <HAL_DMA_Abort_IT+0x1d0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <HAL_DMA_Abort_IT+0x1d4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <HAL_DMA_Abort_IT+0x1d8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x17c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <HAL_DMA_Abort_IT+0x1dc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d108      	bne.n	8005af2 <HAL_DMA_Abort_IT+0x18e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e178      	b.n	8005de4 <HAL_DMA_Abort_IT+0x480>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e16f      	b.n	8005de4 <HAL_DMA_Abort_IT+0x480>
 8005b04:	40020010 	.word	0x40020010
 8005b08:	40020028 	.word	0x40020028
 8005b0c:	40020040 	.word	0x40020040
 8005b10:	40020058 	.word	0x40020058
 8005b14:	40020070 	.word	0x40020070
 8005b18:	40020088 	.word	0x40020088
 8005b1c:	400200a0 	.word	0x400200a0
 8005b20:	400200b8 	.word	0x400200b8
 8005b24:	40020410 	.word	0x40020410
 8005b28:	40020428 	.word	0x40020428
 8005b2c:	40020440 	.word	0x40020440
 8005b30:	40020458 	.word	0x40020458
 8005b34:	40020470 	.word	0x40020470
 8005b38:	40020488 	.word	0x40020488
 8005b3c:	400204a0 	.word	0x400204a0
 8005b40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 020e 	bic.w	r2, r2, #14
 8005b52:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6c      	ldr	r2, [pc, #432]	; (8005d0c <HAL_DMA_Abort_IT+0x3a8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d04a      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6b      	ldr	r2, [pc, #428]	; (8005d10 <HAL_DMA_Abort_IT+0x3ac>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d045      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a69      	ldr	r2, [pc, #420]	; (8005d14 <HAL_DMA_Abort_IT+0x3b0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d040      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a68      	ldr	r2, [pc, #416]	; (8005d18 <HAL_DMA_Abort_IT+0x3b4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d03b      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a66      	ldr	r2, [pc, #408]	; (8005d1c <HAL_DMA_Abort_IT+0x3b8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d036      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a65      	ldr	r2, [pc, #404]	; (8005d20 <HAL_DMA_Abort_IT+0x3bc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d031      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a63      	ldr	r2, [pc, #396]	; (8005d24 <HAL_DMA_Abort_IT+0x3c0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d02c      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a62      	ldr	r2, [pc, #392]	; (8005d28 <HAL_DMA_Abort_IT+0x3c4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d027      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a60      	ldr	r2, [pc, #384]	; (8005d2c <HAL_DMA_Abort_IT+0x3c8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d022      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5f      	ldr	r2, [pc, #380]	; (8005d30 <HAL_DMA_Abort_IT+0x3cc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d01d      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5d      	ldr	r2, [pc, #372]	; (8005d34 <HAL_DMA_Abort_IT+0x3d0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d018      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5c      	ldr	r2, [pc, #368]	; (8005d38 <HAL_DMA_Abort_IT+0x3d4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5a      	ldr	r2, [pc, #360]	; (8005d3c <HAL_DMA_Abort_IT+0x3d8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a59      	ldr	r2, [pc, #356]	; (8005d40 <HAL_DMA_Abort_IT+0x3dc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d009      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a57      	ldr	r2, [pc, #348]	; (8005d44 <HAL_DMA_Abort_IT+0x3e0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_DMA_Abort_IT+0x290>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a56      	ldr	r2, [pc, #344]	; (8005d48 <HAL_DMA_Abort_IT+0x3e4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d108      	bne.n	8005c06 <HAL_DMA_Abort_IT+0x2a2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e007      	b.n	8005c16 <HAL_DMA_Abort_IT+0x2b2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <HAL_DMA_Abort_IT+0x3a8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d072      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <HAL_DMA_Abort_IT+0x3ac>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d06d      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a39      	ldr	r2, [pc, #228]	; (8005d14 <HAL_DMA_Abort_IT+0x3b0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d068      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <HAL_DMA_Abort_IT+0x3b4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d063      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a36      	ldr	r2, [pc, #216]	; (8005d1c <HAL_DMA_Abort_IT+0x3b8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d05e      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <HAL_DMA_Abort_IT+0x3bc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d059      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <HAL_DMA_Abort_IT+0x3c0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d054      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a31      	ldr	r2, [pc, #196]	; (8005d28 <HAL_DMA_Abort_IT+0x3c4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d04f      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a30      	ldr	r2, [pc, #192]	; (8005d2c <HAL_DMA_Abort_IT+0x3c8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d04a      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <HAL_DMA_Abort_IT+0x3cc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d045      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <HAL_DMA_Abort_IT+0x3d0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d040      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <HAL_DMA_Abort_IT+0x3d4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d03b      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <HAL_DMA_Abort_IT+0x3d8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d036      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <HAL_DMA_Abort_IT+0x3dc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <HAL_DMA_Abort_IT+0x3e0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d02c      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <HAL_DMA_Abort_IT+0x3e4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <HAL_DMA_Abort_IT+0x3e8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <HAL_DMA_Abort_IT+0x3ec>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01d      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <HAL_DMA_Abort_IT+0x3f0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <HAL_DMA_Abort_IT+0x3f4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1e      	ldr	r2, [pc, #120]	; (8005d5c <HAL_DMA_Abort_IT+0x3f8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1c      	ldr	r2, [pc, #112]	; (8005d60 <HAL_DMA_Abort_IT+0x3fc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_DMA_Abort_IT+0x400>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x3a2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <HAL_DMA_Abort_IT+0x404>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d132      	bne.n	8005d6c <HAL_DMA_Abort_IT+0x408>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e031      	b.n	8005d6e <HAL_DMA_Abort_IT+0x40a>
 8005d0a:	bf00      	nop
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
 8005d4c:	58025408 	.word	0x58025408
 8005d50:	5802541c 	.word	0x5802541c
 8005d54:	58025430 	.word	0x58025430
 8005d58:	58025444 	.word	0x58025444
 8005d5c:	58025458 	.word	0x58025458
 8005d60:	5802546c 	.word	0x5802546c
 8005d64:	58025480 	.word	0x58025480
 8005d68:	58025494 	.word	0x58025494
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d028      	beq.n	8005dc4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2201      	movs	r2, #1
 8005d92:	409a      	lsls	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005da0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop

08005df0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dfc:	4b67      	ldr	r3, [pc, #412]	; (8005f9c <HAL_DMA_IRQHandler+0x1ac>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a67      	ldr	r2, [pc, #412]	; (8005fa0 <HAL_DMA_IRQHandler+0x1b0>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	0a9b      	lsrs	r3, r3, #10
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a5f      	ldr	r2, [pc, #380]	; (8005fa4 <HAL_DMA_IRQHandler+0x1b4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5d      	ldr	r2, [pc, #372]	; (8005fa8 <HAL_DMA_IRQHandler+0x1b8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d045      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a5c      	ldr	r2, [pc, #368]	; (8005fac <HAL_DMA_IRQHandler+0x1bc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a5a      	ldr	r2, [pc, #360]	; (8005fb0 <HAL_DMA_IRQHandler+0x1c0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d03b      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a59      	ldr	r2, [pc, #356]	; (8005fb4 <HAL_DMA_IRQHandler+0x1c4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d036      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a57      	ldr	r2, [pc, #348]	; (8005fb8 <HAL_DMA_IRQHandler+0x1c8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d031      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a56      	ldr	r2, [pc, #344]	; (8005fbc <HAL_DMA_IRQHandler+0x1cc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d02c      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a54      	ldr	r2, [pc, #336]	; (8005fc0 <HAL_DMA_IRQHandler+0x1d0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a53      	ldr	r2, [pc, #332]	; (8005fc4 <HAL_DMA_IRQHandler+0x1d4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a51      	ldr	r2, [pc, #324]	; (8005fc8 <HAL_DMA_IRQHandler+0x1d8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a50      	ldr	r2, [pc, #320]	; (8005fcc <HAL_DMA_IRQHandler+0x1dc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a4e      	ldr	r2, [pc, #312]	; (8005fd0 <HAL_DMA_IRQHandler+0x1e0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a4d      	ldr	r2, [pc, #308]	; (8005fd4 <HAL_DMA_IRQHandler+0x1e4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a4b      	ldr	r2, [pc, #300]	; (8005fd8 <HAL_DMA_IRQHandler+0x1e8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <HAL_DMA_IRQHandler+0x1ec>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0xd2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a48      	ldr	r2, [pc, #288]	; (8005fe0 <HAL_DMA_IRQHandler+0x1f0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <HAL_DMA_IRQHandler+0xd6>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_DMA_IRQHandler+0xd8>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 842b 	beq.w	8006724 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a2 	beq.w	8006028 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a2e      	ldr	r2, [pc, #184]	; (8005fa4 <HAL_DMA_IRQHandler+0x1b4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d04a      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <HAL_DMA_IRQHandler+0x1b8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d045      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <HAL_DMA_IRQHandler+0x1bc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d040      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <HAL_DMA_IRQHandler+0x1c0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d03b      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a28      	ldr	r2, [pc, #160]	; (8005fb4 <HAL_DMA_IRQHandler+0x1c4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d036      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a27      	ldr	r2, [pc, #156]	; (8005fb8 <HAL_DMA_IRQHandler+0x1c8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d031      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <HAL_DMA_IRQHandler+0x1cc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d02c      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a24      	ldr	r2, [pc, #144]	; (8005fc0 <HAL_DMA_IRQHandler+0x1d0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d027      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a22      	ldr	r2, [pc, #136]	; (8005fc4 <HAL_DMA_IRQHandler+0x1d4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a21      	ldr	r2, [pc, #132]	; (8005fc8 <HAL_DMA_IRQHandler+0x1d8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d01d      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1f      	ldr	r2, [pc, #124]	; (8005fcc <HAL_DMA_IRQHandler+0x1dc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_DMA_IRQHandler+0x1e0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <HAL_DMA_IRQHandler+0x1e4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_DMA_IRQHandler+0x1e8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <HAL_DMA_IRQHandler+0x1ec>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x194>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <HAL_DMA_IRQHandler+0x1f0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d12f      	bne.n	8005fe4 <HAL_DMA_IRQHandler+0x1f4>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e02e      	b.n	8005ff8 <HAL_DMA_IRQHandler+0x208>
 8005f9a:	bf00      	nop
 8005f9c:	24000030 	.word	0x24000030
 8005fa0:	1b4e81b5 	.word	0x1b4e81b5
 8005fa4:	40020010 	.word	0x40020010
 8005fa8:	40020028 	.word	0x40020028
 8005fac:	40020040 	.word	0x40020040
 8005fb0:	40020058 	.word	0x40020058
 8005fb4:	40020070 	.word	0x40020070
 8005fb8:	40020088 	.word	0x40020088
 8005fbc:	400200a0 	.word	0x400200a0
 8005fc0:	400200b8 	.word	0x400200b8
 8005fc4:	40020410 	.word	0x40020410
 8005fc8:	40020428 	.word	0x40020428
 8005fcc:	40020440 	.word	0x40020440
 8005fd0:	40020458 	.word	0x40020458
 8005fd4:	40020470 	.word	0x40020470
 8005fd8:	40020488 	.word	0x40020488
 8005fdc:	400204a0 	.word	0x400204a0
 8005fe0:	400204b8 	.word	0x400204b8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d015      	beq.n	8006028 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	2208      	movs	r2, #8
 8006016:	409a      	lsls	r2, r3
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	f043 0201 	orr.w	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d06e      	beq.n	800611c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a69      	ldr	r2, [pc, #420]	; (80061e8 <HAL_DMA_IRQHandler+0x3f8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d04a      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a67      	ldr	r2, [pc, #412]	; (80061ec <HAL_DMA_IRQHandler+0x3fc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d045      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a66      	ldr	r2, [pc, #408]	; (80061f0 <HAL_DMA_IRQHandler+0x400>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d040      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a64      	ldr	r2, [pc, #400]	; (80061f4 <HAL_DMA_IRQHandler+0x404>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d03b      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a63      	ldr	r2, [pc, #396]	; (80061f8 <HAL_DMA_IRQHandler+0x408>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d036      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a61      	ldr	r2, [pc, #388]	; (80061fc <HAL_DMA_IRQHandler+0x40c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d031      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a60      	ldr	r2, [pc, #384]	; (8006200 <HAL_DMA_IRQHandler+0x410>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d02c      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a5e      	ldr	r2, [pc, #376]	; (8006204 <HAL_DMA_IRQHandler+0x414>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d027      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a5d      	ldr	r2, [pc, #372]	; (8006208 <HAL_DMA_IRQHandler+0x418>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5b      	ldr	r2, [pc, #364]	; (800620c <HAL_DMA_IRQHandler+0x41c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a5a      	ldr	r2, [pc, #360]	; (8006210 <HAL_DMA_IRQHandler+0x420>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a58      	ldr	r2, [pc, #352]	; (8006214 <HAL_DMA_IRQHandler+0x424>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a57      	ldr	r2, [pc, #348]	; (8006218 <HAL_DMA_IRQHandler+0x428>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a55      	ldr	r2, [pc, #340]	; (800621c <HAL_DMA_IRQHandler+0x42c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a54      	ldr	r2, [pc, #336]	; (8006220 <HAL_DMA_IRQHandler+0x430>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_DMA_IRQHandler+0x2ee>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a52      	ldr	r2, [pc, #328]	; (8006224 <HAL_DMA_IRQHandler+0x434>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10a      	bne.n	80060f4 <HAL_DMA_IRQHandler+0x304>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e003      	b.n	80060fc <HAL_DMA_IRQHandler+0x30c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2201      	movs	r2, #1
 800610a:	409a      	lsls	r2, r3
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f043 0202 	orr.w	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2204      	movs	r2, #4
 8006126:	409a      	lsls	r2, r3
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 808f 	beq.w	8006250 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <HAL_DMA_IRQHandler+0x3f8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d04a      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <HAL_DMA_IRQHandler+0x3fc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d045      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <HAL_DMA_IRQHandler+0x400>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d040      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a27      	ldr	r2, [pc, #156]	; (80061f4 <HAL_DMA_IRQHandler+0x404>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d03b      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a26      	ldr	r2, [pc, #152]	; (80061f8 <HAL_DMA_IRQHandler+0x408>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d036      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a24      	ldr	r2, [pc, #144]	; (80061fc <HAL_DMA_IRQHandler+0x40c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d031      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a23      	ldr	r2, [pc, #140]	; (8006200 <HAL_DMA_IRQHandler+0x410>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d02c      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a21      	ldr	r2, [pc, #132]	; (8006204 <HAL_DMA_IRQHandler+0x414>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d027      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a20      	ldr	r2, [pc, #128]	; (8006208 <HAL_DMA_IRQHandler+0x418>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d022      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1e      	ldr	r2, [pc, #120]	; (800620c <HAL_DMA_IRQHandler+0x41c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d01d      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <HAL_DMA_IRQHandler+0x420>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d018      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <HAL_DMA_IRQHandler+0x424>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1a      	ldr	r2, [pc, #104]	; (8006218 <HAL_DMA_IRQHandler+0x428>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00e      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_DMA_IRQHandler+0x42c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d009      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a17      	ldr	r2, [pc, #92]	; (8006220 <HAL_DMA_IRQHandler+0x430>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x3e2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a15      	ldr	r2, [pc, #84]	; (8006224 <HAL_DMA_IRQHandler+0x434>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d12a      	bne.n	8006228 <HAL_DMA_IRQHandler+0x438>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e023      	b.n	8006230 <HAL_DMA_IRQHandler+0x440>
 80061e8:	40020010 	.word	0x40020010
 80061ec:	40020028 	.word	0x40020028
 80061f0:	40020040 	.word	0x40020040
 80061f4:	40020058 	.word	0x40020058
 80061f8:	40020070 	.word	0x40020070
 80061fc:	40020088 	.word	0x40020088
 8006200:	400200a0 	.word	0x400200a0
 8006204:	400200b8 	.word	0x400200b8
 8006208:	40020410 	.word	0x40020410
 800620c:	40020428 	.word	0x40020428
 8006210:	40020440 	.word	0x40020440
 8006214:	40020458 	.word	0x40020458
 8006218:	40020470 	.word	0x40020470
 800621c:	40020488 	.word	0x40020488
 8006220:	400204a0 	.word	0x400204a0
 8006224:	400204b8 	.word	0x400204b8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00d      	beq.n	8006250 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	2204      	movs	r2, #4
 800623e:	409a      	lsls	r2, r3
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006248:	f043 0204 	orr.w	r2, r3, #4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2210      	movs	r2, #16
 800625a:	409a      	lsls	r2, r3
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 80a6 	beq.w	80063b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a85      	ldr	r2, [pc, #532]	; (8006480 <HAL_DMA_IRQHandler+0x690>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d04a      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a83      	ldr	r2, [pc, #524]	; (8006484 <HAL_DMA_IRQHandler+0x694>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d045      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a82      	ldr	r2, [pc, #520]	; (8006488 <HAL_DMA_IRQHandler+0x698>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d040      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a80      	ldr	r2, [pc, #512]	; (800648c <HAL_DMA_IRQHandler+0x69c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d03b      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a7f      	ldr	r2, [pc, #508]	; (8006490 <HAL_DMA_IRQHandler+0x6a0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d036      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7d      	ldr	r2, [pc, #500]	; (8006494 <HAL_DMA_IRQHandler+0x6a4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d031      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7c      	ldr	r2, [pc, #496]	; (8006498 <HAL_DMA_IRQHandler+0x6a8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d02c      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a7a      	ldr	r2, [pc, #488]	; (800649c <HAL_DMA_IRQHandler+0x6ac>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d027      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a79      	ldr	r2, [pc, #484]	; (80064a0 <HAL_DMA_IRQHandler+0x6b0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a77      	ldr	r2, [pc, #476]	; (80064a4 <HAL_DMA_IRQHandler+0x6b4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01d      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a76      	ldr	r2, [pc, #472]	; (80064a8 <HAL_DMA_IRQHandler+0x6b8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a74      	ldr	r2, [pc, #464]	; (80064ac <HAL_DMA_IRQHandler+0x6bc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a73      	ldr	r2, [pc, #460]	; (80064b0 <HAL_DMA_IRQHandler+0x6c0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a71      	ldr	r2, [pc, #452]	; (80064b4 <HAL_DMA_IRQHandler+0x6c4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a70      	ldr	r2, [pc, #448]	; (80064b8 <HAL_DMA_IRQHandler+0x6c8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_DMA_IRQHandler+0x516>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6e      	ldr	r2, [pc, #440]	; (80064bc <HAL_DMA_IRQHandler+0x6cc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10a      	bne.n	800631c <HAL_DMA_IRQHandler+0x52c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	e009      	b.n	8006330 <HAL_DMA_IRQHandler+0x540>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d03e      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2210      	movs	r2, #16
 800633e:	409a      	lsls	r2, r3
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d018      	beq.n	8006384 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d108      	bne.n	8006372 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d024      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
 8006370:	e01f      	b.n	80063b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01b      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
 8006382:	e016      	b.n	80063b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0208 	bic.w	r2, r2, #8
 80063a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2220      	movs	r2, #32
 80063bc:	409a      	lsls	r2, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8110 	beq.w	80065e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2c      	ldr	r2, [pc, #176]	; (8006480 <HAL_DMA_IRQHandler+0x690>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d04a      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a2b      	ldr	r2, [pc, #172]	; (8006484 <HAL_DMA_IRQHandler+0x694>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d045      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a29      	ldr	r2, [pc, #164]	; (8006488 <HAL_DMA_IRQHandler+0x698>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d040      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a28      	ldr	r2, [pc, #160]	; (800648c <HAL_DMA_IRQHandler+0x69c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d03b      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a26      	ldr	r2, [pc, #152]	; (8006490 <HAL_DMA_IRQHandler+0x6a0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d036      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a25      	ldr	r2, [pc, #148]	; (8006494 <HAL_DMA_IRQHandler+0x6a4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d031      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a23      	ldr	r2, [pc, #140]	; (8006498 <HAL_DMA_IRQHandler+0x6a8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d02c      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a22      	ldr	r2, [pc, #136]	; (800649c <HAL_DMA_IRQHandler+0x6ac>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d027      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a20      	ldr	r2, [pc, #128]	; (80064a0 <HAL_DMA_IRQHandler+0x6b0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d022      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_DMA_IRQHandler+0x6b4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d01d      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <HAL_DMA_IRQHandler+0x6b8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_DMA_IRQHandler+0x6bc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <HAL_DMA_IRQHandler+0x6c0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00e      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a19      	ldr	r2, [pc, #100]	; (80064b4 <HAL_DMA_IRQHandler+0x6c4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <HAL_DMA_IRQHandler+0x6c8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_DMA_IRQHandler+0x678>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a16      	ldr	r2, [pc, #88]	; (80064bc <HAL_DMA_IRQHandler+0x6cc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d12b      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x6d0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	bf14      	ite	ne
 8006476:	2301      	movne	r3, #1
 8006478:	2300      	moveq	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	e02a      	b.n	80064d4 <HAL_DMA_IRQHandler+0x6e4>
 800647e:	bf00      	nop
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8087 	beq.w	80065e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2220      	movs	r2, #32
 80064e4:	409a      	lsls	r2, r3
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d139      	bne.n	800656a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0216 	bic.w	r2, r2, #22
 8006504:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006514:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_DMA_IRQHandler+0x736>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0208 	bic.w	r2, r2, #8
 8006534:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	223f      	movs	r2, #63	; 0x3f
 8006540:	409a      	lsls	r2, r3
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 834a 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
          }
          return;
 8006568:	e344      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02c      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
 8006596:	e027      	b.n	80065e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d023      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
 80065a8:	e01e      	b.n	80065e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0210 	bic.w	r2, r2, #16
 80065c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8306 	beq.w	8006bfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8088 	beq.w	8006710 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2204      	movs	r2, #4
 8006604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a7a      	ldr	r2, [pc, #488]	; (80067f8 <HAL_DMA_IRQHandler+0xa08>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d04a      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a79      	ldr	r2, [pc, #484]	; (80067fc <HAL_DMA_IRQHandler+0xa0c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d045      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a77      	ldr	r2, [pc, #476]	; (8006800 <HAL_DMA_IRQHandler+0xa10>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d040      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a76      	ldr	r2, [pc, #472]	; (8006804 <HAL_DMA_IRQHandler+0xa14>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d03b      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a74      	ldr	r2, [pc, #464]	; (8006808 <HAL_DMA_IRQHandler+0xa18>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d036      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a73      	ldr	r2, [pc, #460]	; (800680c <HAL_DMA_IRQHandler+0xa1c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d031      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a71      	ldr	r2, [pc, #452]	; (8006810 <HAL_DMA_IRQHandler+0xa20>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d02c      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a70      	ldr	r2, [pc, #448]	; (8006814 <HAL_DMA_IRQHandler+0xa24>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d027      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a6e      	ldr	r2, [pc, #440]	; (8006818 <HAL_DMA_IRQHandler+0xa28>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d022      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6d      	ldr	r2, [pc, #436]	; (800681c <HAL_DMA_IRQHandler+0xa2c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d01d      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a6b      	ldr	r2, [pc, #428]	; (8006820 <HAL_DMA_IRQHandler+0xa30>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d018      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a6a      	ldr	r2, [pc, #424]	; (8006824 <HAL_DMA_IRQHandler+0xa34>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d013      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a68      	ldr	r2, [pc, #416]	; (8006828 <HAL_DMA_IRQHandler+0xa38>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00e      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a67      	ldr	r2, [pc, #412]	; (800682c <HAL_DMA_IRQHandler+0xa3c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a65      	ldr	r2, [pc, #404]	; (8006830 <HAL_DMA_IRQHandler+0xa40>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x8b8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a64      	ldr	r2, [pc, #400]	; (8006834 <HAL_DMA_IRQHandler+0xa44>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d108      	bne.n	80066ba <HAL_DMA_IRQHandler+0x8ca>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e007      	b.n	80066ca <HAL_DMA_IRQHandler+0x8da>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0201 	bic.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d307      	bcc.n	80066e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f2      	bne.n	80066ca <HAL_DMA_IRQHandler+0x8da>
 80066e4:	e000      	b.n	80066e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2203      	movs	r2, #3
 80066fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066fe:	e003      	b.n	8006708 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8272 	beq.w	8006bfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
 8006722:	e26c      	b.n	8006bfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a43      	ldr	r2, [pc, #268]	; (8006838 <HAL_DMA_IRQHandler+0xa48>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a42      	ldr	r2, [pc, #264]	; (800683c <HAL_DMA_IRQHandler+0xa4c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a40      	ldr	r2, [pc, #256]	; (8006840 <HAL_DMA_IRQHandler+0xa50>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a3f      	ldr	r2, [pc, #252]	; (8006844 <HAL_DMA_IRQHandler+0xa54>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a3d      	ldr	r2, [pc, #244]	; (8006848 <HAL_DMA_IRQHandler+0xa58>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a3c      	ldr	r2, [pc, #240]	; (800684c <HAL_DMA_IRQHandler+0xa5c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a3a      	ldr	r2, [pc, #232]	; (8006850 <HAL_DMA_IRQHandler+0xa60>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_DMA_IRQHandler+0x984>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a39      	ldr	r2, [pc, #228]	; (8006854 <HAL_DMA_IRQHandler+0xa64>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_DMA_IRQHandler+0x988>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_DMA_IRQHandler+0x98a>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 823f 	beq.w	8006bfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678c:	f003 031f 	and.w	r3, r3, #31
 8006790:	2204      	movs	r2, #4
 8006792:	409a      	lsls	r2, r3
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80cd 	beq.w	8006938 <HAL_DMA_IRQHandler+0xb48>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 80c7 	beq.w	8006938 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2204      	movs	r2, #4
 80067b4:	409a      	lsls	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d049      	beq.n	8006858 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8210 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067e0:	e20a      	b.n	8006bf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8206 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067f4:	e200      	b.n	8006bf8 <HAL_DMA_IRQHandler+0xe08>
 80067f6:	bf00      	nop
 80067f8:	40020010 	.word	0x40020010
 80067fc:	40020028 	.word	0x40020028
 8006800:	40020040 	.word	0x40020040
 8006804:	40020058 	.word	0x40020058
 8006808:	40020070 	.word	0x40020070
 800680c:	40020088 	.word	0x40020088
 8006810:	400200a0 	.word	0x400200a0
 8006814:	400200b8 	.word	0x400200b8
 8006818:	40020410 	.word	0x40020410
 800681c:	40020428 	.word	0x40020428
 8006820:	40020440 	.word	0x40020440
 8006824:	40020458 	.word	0x40020458
 8006828:	40020470 	.word	0x40020470
 800682c:	40020488 	.word	0x40020488
 8006830:	400204a0 	.word	0x400204a0
 8006834:	400204b8 	.word	0x400204b8
 8006838:	58025408 	.word	0x58025408
 800683c:	5802541c 	.word	0x5802541c
 8006840:	58025430 	.word	0x58025430
 8006844:	58025444 	.word	0x58025444
 8006848:	58025458 	.word	0x58025458
 800684c:	5802546c 	.word	0x5802546c
 8006850:	58025480 	.word	0x58025480
 8006854:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d160      	bne.n	8006924 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a7f      	ldr	r2, [pc, #508]	; (8006a64 <HAL_DMA_IRQHandler+0xc74>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d04a      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a7d      	ldr	r2, [pc, #500]	; (8006a68 <HAL_DMA_IRQHandler+0xc78>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d045      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7c      	ldr	r2, [pc, #496]	; (8006a6c <HAL_DMA_IRQHandler+0xc7c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d040      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7a      	ldr	r2, [pc, #488]	; (8006a70 <HAL_DMA_IRQHandler+0xc80>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d03b      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a79      	ldr	r2, [pc, #484]	; (8006a74 <HAL_DMA_IRQHandler+0xc84>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d036      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a77      	ldr	r2, [pc, #476]	; (8006a78 <HAL_DMA_IRQHandler+0xc88>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d031      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a76      	ldr	r2, [pc, #472]	; (8006a7c <HAL_DMA_IRQHandler+0xc8c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d02c      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a74      	ldr	r2, [pc, #464]	; (8006a80 <HAL_DMA_IRQHandler+0xc90>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d027      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <HAL_DMA_IRQHandler+0xc94>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <HAL_DMA_IRQHandler+0xc98>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01d      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a70      	ldr	r2, [pc, #448]	; (8006a8c <HAL_DMA_IRQHandler+0xc9c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a6e      	ldr	r2, [pc, #440]	; (8006a90 <HAL_DMA_IRQHandler+0xca0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a6d      	ldr	r2, [pc, #436]	; (8006a94 <HAL_DMA_IRQHandler+0xca4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a6b      	ldr	r2, [pc, #428]	; (8006a98 <HAL_DMA_IRQHandler+0xca8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a6a      	ldr	r2, [pc, #424]	; (8006a9c <HAL_DMA_IRQHandler+0xcac>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_DMA_IRQHandler+0xb12>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a68      	ldr	r2, [pc, #416]	; (8006aa0 <HAL_DMA_IRQHandler+0xcb0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d108      	bne.n	8006914 <HAL_DMA_IRQHandler+0xb24>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0208 	bic.w	r2, r2, #8
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e007      	b.n	8006924 <HAL_DMA_IRQHandler+0xb34>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8165 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006936:	e15f      	b.n	8006bf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	2202      	movs	r2, #2
 8006942:	409a      	lsls	r2, r3
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80c5 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xce8>
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80bf 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	2202      	movs	r2, #2
 8006964:	409a      	lsls	r2, r3
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d018      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 813a 	beq.w	8006bfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006990:	e134      	b.n	8006bfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8130 	beq.w	8006bfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a4:	e12a      	b.n	8006bfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8089 	bne.w	8006ac4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2b      	ldr	r2, [pc, #172]	; (8006a64 <HAL_DMA_IRQHandler+0xc74>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d04a      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <HAL_DMA_IRQHandler+0xc78>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d045      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <HAL_DMA_IRQHandler+0xc7c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d040      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <HAL_DMA_IRQHandler+0xc80>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d03b      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <HAL_DMA_IRQHandler+0xc84>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d036      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <HAL_DMA_IRQHandler+0xc88>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d031      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a22      	ldr	r2, [pc, #136]	; (8006a7c <HAL_DMA_IRQHandler+0xc8c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d02c      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <HAL_DMA_IRQHandler+0xc90>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d027      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <HAL_DMA_IRQHandler+0xc94>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <HAL_DMA_IRQHandler+0xc98>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01d      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <HAL_DMA_IRQHandler+0xc9c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <HAL_DMA_IRQHandler+0xca0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <HAL_DMA_IRQHandler+0xca4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_DMA_IRQHandler+0xca8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <HAL_DMA_IRQHandler+0xcac>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xc62>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <HAL_DMA_IRQHandler+0xcb0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d128      	bne.n	8006aa4 <HAL_DMA_IRQHandler+0xcb4>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0214 	bic.w	r2, r2, #20
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e027      	b.n	8006ab4 <HAL_DMA_IRQHandler+0xcc4>
 8006a64:	40020010 	.word	0x40020010
 8006a68:	40020028 	.word	0x40020028
 8006a6c:	40020040 	.word	0x40020040
 8006a70:	40020058 	.word	0x40020058
 8006a74:	40020070 	.word	0x40020070
 8006a78:	40020088 	.word	0x40020088
 8006a7c:	400200a0 	.word	0x400200a0
 8006a80:	400200b8 	.word	0x400200b8
 8006a84:	40020410 	.word	0x40020410
 8006a88:	40020428 	.word	0x40020428
 8006a8c:	40020440 	.word	0x40020440
 8006a90:	40020458 	.word	0x40020458
 8006a94:	40020470 	.word	0x40020470
 8006a98:	40020488 	.word	0x40020488
 8006a9c:	400204a0 	.word	0x400204a0
 8006aa0:	400204b8 	.word	0x400204b8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 020a 	bic.w	r2, r2, #10
 8006ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8097 	beq.w	8006bfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad6:	e091      	b.n	8006bfc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8088 	beq.w	8006bfe <HAL_DMA_IRQHandler+0xe0e>
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8082 	beq.w	8006bfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a41      	ldr	r2, [pc, #260]	; (8006c04 <HAL_DMA_IRQHandler+0xe14>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04a      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a3f      	ldr	r2, [pc, #252]	; (8006c08 <HAL_DMA_IRQHandler+0xe18>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d045      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a3e      	ldr	r2, [pc, #248]	; (8006c0c <HAL_DMA_IRQHandler+0xe1c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d040      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a3c      	ldr	r2, [pc, #240]	; (8006c10 <HAL_DMA_IRQHandler+0xe20>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d03b      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a3b      	ldr	r2, [pc, #236]	; (8006c14 <HAL_DMA_IRQHandler+0xe24>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d036      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a39      	ldr	r2, [pc, #228]	; (8006c18 <HAL_DMA_IRQHandler+0xe28>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d031      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a38      	ldr	r2, [pc, #224]	; (8006c1c <HAL_DMA_IRQHandler+0xe2c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d02c      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a36      	ldr	r2, [pc, #216]	; (8006c20 <HAL_DMA_IRQHandler+0xe30>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d027      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a35      	ldr	r2, [pc, #212]	; (8006c24 <HAL_DMA_IRQHandler+0xe34>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d022      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a33      	ldr	r2, [pc, #204]	; (8006c28 <HAL_DMA_IRQHandler+0xe38>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01d      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a32      	ldr	r2, [pc, #200]	; (8006c2c <HAL_DMA_IRQHandler+0xe3c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a30      	ldr	r2, [pc, #192]	; (8006c30 <HAL_DMA_IRQHandler+0xe40>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a2f      	ldr	r2, [pc, #188]	; (8006c34 <HAL_DMA_IRQHandler+0xe44>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2d      	ldr	r2, [pc, #180]	; (8006c38 <HAL_DMA_IRQHandler+0xe48>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2c      	ldr	r2, [pc, #176]	; (8006c3c <HAL_DMA_IRQHandler+0xe4c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xdaa>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <HAL_DMA_IRQHandler+0xe50>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <HAL_DMA_IRQHandler+0xdbc>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 021c 	bic.w	r2, r2, #28
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e007      	b.n	8006bbc <HAL_DMA_IRQHandler+0xdcc>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 020e 	bic.w	r2, r2, #14
 8006bba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
 8006bf2:	e004      	b.n	8006bfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bf4:	bf00      	nop
 8006bf6:	e002      	b.n	8006bfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bfe:	3728      	adds	r7, #40	; 0x28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40020010 	.word	0x40020010
 8006c08:	40020028 	.word	0x40020028
 8006c0c:	40020040 	.word	0x40020040
 8006c10:	40020058 	.word	0x40020058
 8006c14:	40020070 	.word	0x40020070
 8006c18:	40020088 	.word	0x40020088
 8006c1c:	400200a0 	.word	0x400200a0
 8006c20:	400200b8 	.word	0x400200b8
 8006c24:	40020410 	.word	0x40020410
 8006c28:	40020428 	.word	0x40020428
 8006c2c:	40020440 	.word	0x40020440
 8006c30:	40020458 	.word	0x40020458
 8006c34:	40020470 	.word	0x40020470
 8006c38:	40020488 	.word	0x40020488
 8006c3c:	400204a0 	.word	0x400204a0
 8006c40:	400204b8 	.word	0x400204b8

08006c44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c56:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a7f      	ldr	r2, [pc, #508]	; (8006e60 <DMA_SetConfig+0x21c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d072      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a7d      	ldr	r2, [pc, #500]	; (8006e64 <DMA_SetConfig+0x220>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d06d      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a7c      	ldr	r2, [pc, #496]	; (8006e68 <DMA_SetConfig+0x224>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d068      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a7a      	ldr	r2, [pc, #488]	; (8006e6c <DMA_SetConfig+0x228>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d063      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a79      	ldr	r2, [pc, #484]	; (8006e70 <DMA_SetConfig+0x22c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d05e      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a77      	ldr	r2, [pc, #476]	; (8006e74 <DMA_SetConfig+0x230>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d059      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a76      	ldr	r2, [pc, #472]	; (8006e78 <DMA_SetConfig+0x234>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d054      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a74      	ldr	r2, [pc, #464]	; (8006e7c <DMA_SetConfig+0x238>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d04f      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a73      	ldr	r2, [pc, #460]	; (8006e80 <DMA_SetConfig+0x23c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d04a      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a71      	ldr	r2, [pc, #452]	; (8006e84 <DMA_SetConfig+0x240>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d045      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a70      	ldr	r2, [pc, #448]	; (8006e88 <DMA_SetConfig+0x244>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d040      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a6e      	ldr	r2, [pc, #440]	; (8006e8c <DMA_SetConfig+0x248>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d03b      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a6d      	ldr	r2, [pc, #436]	; (8006e90 <DMA_SetConfig+0x24c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d036      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6b      	ldr	r2, [pc, #428]	; (8006e94 <DMA_SetConfig+0x250>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d031      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6a      	ldr	r2, [pc, #424]	; (8006e98 <DMA_SetConfig+0x254>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d02c      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a68      	ldr	r2, [pc, #416]	; (8006e9c <DMA_SetConfig+0x258>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d027      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a67      	ldr	r2, [pc, #412]	; (8006ea0 <DMA_SetConfig+0x25c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a65      	ldr	r2, [pc, #404]	; (8006ea4 <DMA_SetConfig+0x260>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a64      	ldr	r2, [pc, #400]	; (8006ea8 <DMA_SetConfig+0x264>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a62      	ldr	r2, [pc, #392]	; (8006eac <DMA_SetConfig+0x268>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a61      	ldr	r2, [pc, #388]	; (8006eb0 <DMA_SetConfig+0x26c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a5f      	ldr	r2, [pc, #380]	; (8006eb4 <DMA_SetConfig+0x270>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a5e      	ldr	r2, [pc, #376]	; (8006eb8 <DMA_SetConfig+0x274>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <DMA_SetConfig+0x10a>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5c      	ldr	r2, [pc, #368]	; (8006ebc <DMA_SetConfig+0x278>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <DMA_SetConfig+0x10e>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <DMA_SetConfig+0x110>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d60:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d72:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a39      	ldr	r2, [pc, #228]	; (8006e60 <DMA_SetConfig+0x21c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d04a      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a38      	ldr	r2, [pc, #224]	; (8006e64 <DMA_SetConfig+0x220>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d045      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a36      	ldr	r2, [pc, #216]	; (8006e68 <DMA_SetConfig+0x224>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d040      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a35      	ldr	r2, [pc, #212]	; (8006e6c <DMA_SetConfig+0x228>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d03b      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a33      	ldr	r2, [pc, #204]	; (8006e70 <DMA_SetConfig+0x22c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d036      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a32      	ldr	r2, [pc, #200]	; (8006e74 <DMA_SetConfig+0x230>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d031      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a30      	ldr	r2, [pc, #192]	; (8006e78 <DMA_SetConfig+0x234>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d02c      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <DMA_SetConfig+0x238>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d027      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a2d      	ldr	r2, [pc, #180]	; (8006e80 <DMA_SetConfig+0x23c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d022      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a2c      	ldr	r2, [pc, #176]	; (8006e84 <DMA_SetConfig+0x240>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d01d      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <DMA_SetConfig+0x244>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d018      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <DMA_SetConfig+0x248>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a27      	ldr	r2, [pc, #156]	; (8006e90 <DMA_SetConfig+0x24c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a26      	ldr	r2, [pc, #152]	; (8006e94 <DMA_SetConfig+0x250>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <DMA_SetConfig+0x254>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <DMA_SetConfig+0x1d0>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <DMA_SetConfig+0x258>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d101      	bne.n	8006e18 <DMA_SetConfig+0x1d4>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <DMA_SetConfig+0x1d6>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d059      	beq.n	8006ed2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	223f      	movs	r2, #63	; 0x3f
 8006e28:	409a      	lsls	r2, r3
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e3c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d138      	bne.n	8006ec0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e5e:	e086      	b.n	8006f6e <DMA_SetConfig+0x32a>
 8006e60:	40020010 	.word	0x40020010
 8006e64:	40020028 	.word	0x40020028
 8006e68:	40020040 	.word	0x40020040
 8006e6c:	40020058 	.word	0x40020058
 8006e70:	40020070 	.word	0x40020070
 8006e74:	40020088 	.word	0x40020088
 8006e78:	400200a0 	.word	0x400200a0
 8006e7c:	400200b8 	.word	0x400200b8
 8006e80:	40020410 	.word	0x40020410
 8006e84:	40020428 	.word	0x40020428
 8006e88:	40020440 	.word	0x40020440
 8006e8c:	40020458 	.word	0x40020458
 8006e90:	40020470 	.word	0x40020470
 8006e94:	40020488 	.word	0x40020488
 8006e98:	400204a0 	.word	0x400204a0
 8006e9c:	400204b8 	.word	0x400204b8
 8006ea0:	58025408 	.word	0x58025408
 8006ea4:	5802541c 	.word	0x5802541c
 8006ea8:	58025430 	.word	0x58025430
 8006eac:	58025444 	.word	0x58025444
 8006eb0:	58025458 	.word	0x58025458
 8006eb4:	5802546c 	.word	0x5802546c
 8006eb8:	58025480 	.word	0x58025480
 8006ebc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]
}
 8006ed0:	e04d      	b.n	8006f6e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <DMA_SetConfig+0x338>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d022      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <DMA_SetConfig+0x33c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01d      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <DMA_SetConfig+0x340>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d018      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a24      	ldr	r2, [pc, #144]	; (8006f88 <DMA_SetConfig+0x344>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d013      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a23      	ldr	r2, [pc, #140]	; (8006f8c <DMA_SetConfig+0x348>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <DMA_SetConfig+0x34c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d009      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a20      	ldr	r2, [pc, #128]	; (8006f94 <DMA_SetConfig+0x350>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d004      	beq.n	8006f22 <DMA_SetConfig+0x2de>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <DMA_SetConfig+0x354>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d101      	bne.n	8006f26 <DMA_SetConfig+0x2e2>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <DMA_SetConfig+0x2e4>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d020      	beq.n	8006f6e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2201      	movs	r2, #1
 8006f36:	409a      	lsls	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d108      	bne.n	8006f5e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	60da      	str	r2, [r3, #12]
}
 8006f5c:	e007      	b.n	8006f6e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	60da      	str	r2, [r3, #12]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	58025408 	.word	0x58025408
 8006f80:	5802541c 	.word	0x5802541c
 8006f84:	58025430 	.word	0x58025430
 8006f88:	58025444 	.word	0x58025444
 8006f8c:	58025458 	.word	0x58025458
 8006f90:	5802546c 	.word	0x5802546c
 8006f94:	58025480 	.word	0x58025480
 8006f98:	58025494 	.word	0x58025494

08006f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a42      	ldr	r2, [pc, #264]	; (80070b4 <DMA_CalcBaseAndBitshift+0x118>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d04a      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a41      	ldr	r2, [pc, #260]	; (80070b8 <DMA_CalcBaseAndBitshift+0x11c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d045      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a3f      	ldr	r2, [pc, #252]	; (80070bc <DMA_CalcBaseAndBitshift+0x120>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d040      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a3e      	ldr	r2, [pc, #248]	; (80070c0 <DMA_CalcBaseAndBitshift+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d03b      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a3c      	ldr	r2, [pc, #240]	; (80070c4 <DMA_CalcBaseAndBitshift+0x128>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d036      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3b      	ldr	r2, [pc, #236]	; (80070c8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d031      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a39      	ldr	r2, [pc, #228]	; (80070cc <DMA_CalcBaseAndBitshift+0x130>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d02c      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a38      	ldr	r2, [pc, #224]	; (80070d0 <DMA_CalcBaseAndBitshift+0x134>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d027      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a36      	ldr	r2, [pc, #216]	; (80070d4 <DMA_CalcBaseAndBitshift+0x138>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d022      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a35      	ldr	r2, [pc, #212]	; (80070d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d01d      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <DMA_CalcBaseAndBitshift+0x140>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d018      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <DMA_CalcBaseAndBitshift+0x144>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a30      	ldr	r2, [pc, #192]	; (80070e4 <DMA_CalcBaseAndBitshift+0x148>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00e      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2f      	ldr	r2, [pc, #188]	; (80070e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d009      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2d      	ldr	r2, [pc, #180]	; (80070ec <DMA_CalcBaseAndBitshift+0x150>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d004      	beq.n	8007044 <DMA_CalcBaseAndBitshift+0xa8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <DMA_CalcBaseAndBitshift+0x154>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d101      	bne.n	8007048 <DMA_CalcBaseAndBitshift+0xac>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <DMA_CalcBaseAndBitshift+0xae>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d024      	beq.n	8007098 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	3b10      	subs	r3, #16
 8007056:	4a27      	ldr	r2, [pc, #156]	; (80070f4 <DMA_CalcBaseAndBitshift+0x158>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	4a24      	ldr	r2, [pc, #144]	; (80070f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007068:	5cd3      	ldrb	r3, [r2, r3]
 800706a:	461a      	mov	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b03      	cmp	r3, #3
 8007074:	d908      	bls.n	8007088 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <DMA_CalcBaseAndBitshift+0x160>)
 800707e:	4013      	ands	r3, r2
 8007080:	1d1a      	adds	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	659a      	str	r2, [r3, #88]	; 0x58
 8007086:	e00d      	b.n	80070a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <DMA_CalcBaseAndBitshift+0x160>)
 8007090:	4013      	ands	r3, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6593      	str	r3, [r2, #88]	; 0x58
 8007096:	e005      	b.n	80070a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40020010 	.word	0x40020010
 80070b8:	40020028 	.word	0x40020028
 80070bc:	40020040 	.word	0x40020040
 80070c0:	40020058 	.word	0x40020058
 80070c4:	40020070 	.word	0x40020070
 80070c8:	40020088 	.word	0x40020088
 80070cc:	400200a0 	.word	0x400200a0
 80070d0:	400200b8 	.word	0x400200b8
 80070d4:	40020410 	.word	0x40020410
 80070d8:	40020428 	.word	0x40020428
 80070dc:	40020440 	.word	0x40020440
 80070e0:	40020458 	.word	0x40020458
 80070e4:	40020470 	.word	0x40020470
 80070e8:	40020488 	.word	0x40020488
 80070ec:	400204a0 	.word	0x400204a0
 80070f0:	400204b8 	.word	0x400204b8
 80070f4:	aaaaaaab 	.word	0xaaaaaaab
 80070f8:	080104e8 	.word	0x080104e8
 80070fc:	fffffc00 	.word	0xfffffc00

08007100 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d120      	bne.n	8007156 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	2b03      	cmp	r3, #3
 800711a:	d858      	bhi.n	80071ce <DMA_CheckFifoParam+0xce>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <DMA_CheckFifoParam+0x24>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007135 	.word	0x08007135
 8007128:	08007147 	.word	0x08007147
 800712c:	08007135 	.word	0x08007135
 8007130:	080071cf 	.word	0x080071cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d048      	beq.n	80071d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007144:	e045      	b.n	80071d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800714e:	d142      	bne.n	80071d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007154:	e03f      	b.n	80071d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715e:	d123      	bne.n	80071a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	2b03      	cmp	r3, #3
 8007166:	d838      	bhi.n	80071da <DMA_CheckFifoParam+0xda>
 8007168:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <DMA_CheckFifoParam+0x70>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	08007181 	.word	0x08007181
 8007174:	08007187 	.word	0x08007187
 8007178:	08007181 	.word	0x08007181
 800717c:	08007199 	.word	0x08007199
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
        break;
 8007184:	e030      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d025      	beq.n	80071de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007196:	e022      	b.n	80071de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071a0:	d11f      	bne.n	80071e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071a6:	e01c      	b.n	80071e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d902      	bls.n	80071b6 <DMA_CheckFifoParam+0xb6>
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d003      	beq.n	80071bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80071b4:	e018      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	73fb      	strb	r3, [r7, #15]
        break;
 80071ba:	e015      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00e      	beq.n	80071e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
    break;
 80071cc:	e00b      	b.n	80071e6 <DMA_CheckFifoParam+0xe6>
        break;
 80071ce:	bf00      	nop
 80071d0:	e00a      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        break;
 80071d2:	bf00      	nop
 80071d4:	e008      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        break;
 80071d6:	bf00      	nop
 80071d8:	e006      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        break;
 80071da:	bf00      	nop
 80071dc:	e004      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        break;
 80071de:	bf00      	nop
 80071e0:	e002      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
        break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <DMA_CheckFifoParam+0xe8>
    break;
 80071e6:	bf00      	nop
    }
  }

  return status;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop

080071f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a38      	ldr	r2, [pc, #224]	; (80072ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d022      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a36      	ldr	r2, [pc, #216]	; (80072f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a35      	ldr	r2, [pc, #212]	; (80072f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d018      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a33      	ldr	r2, [pc, #204]	; (80072f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a32      	ldr	r2, [pc, #200]	; (80072fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a30      	ldr	r2, [pc, #192]	; (8007300 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a2d      	ldr	r2, [pc, #180]	; (8007308 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d101      	bne.n	800725a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01a      	beq.n	8007296 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	3b08      	subs	r3, #8
 8007268:	4a28      	ldr	r2, [pc, #160]	; (800730c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800726a:	fba2 2303 	umull	r2, r3, r2, r3
 800726e:	091b      	lsrs	r3, r3, #4
 8007270:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4b26      	ldr	r3, [pc, #152]	; (8007310 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a24      	ldr	r2, [pc, #144]	; (8007314 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007284:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007294:	e024      	b.n	80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	3b10      	subs	r3, #16
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	091b      	lsrs	r3, r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4a1c      	ldr	r2, [pc, #112]	; (800731c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d806      	bhi.n	80072be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d902      	bls.n	80072be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3308      	adds	r3, #8
 80072bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4b18      	ldr	r3, [pc, #96]	; (8007324 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a16      	ldr	r2, [pc, #88]	; (8007328 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80072d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2201      	movs	r2, #1
 80072da:	409a      	lsls	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	58025408 	.word	0x58025408
 80072f0:	5802541c 	.word	0x5802541c
 80072f4:	58025430 	.word	0x58025430
 80072f8:	58025444 	.word	0x58025444
 80072fc:	58025458 	.word	0x58025458
 8007300:	5802546c 	.word	0x5802546c
 8007304:	58025480 	.word	0x58025480
 8007308:	58025494 	.word	0x58025494
 800730c:	cccccccd 	.word	0xcccccccd
 8007310:	16009600 	.word	0x16009600
 8007314:	58025880 	.word	0x58025880
 8007318:	aaaaaaab 	.word	0xaaaaaaab
 800731c:	400204b8 	.word	0x400204b8
 8007320:	4002040f 	.word	0x4002040f
 8007324:	10008200 	.word	0x10008200
 8007328:	40020880 	.word	0x40020880

0800732c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d04a      	beq.n	80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b08      	cmp	r3, #8
 8007346:	d847      	bhi.n	80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a25      	ldr	r2, [pc, #148]	; (80073e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d022      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a24      	ldr	r2, [pc, #144]	; (80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d01d      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a22      	ldr	r2, [pc, #136]	; (80073ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d018      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a21      	ldr	r2, [pc, #132]	; (80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d013      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00e      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4b17      	ldr	r3, [pc, #92]	; (8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80073b4:	671a      	str	r2, [r3, #112]	; 0x70
 80073b6:	e009      	b.n	80073cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a11      	ldr	r2, [pc, #68]	; (8007410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80073ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	2201      	movs	r2, #1
 80073d2:	409a      	lsls	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	58025408 	.word	0x58025408
 80073e8:	5802541c 	.word	0x5802541c
 80073ec:	58025430 	.word	0x58025430
 80073f0:	58025444 	.word	0x58025444
 80073f4:	58025458 	.word	0x58025458
 80073f8:	5802546c 	.word	0x5802546c
 80073fc:	58025480 	.word	0x58025480
 8007400:	58025494 	.word	0x58025494
 8007404:	1600963f 	.word	0x1600963f
 8007408:	58025940 	.word	0x58025940
 800740c:	1000823f 	.word	0x1000823f
 8007410:	40020940 	.word	0x40020940

08007414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800741e:	2300      	movs	r3, #0
 8007420:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007422:	4b89      	ldr	r3, [pc, #548]	; (8007648 <HAL_GPIO_Init+0x234>)
 8007424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007426:	e194      	b.n	8007752 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	2101      	movs	r1, #1
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	4013      	ands	r3, r2
 8007436:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8186 	beq.w	800774c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	2b01      	cmp	r3, #1
 800744a:	d005      	beq.n	8007458 <HAL_GPIO_Init+0x44>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d130      	bne.n	80074ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	2203      	movs	r2, #3
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4013      	ands	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4313      	orrs	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800748e:	2201      	movs	r2, #1
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43db      	mvns	r3, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4013      	ands	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 0201 	and.w	r2, r3, #1
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d017      	beq.n	80074f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	2203      	movs	r2, #3
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4013      	ands	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d123      	bne.n	800754a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	08da      	lsrs	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3208      	adds	r2, #8
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	220f      	movs	r2, #15
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4013      	ands	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	4313      	orrs	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	08da      	lsrs	r2, r3, #3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3208      	adds	r2, #8
 8007544:	69b9      	ldr	r1, [r7, #24]
 8007546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	2203      	movs	r2, #3
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	43db      	mvns	r3, r3
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	4013      	ands	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 0203 	and.w	r2, r3, #3
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80e0 	beq.w	800774c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800758c:	4b2f      	ldr	r3, [pc, #188]	; (800764c <HAL_GPIO_Init+0x238>)
 800758e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007592:	4a2e      	ldr	r2, [pc, #184]	; (800764c <HAL_GPIO_Init+0x238>)
 8007594:	f043 0302 	orr.w	r3, r3, #2
 8007598:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800759c:	4b2b      	ldr	r3, [pc, #172]	; (800764c <HAL_GPIO_Init+0x238>)
 800759e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075aa:	4a29      	ldr	r2, [pc, #164]	; (8007650 <HAL_GPIO_Init+0x23c>)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	089b      	lsrs	r3, r3, #2
 80075b0:	3302      	adds	r3, #2
 80075b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	220f      	movs	r2, #15
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4013      	ands	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a20      	ldr	r2, [pc, #128]	; (8007654 <HAL_GPIO_Init+0x240>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d052      	beq.n	800767c <HAL_GPIO_Init+0x268>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1f      	ldr	r2, [pc, #124]	; (8007658 <HAL_GPIO_Init+0x244>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d031      	beq.n	8007642 <HAL_GPIO_Init+0x22e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1e      	ldr	r2, [pc, #120]	; (800765c <HAL_GPIO_Init+0x248>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d02b      	beq.n	800763e <HAL_GPIO_Init+0x22a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <HAL_GPIO_Init+0x24c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d025      	beq.n	800763a <HAL_GPIO_Init+0x226>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <HAL_GPIO_Init+0x250>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01f      	beq.n	8007636 <HAL_GPIO_Init+0x222>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <HAL_GPIO_Init+0x254>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d019      	beq.n	8007632 <HAL_GPIO_Init+0x21e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a1a      	ldr	r2, [pc, #104]	; (800766c <HAL_GPIO_Init+0x258>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <HAL_GPIO_Init+0x21a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a19      	ldr	r2, [pc, #100]	; (8007670 <HAL_GPIO_Init+0x25c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00d      	beq.n	800762a <HAL_GPIO_Init+0x216>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_GPIO_Init+0x260>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <HAL_GPIO_Init+0x212>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_GPIO_Init+0x264>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d101      	bne.n	8007622 <HAL_GPIO_Init+0x20e>
 800761e:	2309      	movs	r3, #9
 8007620:	e02d      	b.n	800767e <HAL_GPIO_Init+0x26a>
 8007622:	230a      	movs	r3, #10
 8007624:	e02b      	b.n	800767e <HAL_GPIO_Init+0x26a>
 8007626:	2308      	movs	r3, #8
 8007628:	e029      	b.n	800767e <HAL_GPIO_Init+0x26a>
 800762a:	2307      	movs	r3, #7
 800762c:	e027      	b.n	800767e <HAL_GPIO_Init+0x26a>
 800762e:	2306      	movs	r3, #6
 8007630:	e025      	b.n	800767e <HAL_GPIO_Init+0x26a>
 8007632:	2305      	movs	r3, #5
 8007634:	e023      	b.n	800767e <HAL_GPIO_Init+0x26a>
 8007636:	2304      	movs	r3, #4
 8007638:	e021      	b.n	800767e <HAL_GPIO_Init+0x26a>
 800763a:	2303      	movs	r3, #3
 800763c:	e01f      	b.n	800767e <HAL_GPIO_Init+0x26a>
 800763e:	2302      	movs	r3, #2
 8007640:	e01d      	b.n	800767e <HAL_GPIO_Init+0x26a>
 8007642:	2301      	movs	r3, #1
 8007644:	e01b      	b.n	800767e <HAL_GPIO_Init+0x26a>
 8007646:	bf00      	nop
 8007648:	58000080 	.word	0x58000080
 800764c:	58024400 	.word	0x58024400
 8007650:	58000400 	.word	0x58000400
 8007654:	58020000 	.word	0x58020000
 8007658:	58020400 	.word	0x58020400
 800765c:	58020800 	.word	0x58020800
 8007660:	58020c00 	.word	0x58020c00
 8007664:	58021000 	.word	0x58021000
 8007668:	58021400 	.word	0x58021400
 800766c:	58021800 	.word	0x58021800
 8007670:	58021c00 	.word	0x58021c00
 8007674:	58022000 	.word	0x58022000
 8007678:	58022400 	.word	0x58022400
 800767c:	2300      	movs	r3, #0
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	f002 0203 	and.w	r2, r2, #3
 8007684:	0092      	lsls	r2, r2, #2
 8007686:	4093      	lsls	r3, r2
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	4313      	orrs	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800768e:	4938      	ldr	r1, [pc, #224]	; (8007770 <HAL_GPIO_Init+0x35c>)
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	089b      	lsrs	r3, r3, #2
 8007694:	3302      	adds	r3, #2
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800769c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	43db      	mvns	r3, r3
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	4013      	ands	r3, r2
 8007706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	43db      	mvns	r3, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	4013      	ands	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	3301      	adds	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f ae63 	bne.w	8007428 <HAL_GPIO_Init+0x14>
  }
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	3724      	adds	r7, #36	; 0x24
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	58000400 	.word	0x58000400

08007774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	887b      	ldrh	r3, [r7, #2]
 8007786:	4013      	ands	r3, r2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
 8007790:	e001      	b.n	8007796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	807b      	strh	r3, [r7, #2]
 80077b0:	4613      	mov	r3, r2
 80077b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077b4:	787b      	ldrb	r3, [r7, #1]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077ba:	887a      	ldrh	r2, [r7, #2]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077c0:	e003      	b.n	80077ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077c2:	887b      	ldrh	r3, [r7, #2]
 80077c4:	041a      	lsls	r2, r3, #16
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	619a      	str	r2, [r3, #24]
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e07f      	b.n	80078ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fa fc60 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	; 0x24
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007828:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007838:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d107      	bne.n	8007852 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	e006      	b.n	8007860 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800785e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d104      	bne.n	8007872 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6859      	ldr	r1, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <HAL_I2C_Init+0x11c>)
 800787e:	430b      	orrs	r3, r1
 8007880:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007890:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	69d9      	ldr	r1, [r3, #28]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a1a      	ldr	r2, [r3, #32]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	02008000 	.word	0x02008000

080078f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	461a      	mov	r2, r3
 8007904:	460b      	mov	r3, r1
 8007906:	817b      	strh	r3, [r7, #10]
 8007908:	4613      	mov	r3, r2
 800790a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b20      	cmp	r3, #32
 8007916:	f040 80da 	bne.w	8007ace <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_I2C_Master_Transmit+0x30>
 8007924:	2302      	movs	r3, #2
 8007926:	e0d3      	b.n	8007ad0 <HAL_I2C_Master_Transmit+0x1d8>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007930:	f7fa fffe 	bl	8002930 <HAL_GetTick>
 8007934:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	2319      	movs	r3, #25
 800793c:	2201      	movs	r2, #1
 800793e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f9e6 	bl	8007d14 <I2C_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e0be      	b.n	8007ad0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2210      	movs	r2, #16
 800795e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	893a      	ldrh	r2, [r7, #8]
 8007972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797e:	b29b      	uxth	r3, r3
 8007980:	2bff      	cmp	r3, #255	; 0xff
 8007982:	d90e      	bls.n	80079a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	22ff      	movs	r2, #255	; 0xff
 8007988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798e:	b2da      	uxtb	r2, r3
 8007990:	8979      	ldrh	r1, [r7, #10]
 8007992:	4b51      	ldr	r3, [pc, #324]	; (8007ad8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fbdc 	bl	8008158 <I2C_TransferConfig>
 80079a0:	e06c      	b.n	8007a7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	8979      	ldrh	r1, [r7, #10]
 80079b4:	4b48      	ldr	r3, [pc, #288]	; (8007ad8 <HAL_I2C_Master_Transmit+0x1e0>)
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fbcb 	bl	8008158 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80079c2:	e05b      	b.n	8007a7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	6a39      	ldr	r1, [r7, #32]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f9e3 	bl	8007d94 <I2C_WaitOnTXISFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e07b      	b.n	8007ad0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d034      	beq.n	8007a7c <HAL_I2C_Master_Transmit+0x184>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d130      	bne.n	8007a7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f975 	bl	8007d14 <I2C_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e04d      	b.n	8007ad0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d90e      	bls.n	8007a5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22ff      	movs	r2, #255	; 0xff
 8007a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	8979      	ldrh	r1, [r7, #10]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fb7f 	bl	8008158 <I2C_TransferConfig>
 8007a5a:	e00f      	b.n	8007a7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	8979      	ldrh	r1, [r7, #10]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fb6e 	bl	8008158 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d19e      	bne.n	80079c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f9c2 	bl	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e01a      	b.n	8007ad0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6859      	ldr	r1, [r3, #4]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <HAL_I2C_Master_Transmit+0x1e4>)
 8007aae:	400b      	ands	r3, r1
 8007ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	80002000 	.word	0x80002000
 8007adc:	fe00e800 	.word	0xfe00e800

08007ae0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	461a      	mov	r2, r3
 8007aec:	460b      	mov	r3, r1
 8007aee:	817b      	strh	r3, [r7, #10]
 8007af0:	4613      	mov	r3, r2
 8007af2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	f040 80db 	bne.w	8007cb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_I2C_Master_Receive+0x30>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e0d4      	b.n	8007cba <HAL_I2C_Master_Receive+0x1da>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b18:	f7fa ff0a 	bl	8002930 <HAL_GetTick>
 8007b1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2319      	movs	r3, #25
 8007b24:	2201      	movs	r2, #1
 8007b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f8f2 	bl	8007d14 <I2C_WaitOnFlagUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e0bf      	b.n	8007cba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2222      	movs	r2, #34	; 0x22
 8007b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2210      	movs	r2, #16
 8007b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	893a      	ldrh	r2, [r7, #8]
 8007b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2bff      	cmp	r3, #255	; 0xff
 8007b6a:	d90e      	bls.n	8007b8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	22ff      	movs	r2, #255	; 0xff
 8007b70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	8979      	ldrh	r1, [r7, #10]
 8007b7a:	4b52      	ldr	r3, [pc, #328]	; (8007cc4 <HAL_I2C_Master_Receive+0x1e4>)
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fae8 	bl	8008158 <I2C_TransferConfig>
 8007b88:	e06d      	b.n	8007c66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	8979      	ldrh	r1, [r7, #10]
 8007b9c:	4b49      	ldr	r3, [pc, #292]	; (8007cc4 <HAL_I2C_Master_Receive+0x1e4>)
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fad7 	bl	8008158 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007baa:	e05c      	b.n	8007c66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	6a39      	ldr	r1, [r7, #32]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f96b 	bl	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e07c      	b.n	8007cba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d034      	beq.n	8007c66 <HAL_I2C_Master_Receive+0x186>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d130      	bne.n	8007c66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2180      	movs	r1, #128	; 0x80
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f880 	bl	8007d14 <I2C_WaitOnFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e04d      	b.n	8007cba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2bff      	cmp	r3, #255	; 0xff
 8007c26:	d90e      	bls.n	8007c46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	22ff      	movs	r2, #255	; 0xff
 8007c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	8979      	ldrh	r1, [r7, #10]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fa8a 	bl	8008158 <I2C_TransferConfig>
 8007c44:	e00f      	b.n	8007c66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	8979      	ldrh	r1, [r7, #10]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fa79 	bl	8008158 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d19d      	bne.n	8007bac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	6a39      	ldr	r1, [r7, #32]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f8cd 	bl	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e01a      	b.n	8007cba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6859      	ldr	r1, [r3, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_I2C_Master_Receive+0x1e8>)
 8007c98:	400b      	ands	r3, r1
 8007c9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e000      	b.n	8007cba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007cb8:	2302      	movs	r3, #2
  }
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	80002400 	.word	0x80002400
 8007cc8:	fe00e800 	.word	0xfe00e800

08007ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d007      	beq.n	8007d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	619a      	str	r2, [r3, #24]
  }
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d24:	e022      	b.n	8007d6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d2c:	d01e      	beq.n	8007d6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2e:	f7fa fdff 	bl	8002930 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d302      	bcc.n	8007d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d113      	bne.n	8007d6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d48:	f043 0220 	orr.w	r2, r3, #32
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e00f      	b.n	8007d8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4013      	ands	r3, r2
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d0cd      	beq.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007da0:	e02c      	b.n	8007dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 f8ea 	bl	8007f80 <I2C_IsErrorOccurred>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e02a      	b.n	8007e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dbc:	d01e      	beq.n	8007dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dbe:	f7fa fdb7 	bl	8002930 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d302      	bcc.n	8007dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d113      	bne.n	8007dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd8:	f043 0220 	orr.w	r2, r3, #32
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e007      	b.n	8007e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d1cb      	bne.n	8007da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e20:	e028      	b.n	8007e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f8aa 	bl	8007f80 <I2C_IsErrorOccurred>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e026      	b.n	8007e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e36:	f7fa fd7b 	bl	8002930 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d302      	bcc.n	8007e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d113      	bne.n	8007e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e007      	b.n	8007e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d1cf      	bne.n	8007e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e98:	e064      	b.n	8007f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f86e 	bl	8007f80 <I2C_IsErrorOccurred>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e062      	b.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d138      	bne.n	8007f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d105      	bne.n	8007ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e04e      	b.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d107      	bne.n	8007ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2210      	movs	r2, #16
 8007eea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	645a      	str	r2, [r3, #68]	; 0x44
 8007ef2:	e002      	b.n	8007efa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2220      	movs	r2, #32
 8007f00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6859      	ldr	r1, [r3, #4]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007f0e:	400b      	ands	r3, r1
 8007f10:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e022      	b.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f2e:	f7fa fcff 	bl	8002930 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d302      	bcc.n	8007f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10f      	bne.n	8007f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e007      	b.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d193      	bne.n	8007e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	fe00e800 	.word	0xfe00e800

08007f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d075      	beq.n	8008098 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2210      	movs	r2, #16
 8007fb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fb4:	e056      	b.n	8008064 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fbc:	d052      	beq.n	8008064 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fbe:	f7fa fcb7 	bl	8002930 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d302      	bcc.n	8007fd4 <I2C_IsErrorOccurred+0x54>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d147      	bne.n	8008064 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fe6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff6:	d12e      	bne.n	8008056 <I2C_IsErrorOccurred+0xd6>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ffe:	d02a      	beq.n	8008056 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008000:	7cfb      	ldrb	r3, [r7, #19]
 8008002:	2b20      	cmp	r3, #32
 8008004:	d027      	beq.n	8008056 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008014:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008016:	f7fa fc8b 	bl	8002930 <HAL_GetTick>
 800801a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800801c:	e01b      	b.n	8008056 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800801e:	f7fa fc87 	bl	8002930 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b19      	cmp	r3, #25
 800802a:	d914      	bls.n	8008056 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008030:	f043 0220 	orr.w	r2, r3, #32
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b20      	cmp	r3, #32
 8008062:	d1dc      	bne.n	800801e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b20      	cmp	r3, #32
 8008070:	d003      	beq.n	800807a <I2C_IsErrorOccurred+0xfa>
 8008072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008076:	2b00      	cmp	r3, #0
 8008078:	d09d      	beq.n	8007fb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800807a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2220      	movs	r2, #32
 8008088:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	f043 0304 	orr.w	r3, r3, #4
 8008090:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f043 0301 	orr.w	r3, r3, #1
 80080b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	f043 0308 	orr.w	r3, r3, #8
 80080d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f043 0302 	orr.w	r3, r3, #2
 80080f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800810a:	2b00      	cmp	r3, #0
 800810c:	d01c      	beq.n	8008148 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fddc 	bl	8007ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6859      	ldr	r1, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <I2C_IsErrorOccurred+0x1d4>)
 8008120:	400b      	ands	r3, r1
 8008122:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	431a      	orrs	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800814c:	4618      	mov	r0, r3
 800814e:	3728      	adds	r7, #40	; 0x28
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	fe00e800 	.word	0xfe00e800

08008158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	607b      	str	r3, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	817b      	strh	r3, [r7, #10]
 8008166:	4613      	mov	r3, r2
 8008168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800816a:	897b      	ldrh	r3, [r7, #10]
 800816c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008170:	7a7b      	ldrb	r3, [r7, #9]
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008178:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	4313      	orrs	r3, r2
 8008182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008186:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	0d5b      	lsrs	r3, r3, #21
 8008192:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008196:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <I2C_TransferConfig+0x60>)
 8008198:	430b      	orrs	r3, r1
 800819a:	43db      	mvns	r3, r3
 800819c:	ea02 0103 	and.w	r1, r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	03ff63ff 	.word	0x03ff63ff

080081bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d138      	bne.n	8008244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d101      	bne.n	80081e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081dc:	2302      	movs	r3, #2
 80081de:	e032      	b.n	8008246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2224      	movs	r2, #36	; 0x24
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800820e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6819      	ldr	r1, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e000      	b.n	8008246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b20      	cmp	r3, #32
 8008266:	d139      	bne.n	80082dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008272:	2302      	movs	r3, #2
 8008274:	e033      	b.n	80082de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2224      	movs	r2, #36	; 0x24
 8008282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	e000      	b.n	80082de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082dc:	2302      	movs	r3, #2
  }
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
	...

080082ec <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80082f8:	4b18      	ldr	r3, [pc, #96]	; (800835c <HAL_PWR_EnterSTOPMode+0x70>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f023 0201 	bic.w	r2, r3, #1
 8008300:	4916      	ldr	r1, [pc, #88]	; (800835c <HAL_PWR_EnterSTOPMode+0x70>)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4313      	orrs	r3, r2
 8008306:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008308:	4b14      	ldr	r3, [pc, #80]	; (800835c <HAL_PWR_EnterSTOPMode+0x70>)
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	4a13      	ldr	r2, [pc, #76]	; (800835c <HAL_PWR_EnterSTOPMode+0x70>)
 800830e:	f023 0305 	bic.w	r3, r3, #5
 8008312:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008314:	4b11      	ldr	r3, [pc, #68]	; (800835c <HAL_PWR_EnterSTOPMode+0x70>)
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	4a10      	ldr	r2, [pc, #64]	; (800835c <HAL_PWR_EnterSTOPMode+0x70>)
 800831a:	f023 0302 	bic.w	r3, r3, #2
 800831e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008320:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <HAL_PWR_EnterSTOPMode+0x74>)
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	4a0e      	ldr	r2, [pc, #56]	; (8008360 <HAL_PWR_EnterSTOPMode+0x74>)
 8008326:	f043 0304 	orr.w	r3, r3, #4
 800832a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800832c:	f3bf 8f4f 	dsb	sy
}
 8008330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008332:	f3bf 8f6f 	isb	sy
}
 8008336:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800833e:	bf30      	wfi
 8008340:	e000      	b.n	8008344 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008342:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <HAL_PWR_EnterSTOPMode+0x74>)
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	4a05      	ldr	r2, [pc, #20]	; (8008360 <HAL_PWR_EnterSTOPMode+0x74>)
 800834a:	f023 0304 	bic.w	r3, r3, #4
 800834e:	6113      	str	r3, [r2, #16]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	58024800 	.word	0x58024800
 8008360:	e000ed00 	.word	0xe000ed00

08008364 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800836c:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <HAL_PWREx_ConfigSupply+0x70>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b04      	cmp	r3, #4
 8008376:	d00a      	beq.n	800838e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008378:	4b16      	ldr	r3, [pc, #88]	; (80083d4 <HAL_PWREx_ConfigSupply+0x70>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d001      	beq.n	800838a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e01f      	b.n	80083ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	e01d      	b.n	80083ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800838e:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f023 0207 	bic.w	r2, r3, #7
 8008396:	490f      	ldr	r1, [pc, #60]	; (80083d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4313      	orrs	r3, r2
 800839c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800839e:	f7fa fac7 	bl	8002930 <HAL_GetTick>
 80083a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083a4:	e009      	b.n	80083ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083a6:	f7fa fac3 	bl	8002930 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083b4:	d901      	bls.n	80083ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e007      	b.n	80083ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083ba:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <HAL_PWREx_ConfigSupply+0x70>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c6:	d1ee      	bne.n	80083a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	58024800 	.word	0x58024800

080083d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08c      	sub	sp, #48	; 0x30
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f000 bc1d 	b.w	8008c26 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8087 	beq.w	8008508 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083fa:	4b99      	ldr	r3, [pc, #612]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008404:	4b96      	ldr	r3, [pc, #600]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	2b10      	cmp	r3, #16
 800840e:	d007      	beq.n	8008420 <HAL_RCC_OscConfig+0x48>
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	2b18      	cmp	r3, #24
 8008414:	d110      	bne.n	8008438 <HAL_RCC_OscConfig+0x60>
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d10b      	bne.n	8008438 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008420:	4b8f      	ldr	r3, [pc, #572]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d06c      	beq.n	8008506 <HAL_RCC_OscConfig+0x12e>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d168      	bne.n	8008506 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e3f6      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008440:	d106      	bne.n	8008450 <HAL_RCC_OscConfig+0x78>
 8008442:	4b87      	ldr	r3, [pc, #540]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a86      	ldr	r2, [pc, #536]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e02e      	b.n	80084ae <HAL_RCC_OscConfig+0xd6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10c      	bne.n	8008472 <HAL_RCC_OscConfig+0x9a>
 8008458:	4b81      	ldr	r3, [pc, #516]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a80      	ldr	r2, [pc, #512]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800845e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4b7e      	ldr	r3, [pc, #504]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a7d      	ldr	r2, [pc, #500]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800846a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e01d      	b.n	80084ae <HAL_RCC_OscConfig+0xd6>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800847a:	d10c      	bne.n	8008496 <HAL_RCC_OscConfig+0xbe>
 800847c:	4b78      	ldr	r3, [pc, #480]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a77      	ldr	r2, [pc, #476]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	4b75      	ldr	r3, [pc, #468]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a74      	ldr	r2, [pc, #464]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800848e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e00b      	b.n	80084ae <HAL_RCC_OscConfig+0xd6>
 8008496:	4b72      	ldr	r3, [pc, #456]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a71      	ldr	r2, [pc, #452]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800849c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	4b6f      	ldr	r3, [pc, #444]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a6e      	ldr	r2, [pc, #440]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80084a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d013      	beq.n	80084de <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b6:	f7fa fa3b 	bl	8002930 <HAL_GetTick>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084be:	f7fa fa37 	bl	8002930 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b64      	cmp	r3, #100	; 0x64
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e3aa      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084d0:	4b63      	ldr	r3, [pc, #396]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0xe6>
 80084dc:	e014      	b.n	8008508 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084de:	f7fa fa27 	bl	8002930 <HAL_GetTick>
 80084e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084e6:	f7fa fa23 	bl	8002930 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b64      	cmp	r3, #100	; 0x64
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e396      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084f8:	4b59      	ldr	r3, [pc, #356]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f0      	bne.n	80084e6 <HAL_RCC_OscConfig+0x10e>
 8008504:	e000      	b.n	8008508 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008506:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80cb 	beq.w	80086ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008516:	4b52      	ldr	r3, [pc, #328]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800851e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008520:	4b4f      	ldr	r3, [pc, #316]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <HAL_RCC_OscConfig+0x164>
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	2b18      	cmp	r3, #24
 8008530:	d156      	bne.n	80085e0 <HAL_RCC_OscConfig+0x208>
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d151      	bne.n	80085e0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800853c:	4b48      	ldr	r3, [pc, #288]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <HAL_RCC_OscConfig+0x17c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e368      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008554:	4b42      	ldr	r3, [pc, #264]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f023 0219 	bic.w	r2, r3, #25
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	493f      	ldr	r1, [pc, #252]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008562:	4313      	orrs	r3, r2
 8008564:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008566:	f7fa f9e3 	bl	8002930 <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800856e:	f7fa f9df 	bl	8002930 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e352      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008580:	4b37      	ldr	r3, [pc, #220]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800858c:	f7fa fa10 	bl	80029b0 <HAL_GetREVID>
 8008590:	4603      	mov	r3, r0
 8008592:	f241 0203 	movw	r2, #4099	; 0x1003
 8008596:	4293      	cmp	r3, r2
 8008598:	d817      	bhi.n	80085ca <HAL_RCC_OscConfig+0x1f2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b40      	cmp	r3, #64	; 0x40
 80085a0:	d108      	bne.n	80085b4 <HAL_RCC_OscConfig+0x1dc>
 80085a2:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085aa:	4a2d      	ldr	r2, [pc, #180]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085b2:	e07b      	b.n	80086ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b4:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	031b      	lsls	r3, r3, #12
 80085c2:	4927      	ldr	r1, [pc, #156]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085c8:	e070      	b.n	80086ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ca:	4b25      	ldr	r3, [pc, #148]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	061b      	lsls	r3, r3, #24
 80085d8:	4921      	ldr	r1, [pc, #132]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085de:	e065      	b.n	80086ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d048      	beq.n	800867a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085e8:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f023 0219 	bic.w	r2, r3, #25
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	491a      	ldr	r1, [pc, #104]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fa:	f7fa f999 	bl	8002930 <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008602:	f7fa f995 	bl	8002930 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e308      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008614:	4b12      	ldr	r3, [pc, #72]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008620:	f7fa f9c6 	bl	80029b0 <HAL_GetREVID>
 8008624:	4603      	mov	r3, r0
 8008626:	f241 0203 	movw	r2, #4099	; 0x1003
 800862a:	4293      	cmp	r3, r2
 800862c:	d81a      	bhi.n	8008664 <HAL_RCC_OscConfig+0x28c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d108      	bne.n	8008648 <HAL_RCC_OscConfig+0x270>
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800863e:	4a08      	ldr	r2, [pc, #32]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008644:	6053      	str	r3, [r2, #4]
 8008646:	e031      	b.n	80086ac <HAL_RCC_OscConfig+0x2d4>
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	031b      	lsls	r3, r3, #12
 8008656:	4902      	ldr	r1, [pc, #8]	; (8008660 <HAL_RCC_OscConfig+0x288>)
 8008658:	4313      	orrs	r3, r2
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	e026      	b.n	80086ac <HAL_RCC_OscConfig+0x2d4>
 800865e:	bf00      	nop
 8008660:	58024400 	.word	0x58024400
 8008664:	4b9a      	ldr	r3, [pc, #616]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	061b      	lsls	r3, r3, #24
 8008672:	4997      	ldr	r1, [pc, #604]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008674:	4313      	orrs	r3, r2
 8008676:	604b      	str	r3, [r1, #4]
 8008678:	e018      	b.n	80086ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800867a:	4b95      	ldr	r3, [pc, #596]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a94      	ldr	r2, [pc, #592]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008686:	f7fa f953 	bl	8002930 <HAL_GetTick>
 800868a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800868e:	f7fa f94f 	bl	8002930 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e2c2      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086a0:	4b8b      	ldr	r3, [pc, #556]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1f0      	bne.n	800868e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80a9 	beq.w	800880c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ba:	4b85      	ldr	r3, [pc, #532]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086c4:	4b82      	ldr	r3, [pc, #520]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d007      	beq.n	80086e0 <HAL_RCC_OscConfig+0x308>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b18      	cmp	r3, #24
 80086d4:	d13a      	bne.n	800874c <HAL_RCC_OscConfig+0x374>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d135      	bne.n	800874c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086e0:	4b7b      	ldr	r3, [pc, #492]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <HAL_RCC_OscConfig+0x320>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	2b80      	cmp	r3, #128	; 0x80
 80086f2:	d001      	beq.n	80086f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e296      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086f8:	f7fa f95a 	bl	80029b0 <HAL_GetREVID>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8008702:	4293      	cmp	r3, r2
 8008704:	d817      	bhi.n	8008736 <HAL_RCC_OscConfig+0x35e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	2b20      	cmp	r3, #32
 800870c:	d108      	bne.n	8008720 <HAL_RCC_OscConfig+0x348>
 800870e:	4b70      	ldr	r3, [pc, #448]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008716:	4a6e      	ldr	r2, [pc, #440]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800871c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800871e:	e075      	b.n	800880c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008720:	4b6b      	ldr	r3, [pc, #428]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	069b      	lsls	r3, r3, #26
 800872e:	4968      	ldr	r1, [pc, #416]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008730:	4313      	orrs	r3, r2
 8008732:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008734:	e06a      	b.n	800880c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008736:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	061b      	lsls	r3, r3, #24
 8008744:	4962      	ldr	r1, [pc, #392]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008746:	4313      	orrs	r3, r2
 8008748:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800874a:	e05f      	b.n	800880c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d042      	beq.n	80087da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008754:	4b5e      	ldr	r3, [pc, #376]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a5d      	ldr	r2, [pc, #372]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800875a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7fa f8e6 	bl	8002930 <HAL_GetTick>
 8008764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008768:	f7fa f8e2 	bl	8002930 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e255      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800877a:	4b55      	ldr	r3, [pc, #340]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0f0      	beq.n	8008768 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008786:	f7fa f913 	bl	80029b0 <HAL_GetREVID>
 800878a:	4603      	mov	r3, r0
 800878c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008790:	4293      	cmp	r3, r2
 8008792:	d817      	bhi.n	80087c4 <HAL_RCC_OscConfig+0x3ec>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	2b20      	cmp	r3, #32
 800879a:	d108      	bne.n	80087ae <HAL_RCC_OscConfig+0x3d6>
 800879c:	4b4c      	ldr	r3, [pc, #304]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80087a4:	4a4a      	ldr	r2, [pc, #296]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087aa:	6053      	str	r3, [r2, #4]
 80087ac:	e02e      	b.n	800880c <HAL_RCC_OscConfig+0x434>
 80087ae:	4b48      	ldr	r3, [pc, #288]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	069b      	lsls	r3, r3, #26
 80087bc:	4944      	ldr	r1, [pc, #272]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	604b      	str	r3, [r1, #4]
 80087c2:	e023      	b.n	800880c <HAL_RCC_OscConfig+0x434>
 80087c4:	4b42      	ldr	r3, [pc, #264]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	493f      	ldr	r1, [pc, #252]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60cb      	str	r3, [r1, #12]
 80087d8:	e018      	b.n	800880c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a3c      	ldr	r2, [pc, #240]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80087e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e6:	f7fa f8a3 	bl	8002930 <HAL_GetTick>
 80087ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087ec:	e008      	b.n	8008800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087ee:	f7fa f89f 	bl	8002930 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e212      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008800:	4b33      	ldr	r3, [pc, #204]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1f0      	bne.n	80087ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d036      	beq.n	8008886 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d019      	beq.n	8008854 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008820:	4b2b      	ldr	r3, [pc, #172]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008824:	4a2a      	ldr	r2, [pc, #168]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800882c:	f7fa f880 	bl	8002930 <HAL_GetTick>
 8008830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008834:	f7fa f87c 	bl	8002930 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e1ef      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008846:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f0      	beq.n	8008834 <HAL_RCC_OscConfig+0x45c>
 8008852:	e018      	b.n	8008886 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008854:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 8008856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008858:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008860:	f7fa f866 	bl	8002930 <HAL_GetTick>
 8008864:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008868:	f7fa f862 	bl	8002930 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e1d5      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800887c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1f0      	bne.n	8008868 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d039      	beq.n	8008906 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01c      	beq.n	80088d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80088a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088a6:	f7fa f843 	bl	8002930 <HAL_GetTick>
 80088aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088ae:	f7fa f83f 	bl	8002930 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e1b2      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <HAL_RCC_OscConfig+0x4f8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0f0      	beq.n	80088ae <HAL_RCC_OscConfig+0x4d6>
 80088cc:	e01b      	b.n	8008906 <HAL_RCC_OscConfig+0x52e>
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088d4:	4b9b      	ldr	r3, [pc, #620]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a9a      	ldr	r2, [pc, #616]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80088da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088e0:	f7fa f826 	bl	8002930 <HAL_GetTick>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088e8:	f7fa f822 	bl	8002930 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e195      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088fa:	4b92      	ldr	r3, [pc, #584]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f0      	bne.n	80088e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 8081 	beq.w	8008a16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008914:	4b8c      	ldr	r3, [pc, #560]	; (8008b48 <HAL_RCC_OscConfig+0x770>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a8b      	ldr	r2, [pc, #556]	; (8008b48 <HAL_RCC_OscConfig+0x770>)
 800891a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800891e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008920:	f7fa f806 	bl	8002930 <HAL_GetTick>
 8008924:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008926:	e008      	b.n	800893a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008928:	f7fa f802 	bl	8002930 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b64      	cmp	r3, #100	; 0x64
 8008934:	d901      	bls.n	800893a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e175      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893a:	4b83      	ldr	r3, [pc, #524]	; (8008b48 <HAL_RCC_OscConfig+0x770>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f0      	beq.n	8008928 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d106      	bne.n	800895c <HAL_RCC_OscConfig+0x584>
 800894e:	4b7d      	ldr	r3, [pc, #500]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4a7c      	ldr	r2, [pc, #496]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008954:	f043 0301 	orr.w	r3, r3, #1
 8008958:	6713      	str	r3, [r2, #112]	; 0x70
 800895a:	e02d      	b.n	80089b8 <HAL_RCC_OscConfig+0x5e0>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10c      	bne.n	800897e <HAL_RCC_OscConfig+0x5a6>
 8008964:	4b77      	ldr	r3, [pc, #476]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008968:	4a76      	ldr	r2, [pc, #472]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 800896a:	f023 0301 	bic.w	r3, r3, #1
 800896e:	6713      	str	r3, [r2, #112]	; 0x70
 8008970:	4b74      	ldr	r3, [pc, #464]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	4a73      	ldr	r2, [pc, #460]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008976:	f023 0304 	bic.w	r3, r3, #4
 800897a:	6713      	str	r3, [r2, #112]	; 0x70
 800897c:	e01c      	b.n	80089b8 <HAL_RCC_OscConfig+0x5e0>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b05      	cmp	r3, #5
 8008984:	d10c      	bne.n	80089a0 <HAL_RCC_OscConfig+0x5c8>
 8008986:	4b6f      	ldr	r3, [pc, #444]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898a:	4a6e      	ldr	r2, [pc, #440]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 800898c:	f043 0304 	orr.w	r3, r3, #4
 8008990:	6713      	str	r3, [r2, #112]	; 0x70
 8008992:	4b6c      	ldr	r3, [pc, #432]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008996:	4a6b      	ldr	r2, [pc, #428]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	6713      	str	r3, [r2, #112]	; 0x70
 800899e:	e00b      	b.n	80089b8 <HAL_RCC_OscConfig+0x5e0>
 80089a0:	4b68      	ldr	r3, [pc, #416]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80089a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a4:	4a67      	ldr	r2, [pc, #412]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	6713      	str	r3, [r2, #112]	; 0x70
 80089ac:	4b65      	ldr	r3, [pc, #404]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	4a64      	ldr	r2, [pc, #400]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80089b2:	f023 0304 	bic.w	r3, r3, #4
 80089b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d015      	beq.n	80089ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c0:	f7f9 ffb6 	bl	8002930 <HAL_GetTick>
 80089c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c6:	e00a      	b.n	80089de <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089c8:	f7f9 ffb2 	bl	8002930 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e123      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089de:	4b59      	ldr	r3, [pc, #356]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0ee      	beq.n	80089c8 <HAL_RCC_OscConfig+0x5f0>
 80089ea:	e014      	b.n	8008a16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ec:	f7f9 ffa0 	bl	8002930 <HAL_GetTick>
 80089f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089f2:	e00a      	b.n	8008a0a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089f4:	f7f9 ff9c 	bl	8002930 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e10d      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a0a:	4b4e      	ldr	r3, [pc, #312]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1ee      	bne.n	80089f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 8102 	beq.w	8008c24 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a20:	4b48      	ldr	r3, [pc, #288]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a28:	2b18      	cmp	r3, #24
 8008a2a:	f000 80bd 	beq.w	8008ba8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	f040 809e 	bne.w	8008b74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a38:	4b42      	ldr	r3, [pc, #264]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a41      	ldr	r2, [pc, #260]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a44:	f7f9 ff74 	bl	8002930 <HAL_GetTick>
 8008a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a4c:	f7f9 ff70 	bl	8002930 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e0e3      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a5e:	4b39      	ldr	r3, [pc, #228]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a6a:	4b36      	ldr	r3, [pc, #216]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a6e:	4b37      	ldr	r3, [pc, #220]	; (8008b4c <HAL_RCC_OscConfig+0x774>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a7a:	0112      	lsls	r2, r2, #4
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	4931      	ldr	r1, [pc, #196]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	628b      	str	r3, [r1, #40]	; 0x28
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a92:	3b01      	subs	r3, #1
 8008a94:	025b      	lsls	r3, r3, #9
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aac:	3b01      	subs	r3, #1
 8008aae:	061b      	lsls	r3, r3, #24
 8008ab0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ab4:	4923      	ldr	r1, [pc, #140]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008aba:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	4a21      	ldr	r2, [pc, #132]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ac6:	4b1f      	ldr	r3, [pc, #124]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aca:	4b21      	ldr	r3, [pc, #132]	; (8008b50 <HAL_RCC_OscConfig+0x778>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ad2:	00d2      	lsls	r2, r2, #3
 8008ad4:	491b      	ldr	r1, [pc, #108]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ada:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	f023 020c 	bic.w	r2, r3, #12
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	4917      	ldr	r1, [pc, #92]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008aec:	4b15      	ldr	r3, [pc, #84]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	f023 0202 	bic.w	r2, r3, #2
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af8:	4912      	ldr	r1, [pc, #72]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008afe:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	4a10      	ldr	r2, [pc, #64]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	4a0d      	ldr	r2, [pc, #52]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b16:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	4a07      	ldr	r2, [pc, #28]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a04      	ldr	r2, [pc, #16]	; (8008b44 <HAL_RCC_OscConfig+0x76c>)
 8008b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3a:	f7f9 fef9 	bl	8002930 <HAL_GetTick>
 8008b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b40:	e011      	b.n	8008b66 <HAL_RCC_OscConfig+0x78e>
 8008b42:	bf00      	nop
 8008b44:	58024400 	.word	0x58024400
 8008b48:	58024800 	.word	0x58024800
 8008b4c:	fffffc0c 	.word	0xfffffc0c
 8008b50:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b54:	f7f9 feec 	bl	8002930 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e05f      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b66:	4b32      	ldr	r3, [pc, #200]	; (8008c30 <HAL_RCC_OscConfig+0x858>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0f0      	beq.n	8008b54 <HAL_RCC_OscConfig+0x77c>
 8008b72:	e057      	b.n	8008c24 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b74:	4b2e      	ldr	r3, [pc, #184]	; (8008c30 <HAL_RCC_OscConfig+0x858>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a2d      	ldr	r2, [pc, #180]	; (8008c30 <HAL_RCC_OscConfig+0x858>)
 8008b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b80:	f7f9 fed6 	bl	8002930 <HAL_GetTick>
 8008b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b88:	f7f9 fed2 	bl	8002930 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e045      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b9a:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <HAL_RCC_OscConfig+0x858>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f0      	bne.n	8008b88 <HAL_RCC_OscConfig+0x7b0>
 8008ba6:	e03d      	b.n	8008c24 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <HAL_RCC_OscConfig+0x858>)
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bae:	4b20      	ldr	r3, [pc, #128]	; (8008c30 <HAL_RCC_OscConfig+0x858>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d031      	beq.n	8008c20 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f003 0203 	and.w	r2, r3, #3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d12a      	bne.n	8008c20 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	091b      	lsrs	r3, r3, #4
 8008bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d122      	bne.n	8008c20 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d11a      	bne.n	8008c20 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	0a5b      	lsrs	r3, r3, #9
 8008bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d111      	bne.n	8008c20 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	0c1b      	lsrs	r3, r3, #16
 8008c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d108      	bne.n	8008c20 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	0e1b      	lsrs	r3, r3, #24
 8008c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d001      	beq.n	8008c24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3730      	adds	r7, #48	; 0x30
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	58024400 	.word	0x58024400

08008c34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e19c      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c48:	4b8a      	ldr	r3, [pc, #552]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 030f 	and.w	r3, r3, #15
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d910      	bls.n	8008c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c56:	4b87      	ldr	r3, [pc, #540]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f023 020f 	bic.w	r2, r3, #15
 8008c5e:	4985      	ldr	r1, [pc, #532]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c66:	4b83      	ldr	r3, [pc, #524]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d001      	beq.n	8008c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e184      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d010      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	4b7b      	ldr	r3, [pc, #492]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d908      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c94:	4b78      	ldr	r3, [pc, #480]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	4975      	ldr	r1, [pc, #468]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0308 	and.w	r3, r3, #8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d010      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695a      	ldr	r2, [r3, #20]
 8008cb6:	4b70      	ldr	r3, [pc, #448]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d908      	bls.n	8008cd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cc2:	4b6d      	ldr	r3, [pc, #436]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	496a      	ldr	r1, [pc, #424]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d010      	beq.n	8008d02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	4b64      	ldr	r3, [pc, #400]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d908      	bls.n	8008d02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cf0:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	495e      	ldr	r1, [pc, #376]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d010      	beq.n	8008d30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	69da      	ldr	r2, [r3, #28]
 8008d12:	4b59      	ldr	r3, [pc, #356]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d908      	bls.n	8008d30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d1e:	4b56      	ldr	r3, [pc, #344]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	4953      	ldr	r1, [pc, #332]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d010      	beq.n	8008d5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	4b4d      	ldr	r3, [pc, #308]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d908      	bls.n	8008d5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d4c:	4b4a      	ldr	r3, [pc, #296]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f023 020f 	bic.w	r2, r3, #15
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4947      	ldr	r1, [pc, #284]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d055      	beq.n	8008e16 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d6a:	4b43      	ldr	r3, [pc, #268]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	4940      	ldr	r1, [pc, #256]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d107      	bne.n	8008d94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d84:	4b3c      	ldr	r3, [pc, #240]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d121      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0f6      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d107      	bne.n	8008dac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d9c:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d115      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0ea      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d107      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008db4:	4b30      	ldr	r3, [pc, #192]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0de      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dc4:	4b2c      	ldr	r3, [pc, #176]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0d6      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dd4:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f023 0207 	bic.w	r2, r3, #7
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4925      	ldr	r1, [pc, #148]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de6:	f7f9 fda3 	bl	8002930 <HAL_GetTick>
 8008dea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dec:	e00a      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dee:	f7f9 fd9f 	bl	8002930 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e0be      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e04:	4b1c      	ldr	r3, [pc, #112]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d1eb      	bne.n	8008dee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d010      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d208      	bcs.n	8008e44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e32:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f023 020f 	bic.w	r2, r3, #15
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	490e      	ldr	r1, [pc, #56]	; (8008e78 <HAL_RCC_ClockConfig+0x244>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d214      	bcs.n	8008e7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e52:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f023 020f 	bic.w	r2, r3, #15
 8008e5a:	4906      	ldr	r1, [pc, #24]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e62:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <HAL_RCC_ClockConfig+0x240>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d005      	beq.n	8008e7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e086      	b.n	8008f82 <HAL_RCC_ClockConfig+0x34e>
 8008e74:	52002000 	.word	0x52002000
 8008e78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d010      	beq.n	8008eaa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	4b3f      	ldr	r3, [pc, #252]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d208      	bcs.n	8008eaa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e98:	4b3c      	ldr	r3, [pc, #240]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	4939      	ldr	r1, [pc, #228]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d010      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695a      	ldr	r2, [r3, #20]
 8008eba:	4b34      	ldr	r3, [pc, #208]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d208      	bcs.n	8008ed8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ec6:	4b31      	ldr	r3, [pc, #196]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	492e      	ldr	r1, [pc, #184]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d010      	beq.n	8008f06 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699a      	ldr	r2, [r3, #24]
 8008ee8:	4b28      	ldr	r3, [pc, #160]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d208      	bcs.n	8008f06 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	4922      	ldr	r1, [pc, #136]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d010      	beq.n	8008f34 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69da      	ldr	r2, [r3, #28]
 8008f16:	4b1d      	ldr	r3, [pc, #116]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d208      	bcs.n	8008f34 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f22:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	4917      	ldr	r1, [pc, #92]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f34:	f000 f834 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	0a1b      	lsrs	r3, r3, #8
 8008f40:	f003 030f 	and.w	r3, r3, #15
 8008f44:	4912      	ldr	r1, [pc, #72]	; (8008f90 <HAL_RCC_ClockConfig+0x35c>)
 8008f46:	5ccb      	ldrb	r3, [r1, r3]
 8008f48:	f003 031f 	and.w	r3, r3, #31
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f52:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <HAL_RCC_ClockConfig+0x358>)
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	4a0d      	ldr	r2, [pc, #52]	; (8008f90 <HAL_RCC_ClockConfig+0x35c>)
 8008f5c:	5cd3      	ldrb	r3, [r2, r3]
 8008f5e:	f003 031f 	and.w	r3, r3, #31
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <HAL_RCC_ClockConfig+0x360>)
 8008f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f6c:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <HAL_RCC_ClockConfig+0x364>)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <HAL_RCC_ClockConfig+0x368>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7f9 fc90 	bl	800289c <HAL_InitTick>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	58024400 	.word	0x58024400
 8008f90:	080104d8 	.word	0x080104d8
 8008f94:	24000034 	.word	0x24000034
 8008f98:	24000030 	.word	0x24000030
 8008f9c:	24000038 	.word	0x24000038

08008fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b089      	sub	sp, #36	; 0x24
 8008fa4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fa6:	4bb3      	ldr	r3, [pc, #716]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fae:	2b18      	cmp	r3, #24
 8008fb0:	f200 8155 	bhi.w	800925e <HAL_RCC_GetSysClockFreq+0x2be>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08009021 	.word	0x08009021
 8008fc0:	0800925f 	.word	0x0800925f
 8008fc4:	0800925f 	.word	0x0800925f
 8008fc8:	0800925f 	.word	0x0800925f
 8008fcc:	0800925f 	.word	0x0800925f
 8008fd0:	0800925f 	.word	0x0800925f
 8008fd4:	0800925f 	.word	0x0800925f
 8008fd8:	0800925f 	.word	0x0800925f
 8008fdc:	08009047 	.word	0x08009047
 8008fe0:	0800925f 	.word	0x0800925f
 8008fe4:	0800925f 	.word	0x0800925f
 8008fe8:	0800925f 	.word	0x0800925f
 8008fec:	0800925f 	.word	0x0800925f
 8008ff0:	0800925f 	.word	0x0800925f
 8008ff4:	0800925f 	.word	0x0800925f
 8008ff8:	0800925f 	.word	0x0800925f
 8008ffc:	0800904d 	.word	0x0800904d
 8009000:	0800925f 	.word	0x0800925f
 8009004:	0800925f 	.word	0x0800925f
 8009008:	0800925f 	.word	0x0800925f
 800900c:	0800925f 	.word	0x0800925f
 8009010:	0800925f 	.word	0x0800925f
 8009014:	0800925f 	.word	0x0800925f
 8009018:	0800925f 	.word	0x0800925f
 800901c:	08009053 	.word	0x08009053
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009020:	4b94      	ldr	r3, [pc, #592]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800902c:	4b91      	ldr	r3, [pc, #580]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	4a90      	ldr	r2, [pc, #576]	; (8009278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800903e:	e111      	b.n	8009264 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009040:	4b8d      	ldr	r3, [pc, #564]	; (8009278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009042:	61bb      	str	r3, [r7, #24]
    break;
 8009044:	e10e      	b.n	8009264 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009046:	4b8d      	ldr	r3, [pc, #564]	; (800927c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009048:	61bb      	str	r3, [r7, #24]
    break;
 800904a:	e10b      	b.n	8009264 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800904c:	4b8c      	ldr	r3, [pc, #560]	; (8009280 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800904e:	61bb      	str	r3, [r7, #24]
    break;
 8009050:	e108      	b.n	8009264 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009052:	4b88      	ldr	r3, [pc, #544]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800905c:	4b85      	ldr	r3, [pc, #532]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	091b      	lsrs	r3, r3, #4
 8009062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009066:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009068:	4b82      	ldr	r3, [pc, #520]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009072:	4b80      	ldr	r3, [pc, #512]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009076:	08db      	lsrs	r3, r3, #3
 8009078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	fb02 f303 	mul.w	r3, r2, r3
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80e1 	beq.w	8009258 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b02      	cmp	r3, #2
 800909a:	f000 8083 	beq.w	80091a4 <HAL_RCC_GetSysClockFreq+0x204>
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	f200 80a1 	bhi.w	80091e8 <HAL_RCC_GetSysClockFreq+0x248>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_RCC_GetSysClockFreq+0x114>
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d056      	beq.n	8009160 <HAL_RCC_GetSysClockFreq+0x1c0>
 80090b2:	e099      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090b4:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d02d      	beq.n	800911c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090c0:	4b6c      	ldr	r3, [pc, #432]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	08db      	lsrs	r3, r3, #3
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	4a6b      	ldr	r2, [pc, #428]	; (8009278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
 80090d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ea:	4b62      	ldr	r3, [pc, #392]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80090fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800911a:	e087      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009288 <HAL_RCC_GetSysClockFreq+0x2e8>
 800912a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912e:	4b51      	ldr	r3, [pc, #324]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009142:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800915e:	e065      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800928c <HAL_RCC_GetSysClockFreq+0x2ec>
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b40      	ldr	r3, [pc, #256]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a02 	vldr	s12, [r7, #8]
 8009186:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009284 <HAL_RCC_GetSysClockFreq+0x2e4>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a2:	e043      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009290 <HAL_RCC_GetSysClockFreq+0x2f0>
 80091b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b6:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009284 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091e6:	e021      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800928c <HAL_RCC_GetSysClockFreq+0x2ec>
 80091f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920a:	ed97 6a02 	vldr	s12, [r7, #8]
 800920e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800921e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800922a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800922c:	4b11      	ldr	r3, [pc, #68]	; (8009274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	0a5b      	lsrs	r3, r3, #9
 8009232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009236:	3301      	adds	r3, #1
 8009238:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009244:	edd7 6a07 	vldr	s13, [r7, #28]
 8009248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009250:	ee17 3a90 	vmov	r3, s15
 8009254:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009256:	e005      	b.n	8009264 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
    break;
 800925c:	e002      	b.n	8009264 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009260:	61bb      	str	r3, [r7, #24]
    break;
 8009262:	bf00      	nop
  }

  return sysclockfreq;
 8009264:	69bb      	ldr	r3, [r7, #24]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3724      	adds	r7, #36	; 0x24
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	58024400 	.word	0x58024400
 8009278:	03d09000 	.word	0x03d09000
 800927c:	003d0900 	.word	0x003d0900
 8009280:	017d7840 	.word	0x017d7840
 8009284:	46000000 	.word	0x46000000
 8009288:	4c742400 	.word	0x4c742400
 800928c:	4a742400 	.word	0x4a742400
 8009290:	4bbebc20 	.word	0x4bbebc20

08009294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800929a:	f7ff fe81 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 800929e:	4602      	mov	r2, r0
 80092a0:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	f003 030f 	and.w	r3, r3, #15
 80092aa:	490f      	ldr	r1, [pc, #60]	; (80092e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80092ac:	5ccb      	ldrb	r3, [r1, r3]
 80092ae:	f003 031f 	and.w	r3, r3, #31
 80092b2:	fa22 f303 	lsr.w	r3, r2, r3
 80092b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092b8:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	4a09      	ldr	r2, [pc, #36]	; (80092e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80092c2:	5cd3      	ldrb	r3, [r2, r3]
 80092c4:	f003 031f 	and.w	r3, r3, #31
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	fa22 f303 	lsr.w	r3, r2, r3
 80092ce:	4a07      	ldr	r2, [pc, #28]	; (80092ec <HAL_RCC_GetHCLKFreq+0x58>)
 80092d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092d2:	4a07      	ldr	r2, [pc, #28]	; (80092f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <HAL_RCC_GetHCLKFreq+0x58>)
 80092da:	681b      	ldr	r3, [r3, #0]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	58024400 	.word	0x58024400
 80092e8:	080104d8 	.word	0x080104d8
 80092ec:	24000034 	.word	0x24000034
 80092f0:	24000030 	.word	0x24000030

080092f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092f8:	f7ff ffcc 	bl	8009294 <HAL_RCC_GetHCLKFreq>
 80092fc:	4602      	mov	r2, r0
 80092fe:	4b06      	ldr	r3, [pc, #24]	; (8009318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	091b      	lsrs	r3, r3, #4
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	4904      	ldr	r1, [pc, #16]	; (800931c <HAL_RCC_GetPCLK1Freq+0x28>)
 800930a:	5ccb      	ldrb	r3, [r1, r3]
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009314:	4618      	mov	r0, r3
 8009316:	bd80      	pop	{r7, pc}
 8009318:	58024400 	.word	0x58024400
 800931c:	080104d8 	.word	0x080104d8

08009320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009324:	f7ff ffb6 	bl	8009294 <HAL_RCC_GetHCLKFreq>
 8009328:	4602      	mov	r2, r0
 800932a:	4b06      	ldr	r3, [pc, #24]	; (8009344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	4904      	ldr	r1, [pc, #16]	; (8009348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009336:	5ccb      	ldrb	r3, [r1, r3]
 8009338:	f003 031f 	and.w	r3, r3, #31
 800933c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009340:	4618      	mov	r0, r3
 8009342:	bd80      	pop	{r7, pc}
 8009344:	58024400 	.word	0x58024400
 8009348:	080104d8 	.word	0x080104d8

0800934c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009354:	2300      	movs	r3, #0
 8009356:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009358:	2300      	movs	r3, #0
 800935a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d03f      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800936c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009370:	d02a      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009372:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009376:	d824      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800937c:	d018      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800937e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009382:	d81e      	bhi.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800938c:	d007      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800938e:	e018      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009390:	4ba3      	ldr	r3, [pc, #652]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	4aa2      	ldr	r2, [pc, #648]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800939a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800939c:	e015      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3304      	adds	r3, #4
 80093a2:	2102      	movs	r1, #2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f001 fff9 	bl	800b39c <RCCEx_PLL2_Config>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093ae:	e00c      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3324      	adds	r3, #36	; 0x24
 80093b4:	2102      	movs	r1, #2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f002 f8a2 	bl	800b500 <RCCEx_PLL3_Config>
 80093bc:	4603      	mov	r3, r0
 80093be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093c0:	e003      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	75fb      	strb	r3, [r7, #23]
      break;
 80093c6:	e000      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d109      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093d0:	4b93      	ldr	r3, [pc, #588]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093dc:	4990      	ldr	r1, [pc, #576]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	650b      	str	r3, [r1, #80]	; 0x50
 80093e2:	e001      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d03d      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d826      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80093fc:	a201      	add	r2, pc, #4	; (adr r2, 8009404 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	08009419 	.word	0x08009419
 8009408:	08009427 	.word	0x08009427
 800940c:	08009439 	.word	0x08009439
 8009410:	08009451 	.word	0x08009451
 8009414:	08009451 	.word	0x08009451
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009418:	4b81      	ldr	r3, [pc, #516]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	4a80      	ldr	r2, [pc, #512]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800941e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009424:	e015      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f001 ffb5 	bl	800b39c <RCCEx_PLL2_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009436:	e00c      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3324      	adds	r3, #36	; 0x24
 800943c:	2100      	movs	r1, #0
 800943e:	4618      	mov	r0, r3
 8009440:	f002 f85e 	bl	800b500 <RCCEx_PLL3_Config>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009448:	e003      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	75fb      	strb	r3, [r7, #23]
      break;
 800944e:	e000      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009458:	4b71      	ldr	r3, [pc, #452]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800945a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945c:	f023 0207 	bic.w	r2, r3, #7
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009464:	496e      	ldr	r1, [pc, #440]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009466:	4313      	orrs	r3, r2
 8009468:	650b      	str	r3, [r1, #80]	; 0x50
 800946a:	e001      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009478:	2b00      	cmp	r3, #0
 800947a:	d042      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009484:	d02b      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948a:	d825      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800948c:	2bc0      	cmp	r3, #192	; 0xc0
 800948e:	d028      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009490:	2bc0      	cmp	r3, #192	; 0xc0
 8009492:	d821      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009494:	2b80      	cmp	r3, #128	; 0x80
 8009496:	d016      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009498:	2b80      	cmp	r3, #128	; 0x80
 800949a:	d81d      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d007      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80094a4:	e018      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a6:	4b5e      	ldr	r3, [pc, #376]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	4a5d      	ldr	r2, [pc, #372]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094b2:	e017      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 ff6e 	bl	800b39c <RCCEx_PLL2_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094c4:	e00e      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3324      	adds	r3, #36	; 0x24
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f002 f817 	bl	800b500 <RCCEx_PLL3_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094d6:	e005      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	75fb      	strb	r3, [r7, #23]
      break;
 80094dc:	e002      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80094de:	bf00      	nop
 80094e0:	e000      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80094e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d109      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094ea:	4b4d      	ldr	r3, [pc, #308]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	494a      	ldr	r1, [pc, #296]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	650b      	str	r3, [r1, #80]	; 0x50
 80094fc:	e001      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800950a:	2b00      	cmp	r3, #0
 800950c:	d049      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009518:	d030      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800951a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800951e:	d82a      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009520:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009524:	d02c      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009526:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800952a:	d824      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800952c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009530:	d018      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009536:	d81e      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800953c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009540:	d007      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009542:	e018      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009544:	4b36      	ldr	r3, [pc, #216]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	4a35      	ldr	r2, [pc, #212]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800954a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800954e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009550:	e017      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3304      	adds	r3, #4
 8009556:	2100      	movs	r1, #0
 8009558:	4618      	mov	r0, r3
 800955a:	f001 ff1f 	bl	800b39c <RCCEx_PLL2_Config>
 800955e:	4603      	mov	r3, r0
 8009560:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009562:	e00e      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3324      	adds	r3, #36	; 0x24
 8009568:	2100      	movs	r1, #0
 800956a:	4618      	mov	r0, r3
 800956c:	f001 ffc8 	bl	800b500 <RCCEx_PLL3_Config>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009574:	e005      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	75fb      	strb	r3, [r7, #23]
      break;
 800957a:	e002      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800957c:	bf00      	nop
 800957e:	e000      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009588:	4b25      	ldr	r3, [pc, #148]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800958a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009596:	4922      	ldr	r1, [pc, #136]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009598:	4313      	orrs	r3, r2
 800959a:	658b      	str	r3, [r1, #88]	; 0x58
 800959c:	e001      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d04b      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095b8:	d030      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80095ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095be:	d82a      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095c4:	d02e      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80095c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095ca:	d824      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095d0:	d018      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80095d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095d6:	d81e      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80095dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095e0:	d007      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80095e2:	e018      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e4:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	4a0d      	ldr	r2, [pc, #52]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095f0:	e019      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	2100      	movs	r1, #0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 fecf 	bl	800b39c <RCCEx_PLL2_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009602:	e010      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3324      	adds	r3, #36	; 0x24
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f001 ff78 	bl	800b500 <RCCEx_PLL3_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009614:	e007      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
      break;
 800961a:	e004      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800961c:	bf00      	nop
 800961e:	e002      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009620:	58024400 	.word	0x58024400
      break;
 8009624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800962c:	4b99      	ldr	r3, [pc, #612]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800963a:	4996      	ldr	r1, [pc, #600]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800963c:	4313      	orrs	r3, r2
 800963e:	658b      	str	r3, [r1, #88]	; 0x58
 8009640:	e001      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d032      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009656:	2b30      	cmp	r3, #48	; 0x30
 8009658:	d01c      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800965a:	2b30      	cmp	r3, #48	; 0x30
 800965c:	d817      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d00c      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009662:	2b20      	cmp	r3, #32
 8009664:	d813      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d016      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800966a:	2b10      	cmp	r3, #16
 800966c:	d10f      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800966e:	4b89      	ldr	r3, [pc, #548]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	4a88      	ldr	r2, [pc, #544]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800967a:	e00e      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3304      	adds	r3, #4
 8009680:	2102      	movs	r1, #2
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fe8a 	bl	800b39c <RCCEx_PLL2_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800968c:	e005      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	75fb      	strb	r3, [r7, #23]
      break;
 8009692:	e002      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009694:	bf00      	nop
 8009696:	e000      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d109      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096a0:	4b7c      	ldr	r3, [pc, #496]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ac:	4979      	ldr	r1, [pc, #484]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80096b2:	e001      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d047      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096cc:	d030      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096d2:	d82a      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096d8:	d02c      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80096da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096de:	d824      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e4:	d018      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80096e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ea:	d81e      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80096f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f4:	d007      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80096f6:	e018      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f8:	4b66      	ldr	r3, [pc, #408]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	4a65      	ldr	r2, [pc, #404]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009704:	e017      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fe45 	bl	800b39c <RCCEx_PLL2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009716:	e00e      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	2100      	movs	r1, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f001 feee 	bl	800b500 <RCCEx_PLL3_Config>
 8009724:	4603      	mov	r3, r0
 8009726:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009728:	e005      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
      break;
 800972e:	e002      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009730:	bf00      	nop
 8009732:	e000      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800973c:	4b55      	ldr	r3, [pc, #340]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800973e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009740:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009748:	4952      	ldr	r1, [pc, #328]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800974a:	4313      	orrs	r3, r2
 800974c:	650b      	str	r3, [r1, #80]	; 0x50
 800974e:	e001      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d049      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009768:	d02e      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800976a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800976e:	d828      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009770:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009774:	d02a      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800977a:	d822      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800977c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009780:	d026      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009786:	d81c      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800978c:	d010      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800978e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009792:	d816      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01d      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979c:	d111      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3304      	adds	r3, #4
 80097a2:	2101      	movs	r1, #1
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 fdf9 	bl	800b39c <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097ae:	e012      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	2101      	movs	r1, #1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 fea2 	bl	800b500 <RCCEx_PLL3_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097c0:	e009      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e006      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097c8:	bf00      	nop
 80097ca:	e004      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097cc:	bf00      	nop
 80097ce:	e002      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097d0:	bf00      	nop
 80097d2:	e000      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80097d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097dc:	4b2d      	ldr	r3, [pc, #180]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e8:	492a      	ldr	r1, [pc, #168]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	650b      	str	r3, [r1, #80]	; 0x50
 80097ee:	e001      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d04d      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800980a:	d02e      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800980c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009810:	d828      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009816:	d02a      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981c:	d822      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800981e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009822:	d026      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009824:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009828:	d81c      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800982a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982e:	d010      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009834:	d816      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01d      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800983a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800983e:	d111      	bne.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3304      	adds	r3, #4
 8009844:	2101      	movs	r1, #1
 8009846:	4618      	mov	r0, r3
 8009848:	f001 fda8 	bl	800b39c <RCCEx_PLL2_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009850:	e012      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3324      	adds	r3, #36	; 0x24
 8009856:	2101      	movs	r1, #1
 8009858:	4618      	mov	r0, r3
 800985a:	f001 fe51 	bl	800b500 <RCCEx_PLL3_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009862:	e009      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	75fb      	strb	r3, [r7, #23]
      break;
 8009868:	e006      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800986a:	bf00      	nop
 800986c:	e004      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800986e:	bf00      	nop
 8009870:	e002      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009872:	bf00      	nop
 8009874:	e000      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10c      	bne.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009882:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800988c:	4901      	ldr	r1, [pc, #4]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800988e:	4313      	orrs	r3, r2
 8009890:	658b      	str	r3, [r1, #88]	; 0x58
 8009892:	e003      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d02f      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b0:	d00e      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80098b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b6:	d814      	bhi.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d015      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80098bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c0:	d10f      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c2:	4baf      	ldr	r3, [pc, #700]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	4aae      	ldr	r2, [pc, #696]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098ce:	e00c      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3304      	adds	r3, #4
 80098d4:	2101      	movs	r1, #1
 80098d6:	4618      	mov	r0, r3
 80098d8:	f001 fd60 	bl	800b39c <RCCEx_PLL2_Config>
 80098dc:	4603      	mov	r3, r0
 80098de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098e0:	e003      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	75fb      	strb	r3, [r7, #23]
      break;
 80098e6:	e000      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80098e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098f0:	4ba3      	ldr	r3, [pc, #652]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	49a0      	ldr	r1, [pc, #640]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	650b      	str	r3, [r1, #80]	; 0x50
 8009902:	e001      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d032      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009918:	2b03      	cmp	r3, #3
 800991a:	d81b      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800991c:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	0800995b 	.word	0x0800995b
 8009928:	08009935 	.word	0x08009935
 800992c:	08009943 	.word	0x08009943
 8009930:	0800995b 	.word	0x0800995b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009934:	4b92      	ldr	r3, [pc, #584]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a91      	ldr	r2, [pc, #580]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800993a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009940:	e00c      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3304      	adds	r3, #4
 8009946:	2102      	movs	r1, #2
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fd27 	bl	800b39c <RCCEx_PLL2_Config>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009952:	e003      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	75fb      	strb	r3, [r7, #23]
      break;
 8009958:	e000      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800995a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009962:	4b87      	ldr	r3, [pc, #540]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009966:	f023 0203 	bic.w	r2, r3, #3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996e:	4984      	ldr	r1, [pc, #528]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009970:	4313      	orrs	r3, r2
 8009972:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009974:	e001      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8086 	beq.w	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009988:	4b7e      	ldr	r3, [pc, #504]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a7d      	ldr	r2, [pc, #500]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800998e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009992:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009994:	f7f8 ffcc 	bl	8002930 <HAL_GetTick>
 8009998:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800999a:	e009      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800999c:	f7f8 ffc8 	bl	8002930 <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	2b64      	cmp	r3, #100	; 0x64
 80099a8:	d902      	bls.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	75fb      	strb	r3, [r7, #23]
        break;
 80099ae:	e005      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099b0:	4b74      	ldr	r3, [pc, #464]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0ef      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d166      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099c2:	4b6f      	ldr	r3, [pc, #444]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099cc:	4053      	eors	r3, r2
 80099ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d013      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099d6:	4b6a      	ldr	r3, [pc, #424]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099e0:	4b67      	ldr	r3, [pc, #412]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e4:	4a66      	ldr	r2, [pc, #408]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099ec:	4b64      	ldr	r3, [pc, #400]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f0:	4a63      	ldr	r2, [pc, #396]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80099f8:	4a61      	ldr	r2, [pc, #388]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a08:	d115      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a0a:	f7f8 ff91 	bl	8002930 <HAL_GetTick>
 8009a0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a10:	e00b      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a12:	f7f8 ff8d 	bl	8002930 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d902      	bls.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	75fb      	strb	r3, [r7, #23]
            break;
 8009a28:	e005      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a2a:	4b55      	ldr	r3, [pc, #340]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0ed      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d126      	bne.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a4a:	d10d      	bne.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009a4c:	4b4c      	ldr	r3, [pc, #304]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a5a:	0919      	lsrs	r1, r3, #4
 8009a5c:	4b4a      	ldr	r3, [pc, #296]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009a5e:	400b      	ands	r3, r1
 8009a60:	4947      	ldr	r1, [pc, #284]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	610b      	str	r3, [r1, #16]
 8009a66:	e005      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009a68:	4b45      	ldr	r3, [pc, #276]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	4a44      	ldr	r2, [pc, #272]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a72:	6113      	str	r3, [r2, #16]
 8009a74:	4b42      	ldr	r3, [pc, #264]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a82:	493f      	ldr	r1, [pc, #252]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	670b      	str	r3, [r1, #112]	; 0x70
 8009a88:	e004      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	75bb      	strb	r3, [r7, #22]
 8009a8e:	e001      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
 8009a92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8085 	beq.w	8009bac <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa6:	2b28      	cmp	r3, #40	; 0x28
 8009aa8:	d866      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009b8d 	.word	0x08009b8d
 8009ab4:	08009b79 	.word	0x08009b79
 8009ab8:	08009b79 	.word	0x08009b79
 8009abc:	08009b79 	.word	0x08009b79
 8009ac0:	08009b79 	.word	0x08009b79
 8009ac4:	08009b79 	.word	0x08009b79
 8009ac8:	08009b79 	.word	0x08009b79
 8009acc:	08009b79 	.word	0x08009b79
 8009ad0:	08009b55 	.word	0x08009b55
 8009ad4:	08009b79 	.word	0x08009b79
 8009ad8:	08009b79 	.word	0x08009b79
 8009adc:	08009b79 	.word	0x08009b79
 8009ae0:	08009b79 	.word	0x08009b79
 8009ae4:	08009b79 	.word	0x08009b79
 8009ae8:	08009b79 	.word	0x08009b79
 8009aec:	08009b79 	.word	0x08009b79
 8009af0:	08009b67 	.word	0x08009b67
 8009af4:	08009b79 	.word	0x08009b79
 8009af8:	08009b79 	.word	0x08009b79
 8009afc:	08009b79 	.word	0x08009b79
 8009b00:	08009b79 	.word	0x08009b79
 8009b04:	08009b79 	.word	0x08009b79
 8009b08:	08009b79 	.word	0x08009b79
 8009b0c:	08009b79 	.word	0x08009b79
 8009b10:	08009b8d 	.word	0x08009b8d
 8009b14:	08009b79 	.word	0x08009b79
 8009b18:	08009b79 	.word	0x08009b79
 8009b1c:	08009b79 	.word	0x08009b79
 8009b20:	08009b79 	.word	0x08009b79
 8009b24:	08009b79 	.word	0x08009b79
 8009b28:	08009b79 	.word	0x08009b79
 8009b2c:	08009b79 	.word	0x08009b79
 8009b30:	08009b8d 	.word	0x08009b8d
 8009b34:	08009b79 	.word	0x08009b79
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b79 	.word	0x08009b79
 8009b40:	08009b79 	.word	0x08009b79
 8009b44:	08009b79 	.word	0x08009b79
 8009b48:	08009b79 	.word	0x08009b79
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	08009b8d 	.word	0x08009b8d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3304      	adds	r3, #4
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 fc1e 	bl	800b39c <RCCEx_PLL2_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b64:	e013      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3324      	adds	r3, #36	; 0x24
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f001 fcc7 	bl	800b500 <RCCEx_PLL3_Config>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b76:	e00a      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b7c:	e007      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b7e:	bf00      	nop
 8009b80:	58024400 	.word	0x58024400
 8009b84:	58024800 	.word	0x58024800
 8009b88:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d109      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b94:	4b96      	ldr	r3, [pc, #600]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b98:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ba0:	4993      	ldr	r1, [pc, #588]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	654b      	str	r3, [r1, #84]	; 0x54
 8009ba6:	e001      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0302 	and.w	r3, r3, #2
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d038      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d821      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009bc0:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009c0b 	.word	0x08009c0b
 8009bcc:	08009be1 	.word	0x08009be1
 8009bd0:	08009bf3 	.word	0x08009bf3
 8009bd4:	08009c0b 	.word	0x08009c0b
 8009bd8:	08009c0b 	.word	0x08009c0b
 8009bdc:	08009c0b 	.word	0x08009c0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	2101      	movs	r1, #1
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fbd8 	bl	800b39c <RCCEx_PLL2_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bf0:	e00c      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3324      	adds	r3, #36	; 0x24
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fc81 	bl	800b500 <RCCEx_PLL3_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c02:	e003      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	75fb      	strb	r3, [r7, #23]
      break;
 8009c08:	e000      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d109      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c12:	4b77      	ldr	r3, [pc, #476]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c16:	f023 0207 	bic.w	r2, r3, #7
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c1e:	4974      	ldr	r1, [pc, #464]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	654b      	str	r3, [r1, #84]	; 0x54
 8009c24:	e001      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0304 	and.w	r3, r3, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d03a      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3c:	2b05      	cmp	r3, #5
 8009c3e:	d821      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009c40:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c46:	bf00      	nop
 8009c48:	08009c8b 	.word	0x08009c8b
 8009c4c:	08009c61 	.word	0x08009c61
 8009c50:	08009c73 	.word	0x08009c73
 8009c54:	08009c8b 	.word	0x08009c8b
 8009c58:	08009c8b 	.word	0x08009c8b
 8009c5c:	08009c8b 	.word	0x08009c8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	2101      	movs	r1, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fb98 	bl	800b39c <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c70:	e00c      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3324      	adds	r3, #36	; 0x24
 8009c76:	2101      	movs	r1, #1
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 fc41 	bl	800b500 <RCCEx_PLL3_Config>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c82:	e003      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
      break;
 8009c88:	e000      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c92:	4b57      	ldr	r3, [pc, #348]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c96:	f023 0207 	bic.w	r2, r3, #7
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca0:	4953      	ldr	r1, [pc, #332]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8009ca6:	e001      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d04b      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cc2:	d02e      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cc8:	d828      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cce:	d02a      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd4:	d822      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009cd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cda:	d026      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ce0:	d81c      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ce6:	d010      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cec:	d816      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01d      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cf6:	d111      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f001 fb4c 	bl	800b39c <RCCEx_PLL2_Config>
 8009d04:	4603      	mov	r3, r0
 8009d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d08:	e012      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3324      	adds	r3, #36	; 0x24
 8009d0e:	2102      	movs	r1, #2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 fbf5 	bl	800b500 <RCCEx_PLL3_Config>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d1a:	e009      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d20:	e006      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d22:	bf00      	nop
 8009d24:	e004      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d26:	bf00      	nop
 8009d28:	e002      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d2a:	bf00      	nop
 8009d2c:	e000      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d36:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d44:	492a      	ldr	r1, [pc, #168]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	654b      	str	r3, [r1, #84]	; 0x54
 8009d4a:	e001      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d04d      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d66:	d02e      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009d68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d6c:	d828      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d72:	d02a      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d78:	d822      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d7e:	d026      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d84:	d81c      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d8a:	d010      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d90:	d816      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01d      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d9a:	d111      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	2100      	movs	r1, #0
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 fafa 	bl	800b39c <RCCEx_PLL2_Config>
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009dac:	e012      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3324      	adds	r3, #36	; 0x24
 8009db2:	2102      	movs	r1, #2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 fba3 	bl	800b500 <RCCEx_PLL3_Config>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009dbe:	e009      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc4:	e006      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009dc6:	bf00      	nop
 8009dc8:	e004      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009dca:	bf00      	nop
 8009dcc:	e002      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009dce:	bf00      	nop
 8009dd0:	e000      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10c      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009de8:	4901      	ldr	r1, [pc, #4]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	658b      	str	r3, [r1, #88]	; 0x58
 8009dee:	e003      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d04b      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e0e:	d02e      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009e10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e14:	d828      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e1a:	d02a      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e20:	d822      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e26:	d026      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009e28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e2c:	d81c      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e32:	d010      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e38:	d816      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01d      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e42:	d111      	bne.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 faa6 	bl	800b39c <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e54:	e012      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3324      	adds	r3, #36	; 0x24
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 fb4f 	bl	800b500 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e66:	e009      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6c:	e006      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e6e:	bf00      	nop
 8009e70:	e004      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e72:	bf00      	nop
 8009e74:	e002      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10a      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e82:	4b9d      	ldr	r3, [pc, #628]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e90:	4999      	ldr	r1, [pc, #612]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	658b      	str	r3, [r1, #88]	; 0x58
 8009e96:	e001      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0308 	and.w	r3, r3, #8
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01a      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb2:	d10a      	bne.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	2102      	movs	r1, #2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fb20 	bl	800b500 <RCCEx_PLL3_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009eca:	4b8b      	ldr	r3, [pc, #556]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ece:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ed8:	4987      	ldr	r1, [pc, #540]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0310 	and.w	r3, r3, #16
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d01a      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef4:	d10a      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3324      	adds	r3, #36	; 0x24
 8009efa:	2102      	movs	r1, #2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 faff 	bl	800b500 <RCCEx_PLL3_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f0c:	4b7a      	ldr	r3, [pc, #488]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f1a:	4977      	ldr	r1, [pc, #476]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d034      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f36:	d01d      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f3c:	d817      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f46:	d009      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009f48:	e011      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 fa23 	bl	800b39c <RCCEx_PLL2_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f5a:	e00c      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	2102      	movs	r1, #2
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 facc 	bl	800b500 <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f6c:	e003      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
      break;
 8009f72:	e000      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f7c:	4b5e      	ldr	r3, [pc, #376]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f8a:	495b      	ldr	r1, [pc, #364]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	658b      	str	r3, [r1, #88]	; 0x58
 8009f90:	e001      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d033      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fac:	d01c      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009fae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fb2:	d816      	bhi.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fb8:	d003      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fbe:	d007      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009fc0:	e00f      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc2:	4b4d      	ldr	r3, [pc, #308]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	4a4c      	ldr	r2, [pc, #304]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fce:	e00c      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3324      	adds	r3, #36	; 0x24
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 fa92 	bl	800b500 <RCCEx_PLL3_Config>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fe0:	e003      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe6:	e000      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ff0:	4b41      	ldr	r3, [pc, #260]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ffe:	493e      	ldr	r1, [pc, #248]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a000:	4313      	orrs	r3, r2
 800a002:	654b      	str	r3, [r1, #84]	; 0x54
 800a004:	e001      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d029      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a01e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a022:	d007      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a024:	e00f      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a026:	4b34      	ldr	r3, [pc, #208]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a33      	ldr	r2, [pc, #204]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a032:	e00b      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	2102      	movs	r1, #2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 f9ae 	bl	800b39c <RCCEx_PLL2_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a044:	e002      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	75fb      	strb	r3, [r7, #23]
      break;
 800a04a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d109      	bne.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a052:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a056:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a05e:	4926      	ldr	r1, [pc, #152]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a060:	4313      	orrs	r3, r2
 800a062:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a064:	e001      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3324      	adds	r3, #36	; 0x24
 800a07a:	2102      	movs	r1, #2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 fa3f 	bl	800b500 <RCCEx_PLL3_Config>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d033      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a09c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0a0:	d017      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a0a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0a6:	d811      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ac:	d013      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b2:	d80b      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d010      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0bc:	d106      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0be:	4b0e      	ldr	r3, [pc, #56]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a0ca:	e007      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d0:	e004      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0d2:	bf00      	nop
 800a0d4:	e002      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0d6:	bf00      	nop
 800a0d8:	e000      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10c      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0e2:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ee:	4902      	ldr	r1, [pc, #8]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	654b      	str	r3, [r1, #84]	; 0x54
 800a0f4:	e004      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a0f6:	bf00      	nop
 800a0f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d008      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a10c:	4b31      	ldr	r3, [pc, #196]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a110:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a118:	492e      	ldr	r1, [pc, #184]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a12a:	4b2a      	ldr	r3, [pc, #168]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a138:	4926      	ldr	r1, [pc, #152]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d008      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a14a:	4b22      	ldr	r3, [pc, #136]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a156:	491f      	ldr	r1, [pc, #124]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00d      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a168:	4b1a      	ldr	r3, [pc, #104]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	4a19      	ldr	r2, [pc, #100]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a16e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a172:	6113      	str	r3, [r2, #16]
 800a174:	4b17      	ldr	r3, [pc, #92]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a17e:	4915      	ldr	r1, [pc, #84]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a180:	4313      	orrs	r3, r2
 800a182:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	da08      	bge.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a18c:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a18e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a190:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a198:	490e      	ldr	r1, [pc, #56]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d009      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b8:	4906      	ldr	r1, [pc, #24]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a1be:	7dbb      	ldrb	r3, [r7, #22]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	58024400 	.word	0x58024400

0800a1d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b090      	sub	sp, #64	; 0x40
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e6:	f040 8095 	bne.w	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a1ea:	4b97      	ldr	r3, [pc, #604]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	f200 8088 	bhi.w	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a1fc:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a219 	.word	0x0800a219
 800a208:	0800a241 	.word	0x0800a241
 800a20c:	0800a269 	.word	0x0800a269
 800a210:	0800a305 	.word	0x0800a305
 800a214:	0800a291 	.word	0x0800a291
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a218:	4b8b      	ldr	r3, [pc, #556]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a224:	d108      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 ff64 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a234:	f000 bc94 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a23c:	f000 bc90 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a240:	4b81      	ldr	r3, [pc, #516]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a24c:	d108      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a24e:	f107 0318 	add.w	r3, r7, #24
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fca8 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a25c:	f000 bc80 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a264:	f000 bc7c 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a268:	4b77      	ldr	r3, [pc, #476]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a274:	d108      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fde8 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a284:	f000 bc6c 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a28c:	f000 bc68 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a290:	4b6d      	ldr	r3, [pc, #436]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a298:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a29a:	4b6b      	ldr	r3, [pc, #428]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d10c      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d109      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2ac:	4b66      	ldr	r3, [pc, #408]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	08db      	lsrs	r3, r3, #3
 800a2b2:	f003 0303 	and.w	r3, r3, #3
 800a2b6:	4a65      	ldr	r2, [pc, #404]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2be:	e01f      	b.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2c0:	4b61      	ldr	r3, [pc, #388]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2cc:	d106      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2d4:	d102      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a2d6:	4b5e      	ldr	r3, [pc, #376]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2da:	e011      	b.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2dc:	4b5a      	ldr	r3, [pc, #360]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2e8:	d106      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2f0:	d102      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a2f2:	4b58      	ldr	r3, [pc, #352]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f6:	e003      	b.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a2fc:	f000 bc30 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a300:	f000 bc2e 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a304:	4b54      	ldr	r3, [pc, #336]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a308:	f000 bc2a 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a310:	f000 bc26 	b.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a31a:	f040 809f 	bne.w	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a31e:	4b4a      	ldr	r3, [pc, #296]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a322:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a326:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32e:	d04d      	beq.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a336:	f200 8084 	bhi.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	2bc0      	cmp	r3, #192	; 0xc0
 800a33e:	d07d      	beq.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	2bc0      	cmp	r3, #192	; 0xc0
 800a344:	d87d      	bhi.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	2b80      	cmp	r3, #128	; 0x80
 800a34a:	d02d      	beq.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	2b80      	cmp	r3, #128	; 0x80
 800a350:	d877      	bhi.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	2b00      	cmp	r3, #0
 800a356:	d003      	beq.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	2b40      	cmp	r3, #64	; 0x40
 800a35c:	d012      	beq.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a35e:	e070      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a360:	4b39      	ldr	r3, [pc, #228]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a36c:	d107      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a36e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fec0 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a37c:	e3f0      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a382:	e3ed      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a384:	4b30      	ldr	r3, [pc, #192]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a38c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a390:	d107      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a392:	f107 0318 	add.w	r3, r7, #24
 800a396:	4618      	mov	r0, r3
 800a398:	f000 fc06 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3a0:	e3de      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3a6:	e3db      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3a8:	4b27      	ldr	r3, [pc, #156]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3b6:	f107 030c 	add.w	r3, r7, #12
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 fd48 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3c4:	e3cc      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ca:	e3c9      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a3cc:	4b1e      	ldr	r3, [pc, #120]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d10c      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	08db      	lsrs	r3, r3, #3
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	4a16      	ldr	r2, [pc, #88]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3fa:	e01e      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3fc:	4b12      	ldr	r3, [pc, #72]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a408:	d106      	bne.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a410:	d102      	bne.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a412:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a414:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a416:	e010      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a418:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a424:	d106      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a42c:	d102      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a430:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a432:	e002      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a438:	e392      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a43a:	e391      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a440:	e38e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a446:	e38b      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a448:	58024400 	.word	0x58024400
 800a44c:	03d09000 	.word	0x03d09000
 800a450:	003d0900 	.word	0x003d0900
 800a454:	017d7840 	.word	0x017d7840
 800a458:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a462:	f040 809c 	bne.w	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a466:	4b9d      	ldr	r3, [pc, #628]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a476:	d054      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a47e:	f200 808b 	bhi.w	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a488:	f000 8083 	beq.w	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a492:	f200 8081 	bhi.w	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a49c:	d02f      	beq.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4a4:	d878      	bhi.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d004      	beq.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4b2:	d012      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a4b4:	e070      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4b6:	4b89      	ldr	r3, [pc, #548]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4c2:	d107      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 fe15 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4d2:	e345      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d8:	e342      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4da:	4b80      	ldr	r3, [pc, #512]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4e6:	d107      	bne.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e8:	f107 0318 	add.w	r3, r7, #24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fb5b 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4f6:	e333      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fc:	e330      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4fe:	4b77      	ldr	r3, [pc, #476]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a50a:	d107      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a50c:	f107 030c 	add.w	r3, r7, #12
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fc9d 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a51a:	e321      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a520:	e31e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a522:	4b6e      	ldr	r3, [pc, #440]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a52a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a52c:	4b6b      	ldr	r3, [pc, #428]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b04      	cmp	r3, #4
 800a536:	d10c      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a53e:	4b67      	ldr	r3, [pc, #412]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	08db      	lsrs	r3, r3, #3
 800a544:	f003 0303 	and.w	r3, r3, #3
 800a548:	4a65      	ldr	r2, [pc, #404]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a550:	e01e      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a552:	4b62      	ldr	r3, [pc, #392]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a55e:	d106      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a566:	d102      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a568:	4b5e      	ldr	r3, [pc, #376]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a56c:	e010      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a56e:	4b5b      	ldr	r3, [pc, #364]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a57a:	d106      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a582:	d102      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a584:	4b58      	ldr	r3, [pc, #352]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a588:	e002      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a58e:	e2e7      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a590:	e2e6      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a592:	4b56      	ldr	r3, [pc, #344]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a596:	e2e3      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a59c:	e2e0      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5a4:	f040 80a7 	bne.w	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a5a8:	4b4c      	ldr	r3, [pc, #304]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ac:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5b8:	d055      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5c0:	f200 8096 	bhi.w	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5ca:	f000 8084 	beq.w	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5d4:	f200 808c 	bhi.w	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5de:	d030      	beq.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e6:	f200 8083 	bhi.w	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d004      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5f6:	d012      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a5f8:	e07a      	b.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5fa:	4b38      	ldr	r3, [pc, #224]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a606:	d107      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fd73 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a616:	e2a3      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61c:	e2a0      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a61e:	4b2f      	ldr	r3, [pc, #188]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a62a:	d107      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a62c:	f107 0318 	add.w	r3, r7, #24
 800a630:	4618      	mov	r0, r3
 800a632:	f000 fab9 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a63a:	e291      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a640:	e28e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a642:	4b26      	ldr	r3, [pc, #152]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a64a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a64e:	d107      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a650:	f107 030c 	add.w	r3, r7, #12
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fbfb 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a65e:	e27f      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a664:	e27c      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a666:	4b1d      	ldr	r3, [pc, #116]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a66e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a670:	4b1a      	ldr	r3, [pc, #104]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b04      	cmp	r3, #4
 800a67a:	d10c      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d109      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a682:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	08db      	lsrs	r3, r3, #3
 800a688:	f003 0303 	and.w	r3, r3, #3
 800a68c:	4a14      	ldr	r2, [pc, #80]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a68e:	fa22 f303 	lsr.w	r3, r2, r3
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a694:	e01e      	b.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a2:	d106      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6aa:	d102      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6b0:	e010      	b.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6be:	d106      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c6:	d102      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6c8:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6cc:	e002      	b.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6d2:	e245      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6d4:	e244      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6d6:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6da:	e241      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	03d09000 	.word	0x03d09000
 800a6e4:	003d0900 	.word	0x003d0900
 800a6e8:	017d7840 	.word	0x017d7840
 800a6ec:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f4:	e234      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fc:	f040 809c 	bne.w	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a700:	4b9b      	ldr	r3, [pc, #620]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a704:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a708:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a710:	d054      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a718:	f200 808b 	bhi.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a722:	f000 8083 	beq.w	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a72c:	f200 8081 	bhi.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a736:	d02f      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a73e:	d878      	bhi.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a74c:	d012      	beq.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a74e:	e070      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a750:	4b87      	ldr	r3, [pc, #540]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a75c:	d107      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a75e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a762:	4618      	mov	r0, r3
 800a764:	f000 fcc8 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a76c:	e1f8      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a772:	e1f5      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a774:	4b7e      	ldr	r3, [pc, #504]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a77c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a780:	d107      	bne.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a782:	f107 0318 	add.w	r3, r7, #24
 800a786:	4618      	mov	r0, r3
 800a788:	f000 fa0e 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a790:	e1e6      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a796:	e1e3      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a798:	4b75      	ldr	r3, [pc, #468]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a4:	d107      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a6:	f107 030c 	add.w	r3, r7, #12
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 fb50 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7b4:	e1d4      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ba:	e1d1      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7bc:	4b6c      	ldr	r3, [pc, #432]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7c4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7c6:	4b6a      	ldr	r3, [pc, #424]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0304 	and.w	r3, r3, #4
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	d10c      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d109      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7d8:	4b65      	ldr	r3, [pc, #404]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	08db      	lsrs	r3, r3, #3
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	4a64      	ldr	r2, [pc, #400]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ea:	e01e      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7ec:	4b60      	ldr	r3, [pc, #384]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f8:	d106      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a800:	d102      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a802:	4b5d      	ldr	r3, [pc, #372]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a806:	e010      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a808:	4b59      	ldr	r3, [pc, #356]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a814:	d106      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a81c:	d102      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a81e:	4b57      	ldr	r3, [pc, #348]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a822:	e002      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a828:	e19a      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a82a:	e199      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a82c:	4b54      	ldr	r3, [pc, #336]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a830:	e196      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a836:	e193      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a83e:	d173      	bne.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a840:	4b4b      	ldr	r3, [pc, #300]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a848:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a850:	d02f      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a858:	d863      	bhi.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a866:	d012      	beq.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a868:	e05b      	b.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a86a:	4b41      	ldr	r3, [pc, #260]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a876:	d107      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a878:	f107 0318 	add.w	r3, r7, #24
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 f993 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a886:	e16b      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a88c:	e168      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a88e:	4b38      	ldr	r3, [pc, #224]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89a:	d107      	bne.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89c:	f107 030c 	add.w	r3, r7, #12
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fad5 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8aa:	e159      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b0:	e156      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8b2:	4b2f      	ldr	r3, [pc, #188]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8bc:	4b2c      	ldr	r3, [pc, #176]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d10c      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d109      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8ce:	4b28      	ldr	r3, [pc, #160]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	08db      	lsrs	r3, r3, #3
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	4a26      	ldr	r2, [pc, #152]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a8da:	fa22 f303 	lsr.w	r3, r2, r3
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e0:	e01e      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8e2:	4b23      	ldr	r3, [pc, #140]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ee:	d106      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8f6:	d102      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8f8:	4b1f      	ldr	r3, [pc, #124]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fc:	e010      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8fe:	4b1c      	ldr	r3, [pc, #112]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a90a:	d106      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a914:	4b19      	ldr	r3, [pc, #100]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	e002      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a91e:	e11f      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a920:	e11e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a926:	e11b      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a92e:	d13e      	bne.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a930:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d004      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a946:	d01d      	beq.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a948:	e02e      	b.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a956:	d107      	bne.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fbcb 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a966:	e0fb      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a96c:	e0f8      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
 800a974:	03d09000 	.word	0x03d09000
 800a978:	003d0900 	.word	0x003d0900
 800a97c:	017d7840 	.word	0x017d7840
 800a980:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a984:	4b79      	ldr	r3, [pc, #484]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a98c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a990:	d107      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a992:	f107 0318 	add.w	r3, r7, #24
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f906 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9a0:	e0de      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a6:	e0db      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ac:	e0d8      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9b4:	f040 8085 	bne.w	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a9b8:	4b6c      	ldr	r3, [pc, #432]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a9c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9c8:	d06b      	beq.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9d0:	d874      	bhi.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9d8:	d056      	beq.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e0:	d86c      	bhi.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9e8:	d03b      	beq.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9f0:	d864      	bhi.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f8:	d021      	beq.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa00:	d85c      	bhi.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800aa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d004      	beq.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa0e:	d004      	beq.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800aa10:	e054      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa12:	f000 f8b3 	bl	800ab7c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa16:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aa18:	e0a2      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa1a:	4b54      	ldr	r3, [pc, #336]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa26:	d107      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa28:	f107 0318 	add.w	r3, r7, #24
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f8bb 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa36:	e093      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa3c:	e090      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa3e:	4b4b      	ldr	r3, [pc, #300]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4a:	d107      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa4c:	f107 030c 	add.w	r3, r7, #12
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 f9fd 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa5a:	e081      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa60:	e07e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa62:	4b42      	ldr	r3, [pc, #264]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0304 	and.w	r3, r3, #4
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d109      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa6e:	4b3f      	ldr	r3, [pc, #252]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	08db      	lsrs	r3, r3, #3
 800aa74:	f003 0303 	and.w	r3, r3, #3
 800aa78:	4a3d      	ldr	r2, [pc, #244]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa7a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa80:	e06e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa86:	e06b      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa88:	4b38      	ldr	r3, [pc, #224]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa94:	d102      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aa96:	4b37      	ldr	r3, [pc, #220]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa9a:	e061      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa0:	e05e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aaa2:	4b32      	ldr	r3, [pc, #200]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaae:	d102      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aab0:	4b31      	ldr	r3, [pc, #196]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aab4:	e054      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaba:	e051      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac0:	e04e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac8:	d148      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aaca:	4b28      	ldr	r3, [pc, #160]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aacc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aad2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aada:	d02a      	beq.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae2:	d838      	bhi.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaf0:	d00d      	beq.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aaf2:	e030      	b.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aaf4:	4b1d      	ldr	r3, [pc, #116]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aafc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab00:	d102      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ab02:	4b1d      	ldr	r3, [pc, #116]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab06:	e02b      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab0c:	e028      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab0e:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab1a:	d107      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fae9 	bl	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab2a:	e019      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab30:	e016      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab32:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab3e:	d107      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab40:	f107 0318 	add.w	r3, r7, #24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 f82f 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab4e:	e007      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab54:	e004      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab5a:	e001      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ab60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3740      	adds	r7, #64	; 0x40
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	58024400 	.word	0x58024400
 800ab70:	03d09000 	.word	0x03d09000
 800ab74:	003d0900 	.word	0x003d0900
 800ab78:	017d7840 	.word	0x017d7840

0800ab7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab80:	f7fe fb88 	bl	8009294 <HAL_RCC_GetHCLKFreq>
 800ab84:	4602      	mov	r2, r0
 800ab86:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	091b      	lsrs	r3, r3, #4
 800ab8c:	f003 0307 	and.w	r3, r3, #7
 800ab90:	4904      	ldr	r1, [pc, #16]	; (800aba4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab92:	5ccb      	ldrb	r3, [r1, r3]
 800ab94:	f003 031f 	and.w	r3, r3, #31
 800ab98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	58024400 	.word	0x58024400
 800aba4:	080104d8 	.word	0x080104d8

0800aba8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b089      	sub	sp, #36	; 0x24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb0:	4ba1      	ldr	r3, [pc, #644]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800abba:	4b9f      	ldr	r3, [pc, #636]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbe:	0b1b      	lsrs	r3, r3, #12
 800abc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abc6:	4b9c      	ldr	r3, [pc, #624]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	091b      	lsrs	r3, r3, #4
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800abd2:	4b99      	ldr	r3, [pc, #612]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	08db      	lsrs	r3, r3, #3
 800abd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 8111 	beq.w	800ae18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	f000 8083 	beq.w	800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f200 80a1 	bhi.w	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d056      	beq.n	800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac12:	e099      	b.n	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac14:	4b88      	ldr	r3, [pc, #544]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d02d      	beq.n	800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac20:	4b85      	ldr	r3, [pc, #532]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	08db      	lsrs	r3, r3, #3
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	4a84      	ldr	r2, [pc, #528]	; (800ae3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac30:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b7b      	ldr	r3, [pc, #492]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac7a:	e087      	b.n	800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b6a      	ldr	r3, [pc, #424]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acbe:	e065      	b.n	800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd2:	4b59      	ldr	r3, [pc, #356]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad02:	e043      	b.n	800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad16:	4b48      	ldr	r3, [pc, #288]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad46:	e021      	b.n	800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5a:	4b37      	ldr	r3, [pc, #220]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad8c:	4b2a      	ldr	r3, [pc, #168]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad90:	0a5b      	lsrs	r3, r3, #9
 800ad92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada6:	edd7 6a07 	vldr	s13, [r7, #28]
 800adaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb2:	ee17 2a90 	vmov	r2, s15
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800adba:	4b1f      	ldr	r3, [pc, #124]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add4:	edd7 6a07 	vldr	s13, [r7, #28]
 800add8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800addc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade0:	ee17 2a90 	vmov	r2, s15
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ade8:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adec:	0e1b      	lsrs	r3, r3, #24
 800adee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0e:	ee17 2a90 	vmov	r2, s15
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae16:	e008      	b.n	800ae2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	609a      	str	r2, [r3, #8]
}
 800ae2a:	bf00      	nop
 800ae2c:	3724      	adds	r7, #36	; 0x24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	58024400 	.word	0x58024400
 800ae3c:	03d09000 	.word	0x03d09000
 800ae40:	46000000 	.word	0x46000000
 800ae44:	4c742400 	.word	0x4c742400
 800ae48:	4a742400 	.word	0x4a742400
 800ae4c:	4bbebc20 	.word	0x4bbebc20

0800ae50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b089      	sub	sp, #36	; 0x24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae58:	4ba1      	ldr	r3, [pc, #644]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5c:	f003 0303 	and.w	r3, r3, #3
 800ae60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae62:	4b9f      	ldr	r3, [pc, #636]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae66:	0d1b      	lsrs	r3, r3, #20
 800ae68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae6e:	4b9c      	ldr	r3, [pc, #624]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae7a:	4b99      	ldr	r3, [pc, #612]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae7e:	08db      	lsrs	r3, r3, #3
 800ae80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	fb02 f303 	mul.w	r3, r2, r3
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 8111 	beq.w	800b0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	f000 8083 	beq.w	800afac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	f200 80a1 	bhi.w	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d056      	beq.n	800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aeba:	e099      	b.n	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aebc:	4b88      	ldr	r3, [pc, #544]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d02d      	beq.n	800af24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aec8:	4b85      	ldr	r3, [pc, #532]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	08db      	lsrs	r3, r3, #3
 800aece:	f003 0303 	and.w	r3, r3, #3
 800aed2:	4a84      	ldr	r2, [pc, #528]	; (800b0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aed4:	fa22 f303 	lsr.w	r3, r2, r3
 800aed8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	ee07 3a90 	vmov	s15, r3
 800aee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef2:	4b7b      	ldr	r3, [pc, #492]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af02:	ed97 6a03 	vldr	s12, [r7, #12]
 800af06:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af22:	e087      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af36:	4b6a      	ldr	r3, [pc, #424]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af46:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af66:	e065      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	ee07 3a90 	vmov	s15, r3
 800af6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7a:	4b59      	ldr	r3, [pc, #356]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afaa:	e043      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afbe:	4b48      	ldr	r3, [pc, #288]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afce:	ed97 6a03 	vldr	s12, [r7, #12]
 800afd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afee:	e021      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800affe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b002:	4b37      	ldr	r3, [pc, #220]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b012:	ed97 6a03 	vldr	s12, [r7, #12]
 800b016:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b032:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b034:	4b2a      	ldr	r3, [pc, #168]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	0a5b      	lsrs	r3, r3, #9
 800b03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b04a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b04e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b05a:	ee17 2a90 	vmov	r2, s15
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b062:	4b1f      	ldr	r3, [pc, #124]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	0c1b      	lsrs	r3, r3, #16
 800b068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06c:	ee07 3a90 	vmov	s15, r3
 800b070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b07c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b088:	ee17 2a90 	vmov	r2, s15
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b090:	4b13      	ldr	r3, [pc, #76]	; (800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	0e1b      	lsrs	r3, r3, #24
 800b096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b6:	ee17 2a90 	vmov	r2, s15
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0be:	e008      	b.n	800b0d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	609a      	str	r2, [r3, #8]
}
 800b0d2:	bf00      	nop
 800b0d4:	3724      	adds	r7, #36	; 0x24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	58024400 	.word	0x58024400
 800b0e4:	03d09000 	.word	0x03d09000
 800b0e8:	46000000 	.word	0x46000000
 800b0ec:	4c742400 	.word	0x4c742400
 800b0f0:	4a742400 	.word	0x4a742400
 800b0f4:	4bbebc20 	.word	0x4bbebc20

0800b0f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b089      	sub	sp, #36	; 0x24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b100:	4ba0      	ldr	r3, [pc, #640]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b10a:	4b9e      	ldr	r3, [pc, #632]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10e:	091b      	lsrs	r3, r3, #4
 800b110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b114:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b116:	4b9b      	ldr	r3, [pc, #620]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b120:	4b98      	ldr	r3, [pc, #608]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b124:	08db      	lsrs	r3, r3, #3
 800b126:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	fb02 f303 	mul.w	r3, r2, r3
 800b130:	ee07 3a90 	vmov	s15, r3
 800b134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b138:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 8111 	beq.w	800b366 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	2b02      	cmp	r3, #2
 800b148:	f000 8083 	beq.w	800b252 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	f200 80a1 	bhi.w	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d056      	beq.n	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b160:	e099      	b.n	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b162:	4b88      	ldr	r3, [pc, #544]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d02d      	beq.n	800b1ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b16e:	4b85      	ldr	r3, [pc, #532]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	08db      	lsrs	r3, r3, #3
 800b174:	f003 0303 	and.w	r3, r3, #3
 800b178:	4a83      	ldr	r2, [pc, #524]	; (800b388 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b17a:	fa22 f303 	lsr.w	r3, r2, r3
 800b17e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b198:	4b7a      	ldr	r3, [pc, #488]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a0:	ee07 3a90 	vmov	s15, r3
 800b1a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b38c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b1c8:	e087      	b.n	800b2da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1dc:	4b69      	ldr	r3, [pc, #420]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b38c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b20c:	e065      	b.n	800b2da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	ee07 3a90 	vmov	s15, r3
 800b214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b218:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b21c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b220:	4b58      	ldr	r3, [pc, #352]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b230:	ed97 6a03 	vldr	s12, [r7, #12]
 800b234:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b38c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b250:	e043      	b.n	800b2da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	ee07 3a90 	vmov	s15, r3
 800b258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b264:	4b47      	ldr	r3, [pc, #284]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26c:	ee07 3a90 	vmov	s15, r3
 800b270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b274:	ed97 6a03 	vldr	s12, [r7, #12]
 800b278:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b38c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b27c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b294:	e021      	b.n	800b2da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a8:	4b36      	ldr	r3, [pc, #216]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b0:	ee07 3a90 	vmov	s15, r3
 800b2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b38c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b2da:	4b2a      	ldr	r3, [pc, #168]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2de:	0a5b      	lsrs	r3, r3, #9
 800b2e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e4:	ee07 3a90 	vmov	s15, r3
 800b2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b300:	ee17 2a90 	vmov	r2, s15
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30c:	0c1b      	lsrs	r3, r3, #16
 800b30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b31e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b322:	edd7 6a07 	vldr	s13, [r7, #28]
 800b326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b32a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b32e:	ee17 2a90 	vmov	r2, s15
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b336:	4b13      	ldr	r3, [pc, #76]	; (800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33a:	0e1b      	lsrs	r3, r3, #24
 800b33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b340:	ee07 3a90 	vmov	s15, r3
 800b344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b34c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b350:	edd7 6a07 	vldr	s13, [r7, #28]
 800b354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b35c:	ee17 2a90 	vmov	r2, s15
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b364:	e008      	b.n	800b378 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	609a      	str	r2, [r3, #8]
}
 800b378:	bf00      	nop
 800b37a:	3724      	adds	r7, #36	; 0x24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	58024400 	.word	0x58024400
 800b388:	03d09000 	.word	0x03d09000
 800b38c:	46000000 	.word	0x46000000
 800b390:	4c742400 	.word	0x4c742400
 800b394:	4a742400 	.word	0x4a742400
 800b398:	4bbebc20 	.word	0x4bbebc20

0800b39c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3aa:	4b53      	ldr	r3, [pc, #332]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d101      	bne.n	800b3ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e099      	b.n	800b4ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b3ba:	4b4f      	ldr	r3, [pc, #316]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a4e      	ldr	r2, [pc, #312]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b3c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3c6:	f7f7 fab3 	bl	8002930 <HAL_GetTick>
 800b3ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3cc:	e008      	b.n	800b3e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b3ce:	f7f7 faaf 	bl	8002930 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d901      	bls.n	800b3e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e086      	b.n	800b4ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3e0:	4b45      	ldr	r3, [pc, #276]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1f0      	bne.n	800b3ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3ec:	4b42      	ldr	r3, [pc, #264]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	031b      	lsls	r3, r3, #12
 800b3fa:	493f      	ldr	r1, [pc, #252]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	628b      	str	r3, [r1, #40]	; 0x28
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	3b01      	subs	r3, #1
 800b406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	3b01      	subs	r3, #1
 800b410:	025b      	lsls	r3, r3, #9
 800b412:	b29b      	uxth	r3, r3
 800b414:	431a      	orrs	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	041b      	lsls	r3, r3, #16
 800b41e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b422:	431a      	orrs	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	3b01      	subs	r3, #1
 800b42a:	061b      	lsls	r3, r3, #24
 800b42c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b430:	4931      	ldr	r1, [pc, #196]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b432:	4313      	orrs	r3, r2
 800b434:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b436:	4b30      	ldr	r3, [pc, #192]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	492d      	ldr	r1, [pc, #180]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b444:	4313      	orrs	r3, r2
 800b446:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b448:	4b2b      	ldr	r3, [pc, #172]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	f023 0220 	bic.w	r2, r3, #32
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	4928      	ldr	r1, [pc, #160]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b456:	4313      	orrs	r3, r2
 800b458:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b45a:	4b27      	ldr	r3, [pc, #156]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	4a26      	ldr	r2, [pc, #152]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b460:	f023 0310 	bic.w	r3, r3, #16
 800b464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b466:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b46a:	4b24      	ldr	r3, [pc, #144]	; (800b4fc <RCCEx_PLL2_Config+0x160>)
 800b46c:	4013      	ands	r3, r2
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	69d2      	ldr	r2, [r2, #28]
 800b472:	00d2      	lsls	r2, r2, #3
 800b474:	4920      	ldr	r1, [pc, #128]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b476:	4313      	orrs	r3, r2
 800b478:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b47a:	4b1f      	ldr	r3, [pc, #124]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47e:	4a1e      	ldr	r2, [pc, #120]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b480:	f043 0310 	orr.w	r3, r3, #16
 800b484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d106      	bne.n	800b49a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b48c:	4b1a      	ldr	r3, [pc, #104]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b490:	4a19      	ldr	r2, [pc, #100]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b496:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b498:	e00f      	b.n	800b4ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d106      	bne.n	800b4ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4a0:	4b15      	ldr	r3, [pc, #84]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	4a14      	ldr	r2, [pc, #80]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4ac:	e005      	b.n	800b4ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b4ae:	4b12      	ldr	r3, [pc, #72]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	4a11      	ldr	r2, [pc, #68]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b4ba:	4b0f      	ldr	r3, [pc, #60]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a0e      	ldr	r2, [pc, #56]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4c6:	f7f7 fa33 	bl	8002930 <HAL_GetTick>
 800b4ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4cc:	e008      	b.n	800b4e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b4ce:	f7f7 fa2f 	bl	8002930 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d901      	bls.n	800b4e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e006      	b.n	800b4ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4e0:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <RCCEx_PLL2_Config+0x15c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d0f0      	beq.n	800b4ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	58024400 	.word	0x58024400
 800b4fc:	ffff0007 	.word	0xffff0007

0800b500 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b50e:	4b53      	ldr	r3, [pc, #332]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	f003 0303 	and.w	r3, r3, #3
 800b516:	2b03      	cmp	r3, #3
 800b518:	d101      	bne.n	800b51e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e099      	b.n	800b652 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b51e:	4b4f      	ldr	r3, [pc, #316]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a4e      	ldr	r2, [pc, #312]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b52a:	f7f7 fa01 	bl	8002930 <HAL_GetTick>
 800b52e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b530:	e008      	b.n	800b544 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b532:	f7f7 f9fd 	bl	8002930 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d901      	bls.n	800b544 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e086      	b.n	800b652 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b544:	4b45      	ldr	r3, [pc, #276]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1f0      	bne.n	800b532 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b550:	4b42      	ldr	r3, [pc, #264]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b554:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	051b      	lsls	r3, r3, #20
 800b55e:	493f      	ldr	r1, [pc, #252]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b560:	4313      	orrs	r3, r2
 800b562:	628b      	str	r3, [r1, #40]	; 0x28
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	3b01      	subs	r3, #1
 800b56a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	3b01      	subs	r3, #1
 800b574:	025b      	lsls	r3, r3, #9
 800b576:	b29b      	uxth	r3, r3
 800b578:	431a      	orrs	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	3b01      	subs	r3, #1
 800b580:	041b      	lsls	r3, r3, #16
 800b582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	061b      	lsls	r3, r3, #24
 800b590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b594:	4931      	ldr	r1, [pc, #196]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b596:	4313      	orrs	r3, r2
 800b598:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b59a:	4b30      	ldr	r3, [pc, #192]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	492d      	ldr	r1, [pc, #180]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5ac:	4b2b      	ldr	r3, [pc, #172]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	4928      	ldr	r1, [pc, #160]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5be:	4b27      	ldr	r3, [pc, #156]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	4a26      	ldr	r2, [pc, #152]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5ca:	4b24      	ldr	r3, [pc, #144]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5ce:	4b24      	ldr	r3, [pc, #144]	; (800b660 <RCCEx_PLL3_Config+0x160>)
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	69d2      	ldr	r2, [r2, #28]
 800b5d6:	00d2      	lsls	r2, r2, #3
 800b5d8:	4920      	ldr	r1, [pc, #128]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5de:	4b1f      	ldr	r3, [pc, #124]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e2:	4a1e      	ldr	r2, [pc, #120]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5f0:	4b1a      	ldr	r3, [pc, #104]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	4a19      	ldr	r2, [pc, #100]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b5f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5fc:	e00f      	b.n	800b61e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d106      	bne.n	800b612 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b604:	4b15      	ldr	r3, [pc, #84]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	4a14      	ldr	r2, [pc, #80]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b60a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b60e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b610:	e005      	b.n	800b61e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b612:	4b12      	ldr	r3, [pc, #72]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	4a11      	ldr	r2, [pc, #68]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b61c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b61e:	4b0f      	ldr	r3, [pc, #60]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a0e      	ldr	r2, [pc, #56]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b62a:	f7f7 f981 	bl	8002930 <HAL_GetTick>
 800b62e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b630:	e008      	b.n	800b644 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b632:	f7f7 f97d 	bl	8002930 <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d901      	bls.n	800b644 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e006      	b.n	800b652 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <RCCEx_PLL3_Config+0x15c>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0f0      	beq.n	800b632 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b650:	7bfb      	ldrb	r3, [r7, #15]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	58024400 	.word	0x58024400
 800b660:	ffff0007 	.word	0xffff0007

0800b664 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e0f1      	b.n	800b85a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a78      	ldr	r2, [pc, #480]	; (800b864 <HAL_SPI_Init+0x200>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d00f      	beq.n	800b6a6 <HAL_SPI_Init+0x42>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a77      	ldr	r2, [pc, #476]	; (800b868 <HAL_SPI_Init+0x204>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d00a      	beq.n	800b6a6 <HAL_SPI_Init+0x42>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a75      	ldr	r2, [pc, #468]	; (800b86c <HAL_SPI_Init+0x208>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d005      	beq.n	800b6a6 <HAL_SPI_Init+0x42>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	2b0f      	cmp	r3, #15
 800b6a0:	d901      	bls.n	800b6a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e0d9      	b.n	800b85a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fd74 	bl	800c194 <SPI_GetPacketSize>
 800b6ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a6c      	ldr	r2, [pc, #432]	; (800b864 <HAL_SPI_Init+0x200>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00c      	beq.n	800b6d2 <HAL_SPI_Init+0x6e>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a6a      	ldr	r2, [pc, #424]	; (800b868 <HAL_SPI_Init+0x204>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d007      	beq.n	800b6d2 <HAL_SPI_Init+0x6e>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a69      	ldr	r2, [pc, #420]	; (800b86c <HAL_SPI_Init+0x208>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d002      	beq.n	800b6d2 <HAL_SPI_Init+0x6e>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b08      	cmp	r3, #8
 800b6d0:	d811      	bhi.n	800b6f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6d6:	4a63      	ldr	r2, [pc, #396]	; (800b864 <HAL_SPI_Init+0x200>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d009      	beq.n	800b6f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a61      	ldr	r2, [pc, #388]	; (800b868 <HAL_SPI_Init+0x204>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d004      	beq.n	800b6f0 <HAL_SPI_Init+0x8c>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a60      	ldr	r2, [pc, #384]	; (800b86c <HAL_SPI_Init+0x208>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d104      	bne.n	800b6fa <HAL_SPI_Init+0x96>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2b10      	cmp	r3, #16
 800b6f4:	d901      	bls.n	800b6fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e0af      	b.n	800b85a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d106      	bne.n	800b714 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7f6 fd3e 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f022 0201 	bic.w	r2, r2, #1
 800b72a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b736:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b740:	d119      	bne.n	800b776 <HAL_SPI_Init+0x112>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b74a:	d103      	bne.n	800b754 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b750:	2b00      	cmp	r3, #0
 800b752:	d008      	beq.n	800b766 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10c      	bne.n	800b776 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b764:	d107      	bne.n	800b776 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b774:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	69da      	ldr	r2, [r3, #28]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77e:	431a      	orrs	r2, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b788:	ea42 0103 	orr.w	r1, r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68da      	ldr	r2, [r3, #12]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	430a      	orrs	r2, r1
 800b796:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d6:	ea42 0103 	orr.w	r1, r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d113      	bne.n	800b816 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b800:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b814:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f022 0201 	bic.w	r2, r2, #1
 800b824:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00a      	beq.n	800b848 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	430a      	orrs	r2, r1
 800b846:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	40013000 	.word	0x40013000
 800b868:	40003800 	.word	0x40003800
 800b86c:	40003c00 	.word	0x40003c00

0800b870 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08a      	sub	sp, #40	; 0x28
 800b874:	af02      	add	r7, sp, #8
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	603b      	str	r3, [r7, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3330      	adds	r3, #48	; 0x30
 800b88a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b894:	d112      	bne.n	800b8bc <HAL_SPI_Receive+0x4c>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10e      	bne.n	800b8bc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b8a6:	88fa      	ldrh	r2, [r7, #6]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	68b9      	ldr	r1, [r7, #8]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 f978 	bl	800bba8 <HAL_SPI_TransmitReceive>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	e16f      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d101      	bne.n	800b8ca <HAL_SPI_Receive+0x5a>
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e168      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8d2:	f7f7 f82d 	bl	8002930 <HAL_GetTick>
 800b8d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d007      	beq.n	800b8f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8f0:	7ffb      	ldrb	r3, [r7, #31]
 800b8f2:	e153      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <HAL_SPI_Receive+0x90>
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d107      	bne.n	800b910 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b90c:	7ffb      	ldrb	r3, [r7, #31]
 800b90e:	e145      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2204      	movs	r2, #4
 800b914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	88fa      	ldrh	r2, [r7, #6]
 800b932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b960:	d107      	bne.n	800b972 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b970:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	4b8a      	ldr	r3, [pc, #552]	; (800bba4 <HAL_SPI_Receive+0x334>)
 800b97a:	4013      	ands	r3, r2
 800b97c:	88f9      	ldrh	r1, [r7, #6]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	430b      	orrs	r3, r1
 800b984:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f042 0201 	orr.w	r2, r2, #1
 800b994:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b99e:	d107      	bne.n	800b9b0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	2b0f      	cmp	r3, #15
 800b9b6:	d948      	bls.n	800ba4a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9b8:	e040      	b.n	800ba3c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	695a      	ldr	r2, [r3, #20]
 800b9c0:	f248 0308 	movw	r3, #32776	; 0x8008
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d014      	beq.n	800b9f4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b9d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9da:	1d1a      	adds	r2, r3, #4
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9f2:	e023      	b.n	800ba3c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9f4:	f7f6 ff9c 	bl	8002930 <HAL_GetTick>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d803      	bhi.n	800ba0c <HAL_SPI_Receive+0x19c>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba0a:	d102      	bne.n	800ba12 <HAL_SPI_Receive+0x1a2>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d114      	bne.n	800ba3c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 faf0 	bl	800bff8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e0af      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1b8      	bne.n	800b9ba <HAL_SPI_Receive+0x14a>
 800ba48:	e095      	b.n	800bb76 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	2b07      	cmp	r3, #7
 800ba50:	f240 808b 	bls.w	800bb6a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ba54:	e03f      	b.n	800bad6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d114      	bne.n	800ba8e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	8812      	ldrh	r2, [r2, #0]
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba74:	1c9a      	adds	r2, r3, #2
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b01      	subs	r3, #1
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba8c:	e023      	b.n	800bad6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba8e:	f7f6 ff4f 	bl	8002930 <HAL_GetTick>
 800ba92:	4602      	mov	r2, r0
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d803      	bhi.n	800baa6 <HAL_SPI_Receive+0x236>
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baa4:	d102      	bne.n	800baac <HAL_SPI_Receive+0x23c>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d114      	bne.n	800bad6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 faa3 	bl	800bff8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bac0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e062      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1b9      	bne.n	800ba56 <HAL_SPI_Receive+0x1e6>
 800bae2:	e048      	b.n	800bb76 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d117      	bne.n	800bb22 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bafe:	7812      	ldrb	r2, [r2, #0]
 800bb00:	b2d2      	uxtb	r2, r2
 800bb02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	3b01      	subs	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb20:	e023      	b.n	800bb6a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb22:	f7f6 ff05 	bl	8002930 <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d803      	bhi.n	800bb3a <HAL_SPI_Receive+0x2ca>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb38:	d102      	bne.n	800bb40 <HAL_SPI_Receive+0x2d0>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d114      	bne.n	800bb6a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f000 fa59 	bl	800bff8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e018      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1b6      	bne.n	800bae4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f000 fa3e 	bl	800bff8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e000      	b.n	800bb9c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bb9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3720      	adds	r7, #32
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	ffff0000 	.word	0xffff0000

0800bba8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08e      	sub	sp, #56	; 0x38
 800bbac:	af02      	add	r7, sp, #8
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
 800bbb4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3320      	adds	r3, #32
 800bbc2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3330      	adds	r3, #48	; 0x30
 800bbca:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d101      	bne.n	800bbda <HAL_SPI_TransmitReceive+0x32>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e209      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbe2:	f7f6 fea5 	bl	8002930 <HAL_GetTick>
 800bbe6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bbe8:	887b      	ldrh	r3, [r7, #2]
 800bbea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bbec:	887b      	ldrh	r3, [r7, #2]
 800bbee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bbf6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bbfe:	7efb      	ldrb	r3, [r7, #27]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d014      	beq.n	800bc2e <HAL_SPI_TransmitReceive+0x86>
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc0a:	d106      	bne.n	800bc1a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d102      	bne.n	800bc1a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bc14:	7efb      	ldrb	r3, [r7, #27]
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d009      	beq.n	800bc2e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc2c:	e1df      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d005      	beq.n	800bc40 <HAL_SPI_TransmitReceive+0x98>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <HAL_SPI_TransmitReceive+0x98>
 800bc3a:	887b      	ldrh	r3, [r7, #2]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc52:	e1cc      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	d003      	beq.n	800bc68 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2205      	movs	r2, #5
 800bc64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	887a      	ldrh	r2, [r7, #2]
 800bc7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	887a      	ldrh	r2, [r7, #2]
 800bc82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	887a      	ldrh	r2, [r7, #2]
 800bc90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	887a      	ldrh	r2, [r7, #2]
 800bc98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	4b82      	ldr	r3, [pc, #520]	; (800beb8 <HAL_SPI_TransmitReceive+0x310>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	8879      	ldrh	r1, [r7, #2]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0201 	orr.w	r2, r2, #1
 800bcca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcd4:	d107      	bne.n	800bce6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b0f      	cmp	r3, #15
 800bcec:	d970      	bls.n	800bdd0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bcee:	e068      	b.n	800bdc2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d11a      	bne.n	800bd34 <HAL_SPI_TransmitReceive+0x18c>
 800bcfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d017      	beq.n	800bd34 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	3b01      	subs	r3, #1
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd32:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	695a      	ldr	r2, [r3, #20]
 800bd3a:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd3e:	4013      	ands	r3, r2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d01a      	beq.n	800bd7a <HAL_SPI_TransmitReceive+0x1d2>
 800bd44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d017      	beq.n	800bd7a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd5a:	1d1a      	adds	r2, r3, #4
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd78:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd7a:	f7f6 fdd9 	bl	8002930 <HAL_GetTick>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d803      	bhi.n	800bd92 <HAL_SPI_TransmitReceive+0x1ea>
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd90:	d102      	bne.n	800bd98 <HAL_SPI_TransmitReceive+0x1f0>
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d114      	bne.n	800bdc2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f92d 	bl	800bff8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e115      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d193      	bne.n	800bcf0 <HAL_SPI_TransmitReceive+0x148>
 800bdc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d190      	bne.n	800bcf0 <HAL_SPI_TransmitReceive+0x148>
 800bdce:	e0e7      	b.n	800bfa0 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	2b07      	cmp	r3, #7
 800bdd6:	f240 80dd 	bls.w	800bf94 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdda:	e066      	b.n	800beaa <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	f003 0302 	and.w	r3, r3, #2
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d119      	bne.n	800be1e <HAL_SPI_TransmitReceive+0x276>
 800bdea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d016      	beq.n	800be1e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdf4:	881a      	ldrh	r2, [r3, #0]
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdfe:	1c9a      	adds	r2, r3, #2
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b29a      	uxth	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d11a      	bne.n	800be62 <HAL_SPI_TransmitReceive+0x2ba>
 800be2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d017      	beq.n	800be62 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be36:	6a3a      	ldr	r2, [r7, #32]
 800be38:	8812      	ldrh	r2, [r2, #0]
 800be3a:	b292      	uxth	r2, r2
 800be3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be42:	1c9a      	adds	r2, r3, #2
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be4e:	b29b      	uxth	r3, r3
 800be50:	3b01      	subs	r3, #1
 800be52:	b29a      	uxth	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be60:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be62:	f7f6 fd65 	bl	8002930 <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be6e:	429a      	cmp	r2, r3
 800be70:	d803      	bhi.n	800be7a <HAL_SPI_TransmitReceive+0x2d2>
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be78:	d102      	bne.n	800be80 <HAL_SPI_TransmitReceive+0x2d8>
 800be7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d114      	bne.n	800beaa <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f8b9 	bl	800bff8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e0a1      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800beaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800beac:	2b00      	cmp	r3, #0
 800beae:	d195      	bne.n	800bddc <HAL_SPI_TransmitReceive+0x234>
 800beb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d192      	bne.n	800bddc <HAL_SPI_TransmitReceive+0x234>
 800beb6:	e073      	b.n	800bfa0 <HAL_SPI_TransmitReceive+0x3f8>
 800beb8:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	f003 0302 	and.w	r3, r3, #2
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d11b      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x35a>
 800beca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800becc:	2b00      	cmp	r3, #0
 800bece:	d018      	beq.n	800bf02 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3320      	adds	r3, #32
 800beda:	7812      	ldrb	r2, [r2, #0]
 800bedc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beee:	b29b      	uxth	r3, r3
 800bef0:	3b01      	subs	r3, #1
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf00:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d11d      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x3a4>
 800bf10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01a      	beq.n	800bf4c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf22:	7812      	ldrb	r2, [r2, #0]
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf2c:	1c5a      	adds	r2, r3, #1
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf4c:	f7f6 fcf0 	bl	8002930 <HAL_GetTick>
 800bf50:	4602      	mov	r2, r0
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d803      	bhi.n	800bf64 <HAL_SPI_TransmitReceive+0x3bc>
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf62:	d102      	bne.n	800bf6a <HAL_SPI_TransmitReceive+0x3c2>
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d114      	bne.n	800bf94 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f844 	bl	800bff8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e02c      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d190      	bne.n	800bebc <HAL_SPI_TransmitReceive+0x314>
 800bf9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d18d      	bne.n	800bebc <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2108      	movs	r1, #8
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f8c4 	bl	800c138 <SPI_WaitOnFlagUntilTimeout>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbc:	f043 0220 	orr.w	r2, r3, #32
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 f816 	bl	800bff8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e001      	b.n	800bfee <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bfea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3730      	adds	r7, #48	; 0x30
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop

0800bff8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f042 0208 	orr.w	r2, r2, #8
 800c016:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	699a      	ldr	r2, [r3, #24]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f042 0210 	orr.w	r2, r2, #16
 800c026:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f022 0201 	bic.w	r2, r2, #1
 800c036:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6919      	ldr	r1, [r3, #16]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	4b3c      	ldr	r3, [pc, #240]	; (800c134 <SPI_CloseTransfer+0x13c>)
 800c044:	400b      	ands	r3, r1
 800c046:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	689a      	ldr	r2, [r3, #8]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c056:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b04      	cmp	r3, #4
 800c062:	d014      	beq.n	800c08e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f003 0320 	and.w	r3, r3, #32
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00f      	beq.n	800c08e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c074:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	699a      	ldr	r2, [r3, #24]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f042 0220 	orr.w	r2, r2, #32
 800c08c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b03      	cmp	r3, #3
 800c098:	d014      	beq.n	800c0c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00f      	beq.n	800c0c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0aa:	f043 0204 	orr.w	r2, r3, #4
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	699a      	ldr	r2, [r3, #24]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00f      	beq.n	800c0ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0d4:	f043 0201 	orr.w	r2, r3, #1
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	699a      	ldr	r2, [r3, #24]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00f      	beq.n	800c118 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0fe:	f043 0208 	orr.w	r2, r3, #8
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c116:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c128:	bf00      	nop
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	fffffc90 	.word	0xfffffc90

0800c138 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	4613      	mov	r3, r2
 800c146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c148:	e010      	b.n	800c16c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c14a:	f7f6 fbf1 	bl	8002930 <HAL_GetTick>
 800c14e:	4602      	mov	r2, r0
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	429a      	cmp	r2, r3
 800c158:	d803      	bhi.n	800c162 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c160:	d102      	bne.n	800c168 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	e00f      	b.n	800c18c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	695a      	ldr	r2, [r3, #20]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	4013      	ands	r3, r2
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	429a      	cmp	r2, r3
 800c17a:	bf0c      	ite	eq
 800c17c:	2301      	moveq	r3, #1
 800c17e:	2300      	movne	r3, #0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	429a      	cmp	r2, r3
 800c188:	d0df      	beq.n	800c14a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a0:	095b      	lsrs	r3, r3, #5
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	3307      	adds	r3, #7
 800c1b2:	08db      	lsrs	r3, r3, #3
 800c1b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e049      	b.n	800c270 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d106      	bne.n	800c1f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7f6 f8bd 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3304      	adds	r3, #4
 800c206:	4619      	mov	r1, r3
 800c208:	4610      	mov	r0, r2
 800c20a:	f000 ff2d 	bl	800d068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d109      	bne.n	800c2a0 <HAL_TIM_OC_Start_IT+0x28>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b01      	cmp	r3, #1
 800c296:	bf14      	ite	ne
 800c298:	2301      	movne	r3, #1
 800c29a:	2300      	moveq	r3, #0
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	e03c      	b.n	800c31a <HAL_TIM_OC_Start_IT+0xa2>
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b04      	cmp	r3, #4
 800c2a4:	d109      	bne.n	800c2ba <HAL_TIM_OC_Start_IT+0x42>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	bf14      	ite	ne
 800c2b2:	2301      	movne	r3, #1
 800c2b4:	2300      	moveq	r3, #0
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	e02f      	b.n	800c31a <HAL_TIM_OC_Start_IT+0xa2>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d109      	bne.n	800c2d4 <HAL_TIM_OC_Start_IT+0x5c>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	bf14      	ite	ne
 800c2cc:	2301      	movne	r3, #1
 800c2ce:	2300      	moveq	r3, #0
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	e022      	b.n	800c31a <HAL_TIM_OC_Start_IT+0xa2>
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b0c      	cmp	r3, #12
 800c2d8:	d109      	bne.n	800c2ee <HAL_TIM_OC_Start_IT+0x76>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	bf14      	ite	ne
 800c2e6:	2301      	movne	r3, #1
 800c2e8:	2300      	moveq	r3, #0
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	e015      	b.n	800c31a <HAL_TIM_OC_Start_IT+0xa2>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b10      	cmp	r3, #16
 800c2f2:	d109      	bne.n	800c308 <HAL_TIM_OC_Start_IT+0x90>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	bf14      	ite	ne
 800c300:	2301      	movne	r3, #1
 800c302:	2300      	moveq	r3, #0
 800c304:	b2db      	uxtb	r3, r3
 800c306:	e008      	b.n	800c31a <HAL_TIM_OC_Start_IT+0xa2>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	2b01      	cmp	r3, #1
 800c312:	bf14      	ite	ne
 800c314:	2301      	movne	r3, #1
 800c316:	2300      	moveq	r3, #0
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e0ec      	b.n	800c4fc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d104      	bne.n	800c332 <HAL_TIM_OC_Start_IT+0xba>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2202      	movs	r2, #2
 800c32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c330:	e023      	b.n	800c37a <HAL_TIM_OC_Start_IT+0x102>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b04      	cmp	r3, #4
 800c336:	d104      	bne.n	800c342 <HAL_TIM_OC_Start_IT+0xca>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2202      	movs	r2, #2
 800c33c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c340:	e01b      	b.n	800c37a <HAL_TIM_OC_Start_IT+0x102>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b08      	cmp	r3, #8
 800c346:	d104      	bne.n	800c352 <HAL_TIM_OC_Start_IT+0xda>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c350:	e013      	b.n	800c37a <HAL_TIM_OC_Start_IT+0x102>
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b0c      	cmp	r3, #12
 800c356:	d104      	bne.n	800c362 <HAL_TIM_OC_Start_IT+0xea>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2202      	movs	r2, #2
 800c35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c360:	e00b      	b.n	800c37a <HAL_TIM_OC_Start_IT+0x102>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	2b10      	cmp	r3, #16
 800c366:	d104      	bne.n	800c372 <HAL_TIM_OC_Start_IT+0xfa>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c370:	e003      	b.n	800c37a <HAL_TIM_OC_Start_IT+0x102>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2202      	movs	r2, #2
 800c376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b0c      	cmp	r3, #12
 800c37e:	d841      	bhi.n	800c404 <HAL_TIM_OC_Start_IT+0x18c>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <HAL_TIM_OC_Start_IT+0x110>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c3bd 	.word	0x0800c3bd
 800c38c:	0800c405 	.word	0x0800c405
 800c390:	0800c405 	.word	0x0800c405
 800c394:	0800c405 	.word	0x0800c405
 800c398:	0800c3cf 	.word	0x0800c3cf
 800c39c:	0800c405 	.word	0x0800c405
 800c3a0:	0800c405 	.word	0x0800c405
 800c3a4:	0800c405 	.word	0x0800c405
 800c3a8:	0800c3e1 	.word	0x0800c3e1
 800c3ac:	0800c405 	.word	0x0800c405
 800c3b0:	0800c405 	.word	0x0800c405
 800c3b4:	0800c405 	.word	0x0800c405
 800c3b8:	0800c3f3 	.word	0x0800c3f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68da      	ldr	r2, [r3, #12]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0202 	orr.w	r2, r2, #2
 800c3ca:	60da      	str	r2, [r3, #12]
      break;
 800c3cc:	e01d      	b.n	800c40a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f042 0204 	orr.w	r2, r2, #4
 800c3dc:	60da      	str	r2, [r3, #12]
      break;
 800c3de:	e014      	b.n	800c40a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68da      	ldr	r2, [r3, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0208 	orr.w	r2, r2, #8
 800c3ee:	60da      	str	r2, [r3, #12]
      break;
 800c3f0:	e00b      	b.n	800c40a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0210 	orr.w	r2, r2, #16
 800c400:	60da      	str	r2, [r3, #12]
      break;
 800c402:	e002      	b.n	800c40a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
      break;
 800c408:	bf00      	nop
  }

  if (status == HAL_OK)
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d174      	bne.n	800c4fa <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2201      	movs	r2, #1
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 fa33 	bl	800d884 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a38      	ldr	r2, [pc, #224]	; (800c504 <HAL_TIM_OC_Start_IT+0x28c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d013      	beq.n	800c450 <HAL_TIM_OC_Start_IT+0x1d8>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a36      	ldr	r2, [pc, #216]	; (800c508 <HAL_TIM_OC_Start_IT+0x290>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00e      	beq.n	800c450 <HAL_TIM_OC_Start_IT+0x1d8>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a35      	ldr	r2, [pc, #212]	; (800c50c <HAL_TIM_OC_Start_IT+0x294>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d009      	beq.n	800c450 <HAL_TIM_OC_Start_IT+0x1d8>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a33      	ldr	r2, [pc, #204]	; (800c510 <HAL_TIM_OC_Start_IT+0x298>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d004      	beq.n	800c450 <HAL_TIM_OC_Start_IT+0x1d8>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a32      	ldr	r2, [pc, #200]	; (800c514 <HAL_TIM_OC_Start_IT+0x29c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d101      	bne.n	800c454 <HAL_TIM_OC_Start_IT+0x1dc>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <HAL_TIM_OC_Start_IT+0x1de>
 800c454:	2300      	movs	r3, #0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c468:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a25      	ldr	r2, [pc, #148]	; (800c504 <HAL_TIM_OC_Start_IT+0x28c>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d022      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c47c:	d01d      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a25      	ldr	r2, [pc, #148]	; (800c518 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d018      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a23      	ldr	r2, [pc, #140]	; (800c51c <HAL_TIM_OC_Start_IT+0x2a4>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d013      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a22      	ldr	r2, [pc, #136]	; (800c520 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00e      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a19      	ldr	r2, [pc, #100]	; (800c508 <HAL_TIM_OC_Start_IT+0x290>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d009      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a1e      	ldr	r2, [pc, #120]	; (800c524 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d004      	beq.n	800c4ba <HAL_TIM_OC_Start_IT+0x242>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a15      	ldr	r2, [pc, #84]	; (800c50c <HAL_TIM_OC_Start_IT+0x294>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d115      	bne.n	800c4e6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	4b19      	ldr	r3, [pc, #100]	; (800c528 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b06      	cmp	r3, #6
 800c4ca:	d015      	beq.n	800c4f8 <HAL_TIM_OC_Start_IT+0x280>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d2:	d011      	beq.n	800c4f8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f042 0201 	orr.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e4:	e008      	b.n	800c4f8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e000      	b.n	800c4fa <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	40010000 	.word	0x40010000
 800c508:	40010400 	.word	0x40010400
 800c50c:	40014000 	.word	0x40014000
 800c510:	40014400 	.word	0x40014400
 800c514:	40014800 	.word	0x40014800
 800c518:	40000400 	.word	0x40000400
 800c51c:	40000800 	.word	0x40000800
 800c520:	40000c00 	.word	0x40000c00
 800c524:	40001800 	.word	0x40001800
 800c528:	00010007 	.word	0x00010007

0800c52c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b0c      	cmp	r3, #12
 800c53e:	d841      	bhi.n	800c5c4 <HAL_TIM_OC_Stop_IT+0x98>
 800c540:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c546:	bf00      	nop
 800c548:	0800c57d 	.word	0x0800c57d
 800c54c:	0800c5c5 	.word	0x0800c5c5
 800c550:	0800c5c5 	.word	0x0800c5c5
 800c554:	0800c5c5 	.word	0x0800c5c5
 800c558:	0800c58f 	.word	0x0800c58f
 800c55c:	0800c5c5 	.word	0x0800c5c5
 800c560:	0800c5c5 	.word	0x0800c5c5
 800c564:	0800c5c5 	.word	0x0800c5c5
 800c568:	0800c5a1 	.word	0x0800c5a1
 800c56c:	0800c5c5 	.word	0x0800c5c5
 800c570:	0800c5c5 	.word	0x0800c5c5
 800c574:	0800c5c5 	.word	0x0800c5c5
 800c578:	0800c5b3 	.word	0x0800c5b3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68da      	ldr	r2, [r3, #12]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f022 0202 	bic.w	r2, r2, #2
 800c58a:	60da      	str	r2, [r3, #12]
      break;
 800c58c:	e01d      	b.n	800c5ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68da      	ldr	r2, [r3, #12]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f022 0204 	bic.w	r2, r2, #4
 800c59c:	60da      	str	r2, [r3, #12]
      break;
 800c59e:	e014      	b.n	800c5ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68da      	ldr	r2, [r3, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0208 	bic.w	r2, r2, #8
 800c5ae:	60da      	str	r2, [r3, #12]
      break;
 800c5b0:	e00b      	b.n	800c5ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68da      	ldr	r2, [r3, #12]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 0210 	bic.w	r2, r2, #16
 800c5c0:	60da      	str	r2, [r3, #12]
      break;
 800c5c2:	e002      	b.n	800c5ca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5c8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f040 8081 	bne.w	800c6d4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f001 f952 	bl	800d884 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a3e      	ldr	r2, [pc, #248]	; (800c6e0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d013      	beq.n	800c612 <HAL_TIM_OC_Stop_IT+0xe6>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a3d      	ldr	r2, [pc, #244]	; (800c6e4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d00e      	beq.n	800c612 <HAL_TIM_OC_Stop_IT+0xe6>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a3b      	ldr	r2, [pc, #236]	; (800c6e8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d009      	beq.n	800c612 <HAL_TIM_OC_Stop_IT+0xe6>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a3a      	ldr	r2, [pc, #232]	; (800c6ec <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d004      	beq.n	800c612 <HAL_TIM_OC_Stop_IT+0xe6>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a38      	ldr	r2, [pc, #224]	; (800c6f0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d101      	bne.n	800c616 <HAL_TIM_OC_Stop_IT+0xea>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <HAL_TIM_OC_Stop_IT+0xec>
 800c616:	2300      	movs	r3, #0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d017      	beq.n	800c64c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6a1a      	ldr	r2, [r3, #32]
 800c622:	f241 1311 	movw	r3, #4369	; 0x1111
 800c626:	4013      	ands	r3, r2
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10f      	bne.n	800c64c <HAL_TIM_OC_Stop_IT+0x120>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6a1a      	ldr	r2, [r3, #32]
 800c632:	f240 4344 	movw	r3, #1092	; 0x444
 800c636:	4013      	ands	r3, r2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d107      	bne.n	800c64c <HAL_TIM_OC_Stop_IT+0x120>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c64a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6a1a      	ldr	r2, [r3, #32]
 800c652:	f241 1311 	movw	r3, #4369	; 0x1111
 800c656:	4013      	ands	r3, r2
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10f      	bne.n	800c67c <HAL_TIM_OC_Stop_IT+0x150>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6a1a      	ldr	r2, [r3, #32]
 800c662:	f240 4344 	movw	r3, #1092	; 0x444
 800c666:	4013      	ands	r3, r2
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d107      	bne.n	800c67c <HAL_TIM_OC_Stop_IT+0x150>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f022 0201 	bic.w	r2, r2, #1
 800c67a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d104      	bne.n	800c68c <HAL_TIM_OC_Stop_IT+0x160>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c68a:	e023      	b.n	800c6d4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b04      	cmp	r3, #4
 800c690:	d104      	bne.n	800c69c <HAL_TIM_OC_Stop_IT+0x170>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c69a:	e01b      	b.n	800c6d4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2b08      	cmp	r3, #8
 800c6a0:	d104      	bne.n	800c6ac <HAL_TIM_OC_Stop_IT+0x180>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6aa:	e013      	b.n	800c6d4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b0c      	cmp	r3, #12
 800c6b0:	d104      	bne.n	800c6bc <HAL_TIM_OC_Stop_IT+0x190>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6ba:	e00b      	b.n	800c6d4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b10      	cmp	r3, #16
 800c6c0:	d104      	bne.n	800c6cc <HAL_TIM_OC_Stop_IT+0x1a0>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6ca:	e003      	b.n	800c6d4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400
 800c6e8:	40014000 	.word	0x40014000
 800c6ec:	40014400 	.word	0x40014400
 800c6f0:	40014800 	.word	0x40014800

0800c6f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e049      	b.n	800c79a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d106      	bne.n	800c720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7f5 fde8 	bl	80022f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2202      	movs	r2, #2
 800c724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3304      	adds	r3, #4
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f000 fc98 	bl	800d068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
	...

0800c7a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d109      	bne.n	800c7c8 <HAL_TIM_PWM_Start+0x24>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	bf14      	ite	ne
 800c7c0:	2301      	movne	r3, #1
 800c7c2:	2300      	moveq	r3, #0
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	e03c      	b.n	800c842 <HAL_TIM_PWM_Start+0x9e>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b04      	cmp	r3, #4
 800c7cc:	d109      	bne.n	800c7e2 <HAL_TIM_PWM_Start+0x3e>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	bf14      	ite	ne
 800c7da:	2301      	movne	r3, #1
 800c7dc:	2300      	moveq	r3, #0
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	e02f      	b.n	800c842 <HAL_TIM_PWM_Start+0x9e>
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b08      	cmp	r3, #8
 800c7e6:	d109      	bne.n	800c7fc <HAL_TIM_PWM_Start+0x58>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	bf14      	ite	ne
 800c7f4:	2301      	movne	r3, #1
 800c7f6:	2300      	moveq	r3, #0
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	e022      	b.n	800c842 <HAL_TIM_PWM_Start+0x9e>
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b0c      	cmp	r3, #12
 800c800:	d109      	bne.n	800c816 <HAL_TIM_PWM_Start+0x72>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	bf14      	ite	ne
 800c80e:	2301      	movne	r3, #1
 800c810:	2300      	moveq	r3, #0
 800c812:	b2db      	uxtb	r3, r3
 800c814:	e015      	b.n	800c842 <HAL_TIM_PWM_Start+0x9e>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b10      	cmp	r3, #16
 800c81a:	d109      	bne.n	800c830 <HAL_TIM_PWM_Start+0x8c>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b01      	cmp	r3, #1
 800c826:	bf14      	ite	ne
 800c828:	2301      	movne	r3, #1
 800c82a:	2300      	moveq	r3, #0
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	e008      	b.n	800c842 <HAL_TIM_PWM_Start+0x9e>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b01      	cmp	r3, #1
 800c83a:	bf14      	ite	ne
 800c83c:	2301      	movne	r3, #1
 800c83e:	2300      	moveq	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	e0a1      	b.n	800c98e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d104      	bne.n	800c85a <HAL_TIM_PWM_Start+0xb6>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2202      	movs	r2, #2
 800c854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c858:	e023      	b.n	800c8a2 <HAL_TIM_PWM_Start+0xfe>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	d104      	bne.n	800c86a <HAL_TIM_PWM_Start+0xc6>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c868:	e01b      	b.n	800c8a2 <HAL_TIM_PWM_Start+0xfe>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b08      	cmp	r3, #8
 800c86e:	d104      	bne.n	800c87a <HAL_TIM_PWM_Start+0xd6>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2202      	movs	r2, #2
 800c874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c878:	e013      	b.n	800c8a2 <HAL_TIM_PWM_Start+0xfe>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b0c      	cmp	r3, #12
 800c87e:	d104      	bne.n	800c88a <HAL_TIM_PWM_Start+0xe6>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2202      	movs	r2, #2
 800c884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c888:	e00b      	b.n	800c8a2 <HAL_TIM_PWM_Start+0xfe>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b10      	cmp	r3, #16
 800c88e:	d104      	bne.n	800c89a <HAL_TIM_PWM_Start+0xf6>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c898:	e003      	b.n	800c8a2 <HAL_TIM_PWM_Start+0xfe>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2202      	movs	r2, #2
 800c89e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 ffea 	bl	800d884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a38      	ldr	r2, [pc, #224]	; (800c998 <HAL_TIM_PWM_Start+0x1f4>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d013      	beq.n	800c8e2 <HAL_TIM_PWM_Start+0x13e>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a37      	ldr	r2, [pc, #220]	; (800c99c <HAL_TIM_PWM_Start+0x1f8>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00e      	beq.n	800c8e2 <HAL_TIM_PWM_Start+0x13e>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a35      	ldr	r2, [pc, #212]	; (800c9a0 <HAL_TIM_PWM_Start+0x1fc>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d009      	beq.n	800c8e2 <HAL_TIM_PWM_Start+0x13e>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a34      	ldr	r2, [pc, #208]	; (800c9a4 <HAL_TIM_PWM_Start+0x200>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d004      	beq.n	800c8e2 <HAL_TIM_PWM_Start+0x13e>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a32      	ldr	r2, [pc, #200]	; (800c9a8 <HAL_TIM_PWM_Start+0x204>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d101      	bne.n	800c8e6 <HAL_TIM_PWM_Start+0x142>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <HAL_TIM_PWM_Start+0x144>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d007      	beq.n	800c8fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a25      	ldr	r2, [pc, #148]	; (800c998 <HAL_TIM_PWM_Start+0x1f4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d022      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c90e:	d01d      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a25      	ldr	r2, [pc, #148]	; (800c9ac <HAL_TIM_PWM_Start+0x208>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d018      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a24      	ldr	r2, [pc, #144]	; (800c9b0 <HAL_TIM_PWM_Start+0x20c>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d013      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a22      	ldr	r2, [pc, #136]	; (800c9b4 <HAL_TIM_PWM_Start+0x210>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d00e      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a1a      	ldr	r2, [pc, #104]	; (800c99c <HAL_TIM_PWM_Start+0x1f8>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d009      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a1e      	ldr	r2, [pc, #120]	; (800c9b8 <HAL_TIM_PWM_Start+0x214>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d004      	beq.n	800c94c <HAL_TIM_PWM_Start+0x1a8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a16      	ldr	r2, [pc, #88]	; (800c9a0 <HAL_TIM_PWM_Start+0x1fc>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d115      	bne.n	800c978 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	4b1a      	ldr	r3, [pc, #104]	; (800c9bc <HAL_TIM_PWM_Start+0x218>)
 800c954:	4013      	ands	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b06      	cmp	r3, #6
 800c95c:	d015      	beq.n	800c98a <HAL_TIM_PWM_Start+0x1e6>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c964:	d011      	beq.n	800c98a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f042 0201 	orr.w	r2, r2, #1
 800c974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c976:	e008      	b.n	800c98a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f042 0201 	orr.w	r2, r2, #1
 800c986:	601a      	str	r2, [r3, #0]
 800c988:	e000      	b.n	800c98c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c98a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	40010000 	.word	0x40010000
 800c99c:	40010400 	.word	0x40010400
 800c9a0:	40014000 	.word	0x40014000
 800c9a4:	40014400 	.word	0x40014400
 800c9a8:	40014800 	.word	0x40014800
 800c9ac:	40000400 	.word	0x40000400
 800c9b0:	40000800 	.word	0x40000800
 800c9b4:	40000c00 	.word	0x40000c00
 800c9b8:	40001800 	.word	0x40001800
 800c9bc:	00010007 	.word	0x00010007

0800c9c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d122      	bne.n	800ca1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	f003 0302 	and.w	r3, r3, #2
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d11b      	bne.n	800ca1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f06f 0202 	mvn.w	r2, #2
 800c9ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	f003 0303 	and.w	r3, r3, #3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d003      	beq.n	800ca0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fb12 	bl	800d02c <HAL_TIM_IC_CaptureCallback>
 800ca08:	e005      	b.n	800ca16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7f4 f920 	bl	8000c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fb15 	bl	800d040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	f003 0304 	and.w	r3, r3, #4
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d122      	bne.n	800ca70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	f003 0304 	and.w	r3, r3, #4
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d11b      	bne.n	800ca70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f06f 0204 	mvn.w	r2, #4
 800ca40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2202      	movs	r2, #2
 800ca46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d003      	beq.n	800ca5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fae8 	bl	800d02c <HAL_TIM_IC_CaptureCallback>
 800ca5c:	e005      	b.n	800ca6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7f4 f8f6 	bl	8000c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 faeb 	bl	800d040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	f003 0308 	and.w	r3, r3, #8
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d122      	bne.n	800cac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	f003 0308 	and.w	r3, r3, #8
 800ca88:	2b08      	cmp	r3, #8
 800ca8a:	d11b      	bne.n	800cac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f06f 0208 	mvn.w	r2, #8
 800ca94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2204      	movs	r2, #4
 800ca9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	69db      	ldr	r3, [r3, #28]
 800caa2:	f003 0303 	and.w	r3, r3, #3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fabe 	bl	800d02c <HAL_TIM_IC_CaptureCallback>
 800cab0:	e005      	b.n	800cabe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f4 f8cc 	bl	8000c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fac1 	bl	800d040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	f003 0310 	and.w	r3, r3, #16
 800cace:	2b10      	cmp	r3, #16
 800cad0:	d122      	bne.n	800cb18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f003 0310 	and.w	r3, r3, #16
 800cadc:	2b10      	cmp	r3, #16
 800cade:	d11b      	bne.n	800cb18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f06f 0210 	mvn.w	r2, #16
 800cae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2208      	movs	r2, #8
 800caee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fa94 	bl	800d02c <HAL_TIM_IC_CaptureCallback>
 800cb04:	e005      	b.n	800cb12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7f4 f8a2 	bl	8000c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fa97 	bl	800d040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d10e      	bne.n	800cb44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d107      	bne.n	800cb44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f06f 0201 	mvn.w	r2, #1
 800cb3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa6a 	bl	800d018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb4e:	2b80      	cmp	r3, #128	; 0x80
 800cb50:	d10e      	bne.n	800cb70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb5c:	2b80      	cmp	r3, #128	; 0x80
 800cb5e:	d107      	bne.n	800cb70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 ffc6 	bl	800dafc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb7e:	d10e      	bne.n	800cb9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8a:	2b80      	cmp	r3, #128	; 0x80
 800cb8c:	d107      	bne.n	800cb9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cb96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 ffb9 	bl	800db10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba8:	2b40      	cmp	r3, #64	; 0x40
 800cbaa:	d10e      	bne.n	800cbca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb6:	2b40      	cmp	r3, #64	; 0x40
 800cbb8:	d107      	bne.n	800cbca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fa45 	bl	800d054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	f003 0320 	and.w	r3, r3, #32
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d10e      	bne.n	800cbf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b20      	cmp	r3, #32
 800cbe4:	d107      	bne.n	800cbf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f06f 0220 	mvn.w	r2, #32
 800cbee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 ff79 	bl	800dae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d101      	bne.n	800cc1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	e0ff      	b.n	800ce1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b14      	cmp	r3, #20
 800cc2a:	f200 80f0 	bhi.w	800ce0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cc2e:	a201      	add	r2, pc, #4	; (adr r2, 800cc34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc34:	0800cc89 	.word	0x0800cc89
 800cc38:	0800ce0f 	.word	0x0800ce0f
 800cc3c:	0800ce0f 	.word	0x0800ce0f
 800cc40:	0800ce0f 	.word	0x0800ce0f
 800cc44:	0800ccc9 	.word	0x0800ccc9
 800cc48:	0800ce0f 	.word	0x0800ce0f
 800cc4c:	0800ce0f 	.word	0x0800ce0f
 800cc50:	0800ce0f 	.word	0x0800ce0f
 800cc54:	0800cd0b 	.word	0x0800cd0b
 800cc58:	0800ce0f 	.word	0x0800ce0f
 800cc5c:	0800ce0f 	.word	0x0800ce0f
 800cc60:	0800ce0f 	.word	0x0800ce0f
 800cc64:	0800cd4b 	.word	0x0800cd4b
 800cc68:	0800ce0f 	.word	0x0800ce0f
 800cc6c:	0800ce0f 	.word	0x0800ce0f
 800cc70:	0800ce0f 	.word	0x0800ce0f
 800cc74:	0800cd8d 	.word	0x0800cd8d
 800cc78:	0800ce0f 	.word	0x0800ce0f
 800cc7c:	0800ce0f 	.word	0x0800ce0f
 800cc80:	0800ce0f 	.word	0x0800ce0f
 800cc84:	0800cdcd 	.word	0x0800cdcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 fa84 	bl	800d19c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	699a      	ldr	r2, [r3, #24]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f042 0208 	orr.w	r2, r2, #8
 800cca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	699a      	ldr	r2, [r3, #24]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f022 0204 	bic.w	r2, r2, #4
 800ccb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6999      	ldr	r1, [r3, #24]
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	691a      	ldr	r2, [r3, #16]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	430a      	orrs	r2, r1
 800ccc4:	619a      	str	r2, [r3, #24]
      break;
 800ccc6:	e0a5      	b.n	800ce14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68b9      	ldr	r1, [r7, #8]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 faf4 	bl	800d2bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	699a      	ldr	r2, [r3, #24]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6999      	ldr	r1, [r3, #24]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	021a      	lsls	r2, r3, #8
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	430a      	orrs	r2, r1
 800cd06:	619a      	str	r2, [r3, #24]
      break;
 800cd08:	e084      	b.n	800ce14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 fb5d 	bl	800d3d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	69da      	ldr	r2, [r3, #28]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f042 0208 	orr.w	r2, r2, #8
 800cd24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	69da      	ldr	r2, [r3, #28]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 0204 	bic.w	r2, r2, #4
 800cd34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	69d9      	ldr	r1, [r3, #28]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	691a      	ldr	r2, [r3, #16]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	430a      	orrs	r2, r1
 800cd46:	61da      	str	r2, [r3, #28]
      break;
 800cd48:	e064      	b.n	800ce14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fbc5 	bl	800d4e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	69da      	ldr	r2, [r3, #28]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	69da      	ldr	r2, [r3, #28]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	69d9      	ldr	r1, [r3, #28]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	021a      	lsls	r2, r3, #8
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	430a      	orrs	r2, r1
 800cd88:	61da      	str	r2, [r3, #28]
      break;
 800cd8a:	e043      	b.n	800ce14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	68b9      	ldr	r1, [r7, #8]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 fc0e 	bl	800d5b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f042 0208 	orr.w	r2, r2, #8
 800cda6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 0204 	bic.w	r2, r2, #4
 800cdb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	691a      	ldr	r2, [r3, #16]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cdca:	e023      	b.n	800ce14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	68b9      	ldr	r1, [r7, #8]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 fc52 	bl	800d67c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cde6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	021a      	lsls	r2, r3, #8
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ce0c:	e002      	b.n	800ce14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	75fb      	strb	r3, [r7, #23]
      break;
 800ce12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop

0800ce28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d101      	bne.n	800ce44 <HAL_TIM_ConfigClockSource+0x1c>
 800ce40:	2302      	movs	r3, #2
 800ce42:	e0dc      	b.n	800cffe <HAL_TIM_ConfigClockSource+0x1d6>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	4b6a      	ldr	r3, [pc, #424]	; (800d008 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ce60:	4013      	ands	r3, r2
 800ce62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a64      	ldr	r2, [pc, #400]	; (800d00c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	f000 80a9 	beq.w	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce80:	4a62      	ldr	r2, [pc, #392]	; (800d00c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	f200 80ae 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce88:	4a61      	ldr	r2, [pc, #388]	; (800d010 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	f000 80a1 	beq.w	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce90:	4a5f      	ldr	r2, [pc, #380]	; (800d010 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	f200 80a6 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce98:	4a5e      	ldr	r2, [pc, #376]	; (800d014 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	f000 8099 	beq.w	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cea0:	4a5c      	ldr	r2, [pc, #368]	; (800d014 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	f200 809e 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cea8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ceac:	f000 8091 	beq.w	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ceb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ceb4:	f200 8096 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ceb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cebc:	f000 8089 	beq.w	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cec4:	f200 808e 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cecc:	d03e      	beq.n	800cf4c <HAL_TIM_ConfigClockSource+0x124>
 800cece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ced2:	f200 8087 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ced6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceda:	f000 8086 	beq.w	800cfea <HAL_TIM_ConfigClockSource+0x1c2>
 800cede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cee2:	d87f      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cee4:	2b70      	cmp	r3, #112	; 0x70
 800cee6:	d01a      	beq.n	800cf1e <HAL_TIM_ConfigClockSource+0xf6>
 800cee8:	2b70      	cmp	r3, #112	; 0x70
 800ceea:	d87b      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ceec:	2b60      	cmp	r3, #96	; 0x60
 800ceee:	d050      	beq.n	800cf92 <HAL_TIM_ConfigClockSource+0x16a>
 800cef0:	2b60      	cmp	r3, #96	; 0x60
 800cef2:	d877      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cef4:	2b50      	cmp	r3, #80	; 0x50
 800cef6:	d03c      	beq.n	800cf72 <HAL_TIM_ConfigClockSource+0x14a>
 800cef8:	2b50      	cmp	r3, #80	; 0x50
 800cefa:	d873      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cefc:	2b40      	cmp	r3, #64	; 0x40
 800cefe:	d058      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x18a>
 800cf00:	2b40      	cmp	r3, #64	; 0x40
 800cf02:	d86f      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf04:	2b30      	cmp	r3, #48	; 0x30
 800cf06:	d064      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf08:	2b30      	cmp	r3, #48	; 0x30
 800cf0a:	d86b      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf0c:	2b20      	cmp	r3, #32
 800cf0e:	d060      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	d867      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d05c      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf18:	2b10      	cmp	r3, #16
 800cf1a:	d05a      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cf1c:	e062      	b.n	800cfe4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	6899      	ldr	r1, [r3, #8]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	f000 fc89 	bl	800d844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68ba      	ldr	r2, [r7, #8]
 800cf48:	609a      	str	r2, [r3, #8]
      break;
 800cf4a:	e04f      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6818      	ldr	r0, [r3, #0]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	6899      	ldr	r1, [r3, #8]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	f000 fc72 	bl	800d844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	689a      	ldr	r2, [r3, #8]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf6e:	609a      	str	r2, [r3, #8]
      break;
 800cf70:	e03c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6818      	ldr	r0, [r3, #0]
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	6859      	ldr	r1, [r3, #4]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	f000 fbe2 	bl	800d748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2150      	movs	r1, #80	; 0x50
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f000 fc3c 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cf90:	e02c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6859      	ldr	r1, [r3, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f000 fc01 	bl	800d7a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2160      	movs	r1, #96	; 0x60
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fc2c 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cfb0:	e01c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6818      	ldr	r0, [r3, #0]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	6859      	ldr	r1, [r3, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f000 fbc2 	bl	800d748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2140      	movs	r1, #64	; 0x40
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fc1c 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cfd0:	e00c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4610      	mov	r0, r2
 800cfde:	f000 fc13 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cfe2:	e003      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe8:	e000      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cfea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	ffceff88 	.word	0xffceff88
 800d00c:	00100040 	.word	0x00100040
 800d010:	00100030 	.word	0x00100030
 800d014:	00100020 	.word	0x00100020

0800d018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a40      	ldr	r2, [pc, #256]	; (800d17c <TIM_Base_SetConfig+0x114>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d013      	beq.n	800d0a8 <TIM_Base_SetConfig+0x40>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d086:	d00f      	beq.n	800d0a8 <TIM_Base_SetConfig+0x40>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a3d      	ldr	r2, [pc, #244]	; (800d180 <TIM_Base_SetConfig+0x118>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d00b      	beq.n	800d0a8 <TIM_Base_SetConfig+0x40>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a3c      	ldr	r2, [pc, #240]	; (800d184 <TIM_Base_SetConfig+0x11c>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d007      	beq.n	800d0a8 <TIM_Base_SetConfig+0x40>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a3b      	ldr	r2, [pc, #236]	; (800d188 <TIM_Base_SetConfig+0x120>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d003      	beq.n	800d0a8 <TIM_Base_SetConfig+0x40>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a3a      	ldr	r2, [pc, #232]	; (800d18c <TIM_Base_SetConfig+0x124>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d108      	bne.n	800d0ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a2f      	ldr	r2, [pc, #188]	; (800d17c <TIM_Base_SetConfig+0x114>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d01f      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c8:	d01b      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a2c      	ldr	r2, [pc, #176]	; (800d180 <TIM_Base_SetConfig+0x118>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d017      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a2b      	ldr	r2, [pc, #172]	; (800d184 <TIM_Base_SetConfig+0x11c>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d013      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a2a      	ldr	r2, [pc, #168]	; (800d188 <TIM_Base_SetConfig+0x120>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00f      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a29      	ldr	r2, [pc, #164]	; (800d18c <TIM_Base_SetConfig+0x124>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d00b      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a28      	ldr	r2, [pc, #160]	; (800d190 <TIM_Base_SetConfig+0x128>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d007      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a27      	ldr	r2, [pc, #156]	; (800d194 <TIM_Base_SetConfig+0x12c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d003      	beq.n	800d102 <TIM_Base_SetConfig+0x9a>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a26      	ldr	r2, [pc, #152]	; (800d198 <TIM_Base_SetConfig+0x130>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d108      	bne.n	800d114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	4313      	orrs	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	4313      	orrs	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	689a      	ldr	r2, [r3, #8]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a10      	ldr	r2, [pc, #64]	; (800d17c <TIM_Base_SetConfig+0x114>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d00f      	beq.n	800d160 <TIM_Base_SetConfig+0xf8>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4a12      	ldr	r2, [pc, #72]	; (800d18c <TIM_Base_SetConfig+0x124>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d00b      	beq.n	800d160 <TIM_Base_SetConfig+0xf8>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a11      	ldr	r2, [pc, #68]	; (800d190 <TIM_Base_SetConfig+0x128>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d007      	beq.n	800d160 <TIM_Base_SetConfig+0xf8>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a10      	ldr	r2, [pc, #64]	; (800d194 <TIM_Base_SetConfig+0x12c>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d003      	beq.n	800d160 <TIM_Base_SetConfig+0xf8>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a0f      	ldr	r2, [pc, #60]	; (800d198 <TIM_Base_SetConfig+0x130>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d103      	bne.n	800d168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	691a      	ldr	r2, [r3, #16]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	615a      	str	r2, [r3, #20]
}
 800d16e:	bf00      	nop
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	40010000 	.word	0x40010000
 800d180:	40000400 	.word	0x40000400
 800d184:	40000800 	.word	0x40000800
 800d188:	40000c00 	.word	0x40000c00
 800d18c:	40010400 	.word	0x40010400
 800d190:	40014000 	.word	0x40014000
 800d194:	40014400 	.word	0x40014400
 800d198:	40014800 	.word	0x40014800

0800d19c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	f023 0201 	bic.w	r2, r3, #1
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	699b      	ldr	r3, [r3, #24]
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4b37      	ldr	r3, [pc, #220]	; (800d2a4 <TIM_OC1_SetConfig+0x108>)
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f023 0303 	bic.w	r3, r3, #3
 800d1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f023 0302 	bic.w	r3, r3, #2
 800d1e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a2d      	ldr	r2, [pc, #180]	; (800d2a8 <TIM_OC1_SetConfig+0x10c>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d00f      	beq.n	800d218 <TIM_OC1_SetConfig+0x7c>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a2c      	ldr	r2, [pc, #176]	; (800d2ac <TIM_OC1_SetConfig+0x110>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d00b      	beq.n	800d218 <TIM_OC1_SetConfig+0x7c>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a2b      	ldr	r2, [pc, #172]	; (800d2b0 <TIM_OC1_SetConfig+0x114>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d007      	beq.n	800d218 <TIM_OC1_SetConfig+0x7c>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a2a      	ldr	r2, [pc, #168]	; (800d2b4 <TIM_OC1_SetConfig+0x118>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d003      	beq.n	800d218 <TIM_OC1_SetConfig+0x7c>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a29      	ldr	r2, [pc, #164]	; (800d2b8 <TIM_OC1_SetConfig+0x11c>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d10c      	bne.n	800d232 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	f023 0308 	bic.w	r3, r3, #8
 800d21e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	4313      	orrs	r3, r2
 800d228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	f023 0304 	bic.w	r3, r3, #4
 800d230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a1c      	ldr	r2, [pc, #112]	; (800d2a8 <TIM_OC1_SetConfig+0x10c>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d00f      	beq.n	800d25a <TIM_OC1_SetConfig+0xbe>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a1b      	ldr	r2, [pc, #108]	; (800d2ac <TIM_OC1_SetConfig+0x110>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d00b      	beq.n	800d25a <TIM_OC1_SetConfig+0xbe>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a1a      	ldr	r2, [pc, #104]	; (800d2b0 <TIM_OC1_SetConfig+0x114>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d007      	beq.n	800d25a <TIM_OC1_SetConfig+0xbe>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a19      	ldr	r2, [pc, #100]	; (800d2b4 <TIM_OC1_SetConfig+0x118>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d003      	beq.n	800d25a <TIM_OC1_SetConfig+0xbe>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a18      	ldr	r2, [pc, #96]	; (800d2b8 <TIM_OC1_SetConfig+0x11c>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d111      	bne.n	800d27e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	4313      	orrs	r3, r2
 800d272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	699b      	ldr	r3, [r3, #24]
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	693a      	ldr	r2, [r7, #16]
 800d282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	621a      	str	r2, [r3, #32]
}
 800d298:	bf00      	nop
 800d29a:	371c      	adds	r7, #28
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	fffeff8f 	.word	0xfffeff8f
 800d2a8:	40010000 	.word	0x40010000
 800d2ac:	40010400 	.word	0x40010400
 800d2b0:	40014000 	.word	0x40014000
 800d2b4:	40014400 	.word	0x40014400
 800d2b8:	40014800 	.word	0x40014800

0800d2bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	f023 0210 	bic.w	r2, r3, #16
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a1b      	ldr	r3, [r3, #32]
 800d2d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	4b34      	ldr	r3, [pc, #208]	; (800d3b8 <TIM_OC2_SetConfig+0xfc>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	021b      	lsls	r3, r3, #8
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f023 0320 	bic.w	r3, r3, #32
 800d306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	011b      	lsls	r3, r3, #4
 800d30e:	697a      	ldr	r2, [r7, #20]
 800d310:	4313      	orrs	r3, r2
 800d312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a29      	ldr	r2, [pc, #164]	; (800d3bc <TIM_OC2_SetConfig+0x100>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d003      	beq.n	800d324 <TIM_OC2_SetConfig+0x68>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a28      	ldr	r2, [pc, #160]	; (800d3c0 <TIM_OC2_SetConfig+0x104>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d10d      	bne.n	800d340 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d32a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	011b      	lsls	r3, r3, #4
 800d332:	697a      	ldr	r2, [r7, #20]
 800d334:	4313      	orrs	r3, r2
 800d336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d33e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a1e      	ldr	r2, [pc, #120]	; (800d3bc <TIM_OC2_SetConfig+0x100>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d00f      	beq.n	800d368 <TIM_OC2_SetConfig+0xac>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a1d      	ldr	r2, [pc, #116]	; (800d3c0 <TIM_OC2_SetConfig+0x104>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d00b      	beq.n	800d368 <TIM_OC2_SetConfig+0xac>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a1c      	ldr	r2, [pc, #112]	; (800d3c4 <TIM_OC2_SetConfig+0x108>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d007      	beq.n	800d368 <TIM_OC2_SetConfig+0xac>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a1b      	ldr	r2, [pc, #108]	; (800d3c8 <TIM_OC2_SetConfig+0x10c>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d003      	beq.n	800d368 <TIM_OC2_SetConfig+0xac>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a1a      	ldr	r2, [pc, #104]	; (800d3cc <TIM_OC2_SetConfig+0x110>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d113      	bne.n	800d390 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d36e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	4313      	orrs	r3, r2
 800d382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	685a      	ldr	r2, [r3, #4]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	621a      	str	r2, [r3, #32]
}
 800d3aa:	bf00      	nop
 800d3ac:	371c      	adds	r7, #28
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	feff8fff 	.word	0xfeff8fff
 800d3bc:	40010000 	.word	0x40010000
 800d3c0:	40010400 	.word	0x40010400
 800d3c4:	40014000 	.word	0x40014000
 800d3c8:	40014400 	.word	0x40014400
 800d3cc:	40014800 	.word	0x40014800

0800d3d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b087      	sub	sp, #28
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4b33      	ldr	r3, [pc, #204]	; (800d4c8 <TIM_OC3_SetConfig+0xf8>)
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	697a      	ldr	r2, [r7, #20]
 800d422:	4313      	orrs	r3, r2
 800d424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a28      	ldr	r2, [pc, #160]	; (800d4cc <TIM_OC3_SetConfig+0xfc>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d003      	beq.n	800d436 <TIM_OC3_SetConfig+0x66>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a27      	ldr	r2, [pc, #156]	; (800d4d0 <TIM_OC3_SetConfig+0x100>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d10d      	bne.n	800d452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d43c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	021b      	lsls	r3, r3, #8
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	4313      	orrs	r3, r2
 800d448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a1d      	ldr	r2, [pc, #116]	; (800d4cc <TIM_OC3_SetConfig+0xfc>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d00f      	beq.n	800d47a <TIM_OC3_SetConfig+0xaa>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a1c      	ldr	r2, [pc, #112]	; (800d4d0 <TIM_OC3_SetConfig+0x100>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d00b      	beq.n	800d47a <TIM_OC3_SetConfig+0xaa>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a1b      	ldr	r2, [pc, #108]	; (800d4d4 <TIM_OC3_SetConfig+0x104>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d007      	beq.n	800d47a <TIM_OC3_SetConfig+0xaa>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a1a      	ldr	r2, [pc, #104]	; (800d4d8 <TIM_OC3_SetConfig+0x108>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d003      	beq.n	800d47a <TIM_OC3_SetConfig+0xaa>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a19      	ldr	r2, [pc, #100]	; (800d4dc <TIM_OC3_SetConfig+0x10c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d113      	bne.n	800d4a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	4313      	orrs	r3, r2
 800d494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	011b      	lsls	r3, r3, #4
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	693a      	ldr	r2, [r7, #16]
 800d4a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	685a      	ldr	r2, [r3, #4]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	621a      	str	r2, [r3, #32]
}
 800d4bc:	bf00      	nop
 800d4be:	371c      	adds	r7, #28
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	fffeff8f 	.word	0xfffeff8f
 800d4cc:	40010000 	.word	0x40010000
 800d4d0:	40010400 	.word	0x40010400
 800d4d4:	40014000 	.word	0x40014000
 800d4d8:	40014400 	.word	0x40014400
 800d4dc:	40014800 	.word	0x40014800

0800d4e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b087      	sub	sp, #28
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	4b24      	ldr	r3, [pc, #144]	; (800d59c <TIM_OC4_SetConfig+0xbc>)
 800d50c:	4013      	ands	r3, r2
 800d50e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d52a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	031b      	lsls	r3, r3, #12
 800d532:	693a      	ldr	r2, [r7, #16]
 800d534:	4313      	orrs	r3, r2
 800d536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a19      	ldr	r2, [pc, #100]	; (800d5a0 <TIM_OC4_SetConfig+0xc0>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d00f      	beq.n	800d560 <TIM_OC4_SetConfig+0x80>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a18      	ldr	r2, [pc, #96]	; (800d5a4 <TIM_OC4_SetConfig+0xc4>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d00b      	beq.n	800d560 <TIM_OC4_SetConfig+0x80>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a17      	ldr	r2, [pc, #92]	; (800d5a8 <TIM_OC4_SetConfig+0xc8>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d007      	beq.n	800d560 <TIM_OC4_SetConfig+0x80>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a16      	ldr	r2, [pc, #88]	; (800d5ac <TIM_OC4_SetConfig+0xcc>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d003      	beq.n	800d560 <TIM_OC4_SetConfig+0x80>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a15      	ldr	r2, [pc, #84]	; (800d5b0 <TIM_OC4_SetConfig+0xd0>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d109      	bne.n	800d574 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	019b      	lsls	r3, r3, #6
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	693a      	ldr	r2, [r7, #16]
 800d58c:	621a      	str	r2, [r3, #32]
}
 800d58e:	bf00      	nop
 800d590:	371c      	adds	r7, #28
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	feff8fff 	.word	0xfeff8fff
 800d5a0:	40010000 	.word	0x40010000
 800d5a4:	40010400 	.word	0x40010400
 800d5a8:	40014000 	.word	0x40014000
 800d5ac:	40014400 	.word	0x40014400
 800d5b0:	40014800 	.word	0x40014800

0800d5b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4b21      	ldr	r3, [pc, #132]	; (800d664 <TIM_OC5_SetConfig+0xb0>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d5f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	041b      	lsls	r3, r3, #16
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a18      	ldr	r2, [pc, #96]	; (800d668 <TIM_OC5_SetConfig+0xb4>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d00f      	beq.n	800d62a <TIM_OC5_SetConfig+0x76>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a17      	ldr	r2, [pc, #92]	; (800d66c <TIM_OC5_SetConfig+0xb8>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d00b      	beq.n	800d62a <TIM_OC5_SetConfig+0x76>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4a16      	ldr	r2, [pc, #88]	; (800d670 <TIM_OC5_SetConfig+0xbc>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d007      	beq.n	800d62a <TIM_OC5_SetConfig+0x76>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a15      	ldr	r2, [pc, #84]	; (800d674 <TIM_OC5_SetConfig+0xc0>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d003      	beq.n	800d62a <TIM_OC5_SetConfig+0x76>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a14      	ldr	r2, [pc, #80]	; (800d678 <TIM_OC5_SetConfig+0xc4>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d109      	bne.n	800d63e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	021b      	lsls	r3, r3, #8
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	685a      	ldr	r2, [r3, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	621a      	str	r2, [r3, #32]
}
 800d658:	bf00      	nop
 800d65a:	371c      	adds	r7, #28
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	fffeff8f 	.word	0xfffeff8f
 800d668:	40010000 	.word	0x40010000
 800d66c:	40010400 	.word	0x40010400
 800d670:	40014000 	.word	0x40014000
 800d674:	40014400 	.word	0x40014400
 800d678:	40014800 	.word	0x40014800

0800d67c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b087      	sub	sp, #28
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	4b22      	ldr	r3, [pc, #136]	; (800d730 <TIM_OC6_SetConfig+0xb4>)
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	021b      	lsls	r3, r3, #8
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	051b      	lsls	r3, r3, #20
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a19      	ldr	r2, [pc, #100]	; (800d734 <TIM_OC6_SetConfig+0xb8>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d00f      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x78>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a18      	ldr	r2, [pc, #96]	; (800d738 <TIM_OC6_SetConfig+0xbc>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d00b      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x78>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a17      	ldr	r2, [pc, #92]	; (800d73c <TIM_OC6_SetConfig+0xc0>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d007      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x78>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a16      	ldr	r2, [pc, #88]	; (800d740 <TIM_OC6_SetConfig+0xc4>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d003      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x78>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a15      	ldr	r2, [pc, #84]	; (800d744 <TIM_OC6_SetConfig+0xc8>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d109      	bne.n	800d708 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	029b      	lsls	r3, r3, #10
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	4313      	orrs	r3, r2
 800d706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	685a      	ldr	r2, [r3, #4]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	621a      	str	r2, [r3, #32]
}
 800d722:	bf00      	nop
 800d724:	371c      	adds	r7, #28
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	feff8fff 	.word	0xfeff8fff
 800d734:	40010000 	.word	0x40010000
 800d738:	40010400 	.word	0x40010400
 800d73c:	40014000 	.word	0x40014000
 800d740:	40014400 	.word	0x40014400
 800d744:	40014800 	.word	0x40014800

0800d748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d748:	b480      	push	{r7}
 800d74a:	b087      	sub	sp, #28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6a1b      	ldr	r3, [r3, #32]
 800d758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	f023 0201 	bic.w	r2, r3, #1
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f023 030a 	bic.w	r3, r3, #10
 800d784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	621a      	str	r2, [r3, #32]
}
 800d79a:	bf00      	nop
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b087      	sub	sp, #28
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	f023 0210 	bic.w	r2, r3, #16
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6a1b      	ldr	r3, [r3, #32]
 800d7c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	031b      	lsls	r3, r3, #12
 800d7d6:	697a      	ldr	r2, [r7, #20]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	011b      	lsls	r3, r3, #4
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	697a      	ldr	r2, [r7, #20]
 800d7f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	621a      	str	r2, [r3, #32]
}
 800d7fa:	bf00      	nop
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	4b09      	ldr	r3, [pc, #36]	; (800d840 <TIM_ITRx_SetConfig+0x38>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	4313      	orrs	r3, r2
 800d826:	f043 0307 	orr.w	r3, r3, #7
 800d82a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	609a      	str	r2, [r3, #8]
}
 800d832:	bf00      	nop
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	ffcfff8f 	.word	0xffcfff8f

0800d844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d85e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	021a      	lsls	r2, r3, #8
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	431a      	orrs	r2, r3
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4313      	orrs	r3, r2
 800d870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	609a      	str	r2, [r3, #8]
}
 800d878:	bf00      	nop
 800d87a:	371c      	adds	r7, #28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d884:	b480      	push	{r7}
 800d886:	b087      	sub	sp, #28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f003 031f 	and.w	r3, r3, #31
 800d896:	2201      	movs	r2, #1
 800d898:	fa02 f303 	lsl.w	r3, r2, r3
 800d89c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6a1a      	ldr	r2, [r3, #32]
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	43db      	mvns	r3, r3
 800d8a6:	401a      	ands	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6a1a      	ldr	r2, [r3, #32]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f003 031f 	and.w	r3, r3, #31
 800d8b6:	6879      	ldr	r1, [r7, #4]
 800d8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	621a      	str	r2, [r3, #32]
}
 800d8c2:	bf00      	nop
 800d8c4:	371c      	adds	r7, #28
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d101      	bne.n	800d8e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	e06d      	b.n	800d9c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a30      	ldr	r2, [pc, #192]	; (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d004      	beq.n	800d91c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a2f      	ldr	r2, [pc, #188]	; (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d108      	bne.n	800d92e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d934:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	4313      	orrs	r3, r2
 800d93e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a20      	ldr	r2, [pc, #128]	; (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d022      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d95a:	d01d      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a1d      	ldr	r2, [pc, #116]	; (800d9d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d018      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a1c      	ldr	r2, [pc, #112]	; (800d9dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d013      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a1a      	ldr	r2, [pc, #104]	; (800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d00e      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a15      	ldr	r2, [pc, #84]	; (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d009      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a16      	ldr	r2, [pc, #88]	; (800d9e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d004      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a15      	ldr	r2, [pc, #84]	; (800d9e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d10c      	bne.n	800d9b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d99e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	40010000 	.word	0x40010000
 800d9d4:	40010400 	.word	0x40010400
 800d9d8:	40000400 	.word	0x40000400
 800d9dc:	40000800 	.word	0x40000800
 800d9e0:	40000c00 	.word	0x40000c00
 800d9e4:	40001800 	.word	0x40001800
 800d9e8:	40014000 	.word	0x40014000

0800d9ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da00:	2b01      	cmp	r3, #1
 800da02:	d101      	bne.n	800da08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da04:	2302      	movs	r3, #2
 800da06:	e065      	b.n	800dad4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	4313      	orrs	r3, r2
 800da1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	4313      	orrs	r3, r2
 800da2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	4313      	orrs	r3, r2
 800da38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4313      	orrs	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	4313      	orrs	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6e:	4313      	orrs	r3, r2
 800da70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	041b      	lsls	r3, r3, #16
 800da7e:	4313      	orrs	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a16      	ldr	r2, [pc, #88]	; (800dae0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d004      	beq.n	800da96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a14      	ldr	r2, [pc, #80]	; (800dae4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d115      	bne.n	800dac2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa0:	051b      	lsls	r3, r3, #20
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr
 800dae0:	40010000 	.word	0x40010000
 800dae4:	40010400 	.word	0x40010400

0800dae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e042      	b.n	800dbbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d106      	bne.n	800db4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7f4 fc9b 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2224      	movs	r2, #36	; 0x24
 800db52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f022 0201 	bic.w	r2, r2, #1
 800db64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fcd6 	bl	800e518 <UART_SetConfig>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d101      	bne.n	800db76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e022      	b.n	800dbbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 fa32 	bl	800efe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689a      	ldr	r2, [r3, #8]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f042 0201 	orr.w	r2, r2, #1
 800dbb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 fab9 	bl	800f12c <UART_CheckIdleState>
 800dbba:	4603      	mov	r3, r0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08a      	sub	sp, #40	; 0x28
 800dbc8:	af02      	add	r7, sp, #8
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	603b      	str	r3, [r7, #0]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbda:	2b20      	cmp	r3, #32
 800dbdc:	f040 8083 	bne.w	800dce6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d002      	beq.n	800dbec <HAL_UART_Transmit+0x28>
 800dbe6:	88fb      	ldrh	r3, [r7, #6]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	e07b      	b.n	800dce8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d101      	bne.n	800dbfe <HAL_UART_Transmit+0x3a>
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	e074      	b.n	800dce8 <HAL_UART_Transmit+0x124>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2221      	movs	r2, #33	; 0x21
 800dc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc16:	f7f4 fe8b 	bl	8002930 <HAL_GetTick>
 800dc1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	88fa      	ldrh	r2, [r7, #6]
 800dc20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	88fa      	ldrh	r2, [r7, #6]
 800dc28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc34:	d108      	bne.n	800dc48 <HAL_UART_Transmit+0x84>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	691b      	ldr	r3, [r3, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d104      	bne.n	800dc48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	61bb      	str	r3, [r7, #24]
 800dc46:	e003      	b.n	800dc50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dc58:	e02c      	b.n	800dcb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2200      	movs	r2, #0
 800dc62:	2180      	movs	r1, #128	; 0x80
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f001 faac 	bl	800f1c2 <UART_WaitOnFlagUntilTimeout>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dc70:	2303      	movs	r3, #3
 800dc72:	e039      	b.n	800dce8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10b      	bne.n	800dc92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	3302      	adds	r3, #2
 800dc8e:	61bb      	str	r3, [r7, #24]
 800dc90:	e007      	b.n	800dca2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	781a      	ldrb	r2, [r3, #0]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1cc      	bne.n	800dc5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	2140      	movs	r1, #64	; 0x40
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f001 fa79 	bl	800f1c2 <UART_WaitOnFlagUntilTimeout>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d001      	beq.n	800dcda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e006      	b.n	800dce8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2220      	movs	r2, #32
 800dcde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e000      	b.n	800dce8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800dce6:	2302      	movs	r3, #2
  }
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3720      	adds	r7, #32
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08a      	sub	sp, #40	; 0x28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	d142      	bne.n	800dd8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <HAL_UART_Receive_IT+0x24>
 800dd0e:	88fb      	ldrh	r3, [r7, #6]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e03b      	b.n	800dd90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d101      	bne.n	800dd26 <HAL_UART_Receive_IT+0x36>
 800dd22:	2302      	movs	r3, #2
 800dd24:	e034      	b.n	800dd90 <HAL_UART_Receive_IT+0xa0>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a17      	ldr	r2, [pc, #92]	; (800dd98 <HAL_UART_Receive_IT+0xa8>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d01f      	beq.n	800dd7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d018      	beq.n	800dd7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	e853 3f00 	ldrex	r3, [r3]
 800dd58:	613b      	str	r3, [r7, #16]
   return(result);
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd60:	627b      	str	r3, [r7, #36]	; 0x24
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	623b      	str	r3, [r7, #32]
 800dd6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6e:	69f9      	ldr	r1, [r7, #28]
 800dd70:	6a3a      	ldr	r2, [r7, #32]
 800dd72:	e841 2300 	strex	r3, r2, [r1]
 800dd76:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1e6      	bne.n	800dd4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dd7e:	88fb      	ldrh	r3, [r7, #6]
 800dd80:	461a      	mov	r2, r3
 800dd82:	68b9      	ldr	r1, [r7, #8]
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f001 fae5 	bl	800f354 <UART_Start_Receive_IT>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	e000      	b.n	800dd90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dd8e:	2302      	movs	r3, #2
  }
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3728      	adds	r7, #40	; 0x28
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	58000c00 	.word	0x58000c00

0800dd9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b0ba      	sub	sp, #232	; 0xe8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	69db      	ldr	r3, [r3, #28]
 800ddaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ddc6:	f640 030f 	movw	r3, #2063	; 0x80f
 800ddca:	4013      	ands	r3, r2
 800ddcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ddd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d11b      	bne.n	800de10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dddc:	f003 0320 	and.w	r3, r3, #32
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d015      	beq.n	800de10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dde8:	f003 0320 	and.w	r3, r3, #32
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d105      	bne.n	800ddfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ddf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d009      	beq.n	800de10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de00:	2b00      	cmp	r3, #0
 800de02:	f000 835a 	beq.w	800e4ba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	4798      	blx	r3
      }
      return;
 800de0e:	e354      	b.n	800e4ba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 811f 	beq.w	800e058 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de1e:	4b8b      	ldr	r3, [pc, #556]	; (800e04c <HAL_UART_IRQHandler+0x2b0>)
 800de20:	4013      	ands	r3, r2
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de2a:	4b89      	ldr	r3, [pc, #548]	; (800e050 <HAL_UART_IRQHandler+0x2b4>)
 800de2c:	4013      	ands	r3, r2
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 8112 	beq.w	800e058 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de38:	f003 0301 	and.w	r3, r3, #1
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d011      	beq.n	800de64 <HAL_UART_IRQHandler+0xc8>
 800de40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00b      	beq.n	800de64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2201      	movs	r2, #1
 800de52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de5a:	f043 0201 	orr.w	r2, r3, #1
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de68:	f003 0302 	and.w	r3, r3, #2
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d011      	beq.n	800de94 <HAL_UART_IRQHandler+0xf8>
 800de70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de74:	f003 0301 	and.w	r3, r3, #1
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00b      	beq.n	800de94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2202      	movs	r2, #2
 800de82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de8a:	f043 0204 	orr.w	r2, r3, #4
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de98:	f003 0304 	and.w	r3, r3, #4
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d011      	beq.n	800dec4 <HAL_UART_IRQHandler+0x128>
 800dea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00b      	beq.n	800dec4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2204      	movs	r2, #4
 800deb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deba:	f043 0202 	orr.w	r2, r3, #2
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dec8:	f003 0308 	and.w	r3, r3, #8
 800decc:	2b00      	cmp	r3, #0
 800dece:	d017      	beq.n	800df00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ded0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ded4:	f003 0320 	and.w	r3, r3, #32
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d105      	bne.n	800dee8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dedc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dee0:	4b5a      	ldr	r3, [pc, #360]	; (800e04c <HAL_UART_IRQHandler+0x2b0>)
 800dee2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00b      	beq.n	800df00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2208      	movs	r2, #8
 800deee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800def6:	f043 0208 	orr.w	r2, r3, #8
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d012      	beq.n	800df32 <HAL_UART_IRQHandler+0x196>
 800df0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00c      	beq.n	800df32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df28:	f043 0220 	orr.w	r2, r3, #32
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 82c0 	beq.w	800e4be <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df42:	f003 0320 	and.w	r3, r3, #32
 800df46:	2b00      	cmp	r3, #0
 800df48:	d013      	beq.n	800df72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df4e:	f003 0320 	and.w	r3, r3, #32
 800df52:	2b00      	cmp	r3, #0
 800df54:	d105      	bne.n	800df62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d007      	beq.n	800df72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df86:	2b40      	cmp	r3, #64	; 0x40
 800df88:	d005      	beq.n	800df96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df92:	2b00      	cmp	r3, #0
 800df94:	d04f      	beq.n	800e036 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f001 fb06 	bl	800f5a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfa6:	2b40      	cmp	r3, #64	; 0x40
 800dfa8:	d141      	bne.n	800e02e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dfc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dfd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dfda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dfe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dfe6:	e841 2300 	strex	r3, r2, [r1]
 800dfea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dfee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1d9      	bne.n	800dfaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d013      	beq.n	800e026 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e002:	4a14      	ldr	r2, [pc, #80]	; (800e054 <HAL_UART_IRQHandler+0x2b8>)
 800e004:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f7 fcaa 	bl	8005964 <HAL_DMA_Abort_IT>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d017      	beq.n	800e046 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e020:	4610      	mov	r0, r2
 800e022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e024:	e00f      	b.n	800e046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa60 	bl	800e4ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e02c:	e00b      	b.n	800e046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fa5c 	bl	800e4ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e034:	e007      	b.n	800e046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 fa58 	bl	800e4ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e044:	e23b      	b.n	800e4be <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e046:	bf00      	nop
    return;
 800e048:	e239      	b.n	800e4be <HAL_UART_IRQHandler+0x722>
 800e04a:	bf00      	nop
 800e04c:	10000001 	.word	0x10000001
 800e050:	04000120 	.word	0x04000120
 800e054:	0800f675 	.word	0x0800f675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	f040 81ce 	bne.w	800e3fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e066:	f003 0310 	and.w	r3, r3, #16
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f000 81c7 	beq.w	800e3fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e074:	f003 0310 	and.w	r3, r3, #16
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 81c0 	beq.w	800e3fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2210      	movs	r2, #16
 800e084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e090:	2b40      	cmp	r3, #64	; 0x40
 800e092:	f040 813b 	bne.w	800e30c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a8b      	ldr	r2, [pc, #556]	; (800e2cc <HAL_UART_IRQHandler+0x530>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d059      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a89      	ldr	r2, [pc, #548]	; (800e2d0 <HAL_UART_IRQHandler+0x534>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d053      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a87      	ldr	r2, [pc, #540]	; (800e2d4 <HAL_UART_IRQHandler+0x538>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d04d      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a85      	ldr	r2, [pc, #532]	; (800e2d8 <HAL_UART_IRQHandler+0x53c>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d047      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a83      	ldr	r2, [pc, #524]	; (800e2dc <HAL_UART_IRQHandler+0x540>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d041      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a81      	ldr	r2, [pc, #516]	; (800e2e0 <HAL_UART_IRQHandler+0x544>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d03b      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a7f      	ldr	r2, [pc, #508]	; (800e2e4 <HAL_UART_IRQHandler+0x548>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d035      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a7d      	ldr	r2, [pc, #500]	; (800e2e8 <HAL_UART_IRQHandler+0x54c>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d02f      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a7b      	ldr	r2, [pc, #492]	; (800e2ec <HAL_UART_IRQHandler+0x550>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d029      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a79      	ldr	r2, [pc, #484]	; (800e2f0 <HAL_UART_IRQHandler+0x554>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d023      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a77      	ldr	r2, [pc, #476]	; (800e2f4 <HAL_UART_IRQHandler+0x558>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d01d      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a75      	ldr	r2, [pc, #468]	; (800e2f8 <HAL_UART_IRQHandler+0x55c>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d017      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a73      	ldr	r2, [pc, #460]	; (800e2fc <HAL_UART_IRQHandler+0x560>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d011      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a71      	ldr	r2, [pc, #452]	; (800e300 <HAL_UART_IRQHandler+0x564>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d00b      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a6f      	ldr	r2, [pc, #444]	; (800e304 <HAL_UART_IRQHandler+0x568>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d005      	beq.n	800e156 <HAL_UART_IRQHandler+0x3ba>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a6d      	ldr	r2, [pc, #436]	; (800e308 <HAL_UART_IRQHandler+0x56c>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d105      	bne.n	800e162 <HAL_UART_IRQHandler+0x3c6>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	e004      	b.n	800e16c <HAL_UART_IRQHandler+0x3d0>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 81a4 	beq.w	800e4c2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e184:	429a      	cmp	r2, r3
 800e186:	f080 819c 	bcs.w	800e4c2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e198:	69db      	ldr	r3, [r3, #28]
 800e19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e19e:	f000 8086 	beq.w	800e2ae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1ae:	e853 3f00 	ldrex	r3, [r3]
 800e1b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1dc:	e841 2300 	strex	r3, r2, [r1]
 800e1e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1da      	bne.n	800e1a2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1f6:	e853 3f00 	ldrex	r3, [r3]
 800e1fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e1fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1fe:	f023 0301 	bic.w	r3, r3, #1
 800e202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e210:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e214:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e216:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e218:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e21c:	e841 2300 	strex	r3, r2, [r1]
 800e220:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e224:	2b00      	cmp	r3, #0
 800e226:	d1e1      	bne.n	800e1ec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3308      	adds	r3, #8
 800e22e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e23a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e23e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3308      	adds	r3, #8
 800e248:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e24c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e24e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e250:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e252:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e254:	e841 2300 	strex	r3, r2, [r1]
 800e258:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e25a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1e3      	bne.n	800e228 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2220      	movs	r2, #32
 800e264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e276:	e853 3f00 	ldrex	r3, [r3]
 800e27a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e27e:	f023 0310 	bic.w	r3, r3, #16
 800e282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e290:	65bb      	str	r3, [r7, #88]	; 0x58
 800e292:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e298:	e841 2300 	strex	r3, r2, [r1]
 800e29c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e4      	bne.n	800e26e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7f7 f83d 	bl	8005328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f91c 	bl	800e500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2c8:	e0fb      	b.n	800e4c2 <HAL_UART_IRQHandler+0x726>
 800e2ca:	bf00      	nop
 800e2cc:	40020010 	.word	0x40020010
 800e2d0:	40020028 	.word	0x40020028
 800e2d4:	40020040 	.word	0x40020040
 800e2d8:	40020058 	.word	0x40020058
 800e2dc:	40020070 	.word	0x40020070
 800e2e0:	40020088 	.word	0x40020088
 800e2e4:	400200a0 	.word	0x400200a0
 800e2e8:	400200b8 	.word	0x400200b8
 800e2ec:	40020410 	.word	0x40020410
 800e2f0:	40020428 	.word	0x40020428
 800e2f4:	40020440 	.word	0x40020440
 800e2f8:	40020458 	.word	0x40020458
 800e2fc:	40020470 	.word	0x40020470
 800e300:	40020488 	.word	0x40020488
 800e304:	400204a0 	.word	0x400204a0
 800e308:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e318:	b29b      	uxth	r3, r3
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e326:	b29b      	uxth	r3, r3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 80cc 	beq.w	800e4c6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e32e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 80c7 	beq.w	800e4c6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e340:	e853 3f00 	ldrex	r3, [r3]
 800e344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e34c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	461a      	mov	r2, r3
 800e356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e35a:	647b      	str	r3, [r7, #68]	; 0x44
 800e35c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e362:	e841 2300 	strex	r3, r2, [r1]
 800e366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1e4      	bne.n	800e338 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	3308      	adds	r3, #8
 800e374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	e853 3f00 	ldrex	r3, [r3]
 800e37c:	623b      	str	r3, [r7, #32]
   return(result);
 800e37e:	6a3a      	ldr	r2, [r7, #32]
 800e380:	4b54      	ldr	r3, [pc, #336]	; (800e4d4 <HAL_UART_IRQHandler+0x738>)
 800e382:	4013      	ands	r3, r2
 800e384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3308      	adds	r3, #8
 800e38e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e392:	633a      	str	r2, [r7, #48]	; 0x30
 800e394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e39a:	e841 2300 	strex	r3, r2, [r1]
 800e39e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1e3      	bne.n	800e36e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2220      	movs	r2, #32
 800e3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f023 0310 	bic.w	r3, r3, #16
 800e3ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3dc:	61fb      	str	r3, [r7, #28]
 800e3de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e0:	69b9      	ldr	r1, [r7, #24]
 800e3e2:	69fa      	ldr	r2, [r7, #28]
 800e3e4:	e841 2300 	strex	r3, r2, [r1]
 800e3e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1e4      	bne.n	800e3ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e3f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f882 	bl	800e500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3fc:	e063      	b.n	800e4c6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00e      	beq.n	800e428 <HAL_UART_IRQHandler+0x68c>
 800e40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e40e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e412:	2b00      	cmp	r3, #0
 800e414:	d008      	beq.n	800e428 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e41e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 fdc5 	bl	800ffb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e426:	e051      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e430:	2b00      	cmp	r3, #0
 800e432:	d014      	beq.n	800e45e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d105      	bne.n	800e44c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d008      	beq.n	800e45e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e450:	2b00      	cmp	r3, #0
 800e452:	d03a      	beq.n	800e4ca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	4798      	blx	r3
    }
    return;
 800e45c:	e035      	b.n	800e4ca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e466:	2b00      	cmp	r3, #0
 800e468:	d009      	beq.n	800e47e <HAL_UART_IRQHandler+0x6e2>
 800e46a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e472:	2b00      	cmp	r3, #0
 800e474:	d003      	beq.n	800e47e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f001 f912 	bl	800f6a0 <UART_EndTransmit_IT>
    return;
 800e47c:	e026      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e486:	2b00      	cmp	r3, #0
 800e488:	d009      	beq.n	800e49e <HAL_UART_IRQHandler+0x702>
 800e48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e48e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e492:	2b00      	cmp	r3, #0
 800e494:	d003      	beq.n	800e49e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 fd9e 	bl	800ffd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e49c:	e016      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d010      	beq.n	800e4cc <HAL_UART_IRQHandler+0x730>
 800e4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	da0c      	bge.n	800e4cc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 fd86 	bl	800ffc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4b8:	e008      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
      return;
 800e4ba:	bf00      	nop
 800e4bc:	e006      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
    return;
 800e4be:	bf00      	nop
 800e4c0:	e004      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
      return;
 800e4c2:	bf00      	nop
 800e4c4:	e002      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
      return;
 800e4c6:	bf00      	nop
 800e4c8:	e000      	b.n	800e4cc <HAL_UART_IRQHandler+0x730>
    return;
 800e4ca:	bf00      	nop
  }
}
 800e4cc:	37e8      	adds	r7, #232	; 0xe8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	effffffe 	.word	0xeffffffe

0800e4d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e4e0:	bf00      	nop
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e4f4:	bf00      	nop
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	460b      	mov	r3, r1
 800e50a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e50c:	bf00      	nop
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e51c:	b092      	sub	sp, #72	; 0x48
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	689a      	ldr	r2, [r3, #8]
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	431a      	orrs	r2, r3
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	431a      	orrs	r2, r3
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	69db      	ldr	r3, [r3, #28]
 800e53c:	4313      	orrs	r3, r2
 800e53e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	4bbe      	ldr	r3, [pc, #760]	; (800e840 <UART_SetConfig+0x328>)
 800e548:	4013      	ands	r3, r2
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	6812      	ldr	r2, [r2, #0]
 800e54e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e550:	430b      	orrs	r3, r1
 800e552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	68da      	ldr	r2, [r3, #12]
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	430a      	orrs	r2, r1
 800e568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	699b      	ldr	r3, [r3, #24]
 800e56e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4ab3      	ldr	r2, [pc, #716]	; (800e844 <UART_SetConfig+0x32c>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d004      	beq.n	800e584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e580:	4313      	orrs	r3, r2
 800e582:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	689a      	ldr	r2, [r3, #8]
 800e58a:	4baf      	ldr	r3, [pc, #700]	; (800e848 <UART_SetConfig+0x330>)
 800e58c:	4013      	ands	r3, r2
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	6812      	ldr	r2, [r2, #0]
 800e592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e594:	430b      	orrs	r3, r1
 800e596:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59e:	f023 010f 	bic.w	r1, r3, #15
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	430a      	orrs	r2, r1
 800e5ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4aa6      	ldr	r2, [pc, #664]	; (800e84c <UART_SetConfig+0x334>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d177      	bne.n	800e6a8 <UART_SetConfig+0x190>
 800e5b8:	4ba5      	ldr	r3, [pc, #660]	; (800e850 <UART_SetConfig+0x338>)
 800e5ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5c0:	2b28      	cmp	r3, #40	; 0x28
 800e5c2:	d86d      	bhi.n	800e6a0 <UART_SetConfig+0x188>
 800e5c4:	a201      	add	r2, pc, #4	; (adr r2, 800e5cc <UART_SetConfig+0xb4>)
 800e5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ca:	bf00      	nop
 800e5cc:	0800e671 	.word	0x0800e671
 800e5d0:	0800e6a1 	.word	0x0800e6a1
 800e5d4:	0800e6a1 	.word	0x0800e6a1
 800e5d8:	0800e6a1 	.word	0x0800e6a1
 800e5dc:	0800e6a1 	.word	0x0800e6a1
 800e5e0:	0800e6a1 	.word	0x0800e6a1
 800e5e4:	0800e6a1 	.word	0x0800e6a1
 800e5e8:	0800e6a1 	.word	0x0800e6a1
 800e5ec:	0800e679 	.word	0x0800e679
 800e5f0:	0800e6a1 	.word	0x0800e6a1
 800e5f4:	0800e6a1 	.word	0x0800e6a1
 800e5f8:	0800e6a1 	.word	0x0800e6a1
 800e5fc:	0800e6a1 	.word	0x0800e6a1
 800e600:	0800e6a1 	.word	0x0800e6a1
 800e604:	0800e6a1 	.word	0x0800e6a1
 800e608:	0800e6a1 	.word	0x0800e6a1
 800e60c:	0800e681 	.word	0x0800e681
 800e610:	0800e6a1 	.word	0x0800e6a1
 800e614:	0800e6a1 	.word	0x0800e6a1
 800e618:	0800e6a1 	.word	0x0800e6a1
 800e61c:	0800e6a1 	.word	0x0800e6a1
 800e620:	0800e6a1 	.word	0x0800e6a1
 800e624:	0800e6a1 	.word	0x0800e6a1
 800e628:	0800e6a1 	.word	0x0800e6a1
 800e62c:	0800e689 	.word	0x0800e689
 800e630:	0800e6a1 	.word	0x0800e6a1
 800e634:	0800e6a1 	.word	0x0800e6a1
 800e638:	0800e6a1 	.word	0x0800e6a1
 800e63c:	0800e6a1 	.word	0x0800e6a1
 800e640:	0800e6a1 	.word	0x0800e6a1
 800e644:	0800e6a1 	.word	0x0800e6a1
 800e648:	0800e6a1 	.word	0x0800e6a1
 800e64c:	0800e691 	.word	0x0800e691
 800e650:	0800e6a1 	.word	0x0800e6a1
 800e654:	0800e6a1 	.word	0x0800e6a1
 800e658:	0800e6a1 	.word	0x0800e6a1
 800e65c:	0800e6a1 	.word	0x0800e6a1
 800e660:	0800e6a1 	.word	0x0800e6a1
 800e664:	0800e6a1 	.word	0x0800e6a1
 800e668:	0800e6a1 	.word	0x0800e6a1
 800e66c:	0800e699 	.word	0x0800e699
 800e670:	2301      	movs	r3, #1
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e222      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e678:	2304      	movs	r3, #4
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e21e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e680:	2308      	movs	r3, #8
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e21a      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e688:	2310      	movs	r3, #16
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e216      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e690:	2320      	movs	r3, #32
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e212      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e698:	2340      	movs	r3, #64	; 0x40
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69e:	e20e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e6a0:	2380      	movs	r3, #128	; 0x80
 800e6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a6:	e20a      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a69      	ldr	r2, [pc, #420]	; (800e854 <UART_SetConfig+0x33c>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d130      	bne.n	800e714 <UART_SetConfig+0x1fc>
 800e6b2:	4b67      	ldr	r3, [pc, #412]	; (800e850 <UART_SetConfig+0x338>)
 800e6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6b6:	f003 0307 	and.w	r3, r3, #7
 800e6ba:	2b05      	cmp	r3, #5
 800e6bc:	d826      	bhi.n	800e70c <UART_SetConfig+0x1f4>
 800e6be:	a201      	add	r2, pc, #4	; (adr r2, 800e6c4 <UART_SetConfig+0x1ac>)
 800e6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c4:	0800e6dd 	.word	0x0800e6dd
 800e6c8:	0800e6e5 	.word	0x0800e6e5
 800e6cc:	0800e6ed 	.word	0x0800e6ed
 800e6d0:	0800e6f5 	.word	0x0800e6f5
 800e6d4:	0800e6fd 	.word	0x0800e6fd
 800e6d8:	0800e705 	.word	0x0800e705
 800e6dc:	2300      	movs	r3, #0
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e1ec      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e6e4:	2304      	movs	r3, #4
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e1e8      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e6ec:	2308      	movs	r3, #8
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e1e4      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e6f4:	2310      	movs	r3, #16
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e1e0      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e6fc:	2320      	movs	r3, #32
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e1dc      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e704:	2340      	movs	r3, #64	; 0x40
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e1d8      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e70c:	2380      	movs	r3, #128	; 0x80
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e1d4      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a4f      	ldr	r2, [pc, #316]	; (800e858 <UART_SetConfig+0x340>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d130      	bne.n	800e780 <UART_SetConfig+0x268>
 800e71e:	4b4c      	ldr	r3, [pc, #304]	; (800e850 <UART_SetConfig+0x338>)
 800e720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e722:	f003 0307 	and.w	r3, r3, #7
 800e726:	2b05      	cmp	r3, #5
 800e728:	d826      	bhi.n	800e778 <UART_SetConfig+0x260>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <UART_SetConfig+0x218>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e749 	.word	0x0800e749
 800e734:	0800e751 	.word	0x0800e751
 800e738:	0800e759 	.word	0x0800e759
 800e73c:	0800e761 	.word	0x0800e761
 800e740:	0800e769 	.word	0x0800e769
 800e744:	0800e771 	.word	0x0800e771
 800e748:	2300      	movs	r3, #0
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e1b6      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e750:	2304      	movs	r3, #4
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e1b2      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e758:	2308      	movs	r3, #8
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e1ae      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e760:	2310      	movs	r3, #16
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e1aa      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e768:	2320      	movs	r3, #32
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e1a6      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e770:	2340      	movs	r3, #64	; 0x40
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e1a2      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e778:	2380      	movs	r3, #128	; 0x80
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e19e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a35      	ldr	r2, [pc, #212]	; (800e85c <UART_SetConfig+0x344>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d130      	bne.n	800e7ec <UART_SetConfig+0x2d4>
 800e78a:	4b31      	ldr	r3, [pc, #196]	; (800e850 <UART_SetConfig+0x338>)
 800e78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78e:	f003 0307 	and.w	r3, r3, #7
 800e792:	2b05      	cmp	r3, #5
 800e794:	d826      	bhi.n	800e7e4 <UART_SetConfig+0x2cc>
 800e796:	a201      	add	r2, pc, #4	; (adr r2, 800e79c <UART_SetConfig+0x284>)
 800e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79c:	0800e7b5 	.word	0x0800e7b5
 800e7a0:	0800e7bd 	.word	0x0800e7bd
 800e7a4:	0800e7c5 	.word	0x0800e7c5
 800e7a8:	0800e7cd 	.word	0x0800e7cd
 800e7ac:	0800e7d5 	.word	0x0800e7d5
 800e7b0:	0800e7dd 	.word	0x0800e7dd
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e180      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7bc:	2304      	movs	r3, #4
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e17c      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e178      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7cc:	2310      	movs	r3, #16
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e174      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7d4:	2320      	movs	r3, #32
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e170      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7dc:	2340      	movs	r3, #64	; 0x40
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e16c      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7e4:	2380      	movs	r3, #128	; 0x80
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e168      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a1b      	ldr	r2, [pc, #108]	; (800e860 <UART_SetConfig+0x348>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d142      	bne.n	800e87c <UART_SetConfig+0x364>
 800e7f6:	4b16      	ldr	r3, [pc, #88]	; (800e850 <UART_SetConfig+0x338>)
 800e7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7fa:	f003 0307 	and.w	r3, r3, #7
 800e7fe:	2b05      	cmp	r3, #5
 800e800:	d838      	bhi.n	800e874 <UART_SetConfig+0x35c>
 800e802:	a201      	add	r2, pc, #4	; (adr r2, 800e808 <UART_SetConfig+0x2f0>)
 800e804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e808:	0800e821 	.word	0x0800e821
 800e80c:	0800e829 	.word	0x0800e829
 800e810:	0800e831 	.word	0x0800e831
 800e814:	0800e839 	.word	0x0800e839
 800e818:	0800e865 	.word	0x0800e865
 800e81c:	0800e86d 	.word	0x0800e86d
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e826:	e14a      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e828:	2304      	movs	r3, #4
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82e:	e146      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e830:	2308      	movs	r3, #8
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e836:	e142      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e838:	2310      	movs	r3, #16
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83e:	e13e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e840:	cfff69f3 	.word	0xcfff69f3
 800e844:	58000c00 	.word	0x58000c00
 800e848:	11fff4ff 	.word	0x11fff4ff
 800e84c:	40011000 	.word	0x40011000
 800e850:	58024400 	.word	0x58024400
 800e854:	40004400 	.word	0x40004400
 800e858:	40004800 	.word	0x40004800
 800e85c:	40004c00 	.word	0x40004c00
 800e860:	40005000 	.word	0x40005000
 800e864:	2320      	movs	r3, #32
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e128      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e124      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e874:	2380      	movs	r3, #128	; 0x80
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e120      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4acb      	ldr	r2, [pc, #812]	; (800ebb0 <UART_SetConfig+0x698>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d176      	bne.n	800e974 <UART_SetConfig+0x45c>
 800e886:	4bcb      	ldr	r3, [pc, #812]	; (800ebb4 <UART_SetConfig+0x69c>)
 800e888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e88e:	2b28      	cmp	r3, #40	; 0x28
 800e890:	d86c      	bhi.n	800e96c <UART_SetConfig+0x454>
 800e892:	a201      	add	r2, pc, #4	; (adr r2, 800e898 <UART_SetConfig+0x380>)
 800e894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e898:	0800e93d 	.word	0x0800e93d
 800e89c:	0800e96d 	.word	0x0800e96d
 800e8a0:	0800e96d 	.word	0x0800e96d
 800e8a4:	0800e96d 	.word	0x0800e96d
 800e8a8:	0800e96d 	.word	0x0800e96d
 800e8ac:	0800e96d 	.word	0x0800e96d
 800e8b0:	0800e96d 	.word	0x0800e96d
 800e8b4:	0800e96d 	.word	0x0800e96d
 800e8b8:	0800e945 	.word	0x0800e945
 800e8bc:	0800e96d 	.word	0x0800e96d
 800e8c0:	0800e96d 	.word	0x0800e96d
 800e8c4:	0800e96d 	.word	0x0800e96d
 800e8c8:	0800e96d 	.word	0x0800e96d
 800e8cc:	0800e96d 	.word	0x0800e96d
 800e8d0:	0800e96d 	.word	0x0800e96d
 800e8d4:	0800e96d 	.word	0x0800e96d
 800e8d8:	0800e94d 	.word	0x0800e94d
 800e8dc:	0800e96d 	.word	0x0800e96d
 800e8e0:	0800e96d 	.word	0x0800e96d
 800e8e4:	0800e96d 	.word	0x0800e96d
 800e8e8:	0800e96d 	.word	0x0800e96d
 800e8ec:	0800e96d 	.word	0x0800e96d
 800e8f0:	0800e96d 	.word	0x0800e96d
 800e8f4:	0800e96d 	.word	0x0800e96d
 800e8f8:	0800e955 	.word	0x0800e955
 800e8fc:	0800e96d 	.word	0x0800e96d
 800e900:	0800e96d 	.word	0x0800e96d
 800e904:	0800e96d 	.word	0x0800e96d
 800e908:	0800e96d 	.word	0x0800e96d
 800e90c:	0800e96d 	.word	0x0800e96d
 800e910:	0800e96d 	.word	0x0800e96d
 800e914:	0800e96d 	.word	0x0800e96d
 800e918:	0800e95d 	.word	0x0800e95d
 800e91c:	0800e96d 	.word	0x0800e96d
 800e920:	0800e96d 	.word	0x0800e96d
 800e924:	0800e96d 	.word	0x0800e96d
 800e928:	0800e96d 	.word	0x0800e96d
 800e92c:	0800e96d 	.word	0x0800e96d
 800e930:	0800e96d 	.word	0x0800e96d
 800e934:	0800e96d 	.word	0x0800e96d
 800e938:	0800e965 	.word	0x0800e965
 800e93c:	2301      	movs	r3, #1
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e942:	e0bc      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e944:	2304      	movs	r3, #4
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94a:	e0b8      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e94c:	2308      	movs	r3, #8
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e952:	e0b4      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e954:	2310      	movs	r3, #16
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95a:	e0b0      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e95c:	2320      	movs	r3, #32
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e962:	e0ac      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e964:	2340      	movs	r3, #64	; 0x40
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e0a8      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e96c:	2380      	movs	r3, #128	; 0x80
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e0a4      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a8f      	ldr	r2, [pc, #572]	; (800ebb8 <UART_SetConfig+0x6a0>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d130      	bne.n	800e9e0 <UART_SetConfig+0x4c8>
 800e97e:	4b8d      	ldr	r3, [pc, #564]	; (800ebb4 <UART_SetConfig+0x69c>)
 800e980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e982:	f003 0307 	and.w	r3, r3, #7
 800e986:	2b05      	cmp	r3, #5
 800e988:	d826      	bhi.n	800e9d8 <UART_SetConfig+0x4c0>
 800e98a:	a201      	add	r2, pc, #4	; (adr r2, 800e990 <UART_SetConfig+0x478>)
 800e98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e990:	0800e9a9 	.word	0x0800e9a9
 800e994:	0800e9b1 	.word	0x0800e9b1
 800e998:	0800e9b9 	.word	0x0800e9b9
 800e99c:	0800e9c1 	.word	0x0800e9c1
 800e9a0:	0800e9c9 	.word	0x0800e9c9
 800e9a4:	0800e9d1 	.word	0x0800e9d1
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ae:	e086      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9b0:	2304      	movs	r3, #4
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9b6:	e082      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9b8:	2308      	movs	r3, #8
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9be:	e07e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9c0:	2310      	movs	r3, #16
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c6:	e07a      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9c8:	2320      	movs	r3, #32
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ce:	e076      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9d0:	2340      	movs	r3, #64	; 0x40
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d6:	e072      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9d8:	2380      	movs	r3, #128	; 0x80
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9de:	e06e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a75      	ldr	r2, [pc, #468]	; (800ebbc <UART_SetConfig+0x6a4>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d130      	bne.n	800ea4c <UART_SetConfig+0x534>
 800e9ea:	4b72      	ldr	r3, [pc, #456]	; (800ebb4 <UART_SetConfig+0x69c>)
 800e9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ee:	f003 0307 	and.w	r3, r3, #7
 800e9f2:	2b05      	cmp	r3, #5
 800e9f4:	d826      	bhi.n	800ea44 <UART_SetConfig+0x52c>
 800e9f6:	a201      	add	r2, pc, #4	; (adr r2, 800e9fc <UART_SetConfig+0x4e4>)
 800e9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fc:	0800ea15 	.word	0x0800ea15
 800ea00:	0800ea1d 	.word	0x0800ea1d
 800ea04:	0800ea25 	.word	0x0800ea25
 800ea08:	0800ea2d 	.word	0x0800ea2d
 800ea0c:	0800ea35 	.word	0x0800ea35
 800ea10:	0800ea3d 	.word	0x0800ea3d
 800ea14:	2300      	movs	r3, #0
 800ea16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1a:	e050      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea1c:	2304      	movs	r3, #4
 800ea1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea22:	e04c      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea24:	2308      	movs	r3, #8
 800ea26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2a:	e048      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea32:	e044      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea34:	2320      	movs	r3, #32
 800ea36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3a:	e040      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea3c:	2340      	movs	r3, #64	; 0x40
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea42:	e03c      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea44:	2380      	movs	r3, #128	; 0x80
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4a:	e038      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a5b      	ldr	r2, [pc, #364]	; (800ebc0 <UART_SetConfig+0x6a8>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d130      	bne.n	800eab8 <UART_SetConfig+0x5a0>
 800ea56:	4b57      	ldr	r3, [pc, #348]	; (800ebb4 <UART_SetConfig+0x69c>)
 800ea58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea5a:	f003 0307 	and.w	r3, r3, #7
 800ea5e:	2b05      	cmp	r3, #5
 800ea60:	d826      	bhi.n	800eab0 <UART_SetConfig+0x598>
 800ea62:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <UART_SetConfig+0x550>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea81 	.word	0x0800ea81
 800ea6c:	0800ea89 	.word	0x0800ea89
 800ea70:	0800ea91 	.word	0x0800ea91
 800ea74:	0800ea99 	.word	0x0800ea99
 800ea78:	0800eaa1 	.word	0x0800eaa1
 800ea7c:	0800eaa9 	.word	0x0800eaa9
 800ea80:	2302      	movs	r3, #2
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea86:	e01a      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea88:	2304      	movs	r3, #4
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8e:	e016      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea90:	2308      	movs	r3, #8
 800ea92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea96:	e012      	b.n	800eabe <UART_SetConfig+0x5a6>
 800ea98:	2310      	movs	r3, #16
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9e:	e00e      	b.n	800eabe <UART_SetConfig+0x5a6>
 800eaa0:	2320      	movs	r3, #32
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa6:	e00a      	b.n	800eabe <UART_SetConfig+0x5a6>
 800eaa8:	2340      	movs	r3, #64	; 0x40
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e006      	b.n	800eabe <UART_SetConfig+0x5a6>
 800eab0:	2380      	movs	r3, #128	; 0x80
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e002      	b.n	800eabe <UART_SetConfig+0x5a6>
 800eab8:	2380      	movs	r3, #128	; 0x80
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a3f      	ldr	r2, [pc, #252]	; (800ebc0 <UART_SetConfig+0x6a8>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	f040 80f8 	bne.w	800ecba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eaca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eace:	2b20      	cmp	r3, #32
 800ead0:	dc46      	bgt.n	800eb60 <UART_SetConfig+0x648>
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	f2c0 8082 	blt.w	800ebdc <UART_SetConfig+0x6c4>
 800ead8:	3b02      	subs	r3, #2
 800eada:	2b1e      	cmp	r3, #30
 800eadc:	d87e      	bhi.n	800ebdc <UART_SetConfig+0x6c4>
 800eade:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <UART_SetConfig+0x5cc>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eb67 	.word	0x0800eb67
 800eae8:	0800ebdd 	.word	0x0800ebdd
 800eaec:	0800eb6f 	.word	0x0800eb6f
 800eaf0:	0800ebdd 	.word	0x0800ebdd
 800eaf4:	0800ebdd 	.word	0x0800ebdd
 800eaf8:	0800ebdd 	.word	0x0800ebdd
 800eafc:	0800eb7f 	.word	0x0800eb7f
 800eb00:	0800ebdd 	.word	0x0800ebdd
 800eb04:	0800ebdd 	.word	0x0800ebdd
 800eb08:	0800ebdd 	.word	0x0800ebdd
 800eb0c:	0800ebdd 	.word	0x0800ebdd
 800eb10:	0800ebdd 	.word	0x0800ebdd
 800eb14:	0800ebdd 	.word	0x0800ebdd
 800eb18:	0800ebdd 	.word	0x0800ebdd
 800eb1c:	0800eb8f 	.word	0x0800eb8f
 800eb20:	0800ebdd 	.word	0x0800ebdd
 800eb24:	0800ebdd 	.word	0x0800ebdd
 800eb28:	0800ebdd 	.word	0x0800ebdd
 800eb2c:	0800ebdd 	.word	0x0800ebdd
 800eb30:	0800ebdd 	.word	0x0800ebdd
 800eb34:	0800ebdd 	.word	0x0800ebdd
 800eb38:	0800ebdd 	.word	0x0800ebdd
 800eb3c:	0800ebdd 	.word	0x0800ebdd
 800eb40:	0800ebdd 	.word	0x0800ebdd
 800eb44:	0800ebdd 	.word	0x0800ebdd
 800eb48:	0800ebdd 	.word	0x0800ebdd
 800eb4c:	0800ebdd 	.word	0x0800ebdd
 800eb50:	0800ebdd 	.word	0x0800ebdd
 800eb54:	0800ebdd 	.word	0x0800ebdd
 800eb58:	0800ebdd 	.word	0x0800ebdd
 800eb5c:	0800ebcf 	.word	0x0800ebcf
 800eb60:	2b40      	cmp	r3, #64	; 0x40
 800eb62:	d037      	beq.n	800ebd4 <UART_SetConfig+0x6bc>
 800eb64:	e03a      	b.n	800ebdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800eb66:	f7fc f809 	bl	800ab7c <HAL_RCCEx_GetD3PCLK1Freq>
 800eb6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb6c:	e03c      	b.n	800ebe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fc f818 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb7c:	e034      	b.n	800ebe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb7e:	f107 0318 	add.w	r3, r7, #24
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fc f964 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8c:	e02c      	b.n	800ebe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb8e:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <UART_SetConfig+0x69c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f003 0320 	and.w	r3, r3, #32
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d016      	beq.n	800ebc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb9a:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <UART_SetConfig+0x69c>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	08db      	lsrs	r3, r3, #3
 800eba0:	f003 0303 	and.w	r3, r3, #3
 800eba4:	4a07      	ldr	r2, [pc, #28]	; (800ebc4 <UART_SetConfig+0x6ac>)
 800eba6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebac:	e01c      	b.n	800ebe8 <UART_SetConfig+0x6d0>
 800ebae:	bf00      	nop
 800ebb0:	40011400 	.word	0x40011400
 800ebb4:	58024400 	.word	0x58024400
 800ebb8:	40007800 	.word	0x40007800
 800ebbc:	40007c00 	.word	0x40007c00
 800ebc0:	58000c00 	.word	0x58000c00
 800ebc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ebc8:	4b9d      	ldr	r3, [pc, #628]	; (800ee40 <UART_SetConfig+0x928>)
 800ebca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebcc:	e00c      	b.n	800ebe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebce:	4b9d      	ldr	r3, [pc, #628]	; (800ee44 <UART_SetConfig+0x92c>)
 800ebd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd2:	e009      	b.n	800ebe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebda:	e005      	b.n	800ebe8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebe6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ebe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f000 81de 	beq.w	800efac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf4:	4a94      	ldr	r2, [pc, #592]	; (800ee48 <UART_SetConfig+0x930>)
 800ebf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	685a      	ldr	r2, [r3, #4]
 800ec08:	4613      	mov	r3, r2
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	4413      	add	r3, r2
 800ec0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d305      	bcc.n	800ec20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d903      	bls.n	800ec28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ec20:	2301      	movs	r3, #1
 800ec22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec26:	e1c1      	b.n	800efac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	60bb      	str	r3, [r7, #8]
 800ec2e:	60fa      	str	r2, [r7, #12]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec34:	4a84      	ldr	r2, [pc, #528]	; (800ee48 <UART_SetConfig+0x930>)
 800ec36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	607a      	str	r2, [r7, #4]
 800ec42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ec4a:	f7f1 fb45 	bl	80002d8 <__aeabi_uldivmod>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4610      	mov	r0, r2
 800ec54:	4619      	mov	r1, r3
 800ec56:	f04f 0200 	mov.w	r2, #0
 800ec5a:	f04f 0300 	mov.w	r3, #0
 800ec5e:	020b      	lsls	r3, r1, #8
 800ec60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ec64:	0202      	lsls	r2, r0, #8
 800ec66:	6979      	ldr	r1, [r7, #20]
 800ec68:	6849      	ldr	r1, [r1, #4]
 800ec6a:	0849      	lsrs	r1, r1, #1
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	460c      	mov	r4, r1
 800ec70:	4605      	mov	r5, r0
 800ec72:	eb12 0804 	adds.w	r8, r2, r4
 800ec76:	eb43 0905 	adc.w	r9, r3, r5
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	469a      	mov	sl, r3
 800ec82:	4693      	mov	fp, r2
 800ec84:	4652      	mov	r2, sl
 800ec86:	465b      	mov	r3, fp
 800ec88:	4640      	mov	r0, r8
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	f7f1 fb24 	bl	80002d8 <__aeabi_uldivmod>
 800ec90:	4602      	mov	r2, r0
 800ec92:	460b      	mov	r3, r1
 800ec94:	4613      	mov	r3, r2
 800ec96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec9e:	d308      	bcc.n	800ecb2 <UART_SetConfig+0x79a>
 800eca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eca6:	d204      	bcs.n	800ecb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecae:	60da      	str	r2, [r3, #12]
 800ecb0:	e17c      	b.n	800efac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ecb8:	e178      	b.n	800efac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	69db      	ldr	r3, [r3, #28]
 800ecbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecc2:	f040 80c5 	bne.w	800ee50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ecc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecca:	2b20      	cmp	r3, #32
 800eccc:	dc48      	bgt.n	800ed60 <UART_SetConfig+0x848>
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	db7b      	blt.n	800edca <UART_SetConfig+0x8b2>
 800ecd2:	2b20      	cmp	r3, #32
 800ecd4:	d879      	bhi.n	800edca <UART_SetConfig+0x8b2>
 800ecd6:	a201      	add	r2, pc, #4	; (adr r2, 800ecdc <UART_SetConfig+0x7c4>)
 800ecd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecdc:	0800ed67 	.word	0x0800ed67
 800ece0:	0800ed6f 	.word	0x0800ed6f
 800ece4:	0800edcb 	.word	0x0800edcb
 800ece8:	0800edcb 	.word	0x0800edcb
 800ecec:	0800ed77 	.word	0x0800ed77
 800ecf0:	0800edcb 	.word	0x0800edcb
 800ecf4:	0800edcb 	.word	0x0800edcb
 800ecf8:	0800edcb 	.word	0x0800edcb
 800ecfc:	0800ed87 	.word	0x0800ed87
 800ed00:	0800edcb 	.word	0x0800edcb
 800ed04:	0800edcb 	.word	0x0800edcb
 800ed08:	0800edcb 	.word	0x0800edcb
 800ed0c:	0800edcb 	.word	0x0800edcb
 800ed10:	0800edcb 	.word	0x0800edcb
 800ed14:	0800edcb 	.word	0x0800edcb
 800ed18:	0800edcb 	.word	0x0800edcb
 800ed1c:	0800ed97 	.word	0x0800ed97
 800ed20:	0800edcb 	.word	0x0800edcb
 800ed24:	0800edcb 	.word	0x0800edcb
 800ed28:	0800edcb 	.word	0x0800edcb
 800ed2c:	0800edcb 	.word	0x0800edcb
 800ed30:	0800edcb 	.word	0x0800edcb
 800ed34:	0800edcb 	.word	0x0800edcb
 800ed38:	0800edcb 	.word	0x0800edcb
 800ed3c:	0800edcb 	.word	0x0800edcb
 800ed40:	0800edcb 	.word	0x0800edcb
 800ed44:	0800edcb 	.word	0x0800edcb
 800ed48:	0800edcb 	.word	0x0800edcb
 800ed4c:	0800edcb 	.word	0x0800edcb
 800ed50:	0800edcb 	.word	0x0800edcb
 800ed54:	0800edcb 	.word	0x0800edcb
 800ed58:	0800edcb 	.word	0x0800edcb
 800ed5c:	0800edbd 	.word	0x0800edbd
 800ed60:	2b40      	cmp	r3, #64	; 0x40
 800ed62:	d02e      	beq.n	800edc2 <UART_SetConfig+0x8aa>
 800ed64:	e031      	b.n	800edca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed66:	f7fa fac5 	bl	80092f4 <HAL_RCC_GetPCLK1Freq>
 800ed6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed6c:	e033      	b.n	800edd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed6e:	f7fa fad7 	bl	8009320 <HAL_RCC_GetPCLK2Freq>
 800ed72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed74:	e02f      	b.n	800edd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fb ff14 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed84:	e027      	b.n	800edd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed86:	f107 0318 	add.w	r3, r7, #24
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fc f860 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed94:	e01f      	b.n	800edd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed96:	4b2d      	ldr	r3, [pc, #180]	; (800ee4c <UART_SetConfig+0x934>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f003 0320 	and.w	r3, r3, #32
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d009      	beq.n	800edb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eda2:	4b2a      	ldr	r3, [pc, #168]	; (800ee4c <UART_SetConfig+0x934>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	08db      	lsrs	r3, r3, #3
 800eda8:	f003 0303 	and.w	r3, r3, #3
 800edac:	4a24      	ldr	r2, [pc, #144]	; (800ee40 <UART_SetConfig+0x928>)
 800edae:	fa22 f303 	lsr.w	r3, r2, r3
 800edb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edb4:	e00f      	b.n	800edd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800edb6:	4b22      	ldr	r3, [pc, #136]	; (800ee40 <UART_SetConfig+0x928>)
 800edb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edba:	e00c      	b.n	800edd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edbc:	4b21      	ldr	r3, [pc, #132]	; (800ee44 <UART_SetConfig+0x92c>)
 800edbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edc0:	e009      	b.n	800edd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edc8:	e005      	b.n	800edd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800edca:	2300      	movs	r3, #0
 800edcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edce:	2301      	movs	r3, #1
 800edd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800edd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 80e7 	beq.w	800efac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede2:	4a19      	ldr	r2, [pc, #100]	; (800ee48 <UART_SetConfig+0x930>)
 800ede4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ede8:	461a      	mov	r2, r3
 800edea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edec:	fbb3 f3f2 	udiv	r3, r3, r2
 800edf0:	005a      	lsls	r2, r3, #1
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	085b      	lsrs	r3, r3, #1
 800edf8:	441a      	add	r2, r3
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee06:	2b0f      	cmp	r3, #15
 800ee08:	d916      	bls.n	800ee38 <UART_SetConfig+0x920>
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee10:	d212      	bcs.n	800ee38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	f023 030f 	bic.w	r3, r3, #15
 800ee1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1e:	085b      	lsrs	r3, r3, #1
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	f003 0307 	and.w	r3, r3, #7
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ee34:	60da      	str	r2, [r3, #12]
 800ee36:	e0b9      	b.n	800efac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee3e:	e0b5      	b.n	800efac <UART_SetConfig+0xa94>
 800ee40:	03d09000 	.word	0x03d09000
 800ee44:	003d0900 	.word	0x003d0900
 800ee48:	080104f0 	.word	0x080104f0
 800ee4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ee50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee54:	2b20      	cmp	r3, #32
 800ee56:	dc49      	bgt.n	800eeec <UART_SetConfig+0x9d4>
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	db7c      	blt.n	800ef56 <UART_SetConfig+0xa3e>
 800ee5c:	2b20      	cmp	r3, #32
 800ee5e:	d87a      	bhi.n	800ef56 <UART_SetConfig+0xa3e>
 800ee60:	a201      	add	r2, pc, #4	; (adr r2, 800ee68 <UART_SetConfig+0x950>)
 800ee62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee66:	bf00      	nop
 800ee68:	0800eef3 	.word	0x0800eef3
 800ee6c:	0800eefb 	.word	0x0800eefb
 800ee70:	0800ef57 	.word	0x0800ef57
 800ee74:	0800ef57 	.word	0x0800ef57
 800ee78:	0800ef03 	.word	0x0800ef03
 800ee7c:	0800ef57 	.word	0x0800ef57
 800ee80:	0800ef57 	.word	0x0800ef57
 800ee84:	0800ef57 	.word	0x0800ef57
 800ee88:	0800ef13 	.word	0x0800ef13
 800ee8c:	0800ef57 	.word	0x0800ef57
 800ee90:	0800ef57 	.word	0x0800ef57
 800ee94:	0800ef57 	.word	0x0800ef57
 800ee98:	0800ef57 	.word	0x0800ef57
 800ee9c:	0800ef57 	.word	0x0800ef57
 800eea0:	0800ef57 	.word	0x0800ef57
 800eea4:	0800ef57 	.word	0x0800ef57
 800eea8:	0800ef23 	.word	0x0800ef23
 800eeac:	0800ef57 	.word	0x0800ef57
 800eeb0:	0800ef57 	.word	0x0800ef57
 800eeb4:	0800ef57 	.word	0x0800ef57
 800eeb8:	0800ef57 	.word	0x0800ef57
 800eebc:	0800ef57 	.word	0x0800ef57
 800eec0:	0800ef57 	.word	0x0800ef57
 800eec4:	0800ef57 	.word	0x0800ef57
 800eec8:	0800ef57 	.word	0x0800ef57
 800eecc:	0800ef57 	.word	0x0800ef57
 800eed0:	0800ef57 	.word	0x0800ef57
 800eed4:	0800ef57 	.word	0x0800ef57
 800eed8:	0800ef57 	.word	0x0800ef57
 800eedc:	0800ef57 	.word	0x0800ef57
 800eee0:	0800ef57 	.word	0x0800ef57
 800eee4:	0800ef57 	.word	0x0800ef57
 800eee8:	0800ef49 	.word	0x0800ef49
 800eeec:	2b40      	cmp	r3, #64	; 0x40
 800eeee:	d02e      	beq.n	800ef4e <UART_SetConfig+0xa36>
 800eef0:	e031      	b.n	800ef56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eef2:	f7fa f9ff 	bl	80092f4 <HAL_RCC_GetPCLK1Freq>
 800eef6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eef8:	e033      	b.n	800ef62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eefa:	f7fa fa11 	bl	8009320 <HAL_RCC_GetPCLK2Freq>
 800eefe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef00:	e02f      	b.n	800ef62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fb fe4e 	bl	800aba8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef10:	e027      	b.n	800ef62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef12:	f107 0318 	add.w	r3, r7, #24
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fb ff9a 	bl	800ae50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef20:	e01f      	b.n	800ef62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef22:	4b2d      	ldr	r3, [pc, #180]	; (800efd8 <UART_SetConfig+0xac0>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f003 0320 	and.w	r3, r3, #32
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d009      	beq.n	800ef42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef2e:	4b2a      	ldr	r3, [pc, #168]	; (800efd8 <UART_SetConfig+0xac0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	08db      	lsrs	r3, r3, #3
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	4a28      	ldr	r2, [pc, #160]	; (800efdc <UART_SetConfig+0xac4>)
 800ef3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef40:	e00f      	b.n	800ef62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ef42:	4b26      	ldr	r3, [pc, #152]	; (800efdc <UART_SetConfig+0xac4>)
 800ef44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef46:	e00c      	b.n	800ef62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef48:	4b25      	ldr	r3, [pc, #148]	; (800efe0 <UART_SetConfig+0xac8>)
 800ef4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef4c:	e009      	b.n	800ef62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef54:	e005      	b.n	800ef62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ef56:	2300      	movs	r3, #0
 800ef58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef60:	bf00      	nop
    }

    if (pclk != 0U)
 800ef62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d021      	beq.n	800efac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6c:	4a1d      	ldr	r2, [pc, #116]	; (800efe4 <UART_SetConfig+0xacc>)
 800ef6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef72:	461a      	mov	r2, r3
 800ef74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef76:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	085b      	lsrs	r3, r3, #1
 800ef80:	441a      	add	r2, r3
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	2b0f      	cmp	r3, #15
 800ef90:	d909      	bls.n	800efa6 <UART_SetConfig+0xa8e>
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef98:	d205      	bcs.n	800efa6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	60da      	str	r2, [r3, #12]
 800efa4:	e002      	b.n	800efac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800efa6:	2301      	movs	r3, #1
 800efa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	2201      	movs	r2, #1
 800efb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	2200      	movs	r2, #0
 800efc0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	2200      	movs	r2, #0
 800efc6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800efc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3748      	adds	r7, #72	; 0x48
 800efd0:	46bd      	mov	sp, r7
 800efd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800efd6:	bf00      	nop
 800efd8:	58024400 	.word	0x58024400
 800efdc:	03d09000 	.word	0x03d09000
 800efe0:	003d0900 	.word	0x003d0900
 800efe4:	080104f0 	.word	0x080104f0

0800efe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00a      	beq.n	800f012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	430a      	orrs	r2, r1
 800f010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f016:	f003 0302 	and.w	r3, r3, #2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00a      	beq.n	800f034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	430a      	orrs	r2, r1
 800f032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f038:	f003 0304 	and.w	r3, r3, #4
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00a      	beq.n	800f056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	430a      	orrs	r2, r1
 800f054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f05a:	f003 0308 	and.w	r3, r3, #8
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00a      	beq.n	800f078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	430a      	orrs	r2, r1
 800f076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f07c:	f003 0310 	and.w	r3, r3, #16
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	430a      	orrs	r2, r1
 800f098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f09e:	f003 0320 	and.w	r3, r3, #32
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00a      	beq.n	800f0bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	430a      	orrs	r2, r1
 800f0ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d01a      	beq.n	800f0fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0e6:	d10a      	bne.n	800f0fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00a      	beq.n	800f120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	430a      	orrs	r2, r1
 800f11e:	605a      	str	r2, [r3, #4]
  }
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af02      	add	r7, sp, #8
 800f132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f13c:	f7f3 fbf8 	bl	8002930 <HAL_GetTick>
 800f140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f003 0308 	and.w	r3, r3, #8
 800f14c:	2b08      	cmp	r3, #8
 800f14e:	d10e      	bne.n	800f16e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f82f 	bl	800f1c2 <UART_WaitOnFlagUntilTimeout>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f16a:	2303      	movs	r3, #3
 800f16c:	e025      	b.n	800f1ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b04      	cmp	r3, #4
 800f17a:	d10e      	bne.n	800f19a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f17c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 f819 	bl	800f1c2 <UART_WaitOnFlagUntilTimeout>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f196:	2303      	movs	r3, #3
 800f198:	e00f      	b.n	800f1ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2220      	movs	r2, #32
 800f19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2220      	movs	r2, #32
 800f1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b09c      	sub	sp, #112	; 0x70
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	603b      	str	r3, [r7, #0]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1d2:	e0a9      	b.n	800f328 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1da:	f000 80a5 	beq.w	800f328 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1de:	f7f3 fba7 	bl	8002930 <HAL_GetTick>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d302      	bcc.n	800f1f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f1ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d140      	bne.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1fc:	e853 3f00 	ldrex	r3, [r3]
 800f200:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f204:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f208:	667b      	str	r3, [r7, #100]	; 0x64
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f212:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f214:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f218:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f21a:	e841 2300 	strex	r3, r2, [r1]
 800f21e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1e6      	bne.n	800f1f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	3308      	adds	r3, #8
 800f22c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f230:	e853 3f00 	ldrex	r3, [r3]
 800f234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f238:	f023 0301 	bic.w	r3, r3, #1
 800f23c:	663b      	str	r3, [r7, #96]	; 0x60
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	3308      	adds	r3, #8
 800f244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f246:	64ba      	str	r2, [r7, #72]	; 0x48
 800f248:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f24c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f24e:	e841 2300 	strex	r3, r2, [r1]
 800f252:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1e5      	bne.n	800f226 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2220      	movs	r2, #32
 800f25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2220      	movs	r2, #32
 800f266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f272:	2303      	movs	r3, #3
 800f274:	e069      	b.n	800f34a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f003 0304 	and.w	r3, r3, #4
 800f280:	2b00      	cmp	r3, #0
 800f282:	d051      	beq.n	800f328 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	69db      	ldr	r3, [r3, #28]
 800f28a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f28e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f292:	d149      	bne.n	800f328 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f29c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a6:	e853 3f00 	ldrex	r3, [r3]
 800f2aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f2b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f2be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2c4:	e841 2300 	strex	r3, r2, [r1]
 800f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d1e6      	bne.n	800f29e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	e853 3f00 	ldrex	r3, [r3]
 800f2de:	613b      	str	r3, [r7, #16]
   return(result);
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	f023 0301 	bic.w	r3, r3, #1
 800f2e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f2f0:	623a      	str	r2, [r7, #32]
 800f2f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f4:	69f9      	ldr	r1, [r7, #28]
 800f2f6:	6a3a      	ldr	r2, [r7, #32]
 800f2f8:	e841 2300 	strex	r3, r2, [r1]
 800f2fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1e5      	bne.n	800f2d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2220      	movs	r2, #32
 800f308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2220      	movs	r2, #32
 800f310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2220      	movs	r2, #32
 800f318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f324:	2303      	movs	r3, #3
 800f326:	e010      	b.n	800f34a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	69da      	ldr	r2, [r3, #28]
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	4013      	ands	r3, r2
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	429a      	cmp	r2, r3
 800f336:	bf0c      	ite	eq
 800f338:	2301      	moveq	r3, #1
 800f33a:	2300      	movne	r3, #0
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	461a      	mov	r2, r3
 800f340:	79fb      	ldrb	r3, [r7, #7]
 800f342:	429a      	cmp	r2, r3
 800f344:	f43f af46 	beq.w	800f1d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3770      	adds	r7, #112	; 0x70
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
	...

0800f354 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f354:	b480      	push	{r7}
 800f356:	b0a3      	sub	sp, #140	; 0x8c
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	4613      	mov	r3, r2
 800f360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	88fa      	ldrh	r2, [r7, #6]
 800f36c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	88fa      	ldrh	r2, [r7, #6]
 800f374:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f386:	d10e      	bne.n	800f3a6 <UART_Start_Receive_IT+0x52>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d105      	bne.n	800f39c <UART_Start_Receive_IT+0x48>
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f39a:	e02d      	b.n	800f3f8 <UART_Start_Receive_IT+0xa4>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	22ff      	movs	r2, #255	; 0xff
 800f3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3a4:	e028      	b.n	800f3f8 <UART_Start_Receive_IT+0xa4>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10d      	bne.n	800f3ca <UART_Start_Receive_IT+0x76>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d104      	bne.n	800f3c0 <UART_Start_Receive_IT+0x6c>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	22ff      	movs	r2, #255	; 0xff
 800f3ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3be:	e01b      	b.n	800f3f8 <UART_Start_Receive_IT+0xa4>
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	227f      	movs	r2, #127	; 0x7f
 800f3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3c8:	e016      	b.n	800f3f8 <UART_Start_Receive_IT+0xa4>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3d2:	d10d      	bne.n	800f3f0 <UART_Start_Receive_IT+0x9c>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d104      	bne.n	800f3e6 <UART_Start_Receive_IT+0x92>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	227f      	movs	r2, #127	; 0x7f
 800f3e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3e4:	e008      	b.n	800f3f8 <UART_Start_Receive_IT+0xa4>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	223f      	movs	r2, #63	; 0x3f
 800f3ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3ee:	e003      	b.n	800f3f8 <UART_Start_Receive_IT+0xa4>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2222      	movs	r2, #34	; 0x22
 800f404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	3308      	adds	r3, #8
 800f40e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f412:	e853 3f00 	ldrex	r3, [r3]
 800f416:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f41a:	f043 0301 	orr.w	r3, r3, #1
 800f41e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3308      	adds	r3, #8
 800f428:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f42c:	673a      	str	r2, [r7, #112]	; 0x70
 800f42e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f430:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f432:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f434:	e841 2300 	strex	r3, r2, [r1]
 800f438:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f43a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1e3      	bne.n	800f408 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f448:	d153      	bne.n	800f4f2 <UART_Start_Receive_IT+0x19e>
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f450:	88fa      	ldrh	r2, [r7, #6]
 800f452:	429a      	cmp	r2, r3
 800f454:	d34d      	bcc.n	800f4f2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f45e:	d107      	bne.n	800f470 <UART_Start_Receive_IT+0x11c>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d103      	bne.n	800f470 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	4a4b      	ldr	r2, [pc, #300]	; (800f598 <UART_Start_Receive_IT+0x244>)
 800f46c:	671a      	str	r2, [r3, #112]	; 0x70
 800f46e:	e002      	b.n	800f476 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4a4a      	ldr	r2, [pc, #296]	; (800f59c <UART_Start_Receive_IT+0x248>)
 800f474:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	691b      	ldr	r3, [r3, #16]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d01a      	beq.n	800f4bc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48e:	e853 3f00 	ldrex	r3, [r3]
 800f492:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f49a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f4ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4b0:	e841 2300 	strex	r3, r2, [r1]
 800f4b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1e4      	bne.n	800f486 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c6:	e853 3f00 	ldrex	r3, [r3]
 800f4ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	3308      	adds	r3, #8
 800f4da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4dc:	64ba      	str	r2, [r7, #72]	; 0x48
 800f4de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4e4:	e841 2300 	strex	r3, r2, [r1]
 800f4e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d1e5      	bne.n	800f4bc <UART_Start_Receive_IT+0x168>
 800f4f0:	e04a      	b.n	800f588 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4fa:	d107      	bne.n	800f50c <UART_Start_Receive_IT+0x1b8>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	691b      	ldr	r3, [r3, #16]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d103      	bne.n	800f50c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	4a26      	ldr	r2, [pc, #152]	; (800f5a0 <UART_Start_Receive_IT+0x24c>)
 800f508:	671a      	str	r2, [r3, #112]	; 0x70
 800f50a:	e002      	b.n	800f512 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	4a25      	ldr	r2, [pc, #148]	; (800f5a4 <UART_Start_Receive_IT+0x250>)
 800f510:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2200      	movs	r2, #0
 800f516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d019      	beq.n	800f556 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52a:	e853 3f00 	ldrex	r3, [r3]
 800f52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f536:	677b      	str	r3, [r7, #116]	; 0x74
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	461a      	mov	r2, r3
 800f53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f540:	637b      	str	r3, [r7, #52]	; 0x34
 800f542:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f548:	e841 2300 	strex	r3, r2, [r1]
 800f54c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1e6      	bne.n	800f522 <UART_Start_Receive_IT+0x1ce>
 800f554:	e018      	b.n	800f588 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	e853 3f00 	ldrex	r3, [r3]
 800f562:	613b      	str	r3, [r7, #16]
   return(result);
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	f043 0320 	orr.w	r3, r3, #32
 800f56a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	461a      	mov	r2, r3
 800f572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f574:	623b      	str	r3, [r7, #32]
 800f576:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f578:	69f9      	ldr	r1, [r7, #28]
 800f57a:	6a3a      	ldr	r2, [r7, #32]
 800f57c:	e841 2300 	strex	r3, r2, [r1]
 800f580:	61bb      	str	r3, [r7, #24]
   return(result);
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1e6      	bne.n	800f556 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	378c      	adds	r7, #140	; 0x8c
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	0800fcb1 	.word	0x0800fcb1
 800f59c:	0800f9b9 	.word	0x0800f9b9
 800f5a0:	0800f857 	.word	0x0800f857
 800f5a4:	0800f6f7 	.word	0x0800f6f7

0800f5a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b095      	sub	sp, #84	; 0x54
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f5d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e6      	bne.n	800f5b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ea:	6a3b      	ldr	r3, [r7, #32]
 800f5ec:	e853 3f00 	ldrex	r3, [r3]
 800f5f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5f2:	69fa      	ldr	r2, [r7, #28]
 800f5f4:	4b1e      	ldr	r3, [pc, #120]	; (800f670 <UART_EndRxTransfer+0xc8>)
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3308      	adds	r3, #8
 800f600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f602:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f60a:	e841 2300 	strex	r3, r2, [r1]
 800f60e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1e5      	bne.n	800f5e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d118      	bne.n	800f650 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	e853 3f00 	ldrex	r3, [r3]
 800f62a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	f023 0310 	bic.w	r3, r3, #16
 800f632:	647b      	str	r3, [r7, #68]	; 0x44
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	461a      	mov	r2, r3
 800f63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f63c:	61bb      	str	r3, [r7, #24]
 800f63e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f640:	6979      	ldr	r1, [r7, #20]
 800f642:	69ba      	ldr	r2, [r7, #24]
 800f644:	e841 2300 	strex	r3, r2, [r1]
 800f648:	613b      	str	r3, [r7, #16]
   return(result);
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1e6      	bne.n	800f61e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2220      	movs	r2, #32
 800f654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f664:	bf00      	nop
 800f666:	3754      	adds	r7, #84	; 0x54
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	effffffe 	.word	0xeffffffe

0800f674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f7fe ff2a 	bl	800e4ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f698:	bf00      	nop
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	e853 3f00 	ldrex	r3, [r3]
 800f6b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6bc:	61fb      	str	r3, [r7, #28]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	61bb      	str	r3, [r7, #24]
 800f6c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ca:	6979      	ldr	r1, [r7, #20]
 800f6cc:	69ba      	ldr	r2, [r7, #24]
 800f6ce:	e841 2300 	strex	r3, r2, [r1]
 800f6d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1e6      	bne.n	800f6a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2220      	movs	r2, #32
 800f6de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fe fef5 	bl	800e4d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6ee:	bf00      	nop
 800f6f0:	3720      	adds	r7, #32
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b096      	sub	sp, #88	; 0x58
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f704:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f70e:	2b22      	cmp	r3, #34	; 0x22
 800f710:	f040 8095 	bne.w	800f83e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f71e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f722:	b2d9      	uxtb	r1, r3
 800f724:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f728:	b2da      	uxtb	r2, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f72e:	400a      	ands	r2, r1
 800f730:	b2d2      	uxtb	r2, r2
 800f732:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f738:	1c5a      	adds	r2, r3, #1
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f744:	b29b      	uxth	r3, r3
 800f746:	3b01      	subs	r3, #1
 800f748:	b29a      	uxth	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f756:	b29b      	uxth	r3, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d178      	bne.n	800f84e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f764:	e853 3f00 	ldrex	r3, [r3]
 800f768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f770:	653b      	str	r3, [r7, #80]	; 0x50
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f77a:	647b      	str	r3, [r7, #68]	; 0x44
 800f77c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f77e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f782:	e841 2300 	strex	r3, r2, [r1]
 800f786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1e6      	bne.n	800f75c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3308      	adds	r3, #8
 800f794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	e853 3f00 	ldrex	r3, [r3]
 800f79c:	623b      	str	r3, [r7, #32]
   return(result);
 800f79e:	6a3b      	ldr	r3, [r7, #32]
 800f7a0:	f023 0301 	bic.w	r3, r3, #1
 800f7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3308      	adds	r3, #8
 800f7ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7ae:	633a      	str	r2, [r7, #48]	; 0x30
 800f7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7b6:	e841 2300 	strex	r3, r2, [r1]
 800f7ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1e5      	bne.n	800f78e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2220      	movs	r2, #32
 800f7c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d12e      	bne.n	800f836 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	e853 3f00 	ldrex	r3, [r3]
 800f7ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f023 0310 	bic.w	r3, r3, #16
 800f7f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7fc:	61fb      	str	r3, [r7, #28]
 800f7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f800:	69b9      	ldr	r1, [r7, #24]
 800f802:	69fa      	ldr	r2, [r7, #28]
 800f804:	e841 2300 	strex	r3, r2, [r1]
 800f808:	617b      	str	r3, [r7, #20]
   return(result);
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d1e6      	bne.n	800f7de <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	69db      	ldr	r3, [r3, #28]
 800f816:	f003 0310 	and.w	r3, r3, #16
 800f81a:	2b10      	cmp	r3, #16
 800f81c:	d103      	bne.n	800f826 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2210      	movs	r2, #16
 800f824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f82c:	4619      	mov	r1, r3
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7fe fe66 	bl	800e500 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f834:	e00b      	b.n	800f84e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7f1 faae 	bl	8000d98 <HAL_UART_RxCpltCallback>
}
 800f83c:	e007      	b.n	800f84e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	699a      	ldr	r2, [r3, #24]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f042 0208 	orr.w	r2, r2, #8
 800f84c:	619a      	str	r2, [r3, #24]
}
 800f84e:	bf00      	nop
 800f850:	3758      	adds	r7, #88	; 0x58
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b096      	sub	sp, #88	; 0x58
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f864:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f86e:	2b22      	cmp	r3, #34	; 0x22
 800f870:	f040 8095 	bne.w	800f99e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f882:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f884:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f888:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f88c:	4013      	ands	r3, r2
 800f88e:	b29a      	uxth	r2, r3
 800f890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f892:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f898:	1c9a      	adds	r2, r3, #2
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d178      	bne.n	800f9ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c4:	e853 3f00 	ldrex	r3, [r3]
 800f8c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8da:	643b      	str	r3, [r7, #64]	; 0x40
 800f8dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e6      	bne.n	800f8bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f6:	6a3b      	ldr	r3, [r7, #32]
 800f8f8:	e853 3f00 	ldrex	r3, [r3]
 800f8fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	f023 0301 	bic.w	r3, r3, #1
 800f904:	64bb      	str	r3, [r7, #72]	; 0x48
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	3308      	adds	r3, #8
 800f90c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f90e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f916:	e841 2300 	strex	r3, r2, [r1]
 800f91a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1e5      	bne.n	800f8ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2220      	movs	r2, #32
 800f926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f934:	2b01      	cmp	r3, #1
 800f936:	d12e      	bne.n	800f996 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	e853 3f00 	ldrex	r3, [r3]
 800f94a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	f023 0310 	bic.w	r3, r3, #16
 800f952:	647b      	str	r3, [r7, #68]	; 0x44
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	461a      	mov	r2, r3
 800f95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f95c:	61bb      	str	r3, [r7, #24]
 800f95e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f960:	6979      	ldr	r1, [r7, #20]
 800f962:	69ba      	ldr	r2, [r7, #24]
 800f964:	e841 2300 	strex	r3, r2, [r1]
 800f968:	613b      	str	r3, [r7, #16]
   return(result);
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e6      	bne.n	800f93e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	69db      	ldr	r3, [r3, #28]
 800f976:	f003 0310 	and.w	r3, r3, #16
 800f97a:	2b10      	cmp	r3, #16
 800f97c:	d103      	bne.n	800f986 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2210      	movs	r2, #16
 800f984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f98c:	4619      	mov	r1, r3
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7fe fdb6 	bl	800e500 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f994:	e00b      	b.n	800f9ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7f1 f9fe 	bl	8000d98 <HAL_UART_RxCpltCallback>
}
 800f99c:	e007      	b.n	800f9ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	699a      	ldr	r2, [r3, #24]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f042 0208 	orr.w	r2, r2, #8
 800f9ac:	619a      	str	r2, [r3, #24]
}
 800f9ae:	bf00      	nop
 800f9b0:	3758      	adds	r7, #88	; 0x58
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
	...

0800f9b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b0a6      	sub	sp, #152	; 0x98
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	69db      	ldr	r3, [r3, #28]
 800f9d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9ee:	2b22      	cmp	r3, #34	; 0x22
 800f9f0:	f040 814d 	bne.w	800fc8e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9fe:	e0f4      	b.n	800fbea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa06:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fa0a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fa0e:	b2d9      	uxtb	r1, r3
 800fa10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fa14:	b2da      	uxtb	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa1a:	400a      	ands	r2, r1
 800fa1c:	b2d2      	uxtb	r2, r2
 800fa1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa24:	1c5a      	adds	r2, r3, #1
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	3b01      	subs	r3, #1
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	69db      	ldr	r3, [r3, #28]
 800fa42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fa46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa4a:	f003 0307 	and.w	r3, r3, #7
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d053      	beq.n	800fafa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa56:	f003 0301 	and.w	r3, r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d011      	beq.n	800fa82 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fa5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00b      	beq.n	800fa82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa78:	f043 0201 	orr.w	r2, r3, #1
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa86:	f003 0302 	and.w	r3, r3, #2
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d011      	beq.n	800fab2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fa8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa92:	f003 0301 	and.w	r3, r3, #1
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00b      	beq.n	800fab2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faa8:	f043 0204 	orr.w	r2, r3, #4
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fab6:	f003 0304 	and.w	r3, r3, #4
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d011      	beq.n	800fae2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fabe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fac2:	f003 0301 	and.w	r3, r3, #1
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00b      	beq.n	800fae2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2204      	movs	r2, #4
 800fad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fad8:	f043 0202 	orr.w	r2, r3, #2
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d006      	beq.n	800fafa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7fe fcfd 	bl	800e4ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d171      	bne.n	800fbea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb0e:	e853 3f00 	ldrex	r3, [r3]
 800fb12:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fb14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	461a      	mov	r2, r3
 800fb24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb28:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb2a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fb2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb30:	e841 2300 	strex	r3, r2, [r1]
 800fb34:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fb36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1e4      	bne.n	800fb06 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3308      	adds	r3, #8
 800fb42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb46:	e853 3f00 	ldrex	r3, [r3]
 800fb4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fb4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb4e:	4b56      	ldr	r3, [pc, #344]	; (800fca8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800fb50:	4013      	ands	r3, r2
 800fb52:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3308      	adds	r3, #8
 800fb5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb5c:	657a      	str	r2, [r7, #84]	; 0x54
 800fb5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb64:	e841 2300 	strex	r3, r2, [r1]
 800fb68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e5      	bne.n	800fb3c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2220      	movs	r2, #32
 800fb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d12e      	bne.n	800fbe4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb94:	e853 3f00 	ldrex	r3, [r3]
 800fb98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	f023 0310 	bic.w	r3, r3, #16
 800fba0:	67bb      	str	r3, [r7, #120]	; 0x78
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbaa:	643b      	str	r3, [r7, #64]	; 0x40
 800fbac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbb2:	e841 2300 	strex	r3, r2, [r1]
 800fbb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e6      	bne.n	800fb8c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	f003 0310 	and.w	r3, r3, #16
 800fbc8:	2b10      	cmp	r3, #16
 800fbca:	d103      	bne.n	800fbd4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2210      	movs	r2, #16
 800fbd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fbda:	4619      	mov	r1, r3
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7fe fc8f 	bl	800e500 <HAL_UARTEx_RxEventCallback>
 800fbe2:	e002      	b.n	800fbea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7f1 f8d7 	bl	8000d98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fbea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d006      	beq.n	800fc00 <UART_RxISR_8BIT_FIFOEN+0x248>
 800fbf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbf6:	f003 0320 	and.w	r3, r3, #32
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f47f af00 	bne.w	800fa00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d045      	beq.n	800fc9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d23e      	bcs.n	800fc9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3308      	adds	r3, #8
 800fc26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	e853 3f00 	ldrex	r3, [r3]
 800fc2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc36:	673b      	str	r3, [r7, #112]	; 0x70
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	3308      	adds	r3, #8
 800fc3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc48:	e841 2300 	strex	r3, r2, [r1]
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d1e5      	bne.n	800fc20 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4a15      	ldr	r2, [pc, #84]	; (800fcac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800fc58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	e853 3f00 	ldrex	r3, [r3]
 800fc66:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	f043 0320 	orr.w	r3, r3, #32
 800fc6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	461a      	mov	r2, r3
 800fc76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc78:	61bb      	str	r3, [r7, #24]
 800fc7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc7c:	6979      	ldr	r1, [r7, #20]
 800fc7e:	69ba      	ldr	r2, [r7, #24]
 800fc80:	e841 2300 	strex	r3, r2, [r1]
 800fc84:	613b      	str	r3, [r7, #16]
   return(result);
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1e6      	bne.n	800fc5a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fc8c:	e007      	b.n	800fc9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	699a      	ldr	r2, [r3, #24]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f042 0208 	orr.w	r2, r2, #8
 800fc9c:	619a      	str	r2, [r3, #24]
}
 800fc9e:	bf00      	nop
 800fca0:	3798      	adds	r7, #152	; 0x98
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	effffffe 	.word	0xeffffffe
 800fcac:	0800f6f7 	.word	0x0800f6f7

0800fcb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b0a8      	sub	sp, #160	; 0xa0
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fce6:	2b22      	cmp	r3, #34	; 0x22
 800fce8:	f040 8151 	bne.w	800ff8e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fcf2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fcf6:	e0f8      	b.n	800feea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800fd0a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800fd0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800fd12:	4013      	ands	r3, r2
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd20:	1c9a      	adds	r2, r3, #2
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd46:	f003 0307 	and.w	r3, r3, #7
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d053      	beq.n	800fdf6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d011      	beq.n	800fd7e <UART_RxISR_16BIT_FIFOEN+0xce>
 800fd5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00b      	beq.n	800fd7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd74:	f043 0201 	orr.w	r2, r3, #1
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd82:	f003 0302 	and.w	r3, r3, #2
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d011      	beq.n	800fdae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fd8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd8e:	f003 0301 	and.w	r3, r3, #1
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00b      	beq.n	800fdae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2202      	movs	r2, #2
 800fd9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda4:	f043 0204 	orr.w	r2, r3, #4
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fdb2:	f003 0304 	and.w	r3, r3, #4
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d011      	beq.n	800fdde <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fdba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	2204      	movs	r2, #4
 800fdcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdd4:	f043 0202 	orr.w	r2, r3, #2
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d006      	beq.n	800fdf6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7fe fb7f 	bl	800e4ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d173      	bne.n	800feea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe0a:	e853 3f00 	ldrex	r3, [r3]
 800fe0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fe10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe26:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fe2c:	e841 2300 	strex	r3, r2, [r1]
 800fe30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fe32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1e4      	bne.n	800fe02 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	3308      	adds	r3, #8
 800fe3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe42:	e853 3f00 	ldrex	r3, [r3]
 800fe46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe4a:	4b57      	ldr	r3, [pc, #348]	; (800ffa8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800fe4c:	4013      	ands	r3, r2
 800fe4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	3308      	adds	r3, #8
 800fe58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe5c:	65ba      	str	r2, [r7, #88]	; 0x58
 800fe5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe64:	e841 2300 	strex	r3, r2, [r1]
 800fe68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d1e3      	bne.n	800fe38 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2220      	movs	r2, #32
 800fe74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d12e      	bne.n	800fee4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	e853 3f00 	ldrex	r3, [r3]
 800fe98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe9c:	f023 0310 	bic.w	r3, r3, #16
 800fea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	461a      	mov	r2, r3
 800fea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800feaa:	647b      	str	r3, [r7, #68]	; 0x44
 800feac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800feb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800feb2:	e841 2300 	strex	r3, r2, [r1]
 800feb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800feb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feba:	2b00      	cmp	r3, #0
 800febc:	d1e6      	bne.n	800fe8c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	69db      	ldr	r3, [r3, #28]
 800fec4:	f003 0310 	and.w	r3, r3, #16
 800fec8:	2b10      	cmp	r3, #16
 800feca:	d103      	bne.n	800fed4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2210      	movs	r2, #16
 800fed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f7fe fb0f 	bl	800e500 <HAL_UARTEx_RxEventCallback>
 800fee2:	e002      	b.n	800feea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7f0 ff57 	bl	8000d98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800feea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d006      	beq.n	800ff00 <UART_RxISR_16BIT_FIFOEN+0x250>
 800fef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fef6:	f003 0320 	and.w	r3, r3, #32
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f47f aefc 	bne.w	800fcf8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff06:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d045      	beq.n	800ff9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff18:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d23e      	bcs.n	800ff9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	3308      	adds	r3, #8
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	e853 3f00 	ldrex	r3, [r3]
 800ff2e:	623b      	str	r3, [r7, #32]
   return(result);
 800ff30:	6a3b      	ldr	r3, [r7, #32]
 800ff32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff36:	677b      	str	r3, [r7, #116]	; 0x74
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3308      	adds	r3, #8
 800ff3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ff40:	633a      	str	r2, [r7, #48]	; 0x30
 800ff42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff48:	e841 2300 	strex	r3, r2, [r1]
 800ff4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1e5      	bne.n	800ff20 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a15      	ldr	r2, [pc, #84]	; (800ffac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ff58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	e853 3f00 	ldrex	r3, [r3]
 800ff66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f043 0320 	orr.w	r3, r3, #32
 800ff6e:	673b      	str	r3, [r7, #112]	; 0x70
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	461a      	mov	r2, r3
 800ff76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff78:	61fb      	str	r3, [r7, #28]
 800ff7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7c:	69b9      	ldr	r1, [r7, #24]
 800ff7e:	69fa      	ldr	r2, [r7, #28]
 800ff80:	e841 2300 	strex	r3, r2, [r1]
 800ff84:	617b      	str	r3, [r7, #20]
   return(result);
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1e6      	bne.n	800ff5a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff8c:	e007      	b.n	800ff9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	699a      	ldr	r2, [r3, #24]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f042 0208 	orr.w	r2, r2, #8
 800ff9c:	619a      	str	r2, [r3, #24]
}
 800ff9e:	bf00      	nop
 800ffa0:	37a0      	adds	r7, #160	; 0xa0
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	effffffe 	.word	0xeffffffe
 800ffac:	0800f857 	.word	0x0800f857

0800ffb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d101      	bne.n	8010002 <HAL_UARTEx_DisableFifoMode+0x16>
 800fffe:	2302      	movs	r3, #2
 8010000:	e027      	b.n	8010052 <HAL_UARTEx_DisableFifoMode+0x66>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2201      	movs	r2, #1
 8010006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2224      	movs	r2, #36	; 0x24
 801000e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f022 0201 	bic.w	r2, r2, #1
 8010028:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010030:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2220      	movs	r2, #32
 8010044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr

0801005e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b084      	sub	sp, #16
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801006e:	2b01      	cmp	r3, #1
 8010070:	d101      	bne.n	8010076 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010072:	2302      	movs	r3, #2
 8010074:	e02d      	b.n	80100d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2224      	movs	r2, #36	; 0x24
 8010082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f022 0201 	bic.w	r2, r2, #1
 801009c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	430a      	orrs	r2, r1
 80100b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f850 	bl	8010158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2220      	movs	r2, #32
 80100c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100d0:	2300      	movs	r3, #0
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d101      	bne.n	80100f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80100ee:	2302      	movs	r3, #2
 80100f0:	e02d      	b.n	801014e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2201      	movs	r2, #1
 80100f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2224      	movs	r2, #36	; 0x24
 80100fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f022 0201 	bic.w	r2, r2, #1
 8010118:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	430a      	orrs	r2, r1
 801012c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 f812 	bl	8010158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	68fa      	ldr	r2, [r7, #12]
 801013a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2220      	movs	r2, #32
 8010140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2200      	movs	r2, #0
 8010148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
	...

08010158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010164:	2b00      	cmp	r3, #0
 8010166:	d108      	bne.n	801017a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2201      	movs	r2, #1
 801016c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2201      	movs	r2, #1
 8010174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010178:	e031      	b.n	80101de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801017a:	2310      	movs	r3, #16
 801017c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801017e:	2310      	movs	r3, #16
 8010180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	689b      	ldr	r3, [r3, #8]
 8010188:	0e5b      	lsrs	r3, r3, #25
 801018a:	b2db      	uxtb	r3, r3
 801018c:	f003 0307 	and.w	r3, r3, #7
 8010190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	0f5b      	lsrs	r3, r3, #29
 801019a:	b2db      	uxtb	r3, r3
 801019c:	f003 0307 	and.w	r3, r3, #7
 80101a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101a2:	7bbb      	ldrb	r3, [r7, #14]
 80101a4:	7b3a      	ldrb	r2, [r7, #12]
 80101a6:	4911      	ldr	r1, [pc, #68]	; (80101ec <UARTEx_SetNbDataToProcess+0x94>)
 80101a8:	5c8a      	ldrb	r2, [r1, r2]
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80101ae:	7b3a      	ldrb	r2, [r7, #12]
 80101b0:	490f      	ldr	r1, [pc, #60]	; (80101f0 <UARTEx_SetNbDataToProcess+0x98>)
 80101b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
 80101c2:	7b7a      	ldrb	r2, [r7, #13]
 80101c4:	4909      	ldr	r1, [pc, #36]	; (80101ec <UARTEx_SetNbDataToProcess+0x94>)
 80101c6:	5c8a      	ldrb	r2, [r1, r2]
 80101c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80101cc:	7b7a      	ldrb	r2, [r7, #13]
 80101ce:	4908      	ldr	r1, [pc, #32]	; (80101f0 <UARTEx_SetNbDataToProcess+0x98>)
 80101d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80101de:	bf00      	nop
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	08010508 	.word	0x08010508
 80101f0:	08010510 	.word	0x08010510

080101f4 <malloc>:
 80101f4:	4b02      	ldr	r3, [pc, #8]	; (8010200 <malloc+0xc>)
 80101f6:	4601      	mov	r1, r0
 80101f8:	6818      	ldr	r0, [r3, #0]
 80101fa:	f000 b82b 	b.w	8010254 <_malloc_r>
 80101fe:	bf00      	nop
 8010200:	2400008c 	.word	0x2400008c

08010204 <free>:
 8010204:	4b02      	ldr	r3, [pc, #8]	; (8010210 <free+0xc>)
 8010206:	4601      	mov	r1, r0
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	f000 b901 	b.w	8010410 <_free_r>
 801020e:	bf00      	nop
 8010210:	2400008c 	.word	0x2400008c

08010214 <sbrk_aligned>:
 8010214:	b570      	push	{r4, r5, r6, lr}
 8010216:	4e0e      	ldr	r6, [pc, #56]	; (8010250 <sbrk_aligned+0x3c>)
 8010218:	460c      	mov	r4, r1
 801021a:	6831      	ldr	r1, [r6, #0]
 801021c:	4605      	mov	r5, r0
 801021e:	b911      	cbnz	r1, 8010226 <sbrk_aligned+0x12>
 8010220:	f000 f8ac 	bl	801037c <_sbrk_r>
 8010224:	6030      	str	r0, [r6, #0]
 8010226:	4621      	mov	r1, r4
 8010228:	4628      	mov	r0, r5
 801022a:	f000 f8a7 	bl	801037c <_sbrk_r>
 801022e:	1c43      	adds	r3, r0, #1
 8010230:	d00a      	beq.n	8010248 <sbrk_aligned+0x34>
 8010232:	1cc4      	adds	r4, r0, #3
 8010234:	f024 0403 	bic.w	r4, r4, #3
 8010238:	42a0      	cmp	r0, r4
 801023a:	d007      	beq.n	801024c <sbrk_aligned+0x38>
 801023c:	1a21      	subs	r1, r4, r0
 801023e:	4628      	mov	r0, r5
 8010240:	f000 f89c 	bl	801037c <_sbrk_r>
 8010244:	3001      	adds	r0, #1
 8010246:	d101      	bne.n	801024c <sbrk_aligned+0x38>
 8010248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801024c:	4620      	mov	r0, r4
 801024e:	bd70      	pop	{r4, r5, r6, pc}
 8010250:	240005d0 	.word	0x240005d0

08010254 <_malloc_r>:
 8010254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010258:	1ccd      	adds	r5, r1, #3
 801025a:	f025 0503 	bic.w	r5, r5, #3
 801025e:	3508      	adds	r5, #8
 8010260:	2d0c      	cmp	r5, #12
 8010262:	bf38      	it	cc
 8010264:	250c      	movcc	r5, #12
 8010266:	2d00      	cmp	r5, #0
 8010268:	4607      	mov	r7, r0
 801026a:	db01      	blt.n	8010270 <_malloc_r+0x1c>
 801026c:	42a9      	cmp	r1, r5
 801026e:	d905      	bls.n	801027c <_malloc_r+0x28>
 8010270:	230c      	movs	r3, #12
 8010272:	603b      	str	r3, [r7, #0]
 8010274:	2600      	movs	r6, #0
 8010276:	4630      	mov	r0, r6
 8010278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801027c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010350 <_malloc_r+0xfc>
 8010280:	f000 f868 	bl	8010354 <__malloc_lock>
 8010284:	f8d8 3000 	ldr.w	r3, [r8]
 8010288:	461c      	mov	r4, r3
 801028a:	bb5c      	cbnz	r4, 80102e4 <_malloc_r+0x90>
 801028c:	4629      	mov	r1, r5
 801028e:	4638      	mov	r0, r7
 8010290:	f7ff ffc0 	bl	8010214 <sbrk_aligned>
 8010294:	1c43      	adds	r3, r0, #1
 8010296:	4604      	mov	r4, r0
 8010298:	d155      	bne.n	8010346 <_malloc_r+0xf2>
 801029a:	f8d8 4000 	ldr.w	r4, [r8]
 801029e:	4626      	mov	r6, r4
 80102a0:	2e00      	cmp	r6, #0
 80102a2:	d145      	bne.n	8010330 <_malloc_r+0xdc>
 80102a4:	2c00      	cmp	r4, #0
 80102a6:	d048      	beq.n	801033a <_malloc_r+0xe6>
 80102a8:	6823      	ldr	r3, [r4, #0]
 80102aa:	4631      	mov	r1, r6
 80102ac:	4638      	mov	r0, r7
 80102ae:	eb04 0903 	add.w	r9, r4, r3
 80102b2:	f000 f863 	bl	801037c <_sbrk_r>
 80102b6:	4581      	cmp	r9, r0
 80102b8:	d13f      	bne.n	801033a <_malloc_r+0xe6>
 80102ba:	6821      	ldr	r1, [r4, #0]
 80102bc:	1a6d      	subs	r5, r5, r1
 80102be:	4629      	mov	r1, r5
 80102c0:	4638      	mov	r0, r7
 80102c2:	f7ff ffa7 	bl	8010214 <sbrk_aligned>
 80102c6:	3001      	adds	r0, #1
 80102c8:	d037      	beq.n	801033a <_malloc_r+0xe6>
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	442b      	add	r3, r5
 80102ce:	6023      	str	r3, [r4, #0]
 80102d0:	f8d8 3000 	ldr.w	r3, [r8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d038      	beq.n	801034a <_malloc_r+0xf6>
 80102d8:	685a      	ldr	r2, [r3, #4]
 80102da:	42a2      	cmp	r2, r4
 80102dc:	d12b      	bne.n	8010336 <_malloc_r+0xe2>
 80102de:	2200      	movs	r2, #0
 80102e0:	605a      	str	r2, [r3, #4]
 80102e2:	e00f      	b.n	8010304 <_malloc_r+0xb0>
 80102e4:	6822      	ldr	r2, [r4, #0]
 80102e6:	1b52      	subs	r2, r2, r5
 80102e8:	d41f      	bmi.n	801032a <_malloc_r+0xd6>
 80102ea:	2a0b      	cmp	r2, #11
 80102ec:	d917      	bls.n	801031e <_malloc_r+0xca>
 80102ee:	1961      	adds	r1, r4, r5
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	6025      	str	r5, [r4, #0]
 80102f4:	bf18      	it	ne
 80102f6:	6059      	strne	r1, [r3, #4]
 80102f8:	6863      	ldr	r3, [r4, #4]
 80102fa:	bf08      	it	eq
 80102fc:	f8c8 1000 	streq.w	r1, [r8]
 8010300:	5162      	str	r2, [r4, r5]
 8010302:	604b      	str	r3, [r1, #4]
 8010304:	4638      	mov	r0, r7
 8010306:	f104 060b 	add.w	r6, r4, #11
 801030a:	f000 f829 	bl	8010360 <__malloc_unlock>
 801030e:	f026 0607 	bic.w	r6, r6, #7
 8010312:	1d23      	adds	r3, r4, #4
 8010314:	1af2      	subs	r2, r6, r3
 8010316:	d0ae      	beq.n	8010276 <_malloc_r+0x22>
 8010318:	1b9b      	subs	r3, r3, r6
 801031a:	50a3      	str	r3, [r4, r2]
 801031c:	e7ab      	b.n	8010276 <_malloc_r+0x22>
 801031e:	42a3      	cmp	r3, r4
 8010320:	6862      	ldr	r2, [r4, #4]
 8010322:	d1dd      	bne.n	80102e0 <_malloc_r+0x8c>
 8010324:	f8c8 2000 	str.w	r2, [r8]
 8010328:	e7ec      	b.n	8010304 <_malloc_r+0xb0>
 801032a:	4623      	mov	r3, r4
 801032c:	6864      	ldr	r4, [r4, #4]
 801032e:	e7ac      	b.n	801028a <_malloc_r+0x36>
 8010330:	4634      	mov	r4, r6
 8010332:	6876      	ldr	r6, [r6, #4]
 8010334:	e7b4      	b.n	80102a0 <_malloc_r+0x4c>
 8010336:	4613      	mov	r3, r2
 8010338:	e7cc      	b.n	80102d4 <_malloc_r+0x80>
 801033a:	230c      	movs	r3, #12
 801033c:	603b      	str	r3, [r7, #0]
 801033e:	4638      	mov	r0, r7
 8010340:	f000 f80e 	bl	8010360 <__malloc_unlock>
 8010344:	e797      	b.n	8010276 <_malloc_r+0x22>
 8010346:	6025      	str	r5, [r4, #0]
 8010348:	e7dc      	b.n	8010304 <_malloc_r+0xb0>
 801034a:	605b      	str	r3, [r3, #4]
 801034c:	deff      	udf	#255	; 0xff
 801034e:	bf00      	nop
 8010350:	240005cc 	.word	0x240005cc

08010354 <__malloc_lock>:
 8010354:	4801      	ldr	r0, [pc, #4]	; (801035c <__malloc_lock+0x8>)
 8010356:	f000 b84b 	b.w	80103f0 <__retarget_lock_acquire_recursive>
 801035a:	bf00      	nop
 801035c:	2400070c 	.word	0x2400070c

08010360 <__malloc_unlock>:
 8010360:	4801      	ldr	r0, [pc, #4]	; (8010368 <__malloc_unlock+0x8>)
 8010362:	f000 b846 	b.w	80103f2 <__retarget_lock_release_recursive>
 8010366:	bf00      	nop
 8010368:	2400070c 	.word	0x2400070c

0801036c <memset>:
 801036c:	4402      	add	r2, r0
 801036e:	4603      	mov	r3, r0
 8010370:	4293      	cmp	r3, r2
 8010372:	d100      	bne.n	8010376 <memset+0xa>
 8010374:	4770      	bx	lr
 8010376:	f803 1b01 	strb.w	r1, [r3], #1
 801037a:	e7f9      	b.n	8010370 <memset+0x4>

0801037c <_sbrk_r>:
 801037c:	b538      	push	{r3, r4, r5, lr}
 801037e:	4d06      	ldr	r5, [pc, #24]	; (8010398 <_sbrk_r+0x1c>)
 8010380:	2300      	movs	r3, #0
 8010382:	4604      	mov	r4, r0
 8010384:	4608      	mov	r0, r1
 8010386:	602b      	str	r3, [r5, #0]
 8010388:	f7f2 f964 	bl	8002654 <_sbrk>
 801038c:	1c43      	adds	r3, r0, #1
 801038e:	d102      	bne.n	8010396 <_sbrk_r+0x1a>
 8010390:	682b      	ldr	r3, [r5, #0]
 8010392:	b103      	cbz	r3, 8010396 <_sbrk_r+0x1a>
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	24000710 	.word	0x24000710

0801039c <__errno>:
 801039c:	4b01      	ldr	r3, [pc, #4]	; (80103a4 <__errno+0x8>)
 801039e:	6818      	ldr	r0, [r3, #0]
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	2400008c 	.word	0x2400008c

080103a8 <__libc_init_array>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	4d0d      	ldr	r5, [pc, #52]	; (80103e0 <__libc_init_array+0x38>)
 80103ac:	4c0d      	ldr	r4, [pc, #52]	; (80103e4 <__libc_init_array+0x3c>)
 80103ae:	1b64      	subs	r4, r4, r5
 80103b0:	10a4      	asrs	r4, r4, #2
 80103b2:	2600      	movs	r6, #0
 80103b4:	42a6      	cmp	r6, r4
 80103b6:	d109      	bne.n	80103cc <__libc_init_array+0x24>
 80103b8:	4d0b      	ldr	r5, [pc, #44]	; (80103e8 <__libc_init_array+0x40>)
 80103ba:	4c0c      	ldr	r4, [pc, #48]	; (80103ec <__libc_init_array+0x44>)
 80103bc:	f000 f874 	bl	80104a8 <_init>
 80103c0:	1b64      	subs	r4, r4, r5
 80103c2:	10a4      	asrs	r4, r4, #2
 80103c4:	2600      	movs	r6, #0
 80103c6:	42a6      	cmp	r6, r4
 80103c8:	d105      	bne.n	80103d6 <__libc_init_array+0x2e>
 80103ca:	bd70      	pop	{r4, r5, r6, pc}
 80103cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80103d0:	4798      	blx	r3
 80103d2:	3601      	adds	r6, #1
 80103d4:	e7ee      	b.n	80103b4 <__libc_init_array+0xc>
 80103d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80103da:	4798      	blx	r3
 80103dc:	3601      	adds	r6, #1
 80103de:	e7f2      	b.n	80103c6 <__libc_init_array+0x1e>
 80103e0:	08010520 	.word	0x08010520
 80103e4:	08010520 	.word	0x08010520
 80103e8:	08010520 	.word	0x08010520
 80103ec:	08010524 	.word	0x08010524

080103f0 <__retarget_lock_acquire_recursive>:
 80103f0:	4770      	bx	lr

080103f2 <__retarget_lock_release_recursive>:
 80103f2:	4770      	bx	lr

080103f4 <memcpy>:
 80103f4:	440a      	add	r2, r1
 80103f6:	4291      	cmp	r1, r2
 80103f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80103fc:	d100      	bne.n	8010400 <memcpy+0xc>
 80103fe:	4770      	bx	lr
 8010400:	b510      	push	{r4, lr}
 8010402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010406:	f803 4f01 	strb.w	r4, [r3, #1]!
 801040a:	4291      	cmp	r1, r2
 801040c:	d1f9      	bne.n	8010402 <memcpy+0xe>
 801040e:	bd10      	pop	{r4, pc}

08010410 <_free_r>:
 8010410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010412:	2900      	cmp	r1, #0
 8010414:	d044      	beq.n	80104a0 <_free_r+0x90>
 8010416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801041a:	9001      	str	r0, [sp, #4]
 801041c:	2b00      	cmp	r3, #0
 801041e:	f1a1 0404 	sub.w	r4, r1, #4
 8010422:	bfb8      	it	lt
 8010424:	18e4      	addlt	r4, r4, r3
 8010426:	f7ff ff95 	bl	8010354 <__malloc_lock>
 801042a:	4a1e      	ldr	r2, [pc, #120]	; (80104a4 <_free_r+0x94>)
 801042c:	9801      	ldr	r0, [sp, #4]
 801042e:	6813      	ldr	r3, [r2, #0]
 8010430:	b933      	cbnz	r3, 8010440 <_free_r+0x30>
 8010432:	6063      	str	r3, [r4, #4]
 8010434:	6014      	str	r4, [r2, #0]
 8010436:	b003      	add	sp, #12
 8010438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801043c:	f7ff bf90 	b.w	8010360 <__malloc_unlock>
 8010440:	42a3      	cmp	r3, r4
 8010442:	d908      	bls.n	8010456 <_free_r+0x46>
 8010444:	6825      	ldr	r5, [r4, #0]
 8010446:	1961      	adds	r1, r4, r5
 8010448:	428b      	cmp	r3, r1
 801044a:	bf01      	itttt	eq
 801044c:	6819      	ldreq	r1, [r3, #0]
 801044e:	685b      	ldreq	r3, [r3, #4]
 8010450:	1949      	addeq	r1, r1, r5
 8010452:	6021      	streq	r1, [r4, #0]
 8010454:	e7ed      	b.n	8010432 <_free_r+0x22>
 8010456:	461a      	mov	r2, r3
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	b10b      	cbz	r3, 8010460 <_free_r+0x50>
 801045c:	42a3      	cmp	r3, r4
 801045e:	d9fa      	bls.n	8010456 <_free_r+0x46>
 8010460:	6811      	ldr	r1, [r2, #0]
 8010462:	1855      	adds	r5, r2, r1
 8010464:	42a5      	cmp	r5, r4
 8010466:	d10b      	bne.n	8010480 <_free_r+0x70>
 8010468:	6824      	ldr	r4, [r4, #0]
 801046a:	4421      	add	r1, r4
 801046c:	1854      	adds	r4, r2, r1
 801046e:	42a3      	cmp	r3, r4
 8010470:	6011      	str	r1, [r2, #0]
 8010472:	d1e0      	bne.n	8010436 <_free_r+0x26>
 8010474:	681c      	ldr	r4, [r3, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	6053      	str	r3, [r2, #4]
 801047a:	440c      	add	r4, r1
 801047c:	6014      	str	r4, [r2, #0]
 801047e:	e7da      	b.n	8010436 <_free_r+0x26>
 8010480:	d902      	bls.n	8010488 <_free_r+0x78>
 8010482:	230c      	movs	r3, #12
 8010484:	6003      	str	r3, [r0, #0]
 8010486:	e7d6      	b.n	8010436 <_free_r+0x26>
 8010488:	6825      	ldr	r5, [r4, #0]
 801048a:	1961      	adds	r1, r4, r5
 801048c:	428b      	cmp	r3, r1
 801048e:	bf04      	itt	eq
 8010490:	6819      	ldreq	r1, [r3, #0]
 8010492:	685b      	ldreq	r3, [r3, #4]
 8010494:	6063      	str	r3, [r4, #4]
 8010496:	bf04      	itt	eq
 8010498:	1949      	addeq	r1, r1, r5
 801049a:	6021      	streq	r1, [r4, #0]
 801049c:	6054      	str	r4, [r2, #4]
 801049e:	e7ca      	b.n	8010436 <_free_r+0x26>
 80104a0:	b003      	add	sp, #12
 80104a2:	bd30      	pop	{r4, r5, pc}
 80104a4:	240005cc 	.word	0x240005cc

080104a8 <_init>:
 80104a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104aa:	bf00      	nop
 80104ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ae:	bc08      	pop	{r3}
 80104b0:	469e      	mov	lr, r3
 80104b2:	4770      	bx	lr

080104b4 <_fini>:
 80104b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b6:	bf00      	nop
 80104b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ba:	bc08      	pop	{r3}
 80104bc:	469e      	mov	lr, r3
 80104be:	4770      	bx	lr
