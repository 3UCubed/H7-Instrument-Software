
H7-LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fe78  0800fe78  0001fe78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fed0  0800fed0  0001fed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fedc  0800fedc  0001fedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  0800fee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000053c  240000c0  0800ff84  000200c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005fc  0800ff84  000205fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a2e  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036dd  00000000  00000000  00043b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  000471e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a38  00000000  00000000  00048d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b205  00000000  00000000  0004a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023fe6  00000000  00000000  0008596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180607  00000000  00000000  000a9953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00229f5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007938  00000000  00000000  00229fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe60 	.word	0x0800fe60

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	0800fe60 	.word	0x0800fe60

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 f94a 	bl	80078c0 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fa24 	bl	8007aa8 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	240002a8 	.word	0x240002a8
 80006a0:	0800fe78 	.word	0x0800fe78
 80006a4:	0800fe84 	.word	0x0800fe84

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fa9a 	bl	800fc18 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (step == 9)
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <do_auto_sweep+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d109      	bne.n	8000730 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <do_auto_sweep+0x84>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		  step--;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <do_auto_sweep+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <do_auto_sweep+0x80>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00c      	b.n	800074a <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <do_auto_sweep+0x80>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <do_auto_sweep+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
	    step++;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <do_auto_sweep+0x80>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <do_auto_sweep+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <do_auto_sweep+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <do_auto_sweep+0x50>
	  {
	    step++;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <do_auto_sweep+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <do_auto_sweep+0x80>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <do_auto_sweep+0x80>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <do_auto_sweep+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <do_auto_sweep+0x88>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <do_auto_sweep+0x8c>)
 800077e:	f003 fe9c 	bl	80044ba <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <do_auto_sweep+0x8c>)
 8000786:	f003 fe46 	bl	8004416 <HAL_DAC_Start>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	240005c8 	.word	0x240005c8
 8000794:	24000028 	.word	0x24000028
 8000798:	24000000 	.word	0x24000000
 800079c:	24000294 	.word	0x24000294

080007a0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 80007a0:	b084      	sub	sp, #16
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f107 0c18 	add.w	ip, r7, #24
 80007ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	f107 0018 	add.w	r0, r7, #24
 80007ba:	f00b f83d 	bl	800b838 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007d0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007d2:	2002      	movs	r0, #2
 80007d4:	f00f fa20 	bl	800fc18 <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	701a      	strb	r2, [r3, #0]
	return results;
 80007ea:	68bb      	ldr	r3, [r7, #8]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
	...

080007fc <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <set_erpa_sweep+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <set_erpa_sweep+0x2c>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <set_erpa_sweep+0x30>)
 8000812:	f003 fe52 	bl	80044ba <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <set_erpa_sweep+0x30>)
 800081a:	f003 fdfc 	bl	8004416 <HAL_DAC_Start>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240005c8 	.word	0x240005c8
 8000828:	24000000 	.word	0x24000000
 800082c:	24000294 	.word	0x24000294

08000830 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <erpa_adc+0x34>)
 8000838:	885b      	ldrh	r3, [r3, #2]
 800083a:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified doesn't need to change
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <erpa_adc+0x34>)
 800083e:	895b      	ldrh	r3, [r3, #10]
 8000840:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(2 * sizeof(uint16_t));
 8000842:	2004      	movs	r0, #4
 8000844:	f00f f9e8 	bl	800fc18 <malloc>
 8000848:	4603      	mov	r3, r0
 800084a:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	88fa      	ldrh	r2, [r7, #6]
 8000850:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	88ba      	ldrh	r2, [r7, #4]
 8000858:	801a      	strh	r2, [r3, #0]

	return results;
 800085a:	683b      	ldr	r3, [r7, #0]


}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	240005a0 	.word	0x240005a0

08000868 <hk_adc1>:

uint16_t* hk_adc1() {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];			// BUSVmon -- verified doesn't need to change
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <hk_adc1+0x98>)
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];				// BUSImon -- verified doesn't need to change
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <hk_adc1+0x98>)
 8000876:	8a1b      	ldrh	r3, [r3, #16]
 8000878:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified doesn't need to change
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <hk_adc1+0x98>)
 800087c:	899b      	ldrh	r3, [r3, #12]
 800087e:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <hk_adc1+0x98>)
 8000882:	8a5b      	ldrh	r3, [r3, #18]
 8000884:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];				// n200v -- verified doesn't need to change
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <hk_adc1+0x98>)
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <hk_adc1+0x98>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <hk_adc1+0x98>)
 8000894:	89db      	ldrh	r3, [r3, #14]
 8000896:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified doesn't need to change
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <hk_adc1+0x98>)
 800089a:	891b      	ldrh	r3, [r3, #8]
 800089c:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <hk_adc1+0x98>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 80008a4:	2012      	movs	r0, #18
 80008a6:	f00f f9b7 	bl	800fc18 <malloc>
 80008aa:	4603      	mov	r3, r0
 80008ac:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	8afa      	ldrh	r2, [r7, #22]
 80008b2:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	3302      	adds	r3, #2
 80008b8:	8aba      	ldrh	r2, [r7, #20]
 80008ba:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8a7a      	ldrh	r2, [r7, #18]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3306      	adds	r3, #6
 80008c8:	8a3a      	ldrh	r2, [r7, #16]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3308      	adds	r3, #8
 80008d0:	89fa      	ldrh	r2, [r7, #14]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	330a      	adds	r3, #10
 80008d8:	89ba      	ldrh	r2, [r7, #12]
 80008da:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	330c      	adds	r3, #12
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	330e      	adds	r3, #14
 80008e8:	893a      	ldrh	r2, [r7, #8]
 80008ea:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3310      	adds	r3, #16
 80008f0:	88fa      	ldrh	r2, [r7, #6]
 80008f2:	801a      	strh	r2, [r3, #0]

	return results;
 80008f4:	683b      	ldr	r3, [r7, #0]

}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	240005a0 	.word	0x240005a0

08000904 <hk_adc3>:

uint16_t* hk_adc3() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <hk_adc3+0x50>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <hk_adc3+0x50>)
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <hk_adc3+0x50>)
 8000918:	889b      	ldrh	r3, [r3, #4]
 800091a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <hk_adc3+0x50>)
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000922:	2008      	movs	r0, #8
 8000924:	f00f f978 	bl	800fc18 <malloc>
 8000928:	4603      	mov	r3, r0
 800092a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	89fa      	ldrh	r2, [r7, #14]
 8000930:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3302      	adds	r3, #2
 8000936:	89ba      	ldrh	r2, [r7, #12]
 8000938:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3304      	adds	r3, #4
 800093e:	897a      	ldrh	r2, [r7, #10]
 8000940:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3306      	adds	r3, #6
 8000946:	893a      	ldrh	r2, [r7, #8]
 8000948:	801a      	strh	r2, [r3, #0]

	return results;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	240005c0 	.word	0x240005c0

08000958 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 8000962:	23aa      	movs	r3, #170	; 0xaa
 8000964:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 8000966:	23aa      	movs	r3, #170	; 0xaa
 8000968:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <send_erpa_packet+0x90>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <send_erpa_packet+0x90>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  							// ENDmon MSB
 800097e:	2300      	movs	r3, #0
 8000980:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               						// ENDmon LSB
 8000982:	2300      	movs	r3, #0
 8000984:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);               		// SWP Monitored LSB
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3302      	adds	r3, #2
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);               		// TEMPURATURE 1 LSB
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3302      	adds	r3, #2
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009b2:	2300      	movs	r3, #0
 80009b4:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009b6:	2300      	movs	r3, #0
 80009b8:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009c6:	f107 0108 	add.w	r1, r7, #8
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	220e      	movs	r2, #14
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <send_erpa_packet+0x94>)
 80009d0:	f00c fde0 	bl	800d594 <HAL_UART_Transmit>
	erpa_seq++;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <send_erpa_packet+0x90>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <send_erpa_packet+0x90>)
 80009de:	801a      	strh	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	240005d8 	.word	0x240005d8
 80009ec:	2400049c 	.word	0x2400049c

080009f0 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 80009fc:	23cc      	movs	r3, #204	; 0xcc
 80009fe:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000a00:	23cc      	movs	r3, #204	; 0xcc
 8000a02:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <send_hk_packet+0x20c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000a10:	4b7a      	ldr	r3, [pc, #488]	; (8000bfc <send_hk_packet+0x20c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3302      	adds	r3, #2
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4a:	121b      	asrs	r3, r3, #8
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a62:	121b      	asrs	r3, r3, #8
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3304      	adds	r3, #4
 8000a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7c:	121b      	asrs	r3, r3, #8
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3304      	adds	r3, #4
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3306      	adds	r3, #6
 8000a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3304      	adds	r3, #4
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3306      	adds	r3, #6
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	330c      	adds	r3, #12
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	330c      	adds	r3, #12
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3306      	adds	r3, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	330e      	adds	r3, #14
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	330e      	adds	r3, #14
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3310      	adds	r3, #16
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3310      	adds	r3, #16
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	330a      	adds	r3, #10
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	330a      	adds	r3, #10
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bd8:	f107 0110 	add.w	r1, r7, #16
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	2226      	movs	r2, #38	; 0x26
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <send_hk_packet+0x210>)
 8000be2:	f00c fcd7 	bl	800d594 <HAL_UART_Transmit>
	hk_seq++;
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <send_hk_packet+0x20c>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <send_hk_packet+0x20c>)
 8000bf0:	801a      	strh	r2, [r3, #0]


}
 8000bf2:	bf00      	nop
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240005dc 	.word	0x240005dc
 8000c00:	2400049c 	.word	0x2400049c

08000c04 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000c0c:	23bb      	movs	r3, #187	; 0xbb
 8000c0e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000c10:	23bb      	movs	r3, #187	; 0xbb
 8000c12:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <send_pmt_packet+0x54>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <send_pmt_packet+0x54>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <send_pmt_packet+0x58>)
 8000c3e:	f00c fca9 	bl	800d594 <HAL_UART_Transmit>
	pmt_seq++;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <send_pmt_packet+0x54>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <send_pmt_packet+0x54>)
 8000c4c:	801a      	strh	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240005da 	.word	0x240005da
 8000c5c:	2400049c 	.word	0x2400049c

08000c60 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b0a9      	sub	sp, #164	; 0xa4
 8000c64:	af1e      	add	r7, sp, #120	; 0x78
 8000c66:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d16e      	bne.n	8000d4e <HAL_TIM_OC_DelayElapsedCallback+0xee>
  {
	  FACTOR_COUNTER++;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c78:	6013      	str	r3, [r2, #0]
	  SWP_FACTOR_COUNTER++;
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a49      	ldr	r2, [pc, #292]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000c82:	6013      	str	r3, [r2, #0]
	  int samp_check = SAMPLING_FACTOR;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
	  int fact_check = FACTOR_COUNTER;
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	61fb      	str	r3, [r7, #28]
	  if (FACTOR_COUNTER == SAMPLING_FACTOR) {
 8000c90:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b45      	ldr	r3, [pc, #276]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d17c      	bne.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
		  FACTOR_COUNTER = 0;
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		  if (ERPA_ON)
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d035      	beq.n	8000d16 <HAL_TIM_OC_DelayElapsedCallback+0xb6>
		  {

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000caa:	bf00      	nop
 8000cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000cb2:	f006 fd43 	bl	800773c <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f7      	bne.n	8000cac <HAL_TIM_OC_DelayElapsedCallback+0x4c>

			uint8_t* spi2_results = spi(hspi2);
 8000cbc:	4c3e      	ldr	r4, [pc, #248]	; (8000db8 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000cbe:	4668      	mov	r0, sp
 8000cc0:	f104 0310 	add.w	r3, r4, #16
 8000cc4:	2278      	movs	r2, #120	; 0x78
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f00e ffb6 	bl	800fc38 <memcpy>
 8000ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cd0:	f7ff fd66 	bl	80007a0 <spi>
 8000cd4:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000cd6:	f7ff fdab 	bl	8000830 <erpa_adc>
 8000cda:	6178      	str	r0, [r7, #20]

			if (SWP_FACTOR_COUNTER == (SAMPLING_FACTOR * 2)) {
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	005a      	lsls	r2, r3, #1
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10b      	bne.n	8000d02 <HAL_TIM_OC_DelayElapsedCallback+0xa2>
				if (auto_sweep)
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x98>
				{
					do_auto_sweep();
 8000cf2:	f7ff fd0d 	bl	8000710 <do_auto_sweep>
 8000cf6:	e001      	b.n	8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
				} else {
					set_erpa_sweep();
 8000cf8:	f7ff fd80 	bl	80007fc <set_erpa_sweep>
				}
				SWP_FACTOR_COUNTER = 0;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
			}


			send_erpa_packet(spi2_results, erpa_adc_results);
 8000d02:	6979      	ldr	r1, [r7, #20]
 8000d04:	69b8      	ldr	r0, [r7, #24]
 8000d06:	f7ff fe27 	bl	8000958 <send_erpa_packet>

			free(spi2_results);
 8000d0a:	69b8      	ldr	r0, [r7, #24]
 8000d0c:	f00e ff8c 	bl	800fc28 <free>
			free(erpa_adc_results);
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f00e ff89 	bl	800fc28 <free>
		  }
		  if (HK_ON)
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d03b      	beq.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
		  {
			  int16_t *i2c_values = i2c();
 8000d1e:	f7ff fcc3 	bl	80006a8 <i2c>
 8000d22:	6138      	str	r0, [r7, #16]
			  uint16_t* hk_adc1_results = hk_adc1();
 8000d24:	f7ff fda0 	bl	8000868 <hk_adc1>
 8000d28:	60f8      	str	r0, [r7, #12]
			  uint16_t* hk_adc3_results = hk_adc3();
 8000d2a:	f7ff fdeb 	bl	8000904 <hk_adc3>
 8000d2e:	60b8      	str	r0, [r7, #8]


			  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	68f9      	ldr	r1, [r7, #12]
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f7ff fe5b 	bl	80009f0 <send_hk_packet>


			  free(i2c_values);
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f00e ff74 	bl	800fc28 <free>
			  free(hk_adc1_results);
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f00e ff71 	bl	800fc28 <free>
			  free(hk_adc3_results);
 8000d46:	68b8      	ldr	r0, [r7, #8]
 8000d48:	f00e ff6e 	bl	800fc28 <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d4c:	e023      	b.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
  else if (htim == &htim1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d11f      	bne.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
      if (PMT_ON)
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d01b      	beq.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d5e:	bf00      	nop
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	4819      	ldr	r0, [pc, #100]	; (8000dcc <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000d66:	f006 fce9 	bl	800773c <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f7      	bne.n	8000d60 <HAL_TIM_OC_DelayElapsedCallback+0x100>
  		uint8_t* spi1_results = spi(hspi1);
 8000d70:	4c17      	ldr	r4, [pc, #92]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000d72:	4668      	mov	r0, sp
 8000d74:	f104 0310 	add.w	r3, r4, #16
 8000d78:	2278      	movs	r2, #120	; 0x78
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f00e ff5c 	bl	800fc38 <memcpy>
 8000d80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d84:	f7ff fd0c 	bl	80007a0 <spi>
 8000d88:	6278      	str	r0, [r7, #36]	; 0x24
  		send_pmt_packet(spi1_results);
 8000d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d8c:	f7ff ff3a 	bl	8000c04 <send_pmt_packet>
		free(spi1_results);
 8000d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d92:	f00e ff49 	bl	800fc28 <free>
}
 8000d96:	bf00      	nop
 8000d98:	372c      	adds	r7, #44	; 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000450 	.word	0x24000450
 8000da4:	240005d0 	.word	0x240005d0
 8000da8:	240005d4 	.word	0x240005d4
 8000dac:	2400002c 	.word	0x2400002c
 8000db0:	240005df 	.word	0x240005df
 8000db4:	58020400 	.word	0x58020400
 8000db8:	2400037c 	.word	0x2400037c
 8000dbc:	240005cc 	.word	0x240005cc
 8000dc0:	240005e0 	.word	0x240005e0
 8000dc4:	24000404 	.word	0x24000404
 8000dc8:	240005de 	.word	0x240005de
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	240002f4 	.word	0x240002f4

08000dd4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	49b6      	ldr	r1, [pc, #728]	; (80010b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8000de0:	48b6      	ldr	r0, [pc, #728]	; (80010bc <HAL_UART_RxCpltCallback+0x2e8>)
 8000de2:	f00c fc6d 	bl	800d6c0 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000de6:	4bb4      	ldr	r3, [pc, #720]	; (80010b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b25      	cmp	r3, #37	; 0x25
 8000df0:	f200 815d 	bhi.w	80010ae <HAL_UART_RxCpltCallback+0x2da>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <HAL_UART_RxCpltCallback+0x28>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000f51 	.word	0x08000f51
 8000e00:	08000f6d 	.word	0x08000f6d
 8000e04:	08000f89 	.word	0x08000f89
 8000e08:	08000fa9 	.word	0x08000fa9
 8000e0c:	08000fc9 	.word	0x08000fc9
 8000e10:	08000fe5 	.word	0x08000fe5
 8000e14:	08001005 	.word	0x08001005
 8000e18:	08001025 	.word	0x08001025
 8000e1c:	080010af 	.word	0x080010af
 8000e20:	080010af 	.word	0x080010af
 8000e24:	08000ea3 	.word	0x08000ea3
 8000e28:	08000e95 	.word	0x08000e95
 8000e2c:	08001041 	.word	0x08001041
 8000e30:	08001051 	.word	0x08001051
 8000e34:	08001071 	.word	0x08001071
 8000e38:	08001091 	.word	0x08001091
 8000e3c:	08001061 	.word	0x08001061
 8000e40:	08001081 	.word	0x08001081
 8000e44:	08001099 	.word	0x08001099
 8000e48:	08000f5f 	.word	0x08000f5f
 8000e4c:	08000f7b 	.word	0x08000f7b
 8000e50:	08000f99 	.word	0x08000f99
 8000e54:	08000fb9 	.word	0x08000fb9
 8000e58:	08000fd7 	.word	0x08000fd7
 8000e5c:	08000ff5 	.word	0x08000ff5
 8000e60:	08001015 	.word	0x08001015
 8000e64:	08001033 	.word	0x08001033
 8000e68:	08000eb1 	.word	0x08000eb1
 8000e6c:	08000ec9 	.word	0x08000ec9
 8000e70:	08000ee1 	.word	0x08000ee1
 8000e74:	080010af 	.word	0x080010af
 8000e78:	080010af 	.word	0x080010af
 8000e7c:	080010af 	.word	0x080010af
 8000e80:	080010af 	.word	0x080010af
 8000e84:	080010af 	.word	0x080010af
 8000e88:	080010af 	.word	0x080010af
 8000e8c:	08000f05 	.word	0x08000f05
 8000e90:	08000f27 	.word	0x08000f27
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e94:	4b8a      	ldr	r3, [pc, #552]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fc66 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000ea0:	e105      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ea2:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fc5f 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000eae:	e0fe      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000eb0:	4b84      	ldr	r3, [pc, #528]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	f200 80f3 	bhi.w	80010a0 <HAL_UART_RxCpltCallback+0x2cc>
	  {
		step++;
 8000eba:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000ec6:	e0eb      	b.n	80010a0 <HAL_UART_RxCpltCallback+0x2cc>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ec8:	4b7e      	ldr	r3, [pc, #504]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80e9 	beq.w	80010a4 <HAL_UART_RxCpltCallback+0x2d0>
    {
      step--;
 8000ed2:	4b7c      	ldr	r3, [pc, #496]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b7a      	ldr	r3, [pc, #488]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000edc:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ede:	e0e1      	b.n	80010a4 <HAL_UART_RxCpltCallback+0x2d0>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ee0:	4b79      	ldr	r3, [pc, #484]	; (80010c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d106      	bne.n	8000ef6 <HAL_UART_RxCpltCallback+0x122>
		auto_sweep = 1;
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
		step = 0;
 8000eee:	4b75      	ldr	r3, [pc, #468]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000ef4:	e0db      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
		auto_sweep = 0;
 8000ef6:	4b74      	ldr	r3, [pc, #464]	; (80010c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
		step = 0;
 8000efc:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
  	break;
 8000f02:	e0d4      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
   }
  case 0x24:
  {
	  if (SAMPLING_FACTOR < 32)
 8000f04:	4b71      	ldr	r3, [pc, #452]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b1f      	cmp	r3, #31
 8000f0a:	f300 80cd 	bgt.w	80010a8 <HAL_UART_RxCpltCallback+0x2d4>
	  {
		  SAMPLING_FACTOR *= 2;
 8000f0e:	4b6f      	ldr	r3, [pc, #444]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f16:	6013      	str	r3, [r2, #0]
		  FACTOR_COUNTER = 0;
 8000f18:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f1e:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_UART_RxCpltCallback+0x300>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f24:	e0c0      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2d4>
  }
  case 0x25:
  {
	  if (SAMPLING_FACTOR > 1)
 8000f26:	4b69      	ldr	r3, [pc, #420]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f340 80be 	ble.w	80010ac <HAL_UART_RxCpltCallback+0x2d8>
	  {
		  SAMPLING_FACTOR /= 2;
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da00      	bge.n	8000f3a <HAL_UART_RxCpltCallback+0x166>
 8000f38:	3301      	adds	r3, #1
 8000f3a:	105b      	asrs	r3, r3, #1
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f40:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f48:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_UART_RxCpltCallback+0x300>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f4e:	e0ad      	b.n	80010ac <HAL_UART_RxCpltCallback+0x2d8>
  }
  case 0x00:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f50:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f52:	2120      	movs	r1, #32
 8000f54:	2201      	movs	r2, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fc08 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000f5c:	e0a7      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f5e:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f60:	2120      	movs	r1, #32
 8000f62:	2200      	movs	r2, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f006 fc01 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000f6a:	e0a0      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x01:
  {

    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	2201      	movs	r2, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fbfa 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000f78:	e099      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f006 fbf3 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000f86:	e092      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f006 fbeb 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000f96:	e08a      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fbe3 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000fa6:	e082      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fbdb 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000fb6:	e07a      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000fb8:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 fbd3 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000fc6:	e072      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fbcc 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000fd4:	e06b      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fd6:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f006 fbc5 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000fe2:	e064      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	2201      	movs	r2, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 fbbd 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8000ff2:	e05c      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fbb5 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8001002:	e054      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	2201      	movs	r2, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fbad 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8001012:	e04c      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101a:	2200      	movs	r2, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f006 fba5 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8001022:	e044      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	2201      	movs	r2, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fb9e 	bl	800776c <HAL_GPIO_WritePin>
    break;
 8001030:	e03d      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	2200      	movs	r2, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fb97 	bl	800776c <HAL_GPIO_WritePin>
    break;
 800103e:	e036      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001040:	f001 fc8a 	bl	8002958 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001044:	2101      	movs	r1, #1
 8001046:	2001      	movs	r0, #1
 8001048:	f007 f934 	bl	80082b4 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 800104c:	f7ff fac6 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_UART_RxCpltCallback+0x308>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	4821      	ldr	r0, [pc, #132]	; (80010e0 <HAL_UART_RxCpltCallback+0x30c>)
 800105a:	f00b f89b 	bl	800c194 <HAL_TIM_OC_Start_IT>
    break;
 800105e:	e026      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_UART_RxCpltCallback+0x308>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001066:	2100      	movs	r1, #0
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <HAL_UART_RxCpltCallback+0x30c>)
 800106a:	f00b f9ed 	bl	800c448 <HAL_TIM_OC_Stop_IT>

    break;
 800106e:	e01e      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_UART_RxCpltCallback+0x310>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001076:	210c      	movs	r1, #12
 8001078:	481b      	ldr	r0, [pc, #108]	; (80010e8 <HAL_UART_RxCpltCallback+0x314>)
 800107a:	f00b f88b 	bl	800c194 <HAL_TIM_OC_Start_IT>
    break;
 800107e:	e016      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_RxCpltCallback+0x310>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001086:	210c      	movs	r1, #12
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_UART_RxCpltCallback+0x314>)
 800108a:	f00b f9dd 	bl	800c448 <HAL_TIM_OC_Stop_IT>

    break;
 800108e:	e00e      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_UART_RxCpltCallback+0x318>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
    break;
 8001096:	e00a      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_UART_RxCpltCallback+0x318>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    break;
 800109e:	e006      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a0:	bf00      	nop
 80010a2:	e004      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
    break;
 80010a4:	bf00      	nop
 80010a6:	e002      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010ac:	bf00      	nop
  }
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2400052c 	.word	0x2400052c
 80010bc:	2400049c 	.word	0x2400049c
 80010c0:	58020400 	.word	0x58020400
 80010c4:	240005c8 	.word	0x240005c8
 80010c8:	240005cc 	.word	0x240005cc
 80010cc:	2400002c 	.word	0x2400002c
 80010d0:	240005d0 	.word	0x240005d0
 80010d4:	240005d4 	.word	0x240005d4
 80010d8:	58020800 	.word	0x58020800
 80010dc:	240005de 	.word	0x240005de
 80010e0:	24000404 	.word	0x24000404
 80010e4:	240005df 	.word	0x240005df
 80010e8:	24000450 	.word	0x24000450
 80010ec:	240005e0 	.word	0x240005e0

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 fb7a 	bl	80027ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f87e 	bl	80011f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010fc:	f000 f902 	bl	8001304 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001100:	f000 fd66 	bl	8001bd0 <MX_GPIO_Init>
   MX_DAC1_Init();
 8001104:	f000 fae4 	bl	80016d0 <MX_DAC1_Init>
   MX_TIM1_Init();
 8001108:	f000 fc04 	bl	8001914 <MX_TIM1_Init>
   MX_TIM2_Init();
 800110c:	f000 fc92 	bl	8001a34 <MX_TIM2_Init>
   MX_I2C1_Init();
 8001110:	f000 fb10 	bl	8001734 <MX_I2C1_Init>
   MX_SPI1_Init();
 8001114:	f000 fb4e 	bl	80017b4 <MX_SPI1_Init>
   MX_DMA_Init();
 8001118:	f000 fd32 	bl	8001b80 <MX_DMA_Init>
   MX_ADC1_Init();
 800111c:	f000 f920 	bl	8001360 <MX_ADC1_Init>
   MX_USART1_UART_Init();
 8001120:	f000 fce2 	bl	8001ae8 <MX_USART1_UART_Init>
   MX_ADC3_Init();
 8001124:	f000 fa3e 	bl	80015a4 <MX_ADC3_Init>
   MX_SPI2_Init();
 8001128:	f000 fb9c 	bl	8001864 <MX_SPI2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 fd50 	bl	8001bd0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001130:	f000 fcda 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001134:	f000 f914 	bl	8001360 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001138:	f000 fa34 	bl	80015a4 <MX_ADC3_Init>
  MX_DAC1_Init();
 800113c:	f000 fac8 	bl	80016d0 <MX_DAC1_Init>
  MX_I2C1_Init();
 8001140:	f000 faf8 	bl	8001734 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001144:	f000 fb36 	bl	80017b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001148:	f000 fb8c 	bl	8001864 <MX_SPI2_Init>
  MX_TIM1_Init();
 800114c:	f000 fbe2 	bl	8001914 <MX_TIM1_Init>
  MX_DMA_Init();
 8001150:	f000 fd16 	bl	8001b80 <MX_DMA_Init>
  MX_TIM2_Init();
 8001154:	f000 fc6e 	bl	8001a34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001158:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800115c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001160:	481f      	ldr	r0, [pc, #124]	; (80011e0 <main+0xf0>)
 8001162:	f002 fee5 	bl	8003f30 <HAL_ADCEx_Calibration_Start>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <main+0x80>
  {
    /* Calibration Error */
    Error_Handler();
 800116c:	f000 fe16 	bl	8001d9c <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 8001170:	220b      	movs	r2, #11
 8001172:	491c      	ldr	r1, [pc, #112]	; (80011e4 <main+0xf4>)
 8001174:	481a      	ldr	r0, [pc, #104]	; (80011e0 <main+0xf0>)
 8001176:	f001 ffd1 	bl	800311c <HAL_ADC_Start_DMA>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <main+0x94>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 8001180:	f000 fe0c 	bl	8001d9c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001184:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800118c:	4816      	ldr	r0, [pc, #88]	; (80011e8 <main+0xf8>)
 800118e:	f002 fecf 	bl	8003f30 <HAL_ADCEx_Calibration_Start>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <main+0xac>
  {
	/* Calibration Error */
	Error_Handler();
 8001198:	f000 fe00 	bl	8001d9c <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 800119c:	2204      	movs	r2, #4
 800119e:	4913      	ldr	r1, [pc, #76]	; (80011ec <main+0xfc>)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <main+0xf8>)
 80011a2:	f001 ffbb 	bl	800311c <HAL_ADC_Start_DMA>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <main+0xc0>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 80011ac:	f000 fdf6 	bl	8001d9c <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80011b0:	bf00      	nop
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <main+0x100>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d0f7      	beq.n	80011b2 <main+0xc2>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80011c2:	bf00      	nop
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <main+0x100>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d2:	d1f7      	bne.n	80011c4 <main+0xd4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	4907      	ldr	r1, [pc, #28]	; (80011f4 <main+0x104>)
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <main+0x100>)
 80011da:	f00c fa71 	bl	800d6c0 <HAL_UART_Receive_IT>
 80011de:	e7f9      	b.n	80011d4 <main+0xe4>
 80011e0:	240000dc 	.word	0x240000dc
 80011e4:	240005a0 	.word	0x240005a0
 80011e8:	24000140 	.word	0x24000140
 80011ec:	240005c0 	.word	0x240005c0
 80011f0:	2400049c 	.word	0x2400049c
 80011f4:	2400052c 	.word	0x2400052c

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b09c      	sub	sp, #112	; 0x70
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	224c      	movs	r2, #76	; 0x4c
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00e fd24 	bl	800fc54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2220      	movs	r2, #32
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f00e fd1e 	bl	800fc54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001218:	2002      	movs	r0, #2
 800121a:	f007 f887 	bl	800832c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <SystemClock_Config+0x100>)
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <SystemClock_Config+0x100>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <SystemClock_Config+0x100>)
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <SystemClock_Config+0x104>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <SystemClock_Config+0x104>)
 8001242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <SystemClock_Config+0x104>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001254:	bf00      	nop
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SystemClock_Config+0x104>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800125e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001262:	d1f8      	bne.n	8001256 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <SystemClock_Config+0x108>)
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	4a25      	ldr	r2, [pc, #148]	; (8001300 <SystemClock_Config+0x108>)
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001270:	2302      	movs	r3, #2
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001274:	2301      	movs	r3, #1
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001278:	2340      	movs	r3, #64	; 0x40
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001280:	2300      	movs	r3, #0
 8001282:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001284:	2304      	movs	r3, #4
 8001286:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001288:	230c      	movs	r3, #12
 800128a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001290:	2302      	movs	r3, #2
 8001292:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001298:	230c      	movs	r3, #12
 800129a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800129c:	2300      	movs	r3, #0
 800129e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f007 f879 	bl	80083a0 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b4:	f000 fd72 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	233f      	movs	r3, #63	; 0x3f
 80012ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2303      	movs	r3, #3
 80012be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fc8c 	bl	8008bfc <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80012ea:	f000 fd57 	bl	8001d9c <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3770      	adds	r7, #112	; 0x70
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	58000400 	.word	0x58000400
 80012fc:	58024800 	.word	0x58024800
 8001300:	58024400 	.word	0x58024400

08001304 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0b0      	sub	sp, #192	; 0xc0
 8001308:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	22bc      	movs	r2, #188	; 0xbc
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00e fc9f 	bl	800fc54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001316:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800131a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001320:	2309      	movs	r3, #9
 8001322:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001324:	2304      	movs	r3, #4
 8001326:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001330:	23c0      	movs	r3, #192	; 0xc0
 8001332:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001334:	2320      	movs	r3, #32
 8001336:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001338:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4618      	mov	r0, r3
 8001348:	f007 ffe4 	bl	8009314 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001352:	f000 fd23 	bl	8001d9c <Error_Handler>
  }
}
 8001356:	bf00      	nop
 8001358:	37c0      	adds	r7, #192	; 0xc0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001384:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <MX_ADC1_Init+0x210>)
 8001386:	4a7b      	ldr	r2, [pc, #492]	; (8001574 <MX_ADC1_Init+0x214>)
 8001388:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <MX_ADC1_Init+0x210>)
 800138c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001390:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001392:	4b77      	ldr	r3, [pc, #476]	; (8001570 <MX_ADC1_Init+0x210>)
 8001394:	2208      	movs	r2, #8
 8001396:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001398:	4b75      	ldr	r3, [pc, #468]	; (8001570 <MX_ADC1_Init+0x210>)
 800139a:	2201      	movs	r2, #1
 800139c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <MX_ADC1_Init+0x210>)
 80013a0:	2204      	movs	r2, #4
 80013a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013a4:	4b72      	ldr	r3, [pc, #456]	; (8001570 <MX_ADC1_Init+0x210>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013aa:	4b71      	ldr	r3, [pc, #452]	; (8001570 <MX_ADC1_Init+0x210>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80013b0:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <MX_ADC1_Init+0x210>)
 80013b2:	220b      	movs	r2, #11
 80013b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <MX_ADC1_Init+0x210>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <MX_ADC1_Init+0x210>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <MX_ADC1_Init+0x210>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <MX_ADC1_Init+0x210>)
 80013ca:	2203      	movs	r2, #3
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <MX_ADC1_Init+0x210>)
 80013d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013d6:	4b66      	ldr	r3, [pc, #408]	; (8001570 <MX_ADC1_Init+0x210>)
 80013d8:	2200      	movs	r2, #0
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <MX_ADC1_Init+0x210>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e4:	4862      	ldr	r0, [pc, #392]	; (8001570 <MX_ADC1_Init+0x210>)
 80013e6:	f001 fcf7 	bl	8002dd8 <HAL_ADC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013f0:	f000 fcd4 	bl	8001d9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	485c      	ldr	r0, [pc, #368]	; (8001570 <MX_ADC1_Init+0x210>)
 8001400:	f002 fdfa 	bl	8003ff8 <HAL_ADCEx_MultiModeConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800140a:	f000 fcc7 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800140e:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <MX_ADC1_Init+0x218>)
 8001410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001412:	2306      	movs	r3, #6
 8001414:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001416:	2307      	movs	r3, #7
 8001418:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800141a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800141e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001420:	2304      	movs	r3, #4
 8001422:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	484f      	ldr	r0, [pc, #316]	; (8001570 <MX_ADC1_Init+0x210>)
 8001432:	f001 ff4b 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800143c:	f000 fcae 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001440:	4b4e      	ldr	r3, [pc, #312]	; (800157c <MX_ADC1_Init+0x21c>)
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001444:	230c      	movs	r3, #12
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4848      	ldr	r0, [pc, #288]	; (8001570 <MX_ADC1_Init+0x210>)
 800144e:	f001 ff3d 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001458:	f000 fca0 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <MX_ADC1_Init+0x220>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001460:	2312      	movs	r3, #18
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4841      	ldr	r0, [pc, #260]	; (8001570 <MX_ADC1_Init+0x210>)
 800146a:	f001 ff2f 	bl	80032cc <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001474:	f000 fc92 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001478:	4b42      	ldr	r3, [pc, #264]	; (8001584 <MX_ADC1_Init+0x224>)
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800147c:	2318      	movs	r3, #24
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	483a      	ldr	r0, [pc, #232]	; (8001570 <MX_ADC1_Init+0x210>)
 8001486:	f001 ff21 	bl	80032cc <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001490:	f000 fc84 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001494:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <MX_ADC1_Init+0x228>)
 8001496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4833      	ldr	r0, [pc, #204]	; (8001570 <MX_ADC1_Init+0x210>)
 80014a4:	f001 ff12 	bl	80032cc <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80014ae:	f000 fc75 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <MX_ADC1_Init+0x22c>)
 80014b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80014b6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	482b      	ldr	r0, [pc, #172]	; (8001570 <MX_ADC1_Init+0x210>)
 80014c2:	f001 ff03 	bl	80032cc <HAL_ADC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80014cc:	f000 fc66 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <MX_ADC1_Init+0x230>)
 80014d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014d4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4824      	ldr	r0, [pc, #144]	; (8001570 <MX_ADC1_Init+0x210>)
 80014e0:	f001 fef4 	bl	80032cc <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80014ea:	f000 fc57 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <MX_ADC1_Init+0x234>)
 80014f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014f2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80014f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <MX_ADC1_Init+0x210>)
 80014fe:	f001 fee5 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001508:	f000 fc48 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <MX_ADC1_Init+0x238>)
 800150e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001510:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001514:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	4619      	mov	r1, r3
 800151a:	4815      	ldr	r0, [pc, #84]	; (8001570 <MX_ADC1_Init+0x210>)
 800151c:	f001 fed6 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001526:	f000 fc39 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_ADC1_Init+0x23c>)
 800152c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800152e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_ADC1_Init+0x210>)
 800153a:	f001 fec7 	bl	80032cc <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001544:	f000 fc2a 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_ADC1_Init+0x240>)
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800154c:	f240 2306 	movw	r3, #518	; 0x206
 8001550:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_ADC1_Init+0x210>)
 8001558:	f001 feb8 	bl	80032cc <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001562:	f000 fc1b 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	240000dc 	.word	0x240000dc
 8001574:	40022000 	.word	0x40022000
 8001578:	0c900008 	.word	0x0c900008
 800157c:	10c00010 	.word	0x10c00010
 8001580:	14f00020 	.word	0x14f00020
 8001584:	1d500080 	.word	0x1d500080
 8001588:	21800100 	.word	0x21800100
 800158c:	25b00200 	.word	0x25b00200
 8001590:	2a000400 	.word	0x2a000400
 8001594:	2e300800 	.word	0x2e300800
 8001598:	3ac04000 	.word	0x3ac04000
 800159c:	3ef08000 	.word	0x3ef08000
 80015a0:	47520000 	.word	0x47520000

080015a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <MX_ADC3_Init+0x118>)
 80015be:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <MX_ADC3_Init+0x11c>)
 80015c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <MX_ADC3_Init+0x118>)
 80015c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015c8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <MX_ADC3_Init+0x118>)
 80015cc:	2208      	movs	r2, #8
 80015ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015d0:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <MX_ADC3_Init+0x118>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <MX_ADC3_Init+0x118>)
 80015d8:	2204      	movs	r2, #4
 80015da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015dc:	4b37      	ldr	r3, [pc, #220]	; (80016bc <MX_ADC3_Init+0x118>)
 80015de:	2200      	movs	r2, #0
 80015e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015e2:	4b36      	ldr	r3, [pc, #216]	; (80016bc <MX_ADC3_Init+0x118>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <MX_ADC3_Init+0x118>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <MX_ADC3_Init+0x118>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <MX_ADC3_Init+0x118>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <MX_ADC3_Init+0x118>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001600:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <MX_ADC3_Init+0x118>)
 8001602:	2203      	movs	r2, #3
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <MX_ADC3_Init+0x118>)
 8001608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <MX_ADC3_Init+0x118>)
 8001610:	2200      	movs	r2, #0
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <MX_ADC3_Init+0x118>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800161c:	4827      	ldr	r0, [pc, #156]	; (80016bc <MX_ADC3_Init+0x118>)
 800161e:	f001 fbdb 	bl	8002dd8 <HAL_ADC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8001628:	f000 fbb8 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <MX_ADC3_Init+0x120>)
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001630:	2306      	movs	r3, #6
 8001632:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001634:	2307      	movs	r3, #7
 8001636:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001638:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800163c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800163e:	2304      	movs	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	481b      	ldr	r0, [pc, #108]	; (80016bc <MX_ADC3_Init+0x118>)
 8001650:	f001 fe3c 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800165a:	f000 fb9f 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_ADC3_Init+0x124>)
 8001660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001662:	230c      	movs	r3, #12
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <MX_ADC3_Init+0x118>)
 800166c:	f001 fe2e 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8001676:	f000 fb91 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800167a:	2301      	movs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800167e:	2312      	movs	r3, #18
 8001680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_ADC3_Init+0x118>)
 8001688:	f001 fe20 	bl	80032cc <HAL_ADC_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 8001692:	f000 fb83 	bl	8001d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_ADC3_Init+0x128>)
 8001698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800169a:	2318      	movs	r3, #24
 800169c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_ADC3_Init+0x118>)
 80016a4:	f001 fe12 	bl	80032cc <HAL_ADC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 80016ae:	f000 fb75 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24000140 	.word	0x24000140
 80016c0:	58026000 	.word	0x58026000
 80016c4:	cb840000 	.word	0xcb840000
 80016c8:	cfb80000 	.word	0xcfb80000
 80016cc:	04300002 	.word	0x04300002

080016d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2224      	movs	r2, #36	; 0x24
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f00e fab9 	bl	800fc54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_DAC1_Init+0x5c>)
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_DAC1_Init+0x60>)
 80016e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <MX_DAC1_Init+0x5c>)
 80016ea:	f002 fe72 	bl	80043d2 <HAL_DAC_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016f4:	f000 fb52 	bl	8001d9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_DAC1_Init+0x5c>)
 8001714:	f002 fef6 	bl	8004504 <HAL_DAC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800171e:	f000 fb3d 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24000294 	.word	0x24000294
 8001730:	40007400 	.word	0x40007400

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_I2C1_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <MX_I2C1_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <MX_I2C1_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_I2C1_Init+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176e:	480e      	ldr	r0, [pc, #56]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001770:	f006 f816 	bl	80077a0 <HAL_I2C_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800177a:	f000 fb0f 	bl	8001d9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177e:	2100      	movs	r1, #0
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001782:	f006 fcff 	bl	8008184 <HAL_I2CEx_ConfigAnalogFilter>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800178c:	f000 fb06 	bl	8001d9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001794:	f006 fd41 	bl	800821a <HAL_I2CEx_ConfigDigitalFilter>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800179e:	f000 fafd 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	240002a8 	.word	0x240002a8
 80017ac:	40005400 	.word	0x40005400
 80017b0:	00506682 	.word	0x00506682

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <MX_SPI1_Init+0xa8>)
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <MX_SPI1_Init+0xac>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <MX_SPI1_Init+0xa8>)
 80017c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <MX_SPI1_Init+0xa8>)
 80017c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_SPI1_Init+0xa8>)
 80017d0:	220f      	movs	r2, #15
 80017d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_SPI1_Init+0xa8>)
 80017e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_SPI1_Init+0xa8>)
 80017ea:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_SPI1_Init+0xa8>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_SPI1_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI1_Init+0xa8>)
 8001818:	2200      	movs	r2, #0
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_SPI1_Init+0xa8>)
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI1_Init+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI1_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_SPI1_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI1_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_SPI1_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI1_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_SPI1_Init+0xa8>)
 8001848:	f009 fef0 	bl	800b62c <HAL_SPI_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001852:	f000 faa3 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	240002f4 	.word	0x240002f4
 8001860:	40013000 	.word	0x40013000

08001864 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_SPI2_Init+0xa8>)
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <MX_SPI2_Init+0xac>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_SPI2_Init+0xa8>)
 8001870:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <MX_SPI2_Init+0xa8>)
 8001878:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800187c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_SPI2_Init+0xa8>)
 8001880:	220f      	movs	r2, #15
 8001882:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <MX_SPI2_Init+0xa8>)
 8001892:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001896:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_SPI2_Init+0xa8>)
 800189a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800189e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI2_Init+0xa8>)
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI2_Init+0xa8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI2_Init+0xa8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI2_Init+0xa8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI2_Init+0xa8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI2_Init+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_SPI2_Init+0xa8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI2_Init+0xa8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_SPI2_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI2_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_SPI2_Init+0xa8>)
 80018f8:	f009 fe98 	bl	800b62c <HAL_SPI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001902:	f000 fa4b 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2400037c 	.word	0x2400037c
 8001910:	40003800 	.word	0x40003800

08001914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b096      	sub	sp, #88	; 0x58
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	222c      	movs	r2, #44	; 0x2c
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f00e f987 	bl	800fc54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001948:	4a39      	ldr	r2, [pc, #228]	; (8001a30 <MX_TIM1_Init+0x11c>)
 800194a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800194c:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <MX_TIM1_Init+0x118>)
 800194e:	2263      	movs	r2, #99	; 0x63
 8001950:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <MX_TIM1_Init+0x118>)
 800195a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800195e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001966:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <MX_TIM1_Init+0x118>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001972:	482e      	ldr	r0, [pc, #184]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001974:	f00a fe4c 	bl	800c610 <HAL_TIM_PWM_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f000 fa0d 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800198e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001992:	4619      	mov	r1, r3
 8001994:	4825      	ldr	r0, [pc, #148]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001996:	f00b fc83 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019a0:	f000 f9fc 	bl	8001d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a4:	2360      	movs	r3, #96	; 0x60
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 - 1;
 80019a8:	f240 13df 	movw	r3, #479	; 0x1df
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MX_TIM1_Init+0x118>)
 80019cc:	f00a ff96 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019d6:	f000 f9e1 	bl	8001d9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001a10:	f00b fcd4 	bl	800d3bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a1a:	f000 f9bf 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a1e:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM1_Init+0x118>)
 8001a20:	f000 fcb0 	bl	8002384 <HAL_TIM_MspPostInit>

}
 8001a24:	bf00      	nop
 8001a26:	3758      	adds	r7, #88	; 0x58
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	24000404 	.word	0x24000404
 8001a30:	40010000 	.word	0x40010000

08001a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150 - 1;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a70:	2295      	movs	r2, #149	; 0x95
 8001a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a80:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001a82:	f00a fdc5 	bl	800c610 <HAL_TIM_PWM_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a8c:	f000 f986 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001aa0:	f00b fbfe 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001aaa:	f000 f977 	bl	8001d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aae:	2360      	movs	r3, #96	; 0x60
 8001ab0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30 - 1;
 8001ab2:	231d      	movs	r3, #29
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001ac6:	f00a ff19 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ad0:	f000 f964 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM2_Init+0xb0>)
 8001ad6:	f000 fc55 	bl	8002384 <HAL_TIM_MspPostInit>

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	24000450 	.word	0x24000450

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001af4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b30:	4811      	ldr	r0, [pc, #68]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b32:	f00b fcdf 	bl	800d4f4 <HAL_UART_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b3c:	f000 f92e 	bl	8001d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	480d      	ldr	r0, [pc, #52]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b44:	f00d ff73 	bl	800fa2e <HAL_UARTEx_SetTxFifoThreshold>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b4e:	f000 f925 	bl	8001d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b56:	f00d ffa8 	bl	800faaa <HAL_UARTEx_SetRxFifoThreshold>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b60:	f000 f91c 	bl	8001d9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_USART1_UART_Init+0x90>)
 8001b66:	f00d ff29 	bl	800f9bc <HAL_UARTEx_DisableFifoMode>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f000 f914 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2400049c 	.word	0x2400049c
 8001b7c:	40011000 	.word	0x40011000

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	200b      	movs	r0, #11
 8001baa:	f002 fbde 	bl	800436a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bae:	200b      	movs	r0, #11
 8001bb0:	f002 fbf5 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	200c      	movs	r0, #12
 8001bba:	f002 fbd6 	bl	800436a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bbe:	200c      	movs	r0, #12
 8001bc0:	f002 fbed 	bl	800439e <HAL_NVIC_EnableIRQ>

}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bec:	4a32      	ldr	r2, [pc, #200]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_GPIO_Init+0xe8>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c64:	4815      	ldr	r0, [pc, #84]	; (8001cbc <MX_GPIO_Init+0xec>)
 8001c66:	f005 fd81 	bl	800776c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2164      	movs	r1, #100	; 0x64
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <MX_GPIO_Init+0xf0>)
 8001c70:	f005 fd7c 	bl	800776c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c74:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <MX_GPIO_Init+0xec>)
 8001c8e:	f005 fba5 	bl	80073dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c92:	2364      	movs	r3, #100	; 0x64
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_GPIO_Init+0xf0>)
 8001caa:	f005 fb97 	bl	80073dc <HAL_GPIO_Init>

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	58020800 	.word	0x58020800
 8001cc0:	58020400 	.word	0x58020400

08001cc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d125      	bne.n	8001d20 <HAL_ADC_ConvCpltCallback+0x5c>
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	230b      	movs	r3, #11
 8001cda:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	dd48      	ble.n	8001d74 <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	4413      	add	r3, r2
 8001cec:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf2:	f3bf 8f4f 	dsb	sy
}
 8001cf6:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	3320      	adds	r3, #32
 8001d04:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b20      	subs	r3, #32
 8001d0a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dcf2      	bgt.n	8001cf8 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d12:	f3bf 8f4f 	dsb	sy
}
 8001d16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d18:	f3bf 8f6f 	isb	sy
}
 8001d1c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d1e:	e029      	b.n	8001d74 <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d128      	bne.n	8001d7a <HAL_ADC_ConvCpltCallback+0xb6>
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	dd20      	ble.n	8001d78 <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d46:	f3bf 8f4f 	dsb	sy
}
 8001d4a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d4c:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3320      	adds	r3, #32
 8001d58:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b20      	subs	r3, #32
 8001d5e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dcf2      	bgt.n	8001d4c <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d66:	f3bf 8f4f 	dsb	sy
}
 8001d6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d6c:	f3bf 8f6f 	isb	sy
}
 8001d70:	bf00      	nop
}
 8001d72:	e001      	b.n	8001d78 <HAL_ADC_ConvCpltCallback+0xb4>
 8001d74:	bf00      	nop
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_ConvCpltCallback+0xb6>
 8001d78:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001d7a:	bf00      	nop
 8001d7c:	372c      	adds	r7, #44	; 0x2c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	240000dc 	.word	0x240000dc
 8001d8c:	240005aa 	.word	0x240005aa
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	24000140 	.word	0x24000140
 8001d98:	240005c4 	.word	0x240005c4

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>
	...

08001da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_MspInit+0x30>)
 8001db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x30>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	58024400 	.word	0x58024400

08001ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7b      	ldr	r2, [pc, #492]	; (8001fe8 <HAL_ADC_MspInit+0x20c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 8091 	bne.w	8001f22 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e00:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e06:	4a79      	ldr	r2, [pc, #484]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e10:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e24:	4a71      	ldr	r2, [pc, #452]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2e:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b6b      	ldr	r3, [pc, #428]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	4a6a      	ldr	r2, [pc, #424]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4c:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	4a62      	ldr	r2, [pc, #392]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6a:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e78:	2333      	movs	r3, #51	; 0x33
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4859      	ldr	r0, [pc, #356]	; (8001ff0 <HAL_ADC_MspInit+0x214>)
 8001e8c:	f005 faa6 	bl	80073dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001e90:	23ce      	movs	r3, #206	; 0xce
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e94:	2303      	movs	r3, #3
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4854      	ldr	r0, [pc, #336]	; (8001ff4 <HAL_ADC_MspInit+0x218>)
 8001ea4:	f005 fa9a 	bl	80073dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eac:	2303      	movs	r3, #3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	484f      	ldr	r0, [pc, #316]	; (8001ff8 <HAL_ADC_MspInit+0x21c>)
 8001ebc:	f005 fa8e 	bl	80073dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ec0:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001ec2:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_ADC_MspInit+0x224>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001ec8:	2209      	movs	r2, #9
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee8:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f04:	483d      	ldr	r0, [pc, #244]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001f06:	f002 fc2d 	bl	8004764 <HAL_DMA_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001f10:	f7ff ff44 	bl	8001d9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a39      	ldr	r2, [pc, #228]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001f18:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f1a:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_ADC_MspInit+0x220>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f20:	e05e      	b.n	8001fe0 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a37      	ldr	r2, [pc, #220]	; (8002004 <HAL_ADC_MspInit+0x228>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d159      	bne.n	8001fe0 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f32:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_ADC_MspInit+0x210>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f68:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f70:	f000 fd0e 	bl	8002990 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f78:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f7c:	f000 fd08 	bl	8002990 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_ADC_MspInit+0x230>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001f88:	2273      	movs	r2, #115	; 0x73
 8001f8a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f9e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fae:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fc4:	4810      	ldr	r0, [pc, #64]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fc6:	f002 fbcd 	bl	8004764 <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001fd0:	f7ff fee4 	bl	8001d9c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <HAL_ADC_MspInit+0x22c>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fe0:	bf00      	nop
 8001fe2:	3738      	adds	r7, #56	; 0x38
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58020800 	.word	0x58020800
 8001ff4:	58020000 	.word	0x58020000
 8001ff8:	58020400 	.word	0x58020400
 8001ffc:	240001a4 	.word	0x240001a4
 8002000:	40020010 	.word	0x40020010
 8002004:	58026000 	.word	0x58026000
 8002008:	2400021c 	.word	0x2400021c
 800200c:	40020028 	.word	0x40020028

08002010 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_DAC_MspInit+0x80>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d129      	bne.n	8002086 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_DAC_MspInit+0x84>)
 8002034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_DAC_MspInit+0x84>)
 800203a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800203e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_DAC_MspInit+0x84>)
 8002044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_DAC_MspInit+0x84>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_DAC_MspInit+0x84>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_DAC_MspInit+0x84>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800206e:	2310      	movs	r3, #16
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002072:	2303      	movs	r3, #3
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_DAC_MspInit+0x88>)
 8002082:	f005 f9ab 	bl	80073dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40007400 	.word	0x40007400
 8002094:	58024400 	.word	0x58024400
 8002098:	58020000 	.word	0x58020000

0800209c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0b8      	sub	sp, #224	; 0xe0
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	22bc      	movs	r2, #188	; 0xbc
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f00d fdc9 	bl	800fc54 <memset>
  if(hi2c->Instance==I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_I2C_MspInit+0xc0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d142      	bne.n	8002152 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020cc:	2308      	movs	r3, #8
 80020ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4618      	mov	r0, r3
 80020dc:	f007 f91a 	bl	8009314 <HAL_RCCEx_PeriphCLKConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020e6:	f7ff fe59 	bl	8001d9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_I2C_MspInit+0xc4>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_I2C_MspInit+0xc4>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_I2C_MspInit+0xc4>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800210c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002110:	2312      	movs	r3, #18
 8002112:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002122:	2304      	movs	r3, #4
 8002124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <HAL_I2C_MspInit+0xc8>)
 8002130:	f005 f954 	bl	80073dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_I2C_MspInit+0xc4>)
 8002136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_I2C_MspInit+0xc4>)
 800213c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002140:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_I2C_MspInit+0xc4>)
 8002146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	37e0      	adds	r7, #224	; 0xe0
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40005400 	.word	0x40005400
 8002160:	58024400 	.word	0x58024400
 8002164:	58020400 	.word	0x58020400

08002168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0ba      	sub	sp, #232	; 0xe8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	22bc      	movs	r2, #188	; 0xbc
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f00d fd63 	bl	800fc54 <memset>
  if(hspi->Instance==SPI1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <HAL_SPI_MspInit+0x150>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d142      	bne.n	800221e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800219e:	2300      	movs	r3, #0
 80021a0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	4618      	mov	r0, r3
 80021a8:	f007 f8b4 	bl	8009314 <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021b2:	f7ff fdf3 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_SPI_MspInit+0x154>)
 80021b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021bc:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_SPI_MspInit+0x154>)
 80021be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_SPI_MspInit+0x154>)
 80021c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_SPI_MspInit+0x154>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	4a38      	ldr	r2, [pc, #224]	; (80022bc <HAL_SPI_MspInit+0x154>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_SPI_MspInit+0x154>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80021f2:	2318      	movs	r3, #24
 80021f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220a:	2305      	movs	r3, #5
 800220c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002214:	4619      	mov	r1, r3
 8002216:	482a      	ldr	r0, [pc, #168]	; (80022c0 <HAL_SPI_MspInit+0x158>)
 8002218:	f005 f8e0 	bl	80073dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800221c:	e047      	b.n	80022ae <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_SPI_MspInit+0x15c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d142      	bne.n	80022ae <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800222e:	2300      	movs	r3, #0
 8002230:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	4618      	mov	r0, r3
 8002238:	f007 f86c 	bl	8009314 <HAL_RCCEx_PeriphCLKConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002242:	f7ff fdab 	bl	8001d9c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_SPI_MspInit+0x154>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_SPI_MspInit+0x154>)
 800224e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002252:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_SPI_MspInit+0x154>)
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_SPI_MspInit+0x154>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_SPI_MspInit+0x154>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_SPI_MspInit+0x154>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002282:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800229c:	2305      	movs	r3, #5
 800229e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <HAL_SPI_MspInit+0x158>)
 80022aa:	f005 f897 	bl	80073dc <HAL_GPIO_Init>
}
 80022ae:	bf00      	nop
 80022b0:	37e8      	adds	r7, #232	; 0xe8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40013000 	.word	0x40013000
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58020400 	.word	0x58020400
 80022c4:	40003800 	.word	0x40003800

080022c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <HAL_TIM_PWM_MspInit+0xb4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12f      	bne.n	800233a <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_TIM_PWM_MspInit+0xb8>)
 80022dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <HAL_TIM_PWM_MspInit+0xb8>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_TIM_PWM_MspInit+0xb8>)
 80022ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	2018      	movs	r0, #24
 80022fe:	f002 f834 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002302:	2018      	movs	r0, #24
 8002304:	f002 f84b 	bl	800439e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2019      	movs	r0, #25
 800230e:	f002 f82c 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002312:	2019      	movs	r0, #25
 8002314:	f002 f843 	bl	800439e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	201a      	movs	r0, #26
 800231e:	f002 f824 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002322:	201a      	movs	r0, #26
 8002324:	f002 f83b 	bl	800439e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	201b      	movs	r0, #27
 800232e:	f002 f81c 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002332:	201b      	movs	r0, #27
 8002334:	f002 f833 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002338:	e01b      	b.n	8002372 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d116      	bne.n	8002372 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_TIM_PWM_MspInit+0xb8>)
 8002346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_TIM_PWM_MspInit+0xb8>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_TIM_PWM_MspInit+0xb8>)
 8002356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2101      	movs	r1, #1
 8002366:	201c      	movs	r0, #28
 8002368:	f001 ffff 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800236c:	201c      	movs	r0, #28
 800236e:	f002 f816 	bl	800439e <HAL_NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000
 8002380:	58024400 	.word	0x58024400

08002384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_TIM_MspPostInit+0xb8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d120      	bne.n	80023e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4818      	ldr	r0, [pc, #96]	; (8002444 <HAL_TIM_MspPostInit+0xc0>)
 80023e2:	f004 fffb 	bl	80073dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023e6:	e024      	b.n	8002432 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f0:	d11f      	bne.n	8002432 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002422:	2301      	movs	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <HAL_TIM_MspPostInit+0xc4>)
 800242e:	f004 ffd5 	bl	80073dc <HAL_GPIO_Init>
}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40010000 	.word	0x40010000
 8002440:	58024400 	.word	0x58024400
 8002444:	58020000 	.word	0x58020000
 8002448:	58020400 	.word	0x58020400

0800244c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0b8      	sub	sp, #224	; 0xe0
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	22bc      	movs	r2, #188	; 0xbc
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f00d fbf1 	bl	800fc54 <memset>
  if(huart->Instance==USART1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_UART_MspInit+0xd0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d14a      	bne.n	8002512 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800247c:	2301      	movs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f006 ff42 	bl	8009314 <HAL_RCCEx_PeriphCLKConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002496:	f7ff fc81 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_UART_MspInit+0xd4>)
 800249c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_UART_MspInit+0xd4>)
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_UART_MspInit+0xd4>)
 80024ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_UART_MspInit+0xd4>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_UART_MspInit+0xd4>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_UART_MspInit+0xd4>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f0:	2307      	movs	r3, #7
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024fa:	4619      	mov	r1, r3
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <HAL_UART_MspInit+0xd8>)
 80024fe:	f004 ff6d 	bl	80073dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	2025      	movs	r0, #37	; 0x25
 8002508:	f001 ff2f 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800250c:	2025      	movs	r0, #37	; 0x25
 800250e:	f001 ff46 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	37e0      	adds	r7, #224	; 0xe0
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40011000 	.word	0x40011000
 8002520:	58024400 	.word	0x58024400
 8002524:	58020000 	.word	0x58020000

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	e7fe      	b.n	800252c <NMI_Handler+0x4>

0800252e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <MemManage_Handler+0x4>

0800253a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <UsageFault_Handler+0x4>

08002546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002574:	f000 f9ac 	bl	80028d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA1_Stream0_IRQHandler+0x10>)
 8002582:	f003 fc19 	bl	8005db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	240001a4 	.word	0x240001a4

08002590 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <DMA1_Stream1_IRQHandler+0x10>)
 8002596:	f003 fc0f 	bl	8005db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2400021c 	.word	0x2400021c

080025a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <TIM1_BRK_IRQHandler+0x10>)
 80025aa:	f00a f888 	bl	800c6be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	24000404 	.word	0x24000404

080025b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <TIM1_UP_IRQHandler+0x10>)
 80025be:	f00a f87e 	bl	800c6be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	24000404 	.word	0x24000404

080025cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80025d2:	f00a f874 	bl	800c6be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	24000404 	.word	0x24000404

080025e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <TIM1_CC_IRQHandler+0x10>)
 80025e6:	f00a f86a 	bl	800c6be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	24000404 	.word	0x24000404

080025f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM2_IRQHandler+0x10>)
 80025fa:	f00a f860 	bl	800c6be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	24000450 	.word	0x24000450

08002608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <USART1_IRQHandler+0x10>)
 800260e:	f00b f8ad 	bl	800d76c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2400049c 	.word	0x2400049c

0800261c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <_sbrk+0x5c>)
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <_sbrk+0x60>)
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <_sbrk+0x64>)
 800263a:	4a12      	ldr	r2, [pc, #72]	; (8002684 <_sbrk+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <_sbrk+0x64>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	429a      	cmp	r2, r3
 800264a:	d207      	bcs.n	800265c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800264c:	f00d faba 	bl	800fbc4 <__errno>
 8002650:	4603      	mov	r3, r0
 8002652:	220c      	movs	r2, #12
 8002654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800265a:	e009      	b.n	8002670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <_sbrk+0x64>)
 800266c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	24080000 	.word	0x24080000
 800267c:	00000400 	.word	0x00000400
 8002680:	240005e4 	.word	0x240005e4
 8002684:	24000600 	.word	0x24000600

08002688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800268c:	4b37      	ldr	r3, [pc, #220]	; (800276c <SystemInit+0xe4>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	4a36      	ldr	r2, [pc, #216]	; (800276c <SystemInit+0xe4>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <SystemInit+0xe8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d807      	bhi.n	80026b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <SystemInit+0xe8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 030f 	bic.w	r3, r3, #15
 80026b0:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <SystemInit+0xe8>)
 80026b2:	f043 0307 	orr.w	r3, r3, #7
 80026b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026b8:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <SystemInit+0xec>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <SystemInit+0xec>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <SystemInit+0xec>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <SystemInit+0xec>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4929      	ldr	r1, [pc, #164]	; (8002774 <SystemInit+0xec>)
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <SystemInit+0xf0>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <SystemInit+0xe8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <SystemInit+0xe8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <SystemInit+0xe8>)
 80026ec:	f043 0307 	orr.w	r3, r3, #7
 80026f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <SystemInit+0xec>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <SystemInit+0xec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <SystemInit+0xec>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <SystemInit+0xec>)
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <SystemInit+0xf4>)
 8002708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <SystemInit+0xec>)
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <SystemInit+0xf8>)
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <SystemInit+0xec>)
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <SystemInit+0xfc>)
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <SystemInit+0xec>)
 8002718:	2200      	movs	r2, #0
 800271a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <SystemInit+0xec>)
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <SystemInit+0xfc>)
 8002720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <SystemInit+0xec>)
 8002724:	2200      	movs	r2, #0
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <SystemInit+0xec>)
 800272a:	4a16      	ldr	r2, [pc, #88]	; (8002784 <SystemInit+0xfc>)
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <SystemInit+0xec>)
 8002730:	2200      	movs	r2, #0
 8002732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <SystemInit+0xec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <SystemInit+0xec>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <SystemInit+0xec>)
 8002742:	2200      	movs	r2, #0
 8002744:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <SystemInit+0x100>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <SystemInit+0x104>)
 800274c:	4013      	ands	r3, r2
 800274e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002752:	d202      	bcs.n	800275a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <SystemInit+0x108>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <SystemInit+0x10c>)
 800275c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002760:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	52002000 	.word	0x52002000
 8002774:	58024400 	.word	0x58024400
 8002778:	eaf6ed7f 	.word	0xeaf6ed7f
 800277c:	02020200 	.word	0x02020200
 8002780:	01ff0000 	.word	0x01ff0000
 8002784:	01010280 	.word	0x01010280
 8002788:	5c001000 	.word	0x5c001000
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	51008108 	.word	0x51008108
 8002794:	52004000 	.word	0x52004000

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800279c:	f7ff ff74 	bl	8002688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a0:	480c      	ldr	r0, [pc, #48]	; (80027d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027a2:	490d      	ldr	r1, [pc, #52]	; (80027d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027b8:	4c0a      	ldr	r4, [pc, #40]	; (80027e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027c6:	f00d fa03 	bl	800fbd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7fe fc91 	bl	80010f0 <main>
  bx  lr
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80027d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027d8:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 80027dc:	0800fee0 	.word	0x0800fee0
  ldr r2, =_sbss
 80027e0:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 80027e4:	240005fc 	.word	0x240005fc

080027e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC3_IRQHandler>
	...

080027ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f2:	2003      	movs	r0, #3
 80027f4:	f001 fdae 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027f8:	f006 fbb6 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_Init+0x68>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	4913      	ldr	r1, [pc, #76]	; (8002858 <HAL_Init+0x6c>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_Init+0x68>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_Init+0x6c>)
 8002820:	5cd3      	ldrb	r3, [r2, r3]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_Init+0x70>)
 800282e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_Init+0x74>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002836:	200f      	movs	r0, #15
 8002838:	f000 f814 	bl	8002864 <HAL_InitTick>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e002      	b.n	800284c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002846:	f7ff faaf 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	58024400 	.word	0x58024400
 8002858:	0800fe90 	.word	0x0800fe90
 800285c:	24000034 	.word	0x24000034
 8002860:	24000030 	.word	0x24000030

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_InitTick+0x60>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e021      	b.n	80028bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_InitTick+0x64>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_InitTick+0x60>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002886:	fbb3 f3f1 	udiv	r3, r3, r1
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fd93 	bl	80043ba <HAL_SYSTICK_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00e      	b.n	80028bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d80a      	bhi.n	80028ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a4:	2200      	movs	r2, #0
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ac:	f001 fd5d 	bl	800436a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <HAL_InitTick+0x68>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2400003c 	.word	0x2400003c
 80028c8:	24000030 	.word	0x24000030
 80028cc:	24000038 	.word	0x24000038

080028d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x20>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x24>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_IncTick+0x24>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	2400003c 	.word	0x2400003c
 80028f4:	240005e8 	.word	0x240005e8

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_GetTick+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	240005e8 	.word	0x240005e8

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff ffee 	bl	80028f8 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_Delay+0x44>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002936:	bf00      	nop
 8002938:	f7ff ffde 	bl	80028f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2400003c 	.word	0x2400003c

08002958 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_SuspendTick+0x1c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <HAL_SuspendTick+0x1c>)
 8002962:	f023 0302 	bic.w	r3, r3, #2
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e010 	.word	0xe000e010

08002978 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_GetREVID+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0c1b      	lsrs	r3, r3, #16
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	5c001000 	.word	0x5c001000

08002990 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	58000400 	.word	0x58000400

080029bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	611a      	str	r2, [r3, #16]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3360      	adds	r3, #96	; 0x60
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	601a      	str	r2, [r3, #0]
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3330      	adds	r3, #48	; 0x30
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	211f      	movs	r1, #31
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	401a      	ands	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 011f 	and.w	r1, r3, #31
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f023 0203 	bic.w	r2, r3, #3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	0e5b      	lsrs	r3, r3, #25
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	4413      	add	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0d1b      	lsrs	r3, r3, #20
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2107      	movs	r1, #7
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0d1b      	lsrs	r3, r3, #20
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0318 	and.w	r3, r3, #24
 8002bea:	4908      	ldr	r1, [pc, #32]	; (8002c0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bec:	40d9      	lsrs	r1, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	000fffff 	.word	0x000fffff

08002c10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6093      	str	r3, [r2, #8]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	5fffffc0 	.word	0x5fffffc0

08002c50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c64:	d101      	bne.n	8002c6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <LL_ADC_EnableInternalRegulator+0x24>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	6fffffc0 	.word	0x6fffffc0

08002ca0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb4:	d101      	bne.n	8002cba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <LL_ADC_Enable+0x24>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	7fffffc0 	.word	0x7fffffc0

08002cf0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <LL_ADC_Disable+0x24>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	f043 0202 	orr.w	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	7fffffc0 	.word	0x7fffffc0

08002d18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <LL_ADC_IsEnabled+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_ADC_IsEnabled+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d101      	bne.n	8002d56 <LL_ADC_IsDisableOngoing+0x18>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_ADC_IsDisableOngoing+0x1a>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <LL_ADC_REG_StartConversion+0x24>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	f043 0204 	orr.w	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	7fffffc0 	.word	0x7fffffc0

08002d8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d101      	bne.n	8002da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d101      	bne.n	8002dca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e18f      	b.n	8003112 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7fe ffeb 	bl	8001ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff19 	bl	8002c50 <LL_ADC_IsDeepPowerDownEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff feff 	bl	8002c2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff34 	bl	8002ca0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d114      	bne.n	8002e68 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff18 	bl	8002c78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e48:	4b87      	ldr	r3, [pc, #540]	; (8003068 <HAL_ADC_Init+0x290>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	4a87      	ldr	r2, [pc, #540]	; (800306c <HAL_ADC_Init+0x294>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e5a:	e002      	b.n	8002e62 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f9      	bne.n	8002e5c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff17 	bl	8002ca0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0210 	orr.w	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff77 	bl	8002d8c <LL_ADC_REG_IsConversionOngoing>
 8002e9e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 8129 	bne.w	8003100 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 8125 	bne.w	8003100 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff24 	bl	8002d18 <LL_ADC_IsEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d136      	bne.n	8002f44 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_ADC_Init+0x298>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_Init+0x112>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a63      	ldr	r2, [pc, #396]	; (8003074 <HAL_ADC_Init+0x29c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10e      	bne.n	8002f08 <HAL_ADC_Init+0x130>
 8002eea:	4861      	ldr	r0, [pc, #388]	; (8003070 <HAL_ADC_Init+0x298>)
 8002eec:	f7ff ff14 	bl	8002d18 <LL_ADC_IsEnabled>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4860      	ldr	r0, [pc, #384]	; (8003074 <HAL_ADC_Init+0x29c>)
 8002ef4:	f7ff ff10 	bl	8002d18 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4323      	orrs	r3, r4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e008      	b.n	8002f1a <HAL_ADC_Init+0x142>
 8002f08:	485b      	ldr	r0, [pc, #364]	; (8003078 <HAL_ADC_Init+0x2a0>)
 8002f0a:	f7ff ff05 	bl	8002d18 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a53      	ldr	r2, [pc, #332]	; (8003070 <HAL_ADC_Init+0x298>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_ADC_Init+0x15a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a51      	ldr	r2, [pc, #324]	; (8003074 <HAL_ADC_Init+0x29c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_Init+0x15e>
 8002f32:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_ADC_Init+0x2a4>)
 8002f34:	e000      	b.n	8002f38 <HAL_ADC_Init+0x160>
 8002f36:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_ADC_Init+0x2a8>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7ff fd3c 	bl	80029bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f44:	f7ff fd18 	bl	8002978 <HAL_GetREVID>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d914      	bls.n	8002f7c <HAL_ADC_Init+0x1a4>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d110      	bne.n	8002f7c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7d5b      	ldrb	r3, [r3, #21]
 8002f5e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f64:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f6a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7f1b      	ldrb	r3, [r3, #28]
 8002f70:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f72:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f74:	f043 030c 	orr.w	r3, r3, #12
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e00d      	b.n	8002f98 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7d5b      	ldrb	r3, [r3, #21]
 8002f80:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f86:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f8c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7f1b      	ldrb	r3, [r3, #28]
 8002f92:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7f1b      	ldrb	r3, [r3, #28]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	045b      	lsls	r3, r3, #17
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_ADC_Init+0x2ac>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fed2 	bl	8002d8c <LL_ADC_REG_IsConversionOngoing>
 8002fe8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fedf 	bl	8002db2 <LL_ADC_INJ_IsConversionOngoing>
 8002ff4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d15f      	bne.n	80030bc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d15c      	bne.n	80030bc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7d1b      	ldrb	r3, [r3, #20]
 8003006:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_ADC_Init+0x2b0>)
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	430b      	orrs	r3, r1
 8003022:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800302a:	2b01      	cmp	r3, #1
 800302c:	d130      	bne.n	8003090 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_ADC_Init+0x2b4>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003042:	3a01      	subs	r2, #1
 8003044:	0411      	lsls	r1, r2, #16
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003050:	4311      	orrs	r1, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003056:	430a      	orrs	r2, r1
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	611a      	str	r2, [r3, #16]
 8003064:	e01c      	b.n	80030a0 <HAL_ADC_Init+0x2c8>
 8003066:	bf00      	nop
 8003068:	24000030 	.word	0x24000030
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	40022000 	.word	0x40022000
 8003074:	40022100 	.word	0x40022100
 8003078:	58026000 	.word	0x58026000
 800307c:	40022300 	.word	0x40022300
 8003080:	58026300 	.word	0x58026300
 8003084:	fff0c003 	.word	0xfff0c003
 8003088:	ffffbffc 	.word	0xffffbffc
 800308c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fdd6 	bl	8003c68 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f023 010f 	bic.w	r1, r3, #15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	1e5a      	subs	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
 80030dc:	e007      	b.n	80030ee <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 020f 	bic.w	r2, r2, #15
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
 80030fe:	e007      	b.n	8003110 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003110:	7ffb      	ldrb	r3, [r7, #31]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	bf00      	nop

0800311c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_ADC_Start_DMA+0x168>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_ADC_Start_DMA+0x20>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_ADC_Start_DMA+0x16c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_ADC_Start_DMA+0x24>
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_ADC_Start_DMA+0x170>)
 800313e:	e000      	b.n	8003142 <HAL_ADC_Start_DMA+0x26>
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_ADC_Start_DMA+0x174>)
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fd64 	bl	8002c10 <LL_ADC_GetMultimode>
 8003148:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fe1c 	bl	8002d8c <LL_ADC_REG_IsConversionOngoing>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 808c 	bne.w	8003274 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADC_Start_DMA+0x4e>
 8003166:	2302      	movs	r3, #2
 8003168:	e087      	b.n	800327a <HAL_ADC_Start_DMA+0x15e>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b05      	cmp	r3, #5
 800317c:	d002      	beq.n	8003184 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b09      	cmp	r3, #9
 8003182:	d170      	bne.n	8003266 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fbf1 	bl	800396c <ADC_Enable>
 800318a:	4603      	mov	r3, r0
 800318c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d163      	bne.n	800325c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003198:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_ADC_Start_DMA+0x178>)
 800319a:	4013      	ands	r3, r2
 800319c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a37      	ldr	r2, [pc, #220]	; (8003288 <HAL_ADC_Start_DMA+0x16c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d002      	beq.n	80031b4 <HAL_ADC_Start_DMA+0x98>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	e000      	b.n	80031b6 <HAL_ADC_Start_DMA+0x9a>
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_ADC_Start_DMA+0x168>)
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d002      	beq.n	80031c4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	f023 0206 	bic.w	r2, r3, #6
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	659a      	str	r2, [r3, #88]	; 0x58
 80031e8:	e002      	b.n	80031f0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_ADC_Start_DMA+0x17c>)
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_ADC_Start_DMA+0x180>)
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <HAL_ADC_Start_DMA+0x184>)
 8003206:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	221c      	movs	r2, #28
 800320e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0210 	orr.w	r2, r2, #16
 8003226:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f7ff fc89 	bl	8002b4a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3340      	adds	r3, #64	; 0x40
 8003242:	4619      	mov	r1, r3
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f001 fde8 	bl	8004e1c <HAL_DMA_Start_IT>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd85 	bl	8002d64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800325a:	e00d      	b.n	8003278 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003264:	e008      	b.n	8003278 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003272:	e001      	b.n	8003278 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003274:	2302      	movs	r3, #2
 8003276:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003278:	7dfb      	ldrb	r3, [r7, #23]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000
 8003288:	40022100 	.word	0x40022100
 800328c:	40022300 	.word	0x40022300
 8003290:	58026300 	.word	0x58026300
 8003294:	fffff0fe 	.word	0xfffff0fe
 8003298:	08003b3f 	.word	0x08003b3f
 800329c:	08003c17 	.word	0x08003c17
 80032a0:	08003c33 	.word	0x08003c33

080032a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b0a1      	sub	sp, #132	; 0x84
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a9d      	ldr	r2, [pc, #628]	; (800355c <HAL_ADC_ConfigChannel+0x290>)
 80032e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x2a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e321      	b.n	800393a <HAL_ADC_ConfigChannel+0x66e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fd42 	bl	8002d8c <LL_ADC_REG_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 8306 	bne.w	800391c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003318:	2b00      	cmp	r3, #0
 800331a:	d108      	bne.n	800332e <HAL_ADC_ConfigChannel+0x62>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	e016      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800333c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800333e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003346:	2320      	movs	r3, #32
 8003348:	e003      	b.n	8003352 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800334a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2201      	movs	r2, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	69d1      	ldr	r1, [r2, #28]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	430b      	orrs	r3, r1
 8003368:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7ff fbbb 	bl	8002af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fd03 	bl	8002d8c <LL_ADC_REG_IsConversionOngoing>
 8003386:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fd10 	bl	8002db2 <LL_ADC_INJ_IsConversionOngoing>
 8003392:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80b3 	bne.w	8003502 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800339c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 80af 	bne.w	8003502 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f7ff fbdd 	bl	8002b70 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_ADC_ConfigChannel+0x294>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c2:	d10b      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x110>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	e01d      	b.n	8003418 <HAL_ADC_ConfigChannel+0x14c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x136>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	e00a      	b.n	8003418 <HAL_ADC_ConfigChannel+0x14c>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d027      	beq.n	8003472 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6919      	ldr	r1, [r3, #16]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003430:	f7ff faf8 	bl	8002a24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6919      	ldr	r1, [r3, #16]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	7e5b      	ldrb	r3, [r3, #25]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_ADC_ConfigChannel+0x17e>
 8003444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003448:	e000      	b.n	800344c <HAL_ADC_ConfigChannel+0x180>
 800344a:	2300      	movs	r3, #0
 800344c:	461a      	mov	r2, r3
 800344e:	f7ff fb22 	bl	8002a96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	7e1b      	ldrb	r3, [r3, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x19c>
 8003462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003466:	e000      	b.n	800346a <HAL_ADC_ConfigChannel+0x19e>
 8003468:	2300      	movs	r3, #0
 800346a:	461a      	mov	r2, r3
 800346c:	f7ff fafa 	bl	8002a64 <LL_ADC_SetDataRightShift>
 8003470:	e047      	b.n	8003502 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	069b      	lsls	r3, r3, #26
 8003482:	429a      	cmp	r2, r3
 8003484:	d107      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003494:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	069b      	lsls	r3, r3, #26
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d107      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d107      	bne.n	80034de <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034dc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	069b      	lsls	r3, r3, #26
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d107      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003500:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fc06 	bl	8002d18 <LL_ADC_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 820d 	bne.w	800392e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	461a      	mov	r2, r3
 8003522:	f7ff fb51 	bl	8002bc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_ADC_ConfigChannel+0x290>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f040 8133 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353e:	2b00      	cmp	r3, #0
 8003540:	d110      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x298>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0e9b      	lsrs	r3, r3, #26
 8003548:	3301      	adds	r3, #1
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2b09      	cmp	r3, #9
 8003550:	bf94      	ite	ls
 8003552:	2301      	movls	r3, #1
 8003554:	2300      	movhi	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e01e      	b.n	8003598 <HAL_ADC_ConfigChannel+0x2cc>
 800355a:	bf00      	nop
 800355c:	47ff0000 	.word	0x47ff0000
 8003560:	5c001000 	.word	0x5c001000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2b09      	cmp	r3, #9
 8003590:	bf94      	ite	ls
 8003592:	2301      	movls	r3, #1
 8003594:	2300      	movhi	r3, #0
 8003596:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003598:	2b00      	cmp	r3, #0
 800359a:	d079      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2ec>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	3301      	adds	r3, #1
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b6:	e015      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x318>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	069b      	lsls	r3, r3, #26
 80035e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x338>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	3301      	adds	r3, #1
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	e017      	b.n	8003634 <HAL_ADC_ConfigChannel+0x368>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	e003      	b.n	8003628 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	ea42 0103 	orr.w	r1, r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x38e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	051b      	lsls	r3, r3, #20
 8003658:	e018      	b.n	800368c <HAL_ADC_ConfigChannel+0x3c0>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e003      	b.n	800367e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368c:	430b      	orrs	r3, r1
 800368e:	e07e      	b.n	800378e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x3e0>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	3301      	adds	r3, #1
 80036a4:	069b      	lsls	r3, r3, #26
 80036a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036aa:	e015      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x40c>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x42c>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	e017      	b.n	8003728 <HAL_ADC_ConfigChannel+0x45c>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	61bb      	str	r3, [r7, #24]
  return result;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e003      	b.n	800371c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x488>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	3b1e      	subs	r3, #30
 800374c:	051b      	lsls	r3, r3, #20
 800374e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003752:	e01b      	b.n	800378c <HAL_ADC_ConfigChannel+0x4c0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	60fb      	str	r3, [r7, #12]
  return result;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f003 021f 	and.w	r2, r3, #31
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	3b1e      	subs	r3, #30
 8003786:	051b      	lsls	r3, r3, #20
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378c:	430b      	orrs	r3, r1
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	4619      	mov	r1, r3
 8003794:	f7ff f9ec 	bl	8002b70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f280 80c6 	bge.w	800392e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a67      	ldr	r2, [pc, #412]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x4ea>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x4ee>
 80037b6:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 80037b8:	e000      	b.n	80037bc <HAL_ADC_ConfigChannel+0x4f0>
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f923 	bl	8002a08 <LL_ADC_GetCommonPathInternalCh>
 80037c2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_ADC_ConfigChannel+0x50c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10e      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x52a>
 80037d8:	485a      	ldr	r0, [pc, #360]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80037da:	f7ff fa9d 	bl	8002d18 <LL_ADC_IsEnabled>
 80037de:	4604      	mov	r4, r0
 80037e0:	4859      	ldr	r0, [pc, #356]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80037e2:	f7ff fa99 	bl	8002d18 <LL_ADC_IsEnabled>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4323      	orrs	r3, r4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e008      	b.n	8003808 <HAL_ADC_ConfigChannel+0x53c>
 80037f6:	4857      	ldr	r0, [pc, #348]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 80037f8:	f7ff fa8e 	bl	8002d18 <LL_ADC_IsEnabled>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf0c      	ite	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	2300      	movne	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d07d      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a51      	ldr	r2, [pc, #324]	; (8003958 <HAL_ADC_ConfigChannel+0x68c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d130      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x5ac>
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d12b      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a4b      	ldr	r2, [pc, #300]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f040 8081 	bne.w	800392e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a44      	ldr	r2, [pc, #272]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x574>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a43      	ldr	r2, [pc, #268]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x578>
 8003840:	4a42      	ldr	r2, [pc, #264]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 8003842:	e000      	b.n	8003846 <HAL_ADC_ConfigChannel+0x57a>
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7ff f8c7 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003854:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_ADC_ConfigChannel+0x690>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	4a41      	ldr	r2, [pc, #260]	; (8003960 <HAL_ADC_ConfigChannel+0x694>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003868:	e002      	b.n	8003870 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3b01      	subs	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f9      	bne.n	800386a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003876:	e05a      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_ADC_ConfigChannel+0x698>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11e      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x5f4>
 8003882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d119      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a30      	ldr	r2, [pc, #192]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d14b      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x5de>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a28      	ldr	r2, [pc, #160]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x5e2>
 80038aa:	4a28      	ldr	r2, [pc, #160]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x5e4>
 80038ae:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff f892 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038be:	e036      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_ADC_ConfigChannel+0x69c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d131      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d12c      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d127      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x626>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x62a>
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 80038f4:	e000      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x62c>
 80038f6:	4a16      	ldr	r2, [pc, #88]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 80038f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f7ff f86e 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 8003906:	e012      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800391a:	e008      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003936:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800393a:	4618      	mov	r0, r3
 800393c:	3784      	adds	r7, #132	; 0x84
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}
 8003942:	bf00      	nop
 8003944:	40022000 	.word	0x40022000
 8003948:	40022100 	.word	0x40022100
 800394c:	40022300 	.word	0x40022300
 8003950:	58026300 	.word	0x58026300
 8003954:	58026000 	.word	0x58026000
 8003958:	cb840000 	.word	0xcb840000
 800395c:	24000030 	.word	0x24000030
 8003960:	053e2d63 	.word	0x053e2d63
 8003964:	c7520000 	.word	0xc7520000
 8003968:	cfb80000 	.word	0xcfb80000

0800396c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff f9cd 	bl	8002d18 <LL_ADC_IsEnabled>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d16e      	bne.n	8003a62 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <ADC_Enable+0x100>)
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e05a      	b.n	8003a64 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f988 	bl	8002cc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039b8:	f7fe ff9e 	bl	80028f8 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <ADC_Enable+0x104>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <ADC_Enable+0x66>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a29      	ldr	r2, [pc, #164]	; (8003a74 <ADC_Enable+0x108>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <ADC_Enable+0x6a>
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <ADC_Enable+0x10c>)
 80039d4:	e000      	b.n	80039d8 <ADC_Enable+0x6c>
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <ADC_Enable+0x110>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff f919 	bl	8002c10 <LL_ADC_GetMultimode>
 80039de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <ADC_Enable+0x108>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d002      	beq.n	80039f0 <ADC_Enable+0x84>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e000      	b.n	80039f2 <ADC_Enable+0x86>
 80039f0:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <ADC_Enable+0x104>)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02c      	beq.n	8003a54 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d130      	bne.n	8003a62 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a00:	e028      	b.n	8003a54 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f986 	bl	8002d18 <LL_ADC_IsEnabled>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff f956 	bl	8002cc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a1c:	f7fe ff6c 	bl	80028f8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d914      	bls.n	8003a54 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00d      	beq.n	8003a54 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d1cf      	bne.n	8003a02 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	8000003f 	.word	0x8000003f
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40022100 	.word	0x40022100
 8003a78:	40022300 	.word	0x40022300
 8003a7c:	58026300 	.word	0x58026300

08003a80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff f956 	bl	8002d3e <LL_ADC_IsDisableOngoing>
 8003a92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f93d 	bl	8002d18 <LL_ADC_IsEnabled>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d047      	beq.n	8003b34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d144      	bne.n	8003b34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030d 	and.w	r3, r3, #13
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10c      	bne.n	8003ad2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f917 	bl	8002cf0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aca:	f7fe ff15 	bl	80028f8 <HAL_GetTick>
 8003ace:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad0:	e029      	b.n	8003b26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e023      	b.n	8003b36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aee:	f7fe ff03 	bl	80028f8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d914      	bls.n	8003b26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0210 	orr.w	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e007      	b.n	8003b36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1dc      	bne.n	8003aee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d14b      	bne.n	8003bf0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d021      	beq.n	8003bb6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ffa8 	bl	8002acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d032      	beq.n	8003be8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12b      	bne.n	8003be8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11f      	bne.n	8003be8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
 8003bb4:	e018      	b.n	8003be8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d111      	bne.n	8003be8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7fe f86b 	bl	8001cc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bee:	e00e      	b.n	8003c0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff fb5b 	bl	80032b8 <HAL_ADC_ErrorCallback>
}
 8003c02:	e004      	b.n	8003c0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff fb3d 	bl	80032a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	f043 0204 	orr.w	r2, r3, #4
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fb2d 	bl	80032b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a79      	ldr	r2, [pc, #484]	; (8003e5c <ADC_ConfigureBoostMode+0x1f4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <ADC_ConfigureBoostMode+0x1c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a78      	ldr	r2, [pc, #480]	; (8003e60 <ADC_ConfigureBoostMode+0x1f8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d109      	bne.n	8003c98 <ADC_ConfigureBoostMode+0x30>
 8003c84:	4b77      	ldr	r3, [pc, #476]	; (8003e64 <ADC_ConfigureBoostMode+0x1fc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e008      	b.n	8003caa <ADC_ConfigureBoostMode+0x42>
 8003c98:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <ADC_ConfigureBoostMode+0x200>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01c      	beq.n	8003ce8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cae:	f005 fad5 	bl	800925c <HAL_RCC_GetHCLKFreq>
 8003cb2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cbc:	d010      	beq.n	8003ce0 <ADC_ConfigureBoostMode+0x78>
 8003cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc2:	d871      	bhi.n	8003da8 <ADC_ConfigureBoostMode+0x140>
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d002      	beq.n	8003cd0 <ADC_ConfigureBoostMode+0x68>
 8003cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cce:	d16b      	bne.n	8003da8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	60fb      	str	r3, [r7, #12]
        break;
 8003cde:	e066      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	60fb      	str	r3, [r7, #12]
        break;
 8003ce6:	e062      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ce8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cec:	f006 fa58 	bl	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cf0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cfa:	d051      	beq.n	8003da0 <ADC_ConfigureBoostMode+0x138>
 8003cfc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d00:	d854      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d02:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d06:	d047      	beq.n	8003d98 <ADC_ConfigureBoostMode+0x130>
 8003d08:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d0c:	d84e      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d0e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d12:	d03d      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x128>
 8003d14:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d18:	d848      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1e:	d033      	beq.n	8003d88 <ADC_ConfigureBoostMode+0x120>
 8003d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d24:	d842      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d26:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d2a:	d029      	beq.n	8003d80 <ADC_ConfigureBoostMode+0x118>
 8003d2c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d30:	d83c      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d32:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d36:	d01a      	beq.n	8003d6e <ADC_ConfigureBoostMode+0x106>
 8003d38:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d3c:	d836      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d3e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d42:	d014      	beq.n	8003d6e <ADC_ConfigureBoostMode+0x106>
 8003d44:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d48:	d830      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4e:	d00e      	beq.n	8003d6e <ADC_ConfigureBoostMode+0x106>
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d82a      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d5a:	d008      	beq.n	8003d6e <ADC_ConfigureBoostMode+0x106>
 8003d5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d60:	d824      	bhi.n	8003dac <ADC_ConfigureBoostMode+0x144>
 8003d62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d66:	d002      	beq.n	8003d6e <ADC_ConfigureBoostMode+0x106>
 8003d68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d6c:	d11e      	bne.n	8003dac <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	0c9b      	lsrs	r3, r3, #18
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	60fb      	str	r3, [r7, #12]
        break;
 8003d7e:	e016      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]
        break;
 8003d86:	e012      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	60fb      	str	r3, [r7, #12]
        break;
 8003d8e:	e00e      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	60fb      	str	r3, [r7, #12]
        break;
 8003d96:	e00a      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	09db      	lsrs	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
        break;
 8003d9e:	e006      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	60fb      	str	r3, [r7, #12]
        break;
 8003da6:	e002      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
        break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003dac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003dae:	f7fe fde3 	bl	8002978 <HAL_GetREVID>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d815      	bhi.n	8003de8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <ADC_ConfigureBoostMode+0x204>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d908      	bls.n	8003dd6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dd4:	e03e      	b.n	8003e54 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de4:	609a      	str	r2, [r3, #8]
}
 8003de6:	e035      	b.n	8003e54 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <ADC_ConfigureBoostMode+0x208>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d808      	bhi.n	8003e08 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e04:	609a      	str	r2, [r3, #8]
}
 8003e06:	e025      	b.n	8003e54 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <ADC_ConfigureBoostMode+0x20c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d80a      	bhi.n	8003e26 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e22:	609a      	str	r2, [r3, #8]
}
 8003e24:	e016      	b.n	8003e54 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <ADC_ConfigureBoostMode+0x210>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d80a      	bhi.n	8003e44 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	e007      	b.n	8003e54 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40022100 	.word	0x40022100
 8003e64:	40022300 	.word	0x40022300
 8003e68:	58026300 	.word	0x58026300
 8003e6c:	01312d00 	.word	0x01312d00
 8003e70:	005f5e10 	.word	0x005f5e10
 8003e74:	00bebc20 	.word	0x00bebc20
 8003e78:	017d7840 	.word	0x017d7840

08003e7c <LL_ADC_IsEnabled>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <LL_ADC_IsEnabled+0x18>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_ADC_IsEnabled+0x1a>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <LL_ADC_StartCalibration>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <LL_ADC_StartCalibration+0x38>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	3ffeffc0 	.word	0x3ffeffc0

08003ee0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef4:	d101      	bne.n	8003efa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d101      	bne.n	8003f20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_ADCEx_Calibration_Start+0x1e>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e04c      	b.n	8003fe8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fd92 	bl	8003a80 <ADC_Disable>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d135      	bne.n	8003fd2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	f043 0202 	orr.w	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff90 	bl	8003ea4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f84:	e014      	b.n	8003fb0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d30d      	bcc.n	8003fb0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	f023 0312 	bic.w	r3, r3, #18
 8003f9c:	f043 0210 	orr.w	r2, r3, #16
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e01b      	b.n	8003fe8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff93 	bl	8003ee0 <LL_ADC_IsCalibrationOnGoing>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e2      	bne.n	8003f86 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f023 0303 	bic.w	r3, r3, #3
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
 8003fd0:	e005      	b.n	8003fde <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	ffffeefd 	.word	0xffffeefd
 8003ff4:	25c3f800 	.word	0x25c3f800

08003ff8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b09f      	sub	sp, #124	; 0x7c
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004012:	2302      	movs	r3, #2
 8004014:	e0be      	b.n	8004194 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5c      	ldr	r2, [pc, #368]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d102      	bne.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004030:	4b5b      	ldr	r3, [pc, #364]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	e001      	b.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e09d      	b.n	8004194 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff54 	bl	8003f08 <LL_ADC_REG_IsConversionOngoing>
 8004060:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff4e 	bl	8003f08 <LL_ADC_REG_IsConversionOngoing>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d17f      	bne.n	8004172 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004074:	2b00      	cmp	r3, #0
 8004076:	d17c      	bne.n	8004172 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a47      	ldr	r2, [pc, #284]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800408c:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800408e:	e000      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004090:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004092:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d039      	beq.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a3a      	ldr	r2, [pc, #232]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10e      	bne.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040c2:	4836      	ldr	r0, [pc, #216]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040c4:	f7ff feda 	bl	8003e7c <LL_ADC_IsEnabled>
 80040c8:	4604      	mov	r4, r0
 80040ca:	4835      	ldr	r0, [pc, #212]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040cc:	f7ff fed6 	bl	8003e7c <LL_ADC_IsEnabled>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4323      	orrs	r3, r4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e008      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040e0:	4832      	ldr	r0, [pc, #200]	; (80041ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040e2:	f7ff fecb 	bl	8003e7c <LL_ADC_IsEnabled>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d047      	beq.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	430a      	orrs	r2, r1
 8004108:	431a      	orrs	r2, r3
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800410e:	e03a      	b.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1e      	ldr	r2, [pc, #120]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10e      	bne.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004130:	481a      	ldr	r0, [pc, #104]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004132:	f7ff fea3 	bl	8003e7c <LL_ADC_IsEnabled>
 8004136:	4604      	mov	r4, r0
 8004138:	4819      	ldr	r0, [pc, #100]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800413a:	f7ff fe9f 	bl	8003e7c <LL_ADC_IsEnabled>
 800413e:	4603      	mov	r3, r0
 8004140:	4323      	orrs	r3, r4
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e008      	b.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800414e:	4817      	ldr	r0, [pc, #92]	; (80041ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004150:	f7ff fe94 	bl	8003e7c <LL_ADC_IsEnabled>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800416a:	4013      	ands	r3, r2
 800416c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800416e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004170:	e009      	b.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004184:	e000      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004186:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004190:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004194:	4618      	mov	r0, r3
 8004196:	377c      	adds	r7, #124	; 0x7c
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	40022000 	.word	0x40022000
 80041a0:	40022100 	.word	0x40022100
 80041a4:	40022300 	.word	0x40022300
 80041a8:	58026300 	.word	0x58026300
 80041ac:	58026000 	.word	0x58026000
 80041b0:	fffff0e0 	.word	0xfffff0e0

080041b4 <__NVIC_SetPriorityGrouping>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <__NVIC_SetPriorityGrouping+0x40>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041d0:	4013      	ands	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <__NVIC_SetPriorityGrouping+0x40>)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60d3      	str	r3, [r2, #12]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00
 80041f8:	05fa0000 	.word	0x05fa0000

080041fc <__NVIC_GetPriorityGrouping>:
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__NVIC_GetPriorityGrouping+0x18>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 0307 	and.w	r3, r3, #7
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_EnableIRQ>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004226:	2b00      	cmp	r3, #0
 8004228:	db0b      	blt.n	8004242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	f003 021f 	and.w	r2, r3, #31
 8004230:	4907      	ldr	r1, [pc, #28]	; (8004250 <__NVIC_EnableIRQ+0x38>)
 8004232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2001      	movs	r0, #1
 800423a:	fa00 f202 	lsl.w	r2, r0, r2
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004264:	2b00      	cmp	r3, #0
 8004266:	db0a      	blt.n	800427e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	490c      	ldr	r1, [pc, #48]	; (80042a0 <__NVIC_SetPriority+0x4c>)
 800426e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	440b      	add	r3, r1
 8004278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800427c:	e00a      	b.n	8004294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4908      	ldr	r1, [pc, #32]	; (80042a4 <__NVIC_SetPriority+0x50>)
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3b04      	subs	r3, #4
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	440b      	add	r3, r1
 8004292:	761a      	strb	r2, [r3, #24]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000e100 	.word	0xe000e100
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <NVIC_EncodePriority>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf28      	it	cs
 80042c6:	2304      	movcs	r3, #4
 80042c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d902      	bls.n	80042d8 <NVIC_EncodePriority+0x30>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3b03      	subs	r3, #3
 80042d6:	e000      	b.n	80042da <NVIC_EncodePriority+0x32>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43d9      	mvns	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	4313      	orrs	r3, r2
}
 8004302:	4618      	mov	r0, r3
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004320:	d301      	bcc.n	8004326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004322:	2301      	movs	r3, #1
 8004324:	e00f      	b.n	8004346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <SysTick_Config+0x40>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432e:	210f      	movs	r1, #15
 8004330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004334:	f7ff ff8e 	bl	8004254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <SysTick_Config+0x40>)
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <SysTick_Config+0x40>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	e000e010 	.word	0xe000e010

08004354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff29 	bl	80041b4 <__NVIC_SetPriorityGrouping>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004378:	f7ff ff40 	bl	80041fc <__NVIC_GetPriorityGrouping>
 800437c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f7ff ff90 	bl	80042a8 <NVIC_EncodePriority>
 8004388:	4602      	mov	r2, r0
 800438a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff5f 	bl	8004254 <__NVIC_SetPriority>
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff33 	bl	8004218 <__NVIC_EnableIRQ>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ffa4 	bl	8004310 <SysTick_Config>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e014      	b.n	800440e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	791b      	ldrb	r3, [r3, #4]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d105      	bne.n	80043fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fd fe0b 	bl	8002010 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	795b      	ldrb	r3, [r3, #5]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_DAC_Start+0x16>
 8004428:	2302      	movs	r3, #2
 800442a:	e040      	b.n	80044ae <HAL_DAC_Start+0x98>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2201      	movs	r2, #1
 8004446:	409a      	lsls	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11d      	bne.n	80044a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	e014      	b.n	80044a0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2102      	movs	r1, #2
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	429a      	cmp	r2, r3
 800448e:	d107      	bne.n	80044a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0202 	orr.w	r2, r2, #2
 800449e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	3308      	adds	r3, #8
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e004      	b.n	80044ee <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3314      	adds	r3, #20
 80044ec:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	461a      	mov	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	795b      	ldrb	r3, [r3, #5]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_DAC_ConfigChannel+0x18>
 8004518:	2302      	movs	r3, #2
 800451a:	e11d      	b.n	8004758 <HAL_DAC_ConfigChannel+0x254>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2202      	movs	r2, #2
 8004526:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d174      	bne.n	800461a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004530:	f7fe f9e2 	bl	80028f8 <HAL_GetTick>
 8004534:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d134      	bne.n	80045a6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800453c:	e011      	b.n	8004562 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800453e:	f7fe f9db 	bl	80028f8 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d90a      	bls.n	8004562 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f043 0208 	orr.w	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2203      	movs	r2, #3
 800455c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0fa      	b.n	8004758 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004568:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_DAC_ConfigChannel+0x25c>)
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e6      	bne.n	800453e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004570:	2001      	movs	r0, #1
 8004572:	f7fe f9cd 	bl	8002910 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	6992      	ldr	r2, [r2, #24]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
 8004580:	e01e      	b.n	80045c0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004582:	f7fe f9b9 	bl	80028f8 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d90a      	bls.n	80045a6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f043 0208 	orr.w	r2, r3, #8
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2203      	movs	r2, #3
 80045a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0d8      	b.n	8004758 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dbe8      	blt.n	8004582 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fe f9ad 	bl	8002910 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	6992      	ldr	r2, [r2, #24]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	ea02 0103 	and.w	r1, r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	409a      	lsls	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	21ff      	movs	r1, #255	; 0xff
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	ea02 0103 	and.w	r1, r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	409a      	lsls	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d11d      	bne.n	800465e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	221f      	movs	r2, #31
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4013      	ands	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2207      	movs	r2, #7
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4013      	ands	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d102      	bne.n	8004688 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e00f      	b.n	80046a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d102      	bne.n	8004696 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004690:	2301      	movs	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e008      	b.n	80046a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800469e:	2301      	movs	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e001      	b.n	80046a8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4013      	ands	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	22c0      	movs	r2, #192	; 0xc0
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43da      	mvns	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20008000 	.word	0x20008000

08004764 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800476c:	f7fe f8c4 	bl	80028f8 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e316      	b.n	8004daa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a66      	ldr	r2, [pc, #408]	; (800491c <HAL_DMA_Init+0x1b8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d04a      	beq.n	800481c <HAL_DMA_Init+0xb8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a65      	ldr	r2, [pc, #404]	; (8004920 <HAL_DMA_Init+0x1bc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d045      	beq.n	800481c <HAL_DMA_Init+0xb8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a63      	ldr	r2, [pc, #396]	; (8004924 <HAL_DMA_Init+0x1c0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d040      	beq.n	800481c <HAL_DMA_Init+0xb8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a62      	ldr	r2, [pc, #392]	; (8004928 <HAL_DMA_Init+0x1c4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d03b      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_DMA_Init+0x1c8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d036      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a5f      	ldr	r2, [pc, #380]	; (8004930 <HAL_DMA_Init+0x1cc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d031      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5d      	ldr	r2, [pc, #372]	; (8004934 <HAL_DMA_Init+0x1d0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d02c      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <HAL_DMA_Init+0x1d4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d027      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5a      	ldr	r2, [pc, #360]	; (800493c <HAL_DMA_Init+0x1d8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a59      	ldr	r2, [pc, #356]	; (8004940 <HAL_DMA_Init+0x1dc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d01d      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <HAL_DMA_Init+0x1e0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a56      	ldr	r2, [pc, #344]	; (8004948 <HAL_DMA_Init+0x1e4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a54      	ldr	r2, [pc, #336]	; (800494c <HAL_DMA_Init+0x1e8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_DMA_Init+0xb8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a53      	ldr	r2, [pc, #332]	; (8004950 <HAL_DMA_Init+0x1ec>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_DMA_Init+0xb8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a51      	ldr	r2, [pc, #324]	; (8004954 <HAL_DMA_Init+0x1f0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_DMA_Init+0xb8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a50      	ldr	r2, [pc, #320]	; (8004958 <HAL_DMA_Init+0x1f4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_DMA_Init+0xbc>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_DMA_Init+0xbe>
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 813b 	beq.w	8004a9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a37      	ldr	r2, [pc, #220]	; (800491c <HAL_DMA_Init+0x1b8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d04a      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a36      	ldr	r2, [pc, #216]	; (8004920 <HAL_DMA_Init+0x1bc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d045      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_DMA_Init+0x1c0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d040      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a33      	ldr	r2, [pc, #204]	; (8004928 <HAL_DMA_Init+0x1c4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d03b      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a31      	ldr	r2, [pc, #196]	; (800492c <HAL_DMA_Init+0x1c8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d036      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a30      	ldr	r2, [pc, #192]	; (8004930 <HAL_DMA_Init+0x1cc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d031      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2e      	ldr	r2, [pc, #184]	; (8004934 <HAL_DMA_Init+0x1d0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02c      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <HAL_DMA_Init+0x1d4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d027      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <HAL_DMA_Init+0x1d8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d022      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <HAL_DMA_Init+0x1dc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d01d      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a28      	ldr	r2, [pc, #160]	; (8004944 <HAL_DMA_Init+0x1e0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d018      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a27      	ldr	r2, [pc, #156]	; (8004948 <HAL_DMA_Init+0x1e4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a25      	ldr	r2, [pc, #148]	; (800494c <HAL_DMA_Init+0x1e8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a24      	ldr	r2, [pc, #144]	; (8004950 <HAL_DMA_Init+0x1ec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d009      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_DMA_Init+0x1f0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_DMA_Init+0x174>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <HAL_DMA_Init+0x1f4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <HAL_DMA_Init+0x186>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e007      	b.n	80048fa <HAL_DMA_Init+0x196>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048fa:	e02f      	b.n	800495c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048fc:	f7fd fffc 	bl	80028f8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b05      	cmp	r3, #5
 8004908:	d928      	bls.n	800495c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2203      	movs	r2, #3
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e246      	b.n	8004daa <HAL_DMA_Init+0x646>
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1c8      	bne.n	80048fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4b83      	ldr	r3, [pc, #524]	; (8004b84 <HAL_DMA_Init+0x420>)
 8004976:	4013      	ands	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004982:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d107      	bne.n	80049c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	4313      	orrs	r3, r2
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049c0:	4b71      	ldr	r3, [pc, #452]	; (8004b88 <HAL_DMA_Init+0x424>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <HAL_DMA_Init+0x428>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049cc:	d328      	bcc.n	8004a20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b28      	cmp	r3, #40	; 0x28
 80049d4:	d903      	bls.n	80049de <HAL_DMA_Init+0x27a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b2e      	cmp	r3, #46	; 0x2e
 80049dc:	d917      	bls.n	8004a0e <HAL_DMA_Init+0x2aa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b3e      	cmp	r3, #62	; 0x3e
 80049e4:	d903      	bls.n	80049ee <HAL_DMA_Init+0x28a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b42      	cmp	r3, #66	; 0x42
 80049ec:	d90f      	bls.n	8004a0e <HAL_DMA_Init+0x2aa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b46      	cmp	r3, #70	; 0x46
 80049f4:	d903      	bls.n	80049fe <HAL_DMA_Init+0x29a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b48      	cmp	r3, #72	; 0x48
 80049fc:	d907      	bls.n	8004a0e <HAL_DMA_Init+0x2aa>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b4e      	cmp	r3, #78	; 0x4e
 8004a04:	d905      	bls.n	8004a12 <HAL_DMA_Init+0x2ae>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b52      	cmp	r3, #82	; 0x52
 8004a0c:	d801      	bhi.n	8004a12 <HAL_DMA_Init+0x2ae>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_DMA_Init+0x2b0>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d117      	bne.n	8004a7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 fb33 	bl	80070c8 <DMA_CheckFifoParam>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2240      	movs	r2, #64	; 0x40
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e197      	b.n	8004daa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f002 fa6e 	bl	8006f64 <DMA_CalcBaseAndBitshift>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	223f      	movs	r2, #63	; 0x3f
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e0cd      	b.n	8004c3a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <HAL_DMA_Init+0x42c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d022      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a39      	ldr	r2, [pc, #228]	; (8004b94 <HAL_DMA_Init+0x430>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01d      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <HAL_DMA_Init+0x434>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d018      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a36      	ldr	r2, [pc, #216]	; (8004b9c <HAL_DMA_Init+0x438>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a35      	ldr	r2, [pc, #212]	; (8004ba0 <HAL_DMA_Init+0x43c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00e      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a33      	ldr	r2, [pc, #204]	; (8004ba4 <HAL_DMA_Init+0x440>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d009      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <HAL_DMA_Init+0x444>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_DMA_Init+0x38a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <HAL_DMA_Init+0x448>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_DMA_Init+0x38e>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_DMA_Init+0x390>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8097 	beq.w	8004c28 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <HAL_DMA_Init+0x42c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d021      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <HAL_DMA_Init+0x430>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01c      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <HAL_DMA_Init+0x434>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d017      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <HAL_DMA_Init+0x438>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d012      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <HAL_DMA_Init+0x43c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00d      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <HAL_DMA_Init+0x440>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d008      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <HAL_DMA_Init+0x444>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <HAL_DMA_Init+0x3e4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a19      	ldr	r2, [pc, #100]	; (8004bac <HAL_DMA_Init+0x448>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_DMA_Init+0x44c>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d020      	beq.n	8004bb4 <HAL_DMA_Init+0x450>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d102      	bne.n	8004b80 <HAL_DMA_Init+0x41c>
 8004b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b7e:	e01a      	b.n	8004bb6 <HAL_DMA_Init+0x452>
 8004b80:	2300      	movs	r3, #0
 8004b82:	e018      	b.n	8004bb6 <HAL_DMA_Init+0x452>
 8004b84:	fe10803f 	.word	0xfe10803f
 8004b88:	5c001000 	.word	0x5c001000
 8004b8c:	ffff0000 	.word	0xffff0000
 8004b90:	58025408 	.word	0x58025408
 8004b94:	5802541c 	.word	0x5802541c
 8004b98:	58025430 	.word	0x58025430
 8004b9c:	58025444 	.word	0x58025444
 8004ba0:	58025458 	.word	0x58025458
 8004ba4:	5802546c 	.word	0x5802546c
 8004ba8:	58025480 	.word	0x58025480
 8004bac:	58025494 	.word	0x58025494
 8004bb0:	fffe000f 	.word	0xfffe000f
 8004bb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004be4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b6e      	ldr	r3, [pc, #440]	; (8004db4 <HAL_DMA_Init+0x650>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4a6e      	ldr	r2, [pc, #440]	; (8004db8 <HAL_DMA_Init+0x654>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	009a      	lsls	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f002 f9a9 	bl	8006f64 <DMA_CalcBaseAndBitshift>
 8004c12:	4603      	mov	r3, r0
 8004c14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2201      	movs	r2, #1
 8004c20:	409a      	lsls	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	e008      	b.n	8004c3a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2203      	movs	r2, #3
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0b7      	b.n	8004daa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a5f      	ldr	r2, [pc, #380]	; (8004dbc <HAL_DMA_Init+0x658>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d072      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5d      	ldr	r2, [pc, #372]	; (8004dc0 <HAL_DMA_Init+0x65c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d06d      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5c      	ldr	r2, [pc, #368]	; (8004dc4 <HAL_DMA_Init+0x660>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d068      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a5a      	ldr	r2, [pc, #360]	; (8004dc8 <HAL_DMA_Init+0x664>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d063      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a59      	ldr	r2, [pc, #356]	; (8004dcc <HAL_DMA_Init+0x668>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d05e      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a57      	ldr	r2, [pc, #348]	; (8004dd0 <HAL_DMA_Init+0x66c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d059      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a56      	ldr	r2, [pc, #344]	; (8004dd4 <HAL_DMA_Init+0x670>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d054      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a54      	ldr	r2, [pc, #336]	; (8004dd8 <HAL_DMA_Init+0x674>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d04f      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a53      	ldr	r2, [pc, #332]	; (8004ddc <HAL_DMA_Init+0x678>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d04a      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a51      	ldr	r2, [pc, #324]	; (8004de0 <HAL_DMA_Init+0x67c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d045      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a50      	ldr	r2, [pc, #320]	; (8004de4 <HAL_DMA_Init+0x680>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d040      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a4e      	ldr	r2, [pc, #312]	; (8004de8 <HAL_DMA_Init+0x684>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d03b      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a4d      	ldr	r2, [pc, #308]	; (8004dec <HAL_DMA_Init+0x688>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d036      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a4b      	ldr	r2, [pc, #300]	; (8004df0 <HAL_DMA_Init+0x68c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <HAL_DMA_Init+0x690>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02c      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a48      	ldr	r2, [pc, #288]	; (8004df8 <HAL_DMA_Init+0x694>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d027      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a47      	ldr	r2, [pc, #284]	; (8004dfc <HAL_DMA_Init+0x698>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a45      	ldr	r2, [pc, #276]	; (8004e00 <HAL_DMA_Init+0x69c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a44      	ldr	r2, [pc, #272]	; (8004e04 <HAL_DMA_Init+0x6a0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a42      	ldr	r2, [pc, #264]	; (8004e08 <HAL_DMA_Init+0x6a4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a41      	ldr	r2, [pc, #260]	; (8004e0c <HAL_DMA_Init+0x6a8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3f      	ldr	r2, [pc, #252]	; (8004e10 <HAL_DMA_Init+0x6ac>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3e      	ldr	r2, [pc, #248]	; (8004e14 <HAL_DMA_Init+0x6b0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_DMA_Init+0x5c6>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a3c      	ldr	r2, [pc, #240]	; (8004e18 <HAL_DMA_Init+0x6b4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_DMA_Init+0x5ca>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_DMA_Init+0x5cc>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d032      	beq.n	8004d9a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f002 fa43 	bl	80071c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d102      	bne.n	8004d48 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_DMA_Init+0x624>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d80c      	bhi.n	8004d88 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fac0 	bl	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	e008      	b.n	8004d9a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	a7fdabf8 	.word	0xa7fdabf8
 8004db8:	cccccccd 	.word	0xcccccccd
 8004dbc:	40020010 	.word	0x40020010
 8004dc0:	40020028 	.word	0x40020028
 8004dc4:	40020040 	.word	0x40020040
 8004dc8:	40020058 	.word	0x40020058
 8004dcc:	40020070 	.word	0x40020070
 8004dd0:	40020088 	.word	0x40020088
 8004dd4:	400200a0 	.word	0x400200a0
 8004dd8:	400200b8 	.word	0x400200b8
 8004ddc:	40020410 	.word	0x40020410
 8004de0:	40020428 	.word	0x40020428
 8004de4:	40020440 	.word	0x40020440
 8004de8:	40020458 	.word	0x40020458
 8004dec:	40020470 	.word	0x40020470
 8004df0:	40020488 	.word	0x40020488
 8004df4:	400204a0 	.word	0x400204a0
 8004df8:	400204b8 	.word	0x400204b8
 8004dfc:	58025408 	.word	0x58025408
 8004e00:	5802541c 	.word	0x5802541c
 8004e04:	58025430 	.word	0x58025430
 8004e08:	58025444 	.word	0x58025444
 8004e0c:	58025458 	.word	0x58025458
 8004e10:	5802546c 	.word	0x5802546c
 8004e14:	58025480 	.word	0x58025480
 8004e18:	58025494 	.word	0x58025494

08004e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e226      	b.n	8005286 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_DMA_Start_IT+0x2a>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e21f      	b.n	8005286 <HAL_DMA_Start_IT+0x46a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	f040 820a 	bne.w	8005270 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a68      	ldr	r2, [pc, #416]	; (8005010 <HAL_DMA_Start_IT+0x1f4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a66      	ldr	r2, [pc, #408]	; (8005014 <HAL_DMA_Start_IT+0x1f8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a65      	ldr	r2, [pc, #404]	; (8005018 <HAL_DMA_Start_IT+0x1fc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a63      	ldr	r2, [pc, #396]	; (800501c <HAL_DMA_Start_IT+0x200>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a62      	ldr	r2, [pc, #392]	; (8005020 <HAL_DMA_Start_IT+0x204>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a60      	ldr	r2, [pc, #384]	; (8005024 <HAL_DMA_Start_IT+0x208>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a5f      	ldr	r2, [pc, #380]	; (8005028 <HAL_DMA_Start_IT+0x20c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a5d      	ldr	r2, [pc, #372]	; (800502c <HAL_DMA_Start_IT+0x210>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a5c      	ldr	r2, [pc, #368]	; (8005030 <HAL_DMA_Start_IT+0x214>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a5a      	ldr	r2, [pc, #360]	; (8005034 <HAL_DMA_Start_IT+0x218>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a59      	ldr	r2, [pc, #356]	; (8005038 <HAL_DMA_Start_IT+0x21c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a57      	ldr	r2, [pc, #348]	; (800503c <HAL_DMA_Start_IT+0x220>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a56      	ldr	r2, [pc, #344]	; (8005040 <HAL_DMA_Start_IT+0x224>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a54      	ldr	r2, [pc, #336]	; (8005044 <HAL_DMA_Start_IT+0x228>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a53      	ldr	r2, [pc, #332]	; (8005048 <HAL_DMA_Start_IT+0x22c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_Start_IT+0xee>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a51      	ldr	r2, [pc, #324]	; (800504c <HAL_DMA_Start_IT+0x230>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <HAL_DMA_Start_IT+0x100>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e007      	b.n	8004f2c <HAL_DMA_Start_IT+0x110>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f001 fe6a 	bl	8006c0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a34      	ldr	r2, [pc, #208]	; (8005010 <HAL_DMA_Start_IT+0x1f4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d04a      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a33      	ldr	r2, [pc, #204]	; (8005014 <HAL_DMA_Start_IT+0x1f8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d045      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a31      	ldr	r2, [pc, #196]	; (8005018 <HAL_DMA_Start_IT+0x1fc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d040      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_DMA_Start_IT+0x200>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d03b      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <HAL_DMA_Start_IT+0x204>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d036      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <HAL_DMA_Start_IT+0x208>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d031      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <HAL_DMA_Start_IT+0x20c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d02c      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2a      	ldr	r2, [pc, #168]	; (800502c <HAL_DMA_Start_IT+0x210>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d027      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <HAL_DMA_Start_IT+0x214>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d022      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_DMA_Start_IT+0x218>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d01d      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <HAL_DMA_Start_IT+0x21c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d018      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	; (800503c <HAL_DMA_Start_IT+0x220>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <HAL_DMA_Start_IT+0x224>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00e      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_DMA_Start_IT+0x228>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_DMA_Start_IT+0x22c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x1bc>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_DMA_Start_IT+0x230>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_DMA_Start_IT+0x1c0>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_DMA_Start_IT+0x1c2>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d036      	beq.n	8005050 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 021e 	bic.w	r2, r3, #30
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0216 	orr.w	r2, r2, #22
 8004ff4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d03e      	beq.n	800507c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0208 	orr.w	r2, r2, #8
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e035      	b.n	800507c <HAL_DMA_Start_IT+0x260>
 8005010:	40020010 	.word	0x40020010
 8005014:	40020028 	.word	0x40020028
 8005018:	40020040 	.word	0x40020040
 800501c:	40020058 	.word	0x40020058
 8005020:	40020070 	.word	0x40020070
 8005024:	40020088 	.word	0x40020088
 8005028:	400200a0 	.word	0x400200a0
 800502c:	400200b8 	.word	0x400200b8
 8005030:	40020410 	.word	0x40020410
 8005034:	40020428 	.word	0x40020428
 8005038:	40020440 	.word	0x40020440
 800503c:	40020458 	.word	0x40020458
 8005040:	40020470 	.word	0x40020470
 8005044:	40020488 	.word	0x40020488
 8005048:	400204a0 	.word	0x400204a0
 800504c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 020e 	bic.w	r2, r3, #14
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 020a 	orr.w	r2, r2, #10
 8005062:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0204 	orr.w	r2, r2, #4
 800507a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a83      	ldr	r2, [pc, #524]	; (8005290 <HAL_DMA_Start_IT+0x474>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d072      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a82      	ldr	r2, [pc, #520]	; (8005294 <HAL_DMA_Start_IT+0x478>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d06d      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a80      	ldr	r2, [pc, #512]	; (8005298 <HAL_DMA_Start_IT+0x47c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d068      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7f      	ldr	r2, [pc, #508]	; (800529c <HAL_DMA_Start_IT+0x480>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d063      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a7d      	ldr	r2, [pc, #500]	; (80052a0 <HAL_DMA_Start_IT+0x484>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d05e      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7c      	ldr	r2, [pc, #496]	; (80052a4 <HAL_DMA_Start_IT+0x488>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d059      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7a      	ldr	r2, [pc, #488]	; (80052a8 <HAL_DMA_Start_IT+0x48c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d054      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a79      	ldr	r2, [pc, #484]	; (80052ac <HAL_DMA_Start_IT+0x490>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d04f      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a77      	ldr	r2, [pc, #476]	; (80052b0 <HAL_DMA_Start_IT+0x494>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d04a      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a76      	ldr	r2, [pc, #472]	; (80052b4 <HAL_DMA_Start_IT+0x498>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d045      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a74      	ldr	r2, [pc, #464]	; (80052b8 <HAL_DMA_Start_IT+0x49c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d040      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a73      	ldr	r2, [pc, #460]	; (80052bc <HAL_DMA_Start_IT+0x4a0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d03b      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <HAL_DMA_Start_IT+0x4a4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d036      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a70      	ldr	r2, [pc, #448]	; (80052c4 <HAL_DMA_Start_IT+0x4a8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d031      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a6e      	ldr	r2, [pc, #440]	; (80052c8 <HAL_DMA_Start_IT+0x4ac>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02c      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a6d      	ldr	r2, [pc, #436]	; (80052cc <HAL_DMA_Start_IT+0x4b0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d027      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a6b      	ldr	r2, [pc, #428]	; (80052d0 <HAL_DMA_Start_IT+0x4b4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6a      	ldr	r2, [pc, #424]	; (80052d4 <HAL_DMA_Start_IT+0x4b8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01d      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a68      	ldr	r2, [pc, #416]	; (80052d8 <HAL_DMA_Start_IT+0x4bc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a67      	ldr	r2, [pc, #412]	; (80052dc <HAL_DMA_Start_IT+0x4c0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_DMA_Start_IT+0x4c4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a64      	ldr	r2, [pc, #400]	; (80052e4 <HAL_DMA_Start_IT+0x4c8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a62      	ldr	r2, [pc, #392]	; (80052e8 <HAL_DMA_Start_IT+0x4cc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_DMA_Start_IT+0x350>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a61      	ldr	r2, [pc, #388]	; (80052ec <HAL_DMA_Start_IT+0x4d0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Start_IT+0x354>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_DMA_Start_IT+0x356>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01a      	beq.n	80051ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a37      	ldr	r2, [pc, #220]	; (8005290 <HAL_DMA_Start_IT+0x474>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d04a      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a36      	ldr	r2, [pc, #216]	; (8005294 <HAL_DMA_Start_IT+0x478>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d045      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a34      	ldr	r2, [pc, #208]	; (8005298 <HAL_DMA_Start_IT+0x47c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d040      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a33      	ldr	r2, [pc, #204]	; (800529c <HAL_DMA_Start_IT+0x480>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d03b      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a31      	ldr	r2, [pc, #196]	; (80052a0 <HAL_DMA_Start_IT+0x484>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d036      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <HAL_DMA_Start_IT+0x488>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d031      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <HAL_DMA_Start_IT+0x48c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02c      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <HAL_DMA_Start_IT+0x490>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d027      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <HAL_DMA_Start_IT+0x494>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <HAL_DMA_Start_IT+0x498>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d01d      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <HAL_DMA_Start_IT+0x49c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a27      	ldr	r2, [pc, #156]	; (80052bc <HAL_DMA_Start_IT+0x4a0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a25      	ldr	r2, [pc, #148]	; (80052c0 <HAL_DMA_Start_IT+0x4a4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a24      	ldr	r2, [pc, #144]	; (80052c4 <HAL_DMA_Start_IT+0x4a8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_DMA_Start_IT+0x4ac>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_DMA_Start_IT+0x430>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a21      	ldr	r2, [pc, #132]	; (80052cc <HAL_DMA_Start_IT+0x4b0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <HAL_DMA_Start_IT+0x442>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e012      	b.n	8005284 <HAL_DMA_Start_IT+0x468>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	e009      	b.n	8005284 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40020010 	.word	0x40020010
 8005294:	40020028 	.word	0x40020028
 8005298:	40020040 	.word	0x40020040
 800529c:	40020058 	.word	0x40020058
 80052a0:	40020070 	.word	0x40020070
 80052a4:	40020088 	.word	0x40020088
 80052a8:	400200a0 	.word	0x400200a0
 80052ac:	400200b8 	.word	0x400200b8
 80052b0:	40020410 	.word	0x40020410
 80052b4:	40020428 	.word	0x40020428
 80052b8:	40020440 	.word	0x40020440
 80052bc:	40020458 	.word	0x40020458
 80052c0:	40020470 	.word	0x40020470
 80052c4:	40020488 	.word	0x40020488
 80052c8:	400204a0 	.word	0x400204a0
 80052cc:	400204b8 	.word	0x400204b8
 80052d0:	58025408 	.word	0x58025408
 80052d4:	5802541c 	.word	0x5802541c
 80052d8:	58025430 	.word	0x58025430
 80052dc:	58025444 	.word	0x58025444
 80052e0:	58025458 	.word	0x58025458
 80052e4:	5802546c 	.word	0x5802546c
 80052e8:	58025480 	.word	0x58025480
 80052ec:	58025494 	.word	0x58025494

080052f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052f8:	f7fd fafe 	bl	80028f8 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e2dc      	b.n	80058c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d008      	beq.n	8005326 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e2cd      	b.n	80058c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a76      	ldr	r2, [pc, #472]	; (8005504 <HAL_DMA_Abort+0x214>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d04a      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a74      	ldr	r2, [pc, #464]	; (8005508 <HAL_DMA_Abort+0x218>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d045      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a73      	ldr	r2, [pc, #460]	; (800550c <HAL_DMA_Abort+0x21c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d040      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a71      	ldr	r2, [pc, #452]	; (8005510 <HAL_DMA_Abort+0x220>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d03b      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a70      	ldr	r2, [pc, #448]	; (8005514 <HAL_DMA_Abort+0x224>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d036      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a6e      	ldr	r2, [pc, #440]	; (8005518 <HAL_DMA_Abort+0x228>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d031      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6d      	ldr	r2, [pc, #436]	; (800551c <HAL_DMA_Abort+0x22c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d02c      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6b      	ldr	r2, [pc, #428]	; (8005520 <HAL_DMA_Abort+0x230>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d027      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6a      	ldr	r2, [pc, #424]	; (8005524 <HAL_DMA_Abort+0x234>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a68      	ldr	r2, [pc, #416]	; (8005528 <HAL_DMA_Abort+0x238>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a67      	ldr	r2, [pc, #412]	; (800552c <HAL_DMA_Abort+0x23c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a65      	ldr	r2, [pc, #404]	; (8005530 <HAL_DMA_Abort+0x240>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a64      	ldr	r2, [pc, #400]	; (8005534 <HAL_DMA_Abort+0x244>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a62      	ldr	r2, [pc, #392]	; (8005538 <HAL_DMA_Abort+0x248>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a61      	ldr	r2, [pc, #388]	; (800553c <HAL_DMA_Abort+0x24c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_DMA_Abort+0xd6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5f      	ldr	r2, [pc, #380]	; (8005540 <HAL_DMA_Abort+0x250>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <HAL_DMA_Abort+0xda>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_DMA_Abort+0xdc>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d013      	beq.n	80053f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 021e 	bic.w	r2, r2, #30
 80053de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e00a      	b.n	800540e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 020e 	bic.w	r2, r2, #14
 8005406:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3c      	ldr	r2, [pc, #240]	; (8005504 <HAL_DMA_Abort+0x214>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d072      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a3a      	ldr	r2, [pc, #232]	; (8005508 <HAL_DMA_Abort+0x218>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d06d      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a39      	ldr	r2, [pc, #228]	; (800550c <HAL_DMA_Abort+0x21c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d068      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a37      	ldr	r2, [pc, #220]	; (8005510 <HAL_DMA_Abort+0x220>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d063      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a36      	ldr	r2, [pc, #216]	; (8005514 <HAL_DMA_Abort+0x224>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d05e      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a34      	ldr	r2, [pc, #208]	; (8005518 <HAL_DMA_Abort+0x228>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d059      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a33      	ldr	r2, [pc, #204]	; (800551c <HAL_DMA_Abort+0x22c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d054      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a31      	ldr	r2, [pc, #196]	; (8005520 <HAL_DMA_Abort+0x230>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d04f      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a30      	ldr	r2, [pc, #192]	; (8005524 <HAL_DMA_Abort+0x234>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d04a      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2e      	ldr	r2, [pc, #184]	; (8005528 <HAL_DMA_Abort+0x238>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d045      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2d      	ldr	r2, [pc, #180]	; (800552c <HAL_DMA_Abort+0x23c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d040      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <HAL_DMA_Abort+0x240>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d03b      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <HAL_DMA_Abort+0x244>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d036      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <HAL_DMA_Abort+0x248>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d031      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a27      	ldr	r2, [pc, #156]	; (800553c <HAL_DMA_Abort+0x24c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d02c      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <HAL_DMA_Abort+0x250>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d027      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a24      	ldr	r2, [pc, #144]	; (8005544 <HAL_DMA_Abort+0x254>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d022      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a22      	ldr	r2, [pc, #136]	; (8005548 <HAL_DMA_Abort+0x258>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01d      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	; (800554c <HAL_DMA_Abort+0x25c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d018      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_DMA_Abort+0x260>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <HAL_DMA_Abort+0x264>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_DMA_Abort+0x268>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_DMA_Abort+0x26c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_DMA_Abort+0x20e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_DMA_Abort+0x270>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d132      	bne.n	8005564 <HAL_DMA_Abort+0x274>
 80054fe:	2301      	movs	r3, #1
 8005500:	e031      	b.n	8005566 <HAL_DMA_Abort+0x276>
 8005502:	bf00      	nop
 8005504:	40020010 	.word	0x40020010
 8005508:	40020028 	.word	0x40020028
 800550c:	40020040 	.word	0x40020040
 8005510:	40020058 	.word	0x40020058
 8005514:	40020070 	.word	0x40020070
 8005518:	40020088 	.word	0x40020088
 800551c:	400200a0 	.word	0x400200a0
 8005520:	400200b8 	.word	0x400200b8
 8005524:	40020410 	.word	0x40020410
 8005528:	40020428 	.word	0x40020428
 800552c:	40020440 	.word	0x40020440
 8005530:	40020458 	.word	0x40020458
 8005534:	40020470 	.word	0x40020470
 8005538:	40020488 	.word	0x40020488
 800553c:	400204a0 	.word	0x400204a0
 8005540:	400204b8 	.word	0x400204b8
 8005544:	58025408 	.word	0x58025408
 8005548:	5802541c 	.word	0x5802541c
 800554c:	58025430 	.word	0x58025430
 8005550:	58025444 	.word	0x58025444
 8005554:	58025458 	.word	0x58025458
 8005558:	5802546c 	.word	0x5802546c
 800555c:	58025480 	.word	0x58025480
 8005560:	58025494 	.word	0x58025494
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005578:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6d      	ldr	r2, [pc, #436]	; (8005734 <HAL_DMA_Abort+0x444>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04a      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6b      	ldr	r2, [pc, #428]	; (8005738 <HAL_DMA_Abort+0x448>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6a      	ldr	r2, [pc, #424]	; (800573c <HAL_DMA_Abort+0x44c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d040      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a68      	ldr	r2, [pc, #416]	; (8005740 <HAL_DMA_Abort+0x450>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d03b      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a67      	ldr	r2, [pc, #412]	; (8005744 <HAL_DMA_Abort+0x454>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d036      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a65      	ldr	r2, [pc, #404]	; (8005748 <HAL_DMA_Abort+0x458>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d031      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a64      	ldr	r2, [pc, #400]	; (800574c <HAL_DMA_Abort+0x45c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02c      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a62      	ldr	r2, [pc, #392]	; (8005750 <HAL_DMA_Abort+0x460>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d027      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a61      	ldr	r2, [pc, #388]	; (8005754 <HAL_DMA_Abort+0x464>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a5f      	ldr	r2, [pc, #380]	; (8005758 <HAL_DMA_Abort+0x468>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a5e      	ldr	r2, [pc, #376]	; (800575c <HAL_DMA_Abort+0x46c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a5c      	ldr	r2, [pc, #368]	; (8005760 <HAL_DMA_Abort+0x470>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a5b      	ldr	r2, [pc, #364]	; (8005764 <HAL_DMA_Abort+0x474>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a59      	ldr	r2, [pc, #356]	; (8005768 <HAL_DMA_Abort+0x478>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a58      	ldr	r2, [pc, #352]	; (800576c <HAL_DMA_Abort+0x47c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_DMA_Abort+0x32a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a56      	ldr	r2, [pc, #344]	; (8005770 <HAL_DMA_Abort+0x480>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <HAL_DMA_Abort+0x33c>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e007      	b.n	800563c <HAL_DMA_Abort+0x34c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800563c:	e013      	b.n	8005666 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800563e:	f7fd f95b 	bl	80028f8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b05      	cmp	r3, #5
 800564a:	d90c      	bls.n	8005666 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2203      	movs	r2, #3
 8005656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e12d      	b.n	80058c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <HAL_DMA_Abort+0x444>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d04a      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a2d      	ldr	r2, [pc, #180]	; (8005738 <HAL_DMA_Abort+0x448>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d045      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2c      	ldr	r2, [pc, #176]	; (800573c <HAL_DMA_Abort+0x44c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d040      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <HAL_DMA_Abort+0x450>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d03b      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a29      	ldr	r2, [pc, #164]	; (8005744 <HAL_DMA_Abort+0x454>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d036      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a27      	ldr	r2, [pc, #156]	; (8005748 <HAL_DMA_Abort+0x458>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a26      	ldr	r2, [pc, #152]	; (800574c <HAL_DMA_Abort+0x45c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d02c      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_DMA_Abort+0x460>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d027      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a23      	ldr	r2, [pc, #140]	; (8005754 <HAL_DMA_Abort+0x464>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a21      	ldr	r2, [pc, #132]	; (8005758 <HAL_DMA_Abort+0x468>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01d      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a20      	ldr	r2, [pc, #128]	; (800575c <HAL_DMA_Abort+0x46c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_DMA_Abort+0x470>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <HAL_DMA_Abort+0x474>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_DMA_Abort+0x478>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1a      	ldr	r2, [pc, #104]	; (800576c <HAL_DMA_Abort+0x47c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_DMA_Abort+0x422>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a18      	ldr	r2, [pc, #96]	; (8005770 <HAL_DMA_Abort+0x480>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_DMA_Abort+0x426>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_DMA_Abort+0x428>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02b      	beq.n	8005774 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	223f      	movs	r2, #63	; 0x3f
 800572c:	409a      	lsls	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	609a      	str	r2, [r3, #8]
 8005732:	e02a      	b.n	800578a <HAL_DMA_Abort+0x49a>
 8005734:	40020010 	.word	0x40020010
 8005738:	40020028 	.word	0x40020028
 800573c:	40020040 	.word	0x40020040
 8005740:	40020058 	.word	0x40020058
 8005744:	40020070 	.word	0x40020070
 8005748:	40020088 	.word	0x40020088
 800574c:	400200a0 	.word	0x400200a0
 8005750:	400200b8 	.word	0x400200b8
 8005754:	40020410 	.word	0x40020410
 8005758:	40020428 	.word	0x40020428
 800575c:	40020440 	.word	0x40020440
 8005760:	40020458 	.word	0x40020458
 8005764:	40020470 	.word	0x40020470
 8005768:	40020488 	.word	0x40020488
 800576c:	400204a0 	.word	0x400204a0
 8005770:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005778:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4f      	ldr	r2, [pc, #316]	; (80058cc <HAL_DMA_Abort+0x5dc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d072      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a4d      	ldr	r2, [pc, #308]	; (80058d0 <HAL_DMA_Abort+0x5e0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d06d      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4c      	ldr	r2, [pc, #304]	; (80058d4 <HAL_DMA_Abort+0x5e4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d068      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a4a      	ldr	r2, [pc, #296]	; (80058d8 <HAL_DMA_Abort+0x5e8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d063      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a49      	ldr	r2, [pc, #292]	; (80058dc <HAL_DMA_Abort+0x5ec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d05e      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a47      	ldr	r2, [pc, #284]	; (80058e0 <HAL_DMA_Abort+0x5f0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d059      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a46      	ldr	r2, [pc, #280]	; (80058e4 <HAL_DMA_Abort+0x5f4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d054      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a44      	ldr	r2, [pc, #272]	; (80058e8 <HAL_DMA_Abort+0x5f8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d04f      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a43      	ldr	r2, [pc, #268]	; (80058ec <HAL_DMA_Abort+0x5fc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d04a      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a41      	ldr	r2, [pc, #260]	; (80058f0 <HAL_DMA_Abort+0x600>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d045      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a40      	ldr	r2, [pc, #256]	; (80058f4 <HAL_DMA_Abort+0x604>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d040      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3e      	ldr	r2, [pc, #248]	; (80058f8 <HAL_DMA_Abort+0x608>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d03b      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <HAL_DMA_Abort+0x60c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d036      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3b      	ldr	r2, [pc, #236]	; (8005900 <HAL_DMA_Abort+0x610>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d031      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3a      	ldr	r2, [pc, #232]	; (8005904 <HAL_DMA_Abort+0x614>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d02c      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a38      	ldr	r2, [pc, #224]	; (8005908 <HAL_DMA_Abort+0x618>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d027      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a37      	ldr	r2, [pc, #220]	; (800590c <HAL_DMA_Abort+0x61c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a35      	ldr	r2, [pc, #212]	; (8005910 <HAL_DMA_Abort+0x620>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01d      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <HAL_DMA_Abort+0x624>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a32      	ldr	r2, [pc, #200]	; (8005918 <HAL_DMA_Abort+0x628>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a31      	ldr	r2, [pc, #196]	; (800591c <HAL_DMA_Abort+0x62c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2f      	ldr	r2, [pc, #188]	; (8005920 <HAL_DMA_Abort+0x630>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a2e      	ldr	r2, [pc, #184]	; (8005924 <HAL_DMA_Abort+0x634>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_DMA_Abort+0x58a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <HAL_DMA_Abort+0x638>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d101      	bne.n	800587e <HAL_DMA_Abort+0x58e>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_DMA_Abort+0x590>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d015      	beq.n	80058b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800588c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40020010 	.word	0x40020010
 80058d0:	40020028 	.word	0x40020028
 80058d4:	40020040 	.word	0x40020040
 80058d8:	40020058 	.word	0x40020058
 80058dc:	40020070 	.word	0x40020070
 80058e0:	40020088 	.word	0x40020088
 80058e4:	400200a0 	.word	0x400200a0
 80058e8:	400200b8 	.word	0x400200b8
 80058ec:	40020410 	.word	0x40020410
 80058f0:	40020428 	.word	0x40020428
 80058f4:	40020440 	.word	0x40020440
 80058f8:	40020458 	.word	0x40020458
 80058fc:	40020470 	.word	0x40020470
 8005900:	40020488 	.word	0x40020488
 8005904:	400204a0 	.word	0x400204a0
 8005908:	400204b8 	.word	0x400204b8
 800590c:	58025408 	.word	0x58025408
 8005910:	5802541c 	.word	0x5802541c
 8005914:	58025430 	.word	0x58025430
 8005918:	58025444 	.word	0x58025444
 800591c:	58025458 	.word	0x58025458
 8005920:	5802546c 	.word	0x5802546c
 8005924:	58025480 	.word	0x58025480
 8005928:	58025494 	.word	0x58025494

0800592c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e237      	b.n	8005dae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d004      	beq.n	8005954 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e22c      	b.n	8005dae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a5c      	ldr	r2, [pc, #368]	; (8005acc <HAL_DMA_Abort_IT+0x1a0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d04a      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5b      	ldr	r2, [pc, #364]	; (8005ad0 <HAL_DMA_Abort_IT+0x1a4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d045      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a59      	ldr	r2, [pc, #356]	; (8005ad4 <HAL_DMA_Abort_IT+0x1a8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d040      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_DMA_Abort_IT+0x1ac>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d03b      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a56      	ldr	r2, [pc, #344]	; (8005adc <HAL_DMA_Abort_IT+0x1b0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d036      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a55      	ldr	r2, [pc, #340]	; (8005ae0 <HAL_DMA_Abort_IT+0x1b4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d031      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a53      	ldr	r2, [pc, #332]	; (8005ae4 <HAL_DMA_Abort_IT+0x1b8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02c      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a52      	ldr	r2, [pc, #328]	; (8005ae8 <HAL_DMA_Abort_IT+0x1bc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d027      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a50      	ldr	r2, [pc, #320]	; (8005aec <HAL_DMA_Abort_IT+0x1c0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d022      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a4f      	ldr	r2, [pc, #316]	; (8005af0 <HAL_DMA_Abort_IT+0x1c4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01d      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a4d      	ldr	r2, [pc, #308]	; (8005af4 <HAL_DMA_Abort_IT+0x1c8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d018      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a4c      	ldr	r2, [pc, #304]	; (8005af8 <HAL_DMA_Abort_IT+0x1cc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <HAL_DMA_Abort_IT+0x1d0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a49      	ldr	r2, [pc, #292]	; (8005b00 <HAL_DMA_Abort_IT+0x1d4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a47      	ldr	r2, [pc, #284]	; (8005b04 <HAL_DMA_Abort_IT+0x1d8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a46      	ldr	r2, [pc, #280]	; (8005b08 <HAL_DMA_Abort_IT+0x1dc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Abort_IT+0xcc>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_DMA_Abort_IT+0xce>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8086 	beq.w	8005b0c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <HAL_DMA_Abort_IT+0x1a0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d04a      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2e      	ldr	r2, [pc, #184]	; (8005ad0 <HAL_DMA_Abort_IT+0x1a4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d045      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <HAL_DMA_Abort_IT+0x1a8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d040      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2b      	ldr	r2, [pc, #172]	; (8005ad8 <HAL_DMA_Abort_IT+0x1ac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d03b      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a29      	ldr	r2, [pc, #164]	; (8005adc <HAL_DMA_Abort_IT+0x1b0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d036      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <HAL_DMA_Abort_IT+0x1b4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d031      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <HAL_DMA_Abort_IT+0x1b8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d02c      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <HAL_DMA_Abort_IT+0x1bc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d027      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	; (8005aec <HAL_DMA_Abort_IT+0x1c0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d022      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <HAL_DMA_Abort_IT+0x1c4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d01d      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <HAL_DMA_Abort_IT+0x1c8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d018      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_DMA_Abort_IT+0x1cc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_DMA_Abort_IT+0x1d0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00e      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_DMA_Abort_IT+0x1d4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1a      	ldr	r2, [pc, #104]	; (8005b04 <HAL_DMA_Abort_IT+0x1d8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x17c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_DMA_Abort_IT+0x1dc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <HAL_DMA_Abort_IT+0x18e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e178      	b.n	8005dac <HAL_DMA_Abort_IT+0x480>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	e16f      	b.n	8005dac <HAL_DMA_Abort_IT+0x480>
 8005acc:	40020010 	.word	0x40020010
 8005ad0:	40020028 	.word	0x40020028
 8005ad4:	40020040 	.word	0x40020040
 8005ad8:	40020058 	.word	0x40020058
 8005adc:	40020070 	.word	0x40020070
 8005ae0:	40020088 	.word	0x40020088
 8005ae4:	400200a0 	.word	0x400200a0
 8005ae8:	400200b8 	.word	0x400200b8
 8005aec:	40020410 	.word	0x40020410
 8005af0:	40020428 	.word	0x40020428
 8005af4:	40020440 	.word	0x40020440
 8005af8:	40020458 	.word	0x40020458
 8005afc:	40020470 	.word	0x40020470
 8005b00:	40020488 	.word	0x40020488
 8005b04:	400204a0 	.word	0x400204a0
 8005b08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 020e 	bic.w	r2, r2, #14
 8005b1a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6c      	ldr	r2, [pc, #432]	; (8005cd4 <HAL_DMA_Abort_IT+0x3a8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d04a      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6b      	ldr	r2, [pc, #428]	; (8005cd8 <HAL_DMA_Abort_IT+0x3ac>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d045      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a69      	ldr	r2, [pc, #420]	; (8005cdc <HAL_DMA_Abort_IT+0x3b0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d040      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a68      	ldr	r2, [pc, #416]	; (8005ce0 <HAL_DMA_Abort_IT+0x3b4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d03b      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a66      	ldr	r2, [pc, #408]	; (8005ce4 <HAL_DMA_Abort_IT+0x3b8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d036      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_DMA_Abort_IT+0x3bc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d031      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a63      	ldr	r2, [pc, #396]	; (8005cec <HAL_DMA_Abort_IT+0x3c0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02c      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a62      	ldr	r2, [pc, #392]	; (8005cf0 <HAL_DMA_Abort_IT+0x3c4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d027      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a60      	ldr	r2, [pc, #384]	; (8005cf4 <HAL_DMA_Abort_IT+0x3c8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5f      	ldr	r2, [pc, #380]	; (8005cf8 <HAL_DMA_Abort_IT+0x3cc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d01d      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a5d      	ldr	r2, [pc, #372]	; (8005cfc <HAL_DMA_Abort_IT+0x3d0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5c      	ldr	r2, [pc, #368]	; (8005d00 <HAL_DMA_Abort_IT+0x3d4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5a      	ldr	r2, [pc, #360]	; (8005d04 <HAL_DMA_Abort_IT+0x3d8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a59      	ldr	r2, [pc, #356]	; (8005d08 <HAL_DMA_Abort_IT+0x3dc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a57      	ldr	r2, [pc, #348]	; (8005d0c <HAL_DMA_Abort_IT+0x3e0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x290>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a56      	ldr	r2, [pc, #344]	; (8005d10 <HAL_DMA_Abort_IT+0x3e4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d108      	bne.n	8005bce <HAL_DMA_Abort_IT+0x2a2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e007      	b.n	8005bde <HAL_DMA_Abort_IT+0x2b2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a3c      	ldr	r2, [pc, #240]	; (8005cd4 <HAL_DMA_Abort_IT+0x3a8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d072      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a3a      	ldr	r2, [pc, #232]	; (8005cd8 <HAL_DMA_Abort_IT+0x3ac>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d06d      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a39      	ldr	r2, [pc, #228]	; (8005cdc <HAL_DMA_Abort_IT+0x3b0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d068      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a37      	ldr	r2, [pc, #220]	; (8005ce0 <HAL_DMA_Abort_IT+0x3b4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d063      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a36      	ldr	r2, [pc, #216]	; (8005ce4 <HAL_DMA_Abort_IT+0x3b8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d05e      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a34      	ldr	r2, [pc, #208]	; (8005ce8 <HAL_DMA_Abort_IT+0x3bc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d059      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a33      	ldr	r2, [pc, #204]	; (8005cec <HAL_DMA_Abort_IT+0x3c0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d054      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a31      	ldr	r2, [pc, #196]	; (8005cf0 <HAL_DMA_Abort_IT+0x3c4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d04f      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a30      	ldr	r2, [pc, #192]	; (8005cf4 <HAL_DMA_Abort_IT+0x3c8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d04a      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <HAL_DMA_Abort_IT+0x3cc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d045      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2d      	ldr	r2, [pc, #180]	; (8005cfc <HAL_DMA_Abort_IT+0x3d0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d040      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <HAL_DMA_Abort_IT+0x3d4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d03b      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <HAL_DMA_Abort_IT+0x3d8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d036      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a28      	ldr	r2, [pc, #160]	; (8005d08 <HAL_DMA_Abort_IT+0x3dc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d031      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a27      	ldr	r2, [pc, #156]	; (8005d0c <HAL_DMA_Abort_IT+0x3e0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d02c      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a25      	ldr	r2, [pc, #148]	; (8005d10 <HAL_DMA_Abort_IT+0x3e4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d027      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a24      	ldr	r2, [pc, #144]	; (8005d14 <HAL_DMA_Abort_IT+0x3e8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <HAL_DMA_Abort_IT+0x3ec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01d      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a21      	ldr	r2, [pc, #132]	; (8005d1c <HAL_DMA_Abort_IT+0x3f0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <HAL_DMA_Abort_IT+0x3f4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <HAL_DMA_Abort_IT+0x3f8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <HAL_DMA_Abort_IT+0x3fc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <HAL_DMA_Abort_IT+0x400>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_DMA_Abort_IT+0x3a2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <HAL_DMA_Abort_IT+0x404>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d132      	bne.n	8005d34 <HAL_DMA_Abort_IT+0x408>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e031      	b.n	8005d36 <HAL_DMA_Abort_IT+0x40a>
 8005cd2:	bf00      	nop
 8005cd4:	40020010 	.word	0x40020010
 8005cd8:	40020028 	.word	0x40020028
 8005cdc:	40020040 	.word	0x40020040
 8005ce0:	40020058 	.word	0x40020058
 8005ce4:	40020070 	.word	0x40020070
 8005ce8:	40020088 	.word	0x40020088
 8005cec:	400200a0 	.word	0x400200a0
 8005cf0:	400200b8 	.word	0x400200b8
 8005cf4:	40020410 	.word	0x40020410
 8005cf8:	40020428 	.word	0x40020428
 8005cfc:	40020440 	.word	0x40020440
 8005d00:	40020458 	.word	0x40020458
 8005d04:	40020470 	.word	0x40020470
 8005d08:	40020488 	.word	0x40020488
 8005d0c:	400204a0 	.word	0x400204a0
 8005d10:	400204b8 	.word	0x400204b8
 8005d14:	58025408 	.word	0x58025408
 8005d18:	5802541c 	.word	0x5802541c
 8005d1c:	58025430 	.word	0x58025430
 8005d20:	58025444 	.word	0x58025444
 8005d24:	58025458 	.word	0x58025458
 8005d28:	5802546c 	.word	0x5802546c
 8005d2c:	58025480 	.word	0x58025480
 8005d30:	58025494 	.word	0x58025494
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d028      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	2201      	movs	r2, #1
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop

08005db8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dc4:	4b67      	ldr	r3, [pc, #412]	; (8005f64 <HAL_DMA_IRQHandler+0x1ac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a67      	ldr	r2, [pc, #412]	; (8005f68 <HAL_DMA_IRQHandler+0x1b0>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	0a9b      	lsrs	r3, r3, #10
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5f      	ldr	r2, [pc, #380]	; (8005f6c <HAL_DMA_IRQHandler+0x1b4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a5d      	ldr	r2, [pc, #372]	; (8005f70 <HAL_DMA_IRQHandler+0x1b8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a5c      	ldr	r2, [pc, #368]	; (8005f74 <HAL_DMA_IRQHandler+0x1bc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a5a      	ldr	r2, [pc, #360]	; (8005f78 <HAL_DMA_IRQHandler+0x1c0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a59      	ldr	r2, [pc, #356]	; (8005f7c <HAL_DMA_IRQHandler+0x1c4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a57      	ldr	r2, [pc, #348]	; (8005f80 <HAL_DMA_IRQHandler+0x1c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a56      	ldr	r2, [pc, #344]	; (8005f84 <HAL_DMA_IRQHandler+0x1cc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a54      	ldr	r2, [pc, #336]	; (8005f88 <HAL_DMA_IRQHandler+0x1d0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a53      	ldr	r2, [pc, #332]	; (8005f8c <HAL_DMA_IRQHandler+0x1d4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a51      	ldr	r2, [pc, #324]	; (8005f90 <HAL_DMA_IRQHandler+0x1d8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a50      	ldr	r2, [pc, #320]	; (8005f94 <HAL_DMA_IRQHandler+0x1dc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a4e      	ldr	r2, [pc, #312]	; (8005f98 <HAL_DMA_IRQHandler+0x1e0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a4d      	ldr	r2, [pc, #308]	; (8005f9c <HAL_DMA_IRQHandler+0x1e4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a4b      	ldr	r2, [pc, #300]	; (8005fa0 <HAL_DMA_IRQHandler+0x1e8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	; (8005fa4 <HAL_DMA_IRQHandler+0x1ec>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xd2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a48      	ldr	r2, [pc, #288]	; (8005fa8 <HAL_DMA_IRQHandler+0x1f0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d101      	bne.n	8005e8e <HAL_DMA_IRQHandler+0xd6>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <HAL_DMA_IRQHandler+0xd8>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 842b 	beq.w	80066ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80a2 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2e      	ldr	r2, [pc, #184]	; (8005f6c <HAL_DMA_IRQHandler+0x1b4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2d      	ldr	r2, [pc, #180]	; (8005f70 <HAL_DMA_IRQHandler+0x1b8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2b      	ldr	r2, [pc, #172]	; (8005f74 <HAL_DMA_IRQHandler+0x1bc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2a      	ldr	r2, [pc, #168]	; (8005f78 <HAL_DMA_IRQHandler+0x1c0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a28      	ldr	r2, [pc, #160]	; (8005f7c <HAL_DMA_IRQHandler+0x1c4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a27      	ldr	r2, [pc, #156]	; (8005f80 <HAL_DMA_IRQHandler+0x1c8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a25      	ldr	r2, [pc, #148]	; (8005f84 <HAL_DMA_IRQHandler+0x1cc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a24      	ldr	r2, [pc, #144]	; (8005f88 <HAL_DMA_IRQHandler+0x1d0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a22      	ldr	r2, [pc, #136]	; (8005f8c <HAL_DMA_IRQHandler+0x1d4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <HAL_DMA_IRQHandler+0x1d8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <HAL_DMA_IRQHandler+0x1dc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <HAL_DMA_IRQHandler+0x1e0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_DMA_IRQHandler+0x1e4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <HAL_DMA_IRQHandler+0x1e8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <HAL_DMA_IRQHandler+0x1ec>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x194>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_DMA_IRQHandler+0x1f0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d12f      	bne.n	8005fac <HAL_DMA_IRQHandler+0x1f4>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	e02e      	b.n	8005fc0 <HAL_DMA_IRQHandler+0x208>
 8005f62:	bf00      	nop
 8005f64:	24000030 	.word	0x24000030
 8005f68:	1b4e81b5 	.word	0x1b4e81b5
 8005f6c:	40020010 	.word	0x40020010
 8005f70:	40020028 	.word	0x40020028
 8005f74:	40020040 	.word	0x40020040
 8005f78:	40020058 	.word	0x40020058
 8005f7c:	40020070 	.word	0x40020070
 8005f80:	40020088 	.word	0x40020088
 8005f84:	400200a0 	.word	0x400200a0
 8005f88:	400200b8 	.word	0x400200b8
 8005f8c:	40020410 	.word	0x40020410
 8005f90:	40020428 	.word	0x40020428
 8005f94:	40020440 	.word	0x40020440
 8005f98:	40020458 	.word	0x40020458
 8005f9c:	40020470 	.word	0x40020470
 8005fa0:	40020488 	.word	0x40020488
 8005fa4:	400204a0 	.word	0x400204a0
 8005fa8:	400204b8 	.word	0x400204b8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d015      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0204 	bic.w	r2, r2, #4
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	2208      	movs	r2, #8
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	f043 0201 	orr.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d06e      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a69      	ldr	r2, [pc, #420]	; (80061b0 <HAL_DMA_IRQHandler+0x3f8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d04a      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a67      	ldr	r2, [pc, #412]	; (80061b4 <HAL_DMA_IRQHandler+0x3fc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d045      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a66      	ldr	r2, [pc, #408]	; (80061b8 <HAL_DMA_IRQHandler+0x400>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d040      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a64      	ldr	r2, [pc, #400]	; (80061bc <HAL_DMA_IRQHandler+0x404>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d03b      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a63      	ldr	r2, [pc, #396]	; (80061c0 <HAL_DMA_IRQHandler+0x408>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d036      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a61      	ldr	r2, [pc, #388]	; (80061c4 <HAL_DMA_IRQHandler+0x40c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a60      	ldr	r2, [pc, #384]	; (80061c8 <HAL_DMA_IRQHandler+0x410>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d02c      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5e      	ldr	r2, [pc, #376]	; (80061cc <HAL_DMA_IRQHandler+0x414>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d027      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a5d      	ldr	r2, [pc, #372]	; (80061d0 <HAL_DMA_IRQHandler+0x418>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <HAL_DMA_IRQHandler+0x41c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01d      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a5a      	ldr	r2, [pc, #360]	; (80061d8 <HAL_DMA_IRQHandler+0x420>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a58      	ldr	r2, [pc, #352]	; (80061dc <HAL_DMA_IRQHandler+0x424>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a57      	ldr	r2, [pc, #348]	; (80061e0 <HAL_DMA_IRQHandler+0x428>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a55      	ldr	r2, [pc, #340]	; (80061e4 <HAL_DMA_IRQHandler+0x42c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a54      	ldr	r2, [pc, #336]	; (80061e8 <HAL_DMA_IRQHandler+0x430>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x2ee>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a52      	ldr	r2, [pc, #328]	; (80061ec <HAL_DMA_IRQHandler+0x434>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10a      	bne.n	80060bc <HAL_DMA_IRQHandler+0x304>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e003      	b.n	80060c4 <HAL_DMA_IRQHandler+0x30c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	f043 0202 	orr.w	r2, r3, #2
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2204      	movs	r2, #4
 80060ee:	409a      	lsls	r2, r3
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 808f 	beq.w	8006218 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2c      	ldr	r2, [pc, #176]	; (80061b0 <HAL_DMA_IRQHandler+0x3f8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d04a      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2a      	ldr	r2, [pc, #168]	; (80061b4 <HAL_DMA_IRQHandler+0x3fc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d045      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a29      	ldr	r2, [pc, #164]	; (80061b8 <HAL_DMA_IRQHandler+0x400>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d040      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a27      	ldr	r2, [pc, #156]	; (80061bc <HAL_DMA_IRQHandler+0x404>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d03b      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a26      	ldr	r2, [pc, #152]	; (80061c0 <HAL_DMA_IRQHandler+0x408>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d036      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a24      	ldr	r2, [pc, #144]	; (80061c4 <HAL_DMA_IRQHandler+0x40c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d031      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <HAL_DMA_IRQHandler+0x410>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d02c      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a21      	ldr	r2, [pc, #132]	; (80061cc <HAL_DMA_IRQHandler+0x414>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d027      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <HAL_DMA_IRQHandler+0x418>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d022      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1e      	ldr	r2, [pc, #120]	; (80061d4 <HAL_DMA_IRQHandler+0x41c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01d      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1d      	ldr	r2, [pc, #116]	; (80061d8 <HAL_DMA_IRQHandler+0x420>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d018      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <HAL_DMA_IRQHandler+0x424>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_DMA_IRQHandler+0x428>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00e      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <HAL_DMA_IRQHandler+0x42c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <HAL_DMA_IRQHandler+0x430>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_DMA_IRQHandler+0x3e2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a15      	ldr	r2, [pc, #84]	; (80061ec <HAL_DMA_IRQHandler+0x434>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d12a      	bne.n	80061f0 <HAL_DMA_IRQHandler+0x438>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e023      	b.n	80061f8 <HAL_DMA_IRQHandler+0x440>
 80061b0:	40020010 	.word	0x40020010
 80061b4:	40020028 	.word	0x40020028
 80061b8:	40020040 	.word	0x40020040
 80061bc:	40020058 	.word	0x40020058
 80061c0:	40020070 	.word	0x40020070
 80061c4:	40020088 	.word	0x40020088
 80061c8:	400200a0 	.word	0x400200a0
 80061cc:	400200b8 	.word	0x400200b8
 80061d0:	40020410 	.word	0x40020410
 80061d4:	40020428 	.word	0x40020428
 80061d8:	40020440 	.word	0x40020440
 80061dc:	40020458 	.word	0x40020458
 80061e0:	40020470 	.word	0x40020470
 80061e4:	40020488 	.word	0x40020488
 80061e8:	400204a0 	.word	0x400204a0
 80061ec:	400204b8 	.word	0x400204b8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2204      	movs	r2, #4
 8006206:	409a      	lsls	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f043 0204 	orr.w	r2, r3, #4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	2210      	movs	r2, #16
 8006222:	409a      	lsls	r2, r3
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80a6 	beq.w	800637a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a85      	ldr	r2, [pc, #532]	; (8006448 <HAL_DMA_IRQHandler+0x690>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d04a      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a83      	ldr	r2, [pc, #524]	; (800644c <HAL_DMA_IRQHandler+0x694>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d045      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a82      	ldr	r2, [pc, #520]	; (8006450 <HAL_DMA_IRQHandler+0x698>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d040      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a80      	ldr	r2, [pc, #512]	; (8006454 <HAL_DMA_IRQHandler+0x69c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d03b      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a7f      	ldr	r2, [pc, #508]	; (8006458 <HAL_DMA_IRQHandler+0x6a0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d036      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a7d      	ldr	r2, [pc, #500]	; (800645c <HAL_DMA_IRQHandler+0x6a4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d031      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a7c      	ldr	r2, [pc, #496]	; (8006460 <HAL_DMA_IRQHandler+0x6a8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d02c      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a7a      	ldr	r2, [pc, #488]	; (8006464 <HAL_DMA_IRQHandler+0x6ac>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d027      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a79      	ldr	r2, [pc, #484]	; (8006468 <HAL_DMA_IRQHandler+0x6b0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a77      	ldr	r2, [pc, #476]	; (800646c <HAL_DMA_IRQHandler+0x6b4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01d      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a76      	ldr	r2, [pc, #472]	; (8006470 <HAL_DMA_IRQHandler+0x6b8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a74      	ldr	r2, [pc, #464]	; (8006474 <HAL_DMA_IRQHandler+0x6bc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a73      	ldr	r2, [pc, #460]	; (8006478 <HAL_DMA_IRQHandler+0x6c0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a71      	ldr	r2, [pc, #452]	; (800647c <HAL_DMA_IRQHandler+0x6c4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a70      	ldr	r2, [pc, #448]	; (8006480 <HAL_DMA_IRQHandler+0x6c8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_DMA_IRQHandler+0x516>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a6e      	ldr	r2, [pc, #440]	; (8006484 <HAL_DMA_IRQHandler+0x6cc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d10a      	bne.n	80062e4 <HAL_DMA_IRQHandler+0x52c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e009      	b.n	80062f8 <HAL_DMA_IRQHandler+0x540>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bf14      	ite	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	2300      	moveq	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d03e      	beq.n	800637a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2210      	movs	r2, #16
 8006306:	409a      	lsls	r2, r3
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d018      	beq.n	800634c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d024      	beq.n	800637a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
 8006338:	e01f      	b.n	800637a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01b      	beq.n	800637a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
 800634a:	e016      	b.n	800637a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d107      	bne.n	800636a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0208 	bic.w	r2, r2, #8
 8006368:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2220      	movs	r2, #32
 8006384:	409a      	lsls	r2, r3
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8110 	beq.w	80065b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <HAL_DMA_IRQHandler+0x690>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d04a      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2b      	ldr	r2, [pc, #172]	; (800644c <HAL_DMA_IRQHandler+0x694>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d045      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a29      	ldr	r2, [pc, #164]	; (8006450 <HAL_DMA_IRQHandler+0x698>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d040      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a28      	ldr	r2, [pc, #160]	; (8006454 <HAL_DMA_IRQHandler+0x69c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d03b      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a26      	ldr	r2, [pc, #152]	; (8006458 <HAL_DMA_IRQHandler+0x6a0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d036      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a25      	ldr	r2, [pc, #148]	; (800645c <HAL_DMA_IRQHandler+0x6a4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d031      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a23      	ldr	r2, [pc, #140]	; (8006460 <HAL_DMA_IRQHandler+0x6a8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d02c      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a22      	ldr	r2, [pc, #136]	; (8006464 <HAL_DMA_IRQHandler+0x6ac>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d027      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a20      	ldr	r2, [pc, #128]	; (8006468 <HAL_DMA_IRQHandler+0x6b0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d022      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1f      	ldr	r2, [pc, #124]	; (800646c <HAL_DMA_IRQHandler+0x6b4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d01d      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <HAL_DMA_IRQHandler+0x6b8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d018      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <HAL_DMA_IRQHandler+0x6bc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1a      	ldr	r2, [pc, #104]	; (8006478 <HAL_DMA_IRQHandler+0x6c0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00e      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_DMA_IRQHandler+0x6c4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d009      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a17      	ldr	r2, [pc, #92]	; (8006480 <HAL_DMA_IRQHandler+0x6c8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_DMA_IRQHandler+0x678>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a16      	ldr	r2, [pc, #88]	; (8006484 <HAL_DMA_IRQHandler+0x6cc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d12b      	bne.n	8006488 <HAL_DMA_IRQHandler+0x6d0>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	e02a      	b.n	800649c <HAL_DMA_IRQHandler+0x6e4>
 8006446:	bf00      	nop
 8006448:	40020010 	.word	0x40020010
 800644c:	40020028 	.word	0x40020028
 8006450:	40020040 	.word	0x40020040
 8006454:	40020058 	.word	0x40020058
 8006458:	40020070 	.word	0x40020070
 800645c:	40020088 	.word	0x40020088
 8006460:	400200a0 	.word	0x400200a0
 8006464:	400200b8 	.word	0x400200b8
 8006468:	40020410 	.word	0x40020410
 800646c:	40020428 	.word	0x40020428
 8006470:	40020440 	.word	0x40020440
 8006474:	40020458 	.word	0x40020458
 8006478:	40020470 	.word	0x40020470
 800647c:	40020488 	.word	0x40020488
 8006480:	400204a0 	.word	0x400204a0
 8006484:	400204b8 	.word	0x400204b8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8087 	beq.w	80065b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2220      	movs	r2, #32
 80064ac:	409a      	lsls	r2, r3
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d139      	bne.n	8006532 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0216 	bic.w	r2, r2, #22
 80064cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <HAL_DMA_IRQHandler+0x736>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0208 	bic.w	r2, r2, #8
 80064fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	223f      	movs	r2, #63	; 0x3f
 8006508:	409a      	lsls	r2, r3
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 834a 	beq.w	8006bbc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
          }
          return;
 8006530:	e344      	b.n	8006bbc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d018      	beq.n	8006572 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d108      	bne.n	8006560 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	2b00      	cmp	r3, #0
 8006554:	d02c      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
 800655e:	e027      	b.n	80065b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d023      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
 8006570:	e01e      	b.n	80065b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0210 	bic.w	r2, r2, #16
 800658e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8306 	beq.w	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8088 	beq.w	80066d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2204      	movs	r2, #4
 80065cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a7a      	ldr	r2, [pc, #488]	; (80067c0 <HAL_DMA_IRQHandler+0xa08>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d04a      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a79      	ldr	r2, [pc, #484]	; (80067c4 <HAL_DMA_IRQHandler+0xa0c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d045      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a77      	ldr	r2, [pc, #476]	; (80067c8 <HAL_DMA_IRQHandler+0xa10>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d040      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a76      	ldr	r2, [pc, #472]	; (80067cc <HAL_DMA_IRQHandler+0xa14>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d03b      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a74      	ldr	r2, [pc, #464]	; (80067d0 <HAL_DMA_IRQHandler+0xa18>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d036      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a73      	ldr	r2, [pc, #460]	; (80067d4 <HAL_DMA_IRQHandler+0xa1c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d031      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a71      	ldr	r2, [pc, #452]	; (80067d8 <HAL_DMA_IRQHandler+0xa20>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d02c      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a70      	ldr	r2, [pc, #448]	; (80067dc <HAL_DMA_IRQHandler+0xa24>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d027      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a6e      	ldr	r2, [pc, #440]	; (80067e0 <HAL_DMA_IRQHandler+0xa28>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d022      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6d      	ldr	r2, [pc, #436]	; (80067e4 <HAL_DMA_IRQHandler+0xa2c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01d      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6b      	ldr	r2, [pc, #428]	; (80067e8 <HAL_DMA_IRQHandler+0xa30>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6a      	ldr	r2, [pc, #424]	; (80067ec <HAL_DMA_IRQHandler+0xa34>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a68      	ldr	r2, [pc, #416]	; (80067f0 <HAL_DMA_IRQHandler+0xa38>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a67      	ldr	r2, [pc, #412]	; (80067f4 <HAL_DMA_IRQHandler+0xa3c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a65      	ldr	r2, [pc, #404]	; (80067f8 <HAL_DMA_IRQHandler+0xa40>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_DMA_IRQHandler+0x8b8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a64      	ldr	r2, [pc, #400]	; (80067fc <HAL_DMA_IRQHandler+0xa44>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d108      	bne.n	8006682 <HAL_DMA_IRQHandler+0x8ca>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e007      	b.n	8006692 <HAL_DMA_IRQHandler+0x8da>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669a:	429a      	cmp	r2, r3
 800669c:	d307      	bcc.n	80066ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f2      	bne.n	8006692 <HAL_DMA_IRQHandler+0x8da>
 80066ac:	e000      	b.n	80066b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2203      	movs	r2, #3
 80066c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066c6:	e003      	b.n	80066d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8272 	beq.w	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e26c      	b.n	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a43      	ldr	r2, [pc, #268]	; (8006800 <HAL_DMA_IRQHandler+0xa48>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d022      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a42      	ldr	r2, [pc, #264]	; (8006804 <HAL_DMA_IRQHandler+0xa4c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d01d      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a40      	ldr	r2, [pc, #256]	; (8006808 <HAL_DMA_IRQHandler+0xa50>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d018      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a3f      	ldr	r2, [pc, #252]	; (800680c <HAL_DMA_IRQHandler+0xa54>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <HAL_DMA_IRQHandler+0xa58>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a3c      	ldr	r2, [pc, #240]	; (8006814 <HAL_DMA_IRQHandler+0xa5c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a3a      	ldr	r2, [pc, #232]	; (8006818 <HAL_DMA_IRQHandler+0xa60>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_DMA_IRQHandler+0x984>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a39      	ldr	r2, [pc, #228]	; (800681c <HAL_DMA_IRQHandler+0xa64>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d101      	bne.n	8006740 <HAL_DMA_IRQHandler+0x988>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <HAL_DMA_IRQHandler+0x98a>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 823f 	beq.w	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	2204      	movs	r2, #4
 800675a:	409a      	lsls	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80cd 	beq.w	8006900 <HAL_DMA_IRQHandler+0xb48>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80c7 	beq.w	8006900 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2204      	movs	r2, #4
 800677c:	409a      	lsls	r2, r3
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d049      	beq.n	8006820 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8210 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067a8:	e20a      	b.n	8006bc0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8206 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067bc:	e200      	b.n	8006bc0 <HAL_DMA_IRQHandler+0xe08>
 80067be:	bf00      	nop
 80067c0:	40020010 	.word	0x40020010
 80067c4:	40020028 	.word	0x40020028
 80067c8:	40020040 	.word	0x40020040
 80067cc:	40020058 	.word	0x40020058
 80067d0:	40020070 	.word	0x40020070
 80067d4:	40020088 	.word	0x40020088
 80067d8:	400200a0 	.word	0x400200a0
 80067dc:	400200b8 	.word	0x400200b8
 80067e0:	40020410 	.word	0x40020410
 80067e4:	40020428 	.word	0x40020428
 80067e8:	40020440 	.word	0x40020440
 80067ec:	40020458 	.word	0x40020458
 80067f0:	40020470 	.word	0x40020470
 80067f4:	40020488 	.word	0x40020488
 80067f8:	400204a0 	.word	0x400204a0
 80067fc:	400204b8 	.word	0x400204b8
 8006800:	58025408 	.word	0x58025408
 8006804:	5802541c 	.word	0x5802541c
 8006808:	58025430 	.word	0x58025430
 800680c:	58025444 	.word	0x58025444
 8006810:	58025458 	.word	0x58025458
 8006814:	5802546c 	.word	0x5802546c
 8006818:	58025480 	.word	0x58025480
 800681c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d160      	bne.n	80068ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7f      	ldr	r2, [pc, #508]	; (8006a2c <HAL_DMA_IRQHandler+0xc74>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d04a      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a7d      	ldr	r2, [pc, #500]	; (8006a30 <HAL_DMA_IRQHandler+0xc78>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d045      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7c      	ldr	r2, [pc, #496]	; (8006a34 <HAL_DMA_IRQHandler+0xc7c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d040      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7a      	ldr	r2, [pc, #488]	; (8006a38 <HAL_DMA_IRQHandler+0xc80>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d03b      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a79      	ldr	r2, [pc, #484]	; (8006a3c <HAL_DMA_IRQHandler+0xc84>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d036      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a77      	ldr	r2, [pc, #476]	; (8006a40 <HAL_DMA_IRQHandler+0xc88>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d031      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a76      	ldr	r2, [pc, #472]	; (8006a44 <HAL_DMA_IRQHandler+0xc8c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d02c      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a74      	ldr	r2, [pc, #464]	; (8006a48 <HAL_DMA_IRQHandler+0xc90>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d027      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a73      	ldr	r2, [pc, #460]	; (8006a4c <HAL_DMA_IRQHandler+0xc94>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d022      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a71      	ldr	r2, [pc, #452]	; (8006a50 <HAL_DMA_IRQHandler+0xc98>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01d      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a70      	ldr	r2, [pc, #448]	; (8006a54 <HAL_DMA_IRQHandler+0xc9c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a6e      	ldr	r2, [pc, #440]	; (8006a58 <HAL_DMA_IRQHandler+0xca0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6d      	ldr	r2, [pc, #436]	; (8006a5c <HAL_DMA_IRQHandler+0xca4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a6b      	ldr	r2, [pc, #428]	; (8006a60 <HAL_DMA_IRQHandler+0xca8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a6a      	ldr	r2, [pc, #424]	; (8006a64 <HAL_DMA_IRQHandler+0xcac>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_DMA_IRQHandler+0xb12>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a68      	ldr	r2, [pc, #416]	; (8006a68 <HAL_DMA_IRQHandler+0xcb0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <HAL_DMA_IRQHandler+0xb24>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0208 	bic.w	r2, r2, #8
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	e007      	b.n	80068ec <HAL_DMA_IRQHandler+0xb34>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0204 	bic.w	r2, r2, #4
 80068ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8165 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068fe:	e15f      	b.n	8006bc0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2202      	movs	r2, #2
 800690a:	409a      	lsls	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80c5 	beq.w	8006aa0 <HAL_DMA_IRQHandler+0xce8>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80bf 	beq.w	8006aa0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2202      	movs	r2, #2
 800692c:	409a      	lsls	r2, r3
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d018      	beq.n	800696e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 813a 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006958:	e134      	b.n	8006bc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8130 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800696c:	e12a      	b.n	8006bc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 8089 	bne.w	8006a8c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <HAL_DMA_IRQHandler+0xc74>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d04a      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <HAL_DMA_IRQHandler+0xc78>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d045      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a28      	ldr	r2, [pc, #160]	; (8006a34 <HAL_DMA_IRQHandler+0xc7c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d040      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <HAL_DMA_IRQHandler+0xc80>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d03b      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a25      	ldr	r2, [pc, #148]	; (8006a3c <HAL_DMA_IRQHandler+0xc84>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d036      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <HAL_DMA_IRQHandler+0xc88>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d031      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a22      	ldr	r2, [pc, #136]	; (8006a44 <HAL_DMA_IRQHandler+0xc8c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d02c      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <HAL_DMA_IRQHandler+0xc90>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d027      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1f      	ldr	r2, [pc, #124]	; (8006a4c <HAL_DMA_IRQHandler+0xc94>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d022      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <HAL_DMA_IRQHandler+0xc98>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01d      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <HAL_DMA_IRQHandler+0xc9c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <HAL_DMA_IRQHandler+0xca0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_DMA_IRQHandler+0xca4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_DMA_IRQHandler+0xca8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_DMA_IRQHandler+0xcac>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_DMA_IRQHandler+0xc62>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <HAL_DMA_IRQHandler+0xcb0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d128      	bne.n	8006a6c <HAL_DMA_IRQHandler+0xcb4>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0214 	bic.w	r2, r2, #20
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e027      	b.n	8006a7c <HAL_DMA_IRQHandler+0xcc4>
 8006a2c:	40020010 	.word	0x40020010
 8006a30:	40020028 	.word	0x40020028
 8006a34:	40020040 	.word	0x40020040
 8006a38:	40020058 	.word	0x40020058
 8006a3c:	40020070 	.word	0x40020070
 8006a40:	40020088 	.word	0x40020088
 8006a44:	400200a0 	.word	0x400200a0
 8006a48:	400200b8 	.word	0x400200b8
 8006a4c:	40020410 	.word	0x40020410
 8006a50:	40020428 	.word	0x40020428
 8006a54:	40020440 	.word	0x40020440
 8006a58:	40020458 	.word	0x40020458
 8006a5c:	40020470 	.word	0x40020470
 8006a60:	40020488 	.word	0x40020488
 8006a64:	400204a0 	.word	0x400204a0
 8006a68:	400204b8 	.word	0x400204b8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 020a 	bic.w	r2, r2, #10
 8006a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8097 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a9e:	e091      	b.n	8006bc4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	409a      	lsls	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8088 	beq.w	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8082 	beq.w	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a41      	ldr	r2, [pc, #260]	; (8006bcc <HAL_DMA_IRQHandler+0xe14>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d04a      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a3f      	ldr	r2, [pc, #252]	; (8006bd0 <HAL_DMA_IRQHandler+0xe18>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d045      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3e      	ldr	r2, [pc, #248]	; (8006bd4 <HAL_DMA_IRQHandler+0xe1c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d040      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a3c      	ldr	r2, [pc, #240]	; (8006bd8 <HAL_DMA_IRQHandler+0xe20>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d03b      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3b      	ldr	r2, [pc, #236]	; (8006bdc <HAL_DMA_IRQHandler+0xe24>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d036      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a39      	ldr	r2, [pc, #228]	; (8006be0 <HAL_DMA_IRQHandler+0xe28>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d031      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a38      	ldr	r2, [pc, #224]	; (8006be4 <HAL_DMA_IRQHandler+0xe2c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d02c      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a36      	ldr	r2, [pc, #216]	; (8006be8 <HAL_DMA_IRQHandler+0xe30>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d027      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a35      	ldr	r2, [pc, #212]	; (8006bec <HAL_DMA_IRQHandler+0xe34>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d022      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a33      	ldr	r2, [pc, #204]	; (8006bf0 <HAL_DMA_IRQHandler+0xe38>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01d      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a32      	ldr	r2, [pc, #200]	; (8006bf4 <HAL_DMA_IRQHandler+0xe3c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d018      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a30      	ldr	r2, [pc, #192]	; (8006bf8 <HAL_DMA_IRQHandler+0xe40>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2f      	ldr	r2, [pc, #188]	; (8006bfc <HAL_DMA_IRQHandler+0xe44>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00e      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2d      	ldr	r2, [pc, #180]	; (8006c00 <HAL_DMA_IRQHandler+0xe48>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d009      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a2c      	ldr	r2, [pc, #176]	; (8006c04 <HAL_DMA_IRQHandler+0xe4c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xdaa>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <HAL_DMA_IRQHandler+0xe50>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <HAL_DMA_IRQHandler+0xdbc>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 021c 	bic.w	r2, r2, #28
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e007      	b.n	8006b84 <HAL_DMA_IRQHandler+0xdcc>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 020e 	bic.w	r2, r2, #14
 8006b82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
 8006bba:	e004      	b.n	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bbc:	bf00      	nop
 8006bbe:	e002      	b.n	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bc6:	3728      	adds	r7, #40	; 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40020010 	.word	0x40020010
 8006bd0:	40020028 	.word	0x40020028
 8006bd4:	40020040 	.word	0x40020040
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	40020070 	.word	0x40020070
 8006be0:	40020088 	.word	0x40020088
 8006be4:	400200a0 	.word	0x400200a0
 8006be8:	400200b8 	.word	0x400200b8
 8006bec:	40020410 	.word	0x40020410
 8006bf0:	40020428 	.word	0x40020428
 8006bf4:	40020440 	.word	0x40020440
 8006bf8:	40020458 	.word	0x40020458
 8006bfc:	40020470 	.word	0x40020470
 8006c00:	40020488 	.word	0x40020488
 8006c04:	400204a0 	.word	0x400204a0
 8006c08:	400204b8 	.word	0x400204b8

08006c0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a7f      	ldr	r2, [pc, #508]	; (8006e28 <DMA_SetConfig+0x21c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d072      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a7d      	ldr	r2, [pc, #500]	; (8006e2c <DMA_SetConfig+0x220>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d06d      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7c      	ldr	r2, [pc, #496]	; (8006e30 <DMA_SetConfig+0x224>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d068      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a7a      	ldr	r2, [pc, #488]	; (8006e34 <DMA_SetConfig+0x228>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d063      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a79      	ldr	r2, [pc, #484]	; (8006e38 <DMA_SetConfig+0x22c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d05e      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a77      	ldr	r2, [pc, #476]	; (8006e3c <DMA_SetConfig+0x230>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d059      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a76      	ldr	r2, [pc, #472]	; (8006e40 <DMA_SetConfig+0x234>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d054      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a74      	ldr	r2, [pc, #464]	; (8006e44 <DMA_SetConfig+0x238>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d04f      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a73      	ldr	r2, [pc, #460]	; (8006e48 <DMA_SetConfig+0x23c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d04a      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a71      	ldr	r2, [pc, #452]	; (8006e4c <DMA_SetConfig+0x240>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d045      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a70      	ldr	r2, [pc, #448]	; (8006e50 <DMA_SetConfig+0x244>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d040      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a6e      	ldr	r2, [pc, #440]	; (8006e54 <DMA_SetConfig+0x248>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d03b      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a6d      	ldr	r2, [pc, #436]	; (8006e58 <DMA_SetConfig+0x24c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d036      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a6b      	ldr	r2, [pc, #428]	; (8006e5c <DMA_SetConfig+0x250>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d031      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6a      	ldr	r2, [pc, #424]	; (8006e60 <DMA_SetConfig+0x254>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d02c      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a68      	ldr	r2, [pc, #416]	; (8006e64 <DMA_SetConfig+0x258>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d027      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a67      	ldr	r2, [pc, #412]	; (8006e68 <DMA_SetConfig+0x25c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a65      	ldr	r2, [pc, #404]	; (8006e6c <DMA_SetConfig+0x260>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a64      	ldr	r2, [pc, #400]	; (8006e70 <DMA_SetConfig+0x264>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a62      	ldr	r2, [pc, #392]	; (8006e74 <DMA_SetConfig+0x268>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a61      	ldr	r2, [pc, #388]	; (8006e78 <DMA_SetConfig+0x26c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a5f      	ldr	r2, [pc, #380]	; (8006e7c <DMA_SetConfig+0x270>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a5e      	ldr	r2, [pc, #376]	; (8006e80 <DMA_SetConfig+0x274>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <DMA_SetConfig+0x10a>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a5c      	ldr	r2, [pc, #368]	; (8006e84 <DMA_SetConfig+0x278>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d101      	bne.n	8006d1a <DMA_SetConfig+0x10e>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <DMA_SetConfig+0x110>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a39      	ldr	r2, [pc, #228]	; (8006e28 <DMA_SetConfig+0x21c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d04a      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a38      	ldr	r2, [pc, #224]	; (8006e2c <DMA_SetConfig+0x220>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d045      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a36      	ldr	r2, [pc, #216]	; (8006e30 <DMA_SetConfig+0x224>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d040      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a35      	ldr	r2, [pc, #212]	; (8006e34 <DMA_SetConfig+0x228>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d03b      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a33      	ldr	r2, [pc, #204]	; (8006e38 <DMA_SetConfig+0x22c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d036      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <DMA_SetConfig+0x230>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d031      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a30      	ldr	r2, [pc, #192]	; (8006e40 <DMA_SetConfig+0x234>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d02c      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a2f      	ldr	r2, [pc, #188]	; (8006e44 <DMA_SetConfig+0x238>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d027      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <DMA_SetConfig+0x23c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d022      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <DMA_SetConfig+0x240>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d01d      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <DMA_SetConfig+0x244>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d018      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a29      	ldr	r2, [pc, #164]	; (8006e54 <DMA_SetConfig+0x248>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d013      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <DMA_SetConfig+0x24c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00e      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a26      	ldr	r2, [pc, #152]	; (8006e5c <DMA_SetConfig+0x250>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a24      	ldr	r2, [pc, #144]	; (8006e60 <DMA_SetConfig+0x254>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <DMA_SetConfig+0x1d0>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a23      	ldr	r2, [pc, #140]	; (8006e64 <DMA_SetConfig+0x258>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d101      	bne.n	8006de0 <DMA_SetConfig+0x1d4>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <DMA_SetConfig+0x1d6>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d059      	beq.n	8006e9a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	223f      	movs	r2, #63	; 0x3f
 8006df0:	409a      	lsls	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e04:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d138      	bne.n	8006e88 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e26:	e086      	b.n	8006f36 <DMA_SetConfig+0x32a>
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8
 8006e68:	58025408 	.word	0x58025408
 8006e6c:	5802541c 	.word	0x5802541c
 8006e70:	58025430 	.word	0x58025430
 8006e74:	58025444 	.word	0x58025444
 8006e78:	58025458 	.word	0x58025458
 8006e7c:	5802546c 	.word	0x5802546c
 8006e80:	58025480 	.word	0x58025480
 8006e84:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]
}
 8006e98:	e04d      	b.n	8006f36 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <DMA_SetConfig+0x338>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <DMA_SetConfig+0x33c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <DMA_SetConfig+0x340>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a24      	ldr	r2, [pc, #144]	; (8006f50 <DMA_SetConfig+0x344>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <DMA_SetConfig+0x348>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <DMA_SetConfig+0x34c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a20      	ldr	r2, [pc, #128]	; (8006f5c <DMA_SetConfig+0x350>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <DMA_SetConfig+0x2de>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <DMA_SetConfig+0x354>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d101      	bne.n	8006eee <DMA_SetConfig+0x2e2>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <DMA_SetConfig+0x2e4>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d020      	beq.n	8006f36 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2201      	movs	r2, #1
 8006efe:	409a      	lsls	r2, r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d108      	bne.n	8006f26 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	60da      	str	r2, [r3, #12]
}
 8006f24:	e007      	b.n	8006f36 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	60da      	str	r2, [r3, #12]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	58025408 	.word	0x58025408
 8006f48:	5802541c 	.word	0x5802541c
 8006f4c:	58025430 	.word	0x58025430
 8006f50:	58025444 	.word	0x58025444
 8006f54:	58025458 	.word	0x58025458
 8006f58:	5802546c 	.word	0x5802546c
 8006f5c:	58025480 	.word	0x58025480
 8006f60:	58025494 	.word	0x58025494

08006f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a42      	ldr	r2, [pc, #264]	; (800707c <DMA_CalcBaseAndBitshift+0x118>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d04a      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a41      	ldr	r2, [pc, #260]	; (8007080 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d045      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <DMA_CalcBaseAndBitshift+0x120>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d040      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a3e      	ldr	r2, [pc, #248]	; (8007088 <DMA_CalcBaseAndBitshift+0x124>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d03b      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a3c      	ldr	r2, [pc, #240]	; (800708c <DMA_CalcBaseAndBitshift+0x128>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d036      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a3b      	ldr	r2, [pc, #236]	; (8007090 <DMA_CalcBaseAndBitshift+0x12c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d031      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a39      	ldr	r2, [pc, #228]	; (8007094 <DMA_CalcBaseAndBitshift+0x130>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d02c      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a38      	ldr	r2, [pc, #224]	; (8007098 <DMA_CalcBaseAndBitshift+0x134>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d027      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a36      	ldr	r2, [pc, #216]	; (800709c <DMA_CalcBaseAndBitshift+0x138>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d022      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a35      	ldr	r2, [pc, #212]	; (80070a0 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d01d      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a33      	ldr	r2, [pc, #204]	; (80070a4 <DMA_CalcBaseAndBitshift+0x140>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d018      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a32      	ldr	r2, [pc, #200]	; (80070a8 <DMA_CalcBaseAndBitshift+0x144>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a30      	ldr	r2, [pc, #192]	; (80070ac <DMA_CalcBaseAndBitshift+0x148>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00e      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2d      	ldr	r2, [pc, #180]	; (80070b4 <DMA_CalcBaseAndBitshift+0x150>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <DMA_CalcBaseAndBitshift+0xa8>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a2c      	ldr	r2, [pc, #176]	; (80070b8 <DMA_CalcBaseAndBitshift+0x154>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d101      	bne.n	8007010 <DMA_CalcBaseAndBitshift+0xac>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <DMA_CalcBaseAndBitshift+0xae>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d024      	beq.n	8007060 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	3b10      	subs	r3, #16
 800701e:	4a27      	ldr	r2, [pc, #156]	; (80070bc <DMA_CalcBaseAndBitshift+0x158>)
 8007020:	fba2 2303 	umull	r2, r3, r2, r3
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	4a24      	ldr	r2, [pc, #144]	; (80070c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007030:	5cd3      	ldrb	r3, [r2, r3]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d908      	bls.n	8007050 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007046:	4013      	ands	r3, r2
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	659a      	str	r2, [r3, #88]	; 0x58
 800704e:	e00d      	b.n	800706c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007058:	4013      	ands	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6593      	str	r3, [r2, #88]	; 0x58
 800705e:	e005      	b.n	800706c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	40020010 	.word	0x40020010
 8007080:	40020028 	.word	0x40020028
 8007084:	40020040 	.word	0x40020040
 8007088:	40020058 	.word	0x40020058
 800708c:	40020070 	.word	0x40020070
 8007090:	40020088 	.word	0x40020088
 8007094:	400200a0 	.word	0x400200a0
 8007098:	400200b8 	.word	0x400200b8
 800709c:	40020410 	.word	0x40020410
 80070a0:	40020428 	.word	0x40020428
 80070a4:	40020440 	.word	0x40020440
 80070a8:	40020458 	.word	0x40020458
 80070ac:	40020470 	.word	0x40020470
 80070b0:	40020488 	.word	0x40020488
 80070b4:	400204a0 	.word	0x400204a0
 80070b8:	400204b8 	.word	0x400204b8
 80070bc:	aaaaaaab 	.word	0xaaaaaaab
 80070c0:	0800fea0 	.word	0x0800fea0
 80070c4:	fffffc00 	.word	0xfffffc00

080070c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d120      	bne.n	800711e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d858      	bhi.n	8007196 <DMA_CheckFifoParam+0xce>
 80070e4:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <DMA_CheckFifoParam+0x24>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	080070fd 	.word	0x080070fd
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	080070fd 	.word	0x080070fd
 80070f8:	08007197 	.word	0x08007197
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d048      	beq.n	800719a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800710c:	e045      	b.n	800719a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007116:	d142      	bne.n	800719e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800711c:	e03f      	b.n	800719e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007126:	d123      	bne.n	8007170 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	2b03      	cmp	r3, #3
 800712e:	d838      	bhi.n	80071a2 <DMA_CheckFifoParam+0xda>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <DMA_CheckFifoParam+0x70>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007149 	.word	0x08007149
 800713c:	0800714f 	.word	0x0800714f
 8007140:	08007149 	.word	0x08007149
 8007144:	08007161 	.word	0x08007161
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
        break;
 800714c:	e030      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d025      	beq.n	80071a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800715e:	e022      	b.n	80071a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007168:	d11f      	bne.n	80071aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800716e:	e01c      	b.n	80071aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	2b02      	cmp	r3, #2
 8007176:	d902      	bls.n	800717e <DMA_CheckFifoParam+0xb6>
 8007178:	2b03      	cmp	r3, #3
 800717a:	d003      	beq.n	8007184 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800717c:	e018      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	73fb      	strb	r3, [r7, #15]
        break;
 8007182:	e015      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00e      	beq.n	80071ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]
    break;
 8007194:	e00b      	b.n	80071ae <DMA_CheckFifoParam+0xe6>
        break;
 8007196:	bf00      	nop
 8007198:	e00a      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        break;
 800719a:	bf00      	nop
 800719c:	e008      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        break;
 800719e:	bf00      	nop
 80071a0:	e006      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        break;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
        break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <DMA_CheckFifoParam+0xe8>
    break;
 80071ae:	bf00      	nop
    }
  }

  return status;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop

080071c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a38      	ldr	r2, [pc, #224]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a36      	ldr	r2, [pc, #216]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a35      	ldr	r2, [pc, #212]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a33      	ldr	r2, [pc, #204]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a32      	ldr	r2, [pc, #200]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a30      	ldr	r2, [pc, #192]	; (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2d      	ldr	r2, [pc, #180]	; (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d101      	bne.n	8007222 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01a      	beq.n	800725e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	3b08      	subs	r3, #8
 8007230:	4a28      	ldr	r2, [pc, #160]	; (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	091b      	lsrs	r3, r3, #4
 8007238:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a24      	ldr	r2, [pc, #144]	; (80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800724c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	2201      	movs	r2, #1
 8007256:	409a      	lsls	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800725c:	e024      	b.n	80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	3b10      	subs	r3, #16
 8007266:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007268:	fba2 2303 	umull	r2, r3, r2, r3
 800726c:	091b      	lsrs	r3, r3, #4
 800726e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d806      	bhi.n	8007286 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d902      	bls.n	8007286 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3308      	adds	r3, #8
 8007284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4b18      	ldr	r3, [pc, #96]	; (80072ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007298:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2201      	movs	r2, #1
 80072a2:	409a      	lsls	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	58025408 	.word	0x58025408
 80072b8:	5802541c 	.word	0x5802541c
 80072bc:	58025430 	.word	0x58025430
 80072c0:	58025444 	.word	0x58025444
 80072c4:	58025458 	.word	0x58025458
 80072c8:	5802546c 	.word	0x5802546c
 80072cc:	58025480 	.word	0x58025480
 80072d0:	58025494 	.word	0x58025494
 80072d4:	cccccccd 	.word	0xcccccccd
 80072d8:	16009600 	.word	0x16009600
 80072dc:	58025880 	.word	0x58025880
 80072e0:	aaaaaaab 	.word	0xaaaaaaab
 80072e4:	400204b8 	.word	0x400204b8
 80072e8:	4002040f 	.word	0x4002040f
 80072ec:	10008200 	.word	0x10008200
 80072f0:	40020880 	.word	0x40020880

080072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d04a      	beq.n	80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b08      	cmp	r3, #8
 800730e:	d847      	bhi.n	80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a25      	ldr	r2, [pc, #148]	; (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d022      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a24      	ldr	r2, [pc, #144]	; (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d01d      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d018      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a21      	ldr	r2, [pc, #132]	; (80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d013      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1f      	ldr	r2, [pc, #124]	; (80073bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00e      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1e      	ldr	r2, [pc, #120]	; (80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1c      	ldr	r2, [pc, #112]	; (80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d101      	bne.n	8007364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007364:	2300      	movs	r3, #0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4b17      	ldr	r3, [pc, #92]	; (80073cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800737c:	671a      	str	r2, [r3, #112]	; 0x70
 800737e:	e009      	b.n	8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	461a      	mov	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007392:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3b01      	subs	r3, #1
 8007398:	2201      	movs	r2, #1
 800739a:	409a      	lsls	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	58025408 	.word	0x58025408
 80073b0:	5802541c 	.word	0x5802541c
 80073b4:	58025430 	.word	0x58025430
 80073b8:	58025444 	.word	0x58025444
 80073bc:	58025458 	.word	0x58025458
 80073c0:	5802546c 	.word	0x5802546c
 80073c4:	58025480 	.word	0x58025480
 80073c8:	58025494 	.word	0x58025494
 80073cc:	1600963f 	.word	0x1600963f
 80073d0:	58025940 	.word	0x58025940
 80073d4:	1000823f 	.word	0x1000823f
 80073d8:	40020940 	.word	0x40020940

080073dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	; 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073ea:	4b89      	ldr	r3, [pc, #548]	; (8007610 <HAL_GPIO_Init+0x234>)
 80073ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073ee:	e194      	b.n	800771a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	2101      	movs	r1, #1
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8186 	beq.w	8007714 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d005      	beq.n	8007420 <HAL_GPIO_Init+0x44>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d130      	bne.n	8007482 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	2203      	movs	r2, #3
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	43db      	mvns	r3, r3
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	4013      	ands	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4313      	orrs	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007456:	2201      	movs	r2, #1
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	43db      	mvns	r3, r3
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	4013      	ands	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f003 0201 	and.w	r2, r3, #1
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	4313      	orrs	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d017      	beq.n	80074be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	2203      	movs	r2, #3
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d123      	bne.n	8007512 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	08da      	lsrs	r2, r3, #3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3208      	adds	r2, #8
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	220f      	movs	r2, #15
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	43db      	mvns	r3, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4013      	ands	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4313      	orrs	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	08da      	lsrs	r2, r3, #3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3208      	adds	r2, #8
 800750c:	69b9      	ldr	r1, [r7, #24]
 800750e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	2203      	movs	r2, #3
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	43db      	mvns	r3, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	4013      	ands	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f003 0203 	and.w	r2, r3, #3
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	4313      	orrs	r3, r2
 800753e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 80e0 	beq.w	8007714 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007554:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <HAL_GPIO_Init+0x238>)
 8007556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800755a:	4a2e      	ldr	r2, [pc, #184]	; (8007614 <HAL_GPIO_Init+0x238>)
 800755c:	f043 0302 	orr.w	r3, r3, #2
 8007560:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007564:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <HAL_GPIO_Init+0x238>)
 8007566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007572:	4a29      	ldr	r2, [pc, #164]	; (8007618 <HAL_GPIO_Init+0x23c>)
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	3302      	adds	r3, #2
 800757a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	220f      	movs	r2, #15
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	43db      	mvns	r3, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a20      	ldr	r2, [pc, #128]	; (800761c <HAL_GPIO_Init+0x240>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d052      	beq.n	8007644 <HAL_GPIO_Init+0x268>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1f      	ldr	r2, [pc, #124]	; (8007620 <HAL_GPIO_Init+0x244>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d031      	beq.n	800760a <HAL_GPIO_Init+0x22e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <HAL_GPIO_Init+0x248>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d02b      	beq.n	8007606 <HAL_GPIO_Init+0x22a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1d      	ldr	r2, [pc, #116]	; (8007628 <HAL_GPIO_Init+0x24c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d025      	beq.n	8007602 <HAL_GPIO_Init+0x226>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1c      	ldr	r2, [pc, #112]	; (800762c <HAL_GPIO_Init+0x250>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01f      	beq.n	80075fe <HAL_GPIO_Init+0x222>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <HAL_GPIO_Init+0x254>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d019      	beq.n	80075fa <HAL_GPIO_Init+0x21e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_GPIO_Init+0x258>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_GPIO_Init+0x21a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a19      	ldr	r2, [pc, #100]	; (8007638 <HAL_GPIO_Init+0x25c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00d      	beq.n	80075f2 <HAL_GPIO_Init+0x216>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a18      	ldr	r2, [pc, #96]	; (800763c <HAL_GPIO_Init+0x260>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <HAL_GPIO_Init+0x212>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a17      	ldr	r2, [pc, #92]	; (8007640 <HAL_GPIO_Init+0x264>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <HAL_GPIO_Init+0x20e>
 80075e6:	2309      	movs	r3, #9
 80075e8:	e02d      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 80075ea:	230a      	movs	r3, #10
 80075ec:	e02b      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 80075ee:	2308      	movs	r3, #8
 80075f0:	e029      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 80075f2:	2307      	movs	r3, #7
 80075f4:	e027      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 80075f6:	2306      	movs	r3, #6
 80075f8:	e025      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 80075fa:	2305      	movs	r3, #5
 80075fc:	e023      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 80075fe:	2304      	movs	r3, #4
 8007600:	e021      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 8007602:	2303      	movs	r3, #3
 8007604:	e01f      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 8007606:	2302      	movs	r3, #2
 8007608:	e01d      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 800760a:	2301      	movs	r3, #1
 800760c:	e01b      	b.n	8007646 <HAL_GPIO_Init+0x26a>
 800760e:	bf00      	nop
 8007610:	58000080 	.word	0x58000080
 8007614:	58024400 	.word	0x58024400
 8007618:	58000400 	.word	0x58000400
 800761c:	58020000 	.word	0x58020000
 8007620:	58020400 	.word	0x58020400
 8007624:	58020800 	.word	0x58020800
 8007628:	58020c00 	.word	0x58020c00
 800762c:	58021000 	.word	0x58021000
 8007630:	58021400 	.word	0x58021400
 8007634:	58021800 	.word	0x58021800
 8007638:	58021c00 	.word	0x58021c00
 800763c:	58022000 	.word	0x58022000
 8007640:	58022400 	.word	0x58022400
 8007644:	2300      	movs	r3, #0
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	f002 0203 	and.w	r2, r2, #3
 800764c:	0092      	lsls	r2, r2, #2
 800764e:	4093      	lsls	r3, r2
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4313      	orrs	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007656:	4938      	ldr	r1, [pc, #224]	; (8007738 <HAL_GPIO_Init+0x35c>)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	3302      	adds	r3, #2
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	43db      	mvns	r3, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	4013      	ands	r3, r2
 8007674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800768a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	43db      	mvns	r3, r3
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	4013      	ands	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	43db      	mvns	r3, r3
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	4013      	ands	r3, r2
 80076ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	43db      	mvns	r3, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4013      	ands	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3301      	adds	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f ae63 	bne.w	80073f0 <HAL_GPIO_Init+0x14>
  }
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	3724      	adds	r7, #36	; 0x24
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	58000400 	.word	0x58000400

0800773c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	887b      	ldrh	r3, [r7, #2]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e001      	b.n	800775e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	807b      	strh	r3, [r7, #2]
 8007778:	4613      	mov	r3, r2
 800777a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800777c:	787b      	ldrb	r3, [r7, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007782:	887a      	ldrh	r2, [r7, #2]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007788:	e003      	b.n	8007792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800778a:	887b      	ldrh	r3, [r7, #2]
 800778c:	041a      	lsls	r2, r3, #16
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	619a      	str	r2, [r3, #24]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e07f      	b.n	80078b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fa fc68 	bl	800209c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2224      	movs	r2, #36	; 0x24
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d107      	bne.n	800781a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	e006      	b.n	8007828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d104      	bne.n	800783a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6859      	ldr	r1, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	4b1d      	ldr	r3, [pc, #116]	; (80078bc <HAL_I2C_Init+0x11c>)
 8007846:	430b      	orrs	r3, r1
 8007848:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69d9      	ldr	r1, [r3, #28]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	02008000 	.word	0x02008000

080078c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	461a      	mov	r2, r3
 80078cc:	460b      	mov	r3, r1
 80078ce:	817b      	strh	r3, [r7, #10]
 80078d0:	4613      	mov	r3, r2
 80078d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b20      	cmp	r3, #32
 80078de:	f040 80da 	bne.w	8007a96 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d101      	bne.n	80078f0 <HAL_I2C_Master_Transmit+0x30>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e0d3      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x1d8>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078f8:	f7fa fffe 	bl	80028f8 <HAL_GetTick>
 80078fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	2319      	movs	r3, #25
 8007904:	2201      	movs	r2, #1
 8007906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f9e6 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e0be      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2221      	movs	r2, #33	; 0x21
 800791e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2210      	movs	r2, #16
 8007926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	893a      	ldrh	r2, [r7, #8]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007946:	b29b      	uxth	r3, r3
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	d90e      	bls.n	800796a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007956:	b2da      	uxtb	r2, r3
 8007958:	8979      	ldrh	r1, [r7, #10]
 800795a:	4b51      	ldr	r3, [pc, #324]	; (8007aa0 <HAL_I2C_Master_Transmit+0x1e0>)
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fbdc 	bl	8008120 <I2C_TransferConfig>
 8007968:	e06c      	b.n	8007a44 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007978:	b2da      	uxtb	r2, r3
 800797a:	8979      	ldrh	r1, [r7, #10]
 800797c:	4b48      	ldr	r3, [pc, #288]	; (8007aa0 <HAL_I2C_Master_Transmit+0x1e0>)
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fbcb 	bl	8008120 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800798a:	e05b      	b.n	8007a44 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	6a39      	ldr	r1, [r7, #32]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f9e3 	bl	8007d5c <I2C_WaitOnTXISFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e07b      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	781a      	ldrb	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d034      	beq.n	8007a44 <HAL_I2C_Master_Transmit+0x184>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d130      	bne.n	8007a44 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	2200      	movs	r2, #0
 80079ea:	2180      	movs	r1, #128	; 0x80
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f975 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e04d      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2bff      	cmp	r3, #255	; 0xff
 8007a04:	d90e      	bls.n	8007a24 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	22ff      	movs	r2, #255	; 0xff
 8007a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	8979      	ldrh	r1, [r7, #10]
 8007a14:	2300      	movs	r3, #0
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fb7f 	bl	8008120 <I2C_TransferConfig>
 8007a22:	e00f      	b.n	8007a44 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	8979      	ldrh	r1, [r7, #10]
 8007a36:	2300      	movs	r3, #0
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fb6e 	bl	8008120 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d19e      	bne.n	800798c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	6a39      	ldr	r1, [r7, #32]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f9c2 	bl	8007ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e01a      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2220      	movs	r2, #32
 8007a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6859      	ldr	r1, [r3, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007a76:	400b      	ands	r3, r1
 8007a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e000      	b.n	8007a98 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007a96:	2302      	movs	r3, #2
  }
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	80002000 	.word	0x80002000
 8007aa4:	fe00e800 	.word	0xfe00e800

08007aa8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	817b      	strh	r3, [r7, #10]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	f040 80db 	bne.w	8007c80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_I2C_Master_Receive+0x30>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e0d4      	b.n	8007c82 <HAL_I2C_Master_Receive+0x1da>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ae0:	f7fa ff0a 	bl	80028f8 <HAL_GetTick>
 8007ae4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2319      	movs	r3, #25
 8007aec:	2201      	movs	r2, #1
 8007aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f8f2 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e0bf      	b.n	8007c82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2222      	movs	r2, #34	; 0x22
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	893a      	ldrh	r2, [r7, #8]
 8007b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2bff      	cmp	r3, #255	; 0xff
 8007b32:	d90e      	bls.n	8007b52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	22ff      	movs	r2, #255	; 0xff
 8007b38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	8979      	ldrh	r1, [r7, #10]
 8007b42:	4b52      	ldr	r3, [pc, #328]	; (8007c8c <HAL_I2C_Master_Receive+0x1e4>)
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fae8 	bl	8008120 <I2C_TransferConfig>
 8007b50:	e06d      	b.n	8007c2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	8979      	ldrh	r1, [r7, #10]
 8007b64:	4b49      	ldr	r3, [pc, #292]	; (8007c8c <HAL_I2C_Master_Receive+0x1e4>)
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fad7 	bl	8008120 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b72:	e05c      	b.n	8007c2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	6a39      	ldr	r1, [r7, #32]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f96b 	bl	8007e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e07c      	b.n	8007c82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d034      	beq.n	8007c2e <HAL_I2C_Master_Receive+0x186>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d130      	bne.n	8007c2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2180      	movs	r1, #128	; 0x80
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f880 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e04d      	b.n	8007c82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2bff      	cmp	r3, #255	; 0xff
 8007bee:	d90e      	bls.n	8007c0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	22ff      	movs	r2, #255	; 0xff
 8007bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	8979      	ldrh	r1, [r7, #10]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fa8a 	bl	8008120 <I2C_TransferConfig>
 8007c0c:	e00f      	b.n	8007c2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	8979      	ldrh	r1, [r7, #10]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fa79 	bl	8008120 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d19d      	bne.n	8007b74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	6a39      	ldr	r1, [r7, #32]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f8cd 	bl	8007ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e01a      	b.n	8007c82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2220      	movs	r2, #32
 8007c52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6859      	ldr	r1, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <HAL_I2C_Master_Receive+0x1e8>)
 8007c60:	400b      	ands	r3, r1
 8007c62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e000      	b.n	8007c82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c80:	2302      	movs	r3, #2
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	80002400 	.word	0x80002400
 8007c90:	fe00e800 	.word	0xfe00e800

08007c94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d103      	bne.n	8007cb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d007      	beq.n	8007cd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	619a      	str	r2, [r3, #24]
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cec:	e022      	b.n	8007d34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf4:	d01e      	beq.n	8007d34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf6:	f7fa fdff 	bl	80028f8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d302      	bcc.n	8007d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d113      	bne.n	8007d34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d10:	f043 0220 	orr.w	r2, r3, #32
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e00f      	b.n	8007d54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	bf0c      	ite	eq
 8007d44:	2301      	moveq	r3, #1
 8007d46:	2300      	movne	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d0cd      	beq.n	8007cee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d68:	e02c      	b.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f8ea 	bl	8007f48 <I2C_IsErrorOccurred>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e02a      	b.n	8007dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d84:	d01e      	beq.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d86:	f7fa fdb7 	bl	80028f8 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d302      	bcc.n	8007d9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d113      	bne.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da0:	f043 0220 	orr.w	r2, r3, #32
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e007      	b.n	8007dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d1cb      	bne.n	8007d6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007de8:	e028      	b.n	8007e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f8aa 	bl	8007f48 <I2C_IsErrorOccurred>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e026      	b.n	8007e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfe:	f7fa fd7b 	bl	80028f8 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d302      	bcc.n	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d113      	bne.n	8007e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e007      	b.n	8007e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d1cf      	bne.n	8007dea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e60:	e064      	b.n	8007f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f86e 	bl	8007f48 <I2C_IsErrorOccurred>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e062      	b.n	8007f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d138      	bne.n	8007ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d105      	bne.n	8007e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e04e      	b.n	8007f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 0310 	and.w	r3, r3, #16
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d107      	bne.n	8007ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	645a      	str	r2, [r3, #68]	; 0x44
 8007eba:	e002      	b.n	8007ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6859      	ldr	r1, [r3, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e022      	b.n	8007f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef6:	f7fa fcff 	bl	80028f8 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d302      	bcc.n	8007f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10f      	bne.n	8007f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f10:	f043 0220 	orr.w	r2, r3, #32
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e007      	b.n	8007f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d193      	bne.n	8007e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	fe00e800 	.word	0xfe00e800

08007f48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d075      	beq.n	8008060 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2210      	movs	r2, #16
 8007f7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f7c:	e056      	b.n	800802c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f84:	d052      	beq.n	800802c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f86:	f7fa fcb7 	bl	80028f8 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <I2C_IsErrorOccurred+0x54>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d147      	bne.n	800802c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fbe:	d12e      	bne.n	800801e <I2C_IsErrorOccurred+0xd6>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc6:	d02a      	beq.n	800801e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007fc8:	7cfb      	ldrb	r3, [r7, #19]
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d027      	beq.n	800801e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fdc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fde:	f7fa fc8b 	bl	80028f8 <HAL_GetTick>
 8007fe2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fe4:	e01b      	b.n	800801e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fe6:	f7fa fc87 	bl	80028f8 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b19      	cmp	r3, #25
 8007ff2:	d914      	bls.n	800801e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff8:	f043 0220 	orr.w	r2, r3, #32
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d1dc      	bne.n	8007fe6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b20      	cmp	r3, #32
 8008038:	d003      	beq.n	8008042 <I2C_IsErrorOccurred+0xfa>
 800803a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800803e:	2b00      	cmp	r3, #0
 8008040:	d09d      	beq.n	8007f7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008046:	2b00      	cmp	r3, #0
 8008048:	d103      	bne.n	8008052 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2220      	movs	r2, #32
 8008050:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	f043 0304 	orr.w	r3, r3, #4
 8008058:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f043 0308 	orr.w	r3, r3, #8
 800809a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	f043 0302 	orr.w	r3, r3, #2
 80080bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80080ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01c      	beq.n	8008110 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff fddc 	bl	8007c94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6859      	ldr	r1, [r3, #4]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b0d      	ldr	r3, [pc, #52]	; (800811c <I2C_IsErrorOccurred+0x1d4>)
 80080e8:	400b      	ands	r3, r1
 80080ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008114:	4618      	mov	r0, r3
 8008116:	3728      	adds	r7, #40	; 0x28
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	fe00e800 	.word	0xfe00e800

08008120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607b      	str	r3, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	817b      	strh	r3, [r7, #10]
 800812e:	4613      	mov	r3, r2
 8008130:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008132:	897b      	ldrh	r3, [r7, #10]
 8008134:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008138:	7a7b      	ldrb	r3, [r7, #9]
 800813a:	041b      	lsls	r3, r3, #16
 800813c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008140:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	4313      	orrs	r3, r2
 800814a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800814e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	0d5b      	lsrs	r3, r3, #21
 800815a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800815e:	4b08      	ldr	r3, [pc, #32]	; (8008180 <I2C_TransferConfig+0x60>)
 8008160:	430b      	orrs	r3, r1
 8008162:	43db      	mvns	r3, r3
 8008164:	ea02 0103 	and.w	r1, r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	03ff63ff 	.word	0x03ff63ff

08008184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b20      	cmp	r3, #32
 8008198:	d138      	bne.n	800820c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e032      	b.n	800820e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2224      	movs	r2, #36	; 0x24
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6819      	ldr	r1, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	e000      	b.n	800820e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800820c:	2302      	movs	r3, #2
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b20      	cmp	r3, #32
 800822e:	d139      	bne.n	80082a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800823a:	2302      	movs	r3, #2
 800823c:	e033      	b.n	80082a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2224      	movs	r2, #36	; 0x24
 800824a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0201 	bic.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800826c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082a4:	2302      	movs	r3, #2
  }
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80082c0:	4b18      	ldr	r3, [pc, #96]	; (8008324 <HAL_PWR_EnterSTOPMode+0x70>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f023 0201 	bic.w	r2, r3, #1
 80082c8:	4916      	ldr	r1, [pc, #88]	; (8008324 <HAL_PWR_EnterSTOPMode+0x70>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <HAL_PWR_EnterSTOPMode+0x70>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a13      	ldr	r2, [pc, #76]	; (8008324 <HAL_PWR_EnterSTOPMode+0x70>)
 80082d6:	f023 0305 	bic.w	r3, r3, #5
 80082da:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80082dc:	4b11      	ldr	r3, [pc, #68]	; (8008324 <HAL_PWR_EnterSTOPMode+0x70>)
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	4a10      	ldr	r2, [pc, #64]	; (8008324 <HAL_PWR_EnterSTOPMode+0x70>)
 80082e2:	f023 0302 	bic.w	r3, r3, #2
 80082e6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082e8:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <HAL_PWR_EnterSTOPMode+0x74>)
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	4a0e      	ldr	r2, [pc, #56]	; (8008328 <HAL_PWR_EnterSTOPMode+0x74>)
 80082ee:	f043 0304 	orr.w	r3, r3, #4
 80082f2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80082f4:	f3bf 8f4f 	dsb	sy
}
 80082f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80082fa:	f3bf 8f6f 	isb	sy
}
 80082fe:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8008306:	bf30      	wfi
 8008308:	e000      	b.n	800830c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800830a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <HAL_PWR_EnterSTOPMode+0x74>)
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	4a05      	ldr	r2, [pc, #20]	; (8008328 <HAL_PWR_EnterSTOPMode+0x74>)
 8008312:	f023 0304 	bic.w	r3, r3, #4
 8008316:	6113      	str	r3, [r2, #16]
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	58024800 	.word	0x58024800
 8008328:	e000ed00 	.word	0xe000ed00

0800832c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008334:	4b19      	ldr	r3, [pc, #100]	; (800839c <HAL_PWREx_ConfigSupply+0x70>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b04      	cmp	r3, #4
 800833e:	d00a      	beq.n	8008356 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008340:	4b16      	ldr	r3, [pc, #88]	; (800839c <HAL_PWREx_ConfigSupply+0x70>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	429a      	cmp	r2, r3
 800834c:	d001      	beq.n	8008352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e01f      	b.n	8008392 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e01d      	b.n	8008392 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <HAL_PWREx_ConfigSupply+0x70>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f023 0207 	bic.w	r2, r3, #7
 800835e:	490f      	ldr	r1, [pc, #60]	; (800839c <HAL_PWREx_ConfigSupply+0x70>)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4313      	orrs	r3, r2
 8008364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008366:	f7fa fac7 	bl	80028f8 <HAL_GetTick>
 800836a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800836c:	e009      	b.n	8008382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800836e:	f7fa fac3 	bl	80028f8 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800837c:	d901      	bls.n	8008382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e007      	b.n	8008392 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008382:	4b06      	ldr	r3, [pc, #24]	; (800839c <HAL_PWREx_ConfigSupply+0x70>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800838a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800838e:	d1ee      	bne.n	800836e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	58024800 	.word	0x58024800

080083a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08c      	sub	sp, #48	; 0x30
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f000 bc1d 	b.w	8008bee <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8087 	beq.w	80084d0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083c2:	4b99      	ldr	r3, [pc, #612]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083cc:	4b96      	ldr	r3, [pc, #600]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b10      	cmp	r3, #16
 80083d6:	d007      	beq.n	80083e8 <HAL_RCC_OscConfig+0x48>
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	2b18      	cmp	r3, #24
 80083dc:	d110      	bne.n	8008400 <HAL_RCC_OscConfig+0x60>
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d10b      	bne.n	8008400 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e8:	4b8f      	ldr	r3, [pc, #572]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d06c      	beq.n	80084ce <HAL_RCC_OscConfig+0x12e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d168      	bne.n	80084ce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e3f6      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008408:	d106      	bne.n	8008418 <HAL_RCC_OscConfig+0x78>
 800840a:	4b87      	ldr	r3, [pc, #540]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a86      	ldr	r2, [pc, #536]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	e02e      	b.n	8008476 <HAL_RCC_OscConfig+0xd6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10c      	bne.n	800843a <HAL_RCC_OscConfig+0x9a>
 8008420:	4b81      	ldr	r3, [pc, #516]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a80      	ldr	r2, [pc, #512]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	4b7e      	ldr	r3, [pc, #504]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a7d      	ldr	r2, [pc, #500]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e01d      	b.n	8008476 <HAL_RCC_OscConfig+0xd6>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008442:	d10c      	bne.n	800845e <HAL_RCC_OscConfig+0xbe>
 8008444:	4b78      	ldr	r3, [pc, #480]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a77      	ldr	r2, [pc, #476]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800844a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	4b75      	ldr	r3, [pc, #468]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a74      	ldr	r2, [pc, #464]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	e00b      	b.n	8008476 <HAL_RCC_OscConfig+0xd6>
 800845e:	4b72      	ldr	r3, [pc, #456]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a71      	ldr	r2, [pc, #452]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4b6f      	ldr	r3, [pc, #444]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a6e      	ldr	r2, [pc, #440]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008474:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d013      	beq.n	80084a6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7fa fa3b 	bl	80028f8 <HAL_GetTick>
 8008482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008486:	f7fa fa37 	bl	80028f8 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b64      	cmp	r3, #100	; 0x64
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e3aa      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008498:	4b63      	ldr	r3, [pc, #396]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0f0      	beq.n	8008486 <HAL_RCC_OscConfig+0xe6>
 80084a4:	e014      	b.n	80084d0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a6:	f7fa fa27 	bl	80028f8 <HAL_GetTick>
 80084aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084ae:	f7fa fa23 	bl	80028f8 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b64      	cmp	r3, #100	; 0x64
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e396      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084c0:	4b59      	ldr	r3, [pc, #356]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f0      	bne.n	80084ae <HAL_RCC_OscConfig+0x10e>
 80084cc:	e000      	b.n	80084d0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80cb 	beq.w	8008674 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084de:	4b52      	ldr	r3, [pc, #328]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084e8:	4b4f      	ldr	r3, [pc, #316]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <HAL_RCC_OscConfig+0x164>
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	2b18      	cmp	r3, #24
 80084f8:	d156      	bne.n	80085a8 <HAL_RCC_OscConfig+0x208>
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d151      	bne.n	80085a8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008504:	4b48      	ldr	r3, [pc, #288]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <HAL_RCC_OscConfig+0x17c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e368      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800851c:	4b42      	ldr	r3, [pc, #264]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f023 0219 	bic.w	r2, r3, #25
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	493f      	ldr	r1, [pc, #252]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800852a:	4313      	orrs	r3, r2
 800852c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800852e:	f7fa f9e3 	bl	80028f8 <HAL_GetTick>
 8008532:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008534:	e008      	b.n	8008548 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008536:	f7fa f9df 	bl	80028f8 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e352      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008548:	4b37      	ldr	r3, [pc, #220]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008554:	f7fa fa10 	bl	8002978 <HAL_GetREVID>
 8008558:	4603      	mov	r3, r0
 800855a:	f241 0203 	movw	r2, #4099	; 0x1003
 800855e:	4293      	cmp	r3, r2
 8008560:	d817      	bhi.n	8008592 <HAL_RCC_OscConfig+0x1f2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d108      	bne.n	800857c <HAL_RCC_OscConfig+0x1dc>
 800856a:	4b2f      	ldr	r3, [pc, #188]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008572:	4a2d      	ldr	r2, [pc, #180]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008578:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800857a:	e07b      	b.n	8008674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857c:	4b2a      	ldr	r3, [pc, #168]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	4927      	ldr	r1, [pc, #156]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 800858c:	4313      	orrs	r3, r2
 800858e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008590:	e070      	b.n	8008674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008592:	4b25      	ldr	r3, [pc, #148]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	061b      	lsls	r3, r3, #24
 80085a0:	4921      	ldr	r1, [pc, #132]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085a6:	e065      	b.n	8008674 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d048      	beq.n	8008642 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085b0:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f023 0219 	bic.w	r2, r3, #25
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	491a      	ldr	r1, [pc, #104]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c2:	f7fa f999 	bl	80028f8 <HAL_GetTick>
 80085c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085c8:	e008      	b.n	80085dc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085ca:	f7fa f995 	bl	80028f8 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e308      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085dc:	4b12      	ldr	r3, [pc, #72]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0f0      	beq.n	80085ca <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e8:	f7fa f9c6 	bl	8002978 <HAL_GetREVID>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d81a      	bhi.n	800862c <HAL_RCC_OscConfig+0x28c>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	2b40      	cmp	r3, #64	; 0x40
 80085fc:	d108      	bne.n	8008610 <HAL_RCC_OscConfig+0x270>
 80085fe:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008606:	4a08      	ldr	r2, [pc, #32]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800860c:	6053      	str	r3, [r2, #4]
 800860e:	e031      	b.n	8008674 <HAL_RCC_OscConfig+0x2d4>
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	031b      	lsls	r3, r3, #12
 800861e:	4902      	ldr	r1, [pc, #8]	; (8008628 <HAL_RCC_OscConfig+0x288>)
 8008620:	4313      	orrs	r3, r2
 8008622:	604b      	str	r3, [r1, #4]
 8008624:	e026      	b.n	8008674 <HAL_RCC_OscConfig+0x2d4>
 8008626:	bf00      	nop
 8008628:	58024400 	.word	0x58024400
 800862c:	4b9a      	ldr	r3, [pc, #616]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	061b      	lsls	r3, r3, #24
 800863a:	4997      	ldr	r1, [pc, #604]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800863c:	4313      	orrs	r3, r2
 800863e:	604b      	str	r3, [r1, #4]
 8008640:	e018      	b.n	8008674 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008642:	4b95      	ldr	r3, [pc, #596]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a94      	ldr	r2, [pc, #592]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fa f953 	bl	80028f8 <HAL_GetTick>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008654:	e008      	b.n	8008668 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008656:	f7fa f94f 	bl	80028f8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e2c2      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008668:	4b8b      	ldr	r3, [pc, #556]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f0      	bne.n	8008656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 80a9 	beq.w	80087d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008682:	4b85      	ldr	r3, [pc, #532]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800868a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800868c:	4b82      	ldr	r3, [pc, #520]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b08      	cmp	r3, #8
 8008696:	d007      	beq.n	80086a8 <HAL_RCC_OscConfig+0x308>
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	2b18      	cmp	r3, #24
 800869c:	d13a      	bne.n	8008714 <HAL_RCC_OscConfig+0x374>
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d135      	bne.n	8008714 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086a8:	4b7b      	ldr	r3, [pc, #492]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_RCC_OscConfig+0x320>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d001      	beq.n	80086c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e296      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086c0:	f7fa f95a 	bl	8002978 <HAL_GetREVID>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d817      	bhi.n	80086fe <HAL_RCC_OscConfig+0x35e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d108      	bne.n	80086e8 <HAL_RCC_OscConfig+0x348>
 80086d6:	4b70      	ldr	r3, [pc, #448]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086de:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80086e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086e6:	e075      	b.n	80087d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086e8:	4b6b      	ldr	r3, [pc, #428]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	069b      	lsls	r3, r3, #26
 80086f6:	4968      	ldr	r1, [pc, #416]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086fc:	e06a      	b.n	80087d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086fe:	4b66      	ldr	r3, [pc, #408]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	061b      	lsls	r3, r3, #24
 800870c:	4962      	ldr	r1, [pc, #392]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800870e:	4313      	orrs	r3, r2
 8008710:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008712:	e05f      	b.n	80087d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d042      	beq.n	80087a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800871c:	4b5e      	ldr	r3, [pc, #376]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a5d      	ldr	r2, [pc, #372]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008728:	f7fa f8e6 	bl	80028f8 <HAL_GetTick>
 800872c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008730:	f7fa f8e2 	bl	80028f8 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e255      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008742:	4b55      	ldr	r3, [pc, #340]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f0      	beq.n	8008730 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800874e:	f7fa f913 	bl	8002978 <HAL_GetREVID>
 8008752:	4603      	mov	r3, r0
 8008754:	f241 0203 	movw	r2, #4099	; 0x1003
 8008758:	4293      	cmp	r3, r2
 800875a:	d817      	bhi.n	800878c <HAL_RCC_OscConfig+0x3ec>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	2b20      	cmp	r3, #32
 8008762:	d108      	bne.n	8008776 <HAL_RCC_OscConfig+0x3d6>
 8008764:	4b4c      	ldr	r3, [pc, #304]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800876c:	4a4a      	ldr	r2, [pc, #296]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800876e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008772:	6053      	str	r3, [r2, #4]
 8008774:	e02e      	b.n	80087d4 <HAL_RCC_OscConfig+0x434>
 8008776:	4b48      	ldr	r3, [pc, #288]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	069b      	lsls	r3, r3, #26
 8008784:	4944      	ldr	r1, [pc, #272]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]
 800878a:	e023      	b.n	80087d4 <HAL_RCC_OscConfig+0x434>
 800878c:	4b42      	ldr	r3, [pc, #264]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	061b      	lsls	r3, r3, #24
 800879a:	493f      	ldr	r1, [pc, #252]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800879c:	4313      	orrs	r3, r2
 800879e:	60cb      	str	r3, [r1, #12]
 80087a0:	e018      	b.n	80087d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087a2:	4b3d      	ldr	r3, [pc, #244]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a3c      	ldr	r2, [pc, #240]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80087a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ae:	f7fa f8a3 	bl	80028f8 <HAL_GetTick>
 80087b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087b6:	f7fa f89f 	bl	80028f8 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e212      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087c8:	4b33      	ldr	r3, [pc, #204]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f0      	bne.n	80087b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d036      	beq.n	800884e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d019      	beq.n	800881c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087e8:	4b2b      	ldr	r3, [pc, #172]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80087ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ec:	4a2a      	ldr	r2, [pc, #168]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 80087ee:	f043 0301 	orr.w	r3, r3, #1
 80087f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f4:	f7fa f880 	bl	80028f8 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087fc:	f7fa f87c 	bl	80028f8 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e1ef      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800880e:	4b22      	ldr	r3, [pc, #136]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0x45c>
 800881a:	e018      	b.n	800884e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800881c:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800881e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008820:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008828:	f7fa f866 	bl	80028f8 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008830:	f7fa f862 	bl	80028f8 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e1d5      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d039      	beq.n	80088ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01c      	beq.n	800889c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a0c      	ldr	r2, [pc, #48]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 8008868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800886c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800886e:	f7fa f843 	bl	80028f8 <HAL_GetTick>
 8008872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008874:	e008      	b.n	8008888 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008876:	f7fa f83f 	bl	80028f8 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e1b2      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008888:	4b03      	ldr	r3, [pc, #12]	; (8008898 <HAL_RCC_OscConfig+0x4f8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0f0      	beq.n	8008876 <HAL_RCC_OscConfig+0x4d6>
 8008894:	e01b      	b.n	80088ce <HAL_RCC_OscConfig+0x52e>
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800889c:	4b9b      	ldr	r3, [pc, #620]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a9a      	ldr	r2, [pc, #616]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 80088a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088a8:	f7fa f826 	bl	80028f8 <HAL_GetTick>
 80088ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088b0:	f7fa f822 	bl	80028f8 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e195      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088c2:	4b92      	ldr	r3, [pc, #584]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 8081 	beq.w	80089de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088dc:	4b8c      	ldr	r3, [pc, #560]	; (8008b10 <HAL_RCC_OscConfig+0x770>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a8b      	ldr	r2, [pc, #556]	; (8008b10 <HAL_RCC_OscConfig+0x770>)
 80088e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088e8:	f7fa f806 	bl	80028f8 <HAL_GetTick>
 80088ec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088f0:	f7fa f802 	bl	80028f8 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b64      	cmp	r3, #100	; 0x64
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e175      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008902:	4b83      	ldr	r3, [pc, #524]	; (8008b10 <HAL_RCC_OscConfig+0x770>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0f0      	beq.n	80088f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d106      	bne.n	8008924 <HAL_RCC_OscConfig+0x584>
 8008916:	4b7d      	ldr	r3, [pc, #500]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	4a7c      	ldr	r2, [pc, #496]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	6713      	str	r3, [r2, #112]	; 0x70
 8008922:	e02d      	b.n	8008980 <HAL_RCC_OscConfig+0x5e0>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <HAL_RCC_OscConfig+0x5a6>
 800892c:	4b77      	ldr	r3, [pc, #476]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a76      	ldr	r2, [pc, #472]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	4b74      	ldr	r3, [pc, #464]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800893a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893c:	4a73      	ldr	r2, [pc, #460]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800893e:	f023 0304 	bic.w	r3, r3, #4
 8008942:	6713      	str	r3, [r2, #112]	; 0x70
 8008944:	e01c      	b.n	8008980 <HAL_RCC_OscConfig+0x5e0>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	2b05      	cmp	r3, #5
 800894c:	d10c      	bne.n	8008968 <HAL_RCC_OscConfig+0x5c8>
 800894e:	4b6f      	ldr	r3, [pc, #444]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4a6e      	ldr	r2, [pc, #440]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008954:	f043 0304 	orr.w	r3, r3, #4
 8008958:	6713      	str	r3, [r2, #112]	; 0x70
 800895a:	4b6c      	ldr	r3, [pc, #432]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800895c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895e:	4a6b      	ldr	r2, [pc, #428]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008960:	f043 0301 	orr.w	r3, r3, #1
 8008964:	6713      	str	r3, [r2, #112]	; 0x70
 8008966:	e00b      	b.n	8008980 <HAL_RCC_OscConfig+0x5e0>
 8008968:	4b68      	ldr	r3, [pc, #416]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	4a67      	ldr	r2, [pc, #412]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	6713      	str	r3, [r2, #112]	; 0x70
 8008974:	4b65      	ldr	r3, [pc, #404]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008978:	4a64      	ldr	r2, [pc, #400]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 800897a:	f023 0304 	bic.w	r3, r3, #4
 800897e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d015      	beq.n	80089b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008988:	f7f9 ffb6 	bl	80028f8 <HAL_GetTick>
 800898c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800898e:	e00a      	b.n	80089a6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008990:	f7f9 ffb2 	bl	80028f8 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	f241 3288 	movw	r2, #5000	; 0x1388
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e123      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089a6:	4b59      	ldr	r3, [pc, #356]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0ee      	beq.n	8008990 <HAL_RCC_OscConfig+0x5f0>
 80089b2:	e014      	b.n	80089de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b4:	f7f9 ffa0 	bl	80028f8 <HAL_GetTick>
 80089b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089ba:	e00a      	b.n	80089d2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089bc:	f7f9 ff9c 	bl	80028f8 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e10d      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089d2:	4b4e      	ldr	r3, [pc, #312]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1ee      	bne.n	80089bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 8102 	beq.w	8008bec <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089e8:	4b48      	ldr	r3, [pc, #288]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f0:	2b18      	cmp	r3, #24
 80089f2:	f000 80bd 	beq.w	8008b70 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	f040 809e 	bne.w	8008b3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a00:	4b42      	ldr	r3, [pc, #264]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a41      	ldr	r2, [pc, #260]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7f9 ff74 	bl	80028f8 <HAL_GetTick>
 8008a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a14:	f7f9 ff70 	bl	80028f8 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e0e3      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a26:	4b39      	ldr	r3, [pc, #228]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f0      	bne.n	8008a14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a32:	4b36      	ldr	r3, [pc, #216]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a36:	4b37      	ldr	r3, [pc, #220]	; (8008b14 <HAL_RCC_OscConfig+0x774>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a42:	0112      	lsls	r2, r2, #4
 8008a44:	430a      	orrs	r2, r1
 8008a46:	4931      	ldr	r1, [pc, #196]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	628b      	str	r3, [r1, #40]	; 0x28
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a50:	3b01      	subs	r3, #1
 8008a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	025b      	lsls	r3, r3, #9
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	3b01      	subs	r3, #1
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a74:	3b01      	subs	r3, #1
 8008a76:	061b      	lsls	r3, r3, #24
 8008a78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a7c:	4923      	ldr	r1, [pc, #140]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a82:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a8e:	4b1f      	ldr	r3, [pc, #124]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a92:	4b21      	ldr	r3, [pc, #132]	; (8008b18 <HAL_RCC_OscConfig+0x778>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a9a:	00d2      	lsls	r2, r2, #3
 8008a9c:	491b      	ldr	r1, [pc, #108]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008aa2:	4b1a      	ldr	r3, [pc, #104]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	f023 020c 	bic.w	r2, r3, #12
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	4917      	ldr	r1, [pc, #92]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ab4:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	f023 0202 	bic.w	r2, r3, #2
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac0:	4912      	ldr	r1, [pc, #72]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad2:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	4a0d      	ldr	r2, [pc, #52]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ade:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	4a0a      	ldr	r2, [pc, #40]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008aea:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	4a07      	ldr	r2, [pc, #28]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a04      	ldr	r2, [pc, #16]	; (8008b0c <HAL_RCC_OscConfig+0x76c>)
 8008afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b02:	f7f9 fef9 	bl	80028f8 <HAL_GetTick>
 8008b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b08:	e011      	b.n	8008b2e <HAL_RCC_OscConfig+0x78e>
 8008b0a:	bf00      	nop
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	58024800 	.word	0x58024800
 8008b14:	fffffc0c 	.word	0xfffffc0c
 8008b18:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b1c:	f7f9 feec 	bl	80028f8 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e05f      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b2e:	4b32      	ldr	r3, [pc, #200]	; (8008bf8 <HAL_RCC_OscConfig+0x858>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f0      	beq.n	8008b1c <HAL_RCC_OscConfig+0x77c>
 8008b3a:	e057      	b.n	8008bec <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b3c:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <HAL_RCC_OscConfig+0x858>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a2d      	ldr	r2, [pc, #180]	; (8008bf8 <HAL_RCC_OscConfig+0x858>)
 8008b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b48:	f7f9 fed6 	bl	80028f8 <HAL_GetTick>
 8008b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b50:	f7f9 fed2 	bl	80028f8 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e045      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b62:	4b25      	ldr	r3, [pc, #148]	; (8008bf8 <HAL_RCC_OscConfig+0x858>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <HAL_RCC_OscConfig+0x7b0>
 8008b6e:	e03d      	b.n	8008bec <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b70:	4b21      	ldr	r3, [pc, #132]	; (8008bf8 <HAL_RCC_OscConfig+0x858>)
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b76:	4b20      	ldr	r3, [pc, #128]	; (8008bf8 <HAL_RCC_OscConfig+0x858>)
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d031      	beq.n	8008be8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f003 0203 	and.w	r2, r3, #3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d12a      	bne.n	8008be8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	091b      	lsrs	r3, r3, #4
 8008b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d122      	bne.n	8008be8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d11a      	bne.n	8008be8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	0a5b      	lsrs	r3, r3, #9
 8008bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d111      	bne.n	8008be8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	0c1b      	lsrs	r3, r3, #16
 8008bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d108      	bne.n	8008be8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	0e1b      	lsrs	r3, r3, #24
 8008bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d001      	beq.n	8008bec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3730      	adds	r7, #48	; 0x30
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	58024400 	.word	0x58024400

08008bfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e19c      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c10:	4b8a      	ldr	r3, [pc, #552]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d910      	bls.n	8008c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1e:	4b87      	ldr	r3, [pc, #540]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f023 020f 	bic.w	r2, r3, #15
 8008c26:	4985      	ldr	r1, [pc, #532]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c2e:	4b83      	ldr	r3, [pc, #524]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d001      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e184      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	4b7b      	ldr	r3, [pc, #492]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d908      	bls.n	8008c6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c5c:	4b78      	ldr	r3, [pc, #480]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	4975      	ldr	r1, [pc, #468]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d010      	beq.n	8008c9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	4b70      	ldr	r3, [pc, #448]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d908      	bls.n	8008c9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c8a:	4b6d      	ldr	r3, [pc, #436]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	496a      	ldr	r1, [pc, #424]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699a      	ldr	r2, [r3, #24]
 8008cac:	4b64      	ldr	r3, [pc, #400]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d908      	bls.n	8008cca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cb8:	4b61      	ldr	r3, [pc, #388]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	495e      	ldr	r1, [pc, #376]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	4b59      	ldr	r3, [pc, #356]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d908      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ce6:	4b56      	ldr	r3, [pc, #344]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	4953      	ldr	r1, [pc, #332]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	4b4d      	ldr	r3, [pc, #308]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d908      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d14:	4b4a      	ldr	r3, [pc, #296]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f023 020f 	bic.w	r2, r3, #15
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	4947      	ldr	r1, [pc, #284]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d055      	beq.n	8008dde <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d32:	4b43      	ldr	r3, [pc, #268]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	4940      	ldr	r1, [pc, #256]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d107      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d4c:	4b3c      	ldr	r3, [pc, #240]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d121      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e0f6      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d107      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d64:	4b36      	ldr	r3, [pc, #216]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d115      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0ea      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d7c:	4b30      	ldr	r3, [pc, #192]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e0de      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d8c:	4b2c      	ldr	r3, [pc, #176]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0d6      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d9c:	4b28      	ldr	r3, [pc, #160]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f023 0207 	bic.w	r2, r3, #7
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4925      	ldr	r1, [pc, #148]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dae:	f7f9 fda3 	bl	80028f8 <HAL_GetTick>
 8008db2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db4:	e00a      	b.n	8008dcc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008db6:	f7f9 fd9f 	bl	80028f8 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d901      	bls.n	8008dcc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e0be      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d1eb      	bne.n	8008db6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d010      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f003 030f 	and.w	r3, r3, #15
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d208      	bcs.n	8008e0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dfa:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f023 020f 	bic.w	r2, r3, #15
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	490e      	ldr	r1, [pc, #56]	; (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d214      	bcs.n	8008e44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e1a:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f023 020f 	bic.w	r2, r3, #15
 8008e22:	4906      	ldr	r1, [pc, #24]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2a:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d005      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e086      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
 8008e3c:	52002000 	.word	0x52002000
 8008e40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d010      	beq.n	8008e72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	4b3f      	ldr	r3, [pc, #252]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d208      	bcs.n	8008e72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e60:	4b3c      	ldr	r3, [pc, #240]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	4939      	ldr	r1, [pc, #228]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d010      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695a      	ldr	r2, [r3, #20]
 8008e82:	4b34      	ldr	r3, [pc, #208]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d208      	bcs.n	8008ea0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	492e      	ldr	r1, [pc, #184]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d010      	beq.n	8008ece <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	4b28      	ldr	r3, [pc, #160]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d208      	bcs.n	8008ece <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ebc:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	4922      	ldr	r1, [pc, #136]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d010      	beq.n	8008efc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69da      	ldr	r2, [r3, #28]
 8008ede:	4b1d      	ldr	r3, [pc, #116]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d208      	bcs.n	8008efc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008eea:	4b1a      	ldr	r3, [pc, #104]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	4917      	ldr	r1, [pc, #92]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008efc:	f000 f834 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	4912      	ldr	r1, [pc, #72]	; (8008f58 <HAL_RCC_ClockConfig+0x35c>)
 8008f0e:	5ccb      	ldrb	r3, [r1, r3]
 8008f10:	f003 031f 	and.w	r3, r3, #31
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	4a0d      	ldr	r2, [pc, #52]	; (8008f58 <HAL_RCC_ClockConfig+0x35c>)
 8008f24:	5cd3      	ldrb	r3, [r2, r3]
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	4a0a      	ldr	r2, [pc, #40]	; (8008f5c <HAL_RCC_ClockConfig+0x360>)
 8008f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f34:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <HAL_RCC_ClockConfig+0x364>)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <HAL_RCC_ClockConfig+0x368>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f9 fc90 	bl	8002864 <HAL_InitTick>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
 8008f58:	0800fe90 	.word	0x0800fe90
 8008f5c:	24000034 	.word	0x24000034
 8008f60:	24000030 	.word	0x24000030
 8008f64:	24000038 	.word	0x24000038

08008f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b089      	sub	sp, #36	; 0x24
 8008f6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f6e:	4bb3      	ldr	r3, [pc, #716]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f76:	2b18      	cmp	r3, #24
 8008f78:	f200 8155 	bhi.w	8009226 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	08009227 	.word	0x08009227
 8008f8c:	08009227 	.word	0x08009227
 8008f90:	08009227 	.word	0x08009227
 8008f94:	08009227 	.word	0x08009227
 8008f98:	08009227 	.word	0x08009227
 8008f9c:	08009227 	.word	0x08009227
 8008fa0:	08009227 	.word	0x08009227
 8008fa4:	0800900f 	.word	0x0800900f
 8008fa8:	08009227 	.word	0x08009227
 8008fac:	08009227 	.word	0x08009227
 8008fb0:	08009227 	.word	0x08009227
 8008fb4:	08009227 	.word	0x08009227
 8008fb8:	08009227 	.word	0x08009227
 8008fbc:	08009227 	.word	0x08009227
 8008fc0:	08009227 	.word	0x08009227
 8008fc4:	08009015 	.word	0x08009015
 8008fc8:	08009227 	.word	0x08009227
 8008fcc:	08009227 	.word	0x08009227
 8008fd0:	08009227 	.word	0x08009227
 8008fd4:	08009227 	.word	0x08009227
 8008fd8:	08009227 	.word	0x08009227
 8008fdc:	08009227 	.word	0x08009227
 8008fe0:	08009227 	.word	0x08009227
 8008fe4:	0800901b 	.word	0x0800901b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fe8:	4b94      	ldr	r3, [pc, #592]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ff4:	4b91      	ldr	r3, [pc, #580]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	08db      	lsrs	r3, r3, #3
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	4a90      	ldr	r2, [pc, #576]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009000:	fa22 f303 	lsr.w	r3, r2, r3
 8009004:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009006:	e111      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009008:	4b8d      	ldr	r3, [pc, #564]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800900a:	61bb      	str	r3, [r7, #24]
    break;
 800900c:	e10e      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800900e:	4b8d      	ldr	r3, [pc, #564]	; (8009244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009010:	61bb      	str	r3, [r7, #24]
    break;
 8009012:	e10b      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009014:	4b8c      	ldr	r3, [pc, #560]	; (8009248 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009016:	61bb      	str	r3, [r7, #24]
    break;
 8009018:	e108      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800901a:	4b88      	ldr	r3, [pc, #544]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009024:	4b85      	ldr	r3, [pc, #532]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	091b      	lsrs	r3, r3, #4
 800902a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800902e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009030:	4b82      	ldr	r3, [pc, #520]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800903a:	4b80      	ldr	r3, [pc, #512]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	fb02 f303 	mul.w	r3, r2, r3
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80e1 	beq.w	8009220 <HAL_RCC_GetSysClockFreq+0x2b8>
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b02      	cmp	r3, #2
 8009062:	f000 8083 	beq.w	800916c <HAL_RCC_GetSysClockFreq+0x204>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f200 80a1 	bhi.w	80091b0 <HAL_RCC_GetSysClockFreq+0x248>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0x114>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d056      	beq.n	8009128 <HAL_RCC_GetSysClockFreq+0x1c0>
 800907a:	e099      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800907c:	4b6f      	ldr	r3, [pc, #444]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d02d      	beq.n	80090e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009088:	4b6c      	ldr	r3, [pc, #432]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	08db      	lsrs	r3, r3, #3
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	4a6b      	ldr	r2, [pc, #428]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009094:	fa22 f303 	lsr.w	r3, r2, r3
 8009098:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b2:	4b62      	ldr	r3, [pc, #392]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80090c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090e2:	e087      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009250 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f6:	4b51      	ldr	r3, [pc, #324]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009106:	ed97 6a02 	vldr	s12, [r7, #8]
 800910a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 800910e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800911a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009126:	e065      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009254 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913a:	4b40      	ldr	r3, [pc, #256]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914a:	ed97 6a02 	vldr	s12, [r7, #8]
 800914e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916a:	e043      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009258 <HAL_RCC_GetSysClockFreq+0x2f0>
 800917a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917e:	4b2f      	ldr	r3, [pc, #188]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009192:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ae:	e021      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009254 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b1e      	ldr	r3, [pc, #120]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091f4:	4b11      	ldr	r3, [pc, #68]	; (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	0a5b      	lsrs	r3, r3, #9
 80091fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091fe:	3301      	adds	r3, #1
 8009200:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800920c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009218:	ee17 3a90 	vmov	r3, s15
 800921c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800921e:	e005      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
    break;
 8009224:	e002      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009226:	4b07      	ldr	r3, [pc, #28]	; (8009244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009228:	61bb      	str	r3, [r7, #24]
    break;
 800922a:	bf00      	nop
  }

  return sysclockfreq;
 800922c:	69bb      	ldr	r3, [r7, #24]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3724      	adds	r7, #36	; 0x24
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
 8009240:	03d09000 	.word	0x03d09000
 8009244:	003d0900 	.word	0x003d0900
 8009248:	017d7840 	.word	0x017d7840
 800924c:	46000000 	.word	0x46000000
 8009250:	4c742400 	.word	0x4c742400
 8009254:	4a742400 	.word	0x4a742400
 8009258:	4bbebc20 	.word	0x4bbebc20

0800925c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009262:	f7ff fe81 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 8009266:	4602      	mov	r2, r0
 8009268:	4b10      	ldr	r3, [pc, #64]	; (80092ac <HAL_RCC_GetHCLKFreq+0x50>)
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	490f      	ldr	r1, [pc, #60]	; (80092b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009274:	5ccb      	ldrb	r3, [r1, r3]
 8009276:	f003 031f 	and.w	r3, r3, #31
 800927a:	fa22 f303 	lsr.w	r3, r2, r3
 800927e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009280:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <HAL_RCC_GetHCLKFreq+0x50>)
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800928a:	5cd3      	ldrb	r3, [r2, r3]
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	fa22 f303 	lsr.w	r3, r2, r3
 8009296:	4a07      	ldr	r2, [pc, #28]	; (80092b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009298:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800929a:	4a07      	ldr	r2, [pc, #28]	; (80092b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80092a2:	681b      	ldr	r3, [r3, #0]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	58024400 	.word	0x58024400
 80092b0:	0800fe90 	.word	0x0800fe90
 80092b4:	24000034 	.word	0x24000034
 80092b8:	24000030 	.word	0x24000030

080092bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092c0:	f7ff ffcc 	bl	800925c <HAL_RCC_GetHCLKFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	091b      	lsrs	r3, r3, #4
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	58024400 	.word	0x58024400
 80092e4:	0800fe90 	.word	0x0800fe90

080092e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092ec:	f7ff ffb6 	bl	800925c <HAL_RCC_GetHCLKFreq>
 80092f0:	4602      	mov	r2, r0
 80092f2:	4b06      	ldr	r3, [pc, #24]	; (800930c <HAL_RCC_GetPCLK2Freq+0x24>)
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	0a1b      	lsrs	r3, r3, #8
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	4904      	ldr	r1, [pc, #16]	; (8009310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092fe:	5ccb      	ldrb	r3, [r1, r3]
 8009300:	f003 031f 	and.w	r3, r3, #31
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009308:	4618      	mov	r0, r3
 800930a:	bd80      	pop	{r7, pc}
 800930c:	58024400 	.word	0x58024400
 8009310:	0800fe90 	.word	0x0800fe90

08009314 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009320:	2300      	movs	r3, #0
 8009322:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d03f      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009338:	d02a      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800933a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800933e:	d824      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009344:	d018      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800934a:	d81e      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009354:	d007      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009356:	e018      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009358:	4ba3      	ldr	r3, [pc, #652]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	4aa2      	ldr	r2, [pc, #648]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800935e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009364:	e015      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3304      	adds	r3, #4
 800936a:	2102      	movs	r1, #2
 800936c:	4618      	mov	r0, r3
 800936e:	f001 fff9 	bl	800b364 <RCCEx_PLL2_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009376:	e00c      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	2102      	movs	r1, #2
 800937e:	4618      	mov	r0, r3
 8009380:	f002 f8a2 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009388:	e003      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
      break;
 800938e:	e000      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d109      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009398:	4b93      	ldr	r3, [pc, #588]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800939a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a4:	4990      	ldr	r1, [pc, #576]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	650b      	str	r3, [r1, #80]	; 0x50
 80093aa:	e001      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d03d      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d826      	bhi.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	080093e1 	.word	0x080093e1
 80093d0:	080093ef 	.word	0x080093ef
 80093d4:	08009401 	.word	0x08009401
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009419 	.word	0x08009419
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e0:	4b81      	ldr	r3, [pc, #516]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	4a80      	ldr	r2, [pc, #512]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093ec:	e015      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3304      	adds	r3, #4
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 ffb5 	bl	800b364 <RCCEx_PLL2_Config>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093fe:	e00c      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3324      	adds	r3, #36	; 0x24
 8009404:	2100      	movs	r1, #0
 8009406:	4618      	mov	r0, r3
 8009408:	f002 f85e 	bl	800b4c8 <RCCEx_PLL3_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009410:	e003      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      break;
 8009416:	e000      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d109      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009420:	4b71      	ldr	r3, [pc, #452]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009424:	f023 0207 	bic.w	r2, r3, #7
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942c:	496e      	ldr	r1, [pc, #440]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800942e:	4313      	orrs	r3, r2
 8009430:	650b      	str	r3, [r1, #80]	; 0x50
 8009432:	e001      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009440:	2b00      	cmp	r3, #0
 8009442:	d042      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800944c:	d02b      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800944e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009452:	d825      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009454:	2bc0      	cmp	r3, #192	; 0xc0
 8009456:	d028      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009458:	2bc0      	cmp	r3, #192	; 0xc0
 800945a:	d821      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	d016      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009460:	2b80      	cmp	r3, #128	; 0x80
 8009462:	d81d      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d007      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800946c:	e018      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800946e:	4b5e      	ldr	r3, [pc, #376]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	4a5d      	ldr	r2, [pc, #372]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800947a:	e017      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f001 ff6e 	bl	800b364 <RCCEx_PLL2_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800948c:	e00e      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3324      	adds	r3, #36	; 0x24
 8009492:	2100      	movs	r1, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f002 f817 	bl	800b4c8 <RCCEx_PLL3_Config>
 800949a:	4603      	mov	r3, r0
 800949c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800949e:	e005      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
      break;
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094b2:	4b4d      	ldr	r3, [pc, #308]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094be:	494a      	ldr	r1, [pc, #296]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	650b      	str	r3, [r1, #80]	; 0x50
 80094c4:	e001      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d049      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094e0:	d030      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094e6:	d82a      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094ec:	d02c      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80094ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094f2:	d824      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094f8:	d018      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80094fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094fe:	d81e      	bhi.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009508:	d007      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800950a:	e018      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800950c:	4b36      	ldr	r3, [pc, #216]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	4a35      	ldr	r2, [pc, #212]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009518:	e017      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3304      	adds	r3, #4
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f001 ff1f 	bl	800b364 <RCCEx_PLL2_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800952a:	e00e      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3324      	adds	r3, #36	; 0x24
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f001 ffc8 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009538:	4603      	mov	r3, r0
 800953a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800953c:	e005      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
      break;
 8009542:	e002      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009544:	bf00      	nop
 8009546:	e000      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009550:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009554:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800955e:	4922      	ldr	r1, [pc, #136]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009560:	4313      	orrs	r3, r2
 8009562:	658b      	str	r3, [r1, #88]	; 0x58
 8009564:	e001      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009572:	2b00      	cmp	r3, #0
 8009574:	d04b      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800957c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009580:	d030      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009586:	d82a      	bhi.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009588:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800958c:	d02e      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800958e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009592:	d824      	bhi.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009598:	d018      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800959a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800959e:	d81e      	bhi.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80095a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095a8:	d007      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80095aa:	e018      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ac:	4b0e      	ldr	r3, [pc, #56]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	4a0d      	ldr	r2, [pc, #52]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095b8:	e019      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3304      	adds	r3, #4
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 fecf 	bl	800b364 <RCCEx_PLL2_Config>
 80095c6:	4603      	mov	r3, r0
 80095c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095ca:	e010      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3324      	adds	r3, #36	; 0x24
 80095d0:	2100      	movs	r1, #0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 ff78 	bl	800b4c8 <RCCEx_PLL3_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095dc:	e007      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	75fb      	strb	r3, [r7, #23]
      break;
 80095e2:	e004      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80095e4:	bf00      	nop
 80095e6:	e002      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80095e8:	58024400 	.word	0x58024400
      break;
 80095ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095f4:	4b99      	ldr	r3, [pc, #612]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009602:	4996      	ldr	r1, [pc, #600]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009604:	4313      	orrs	r3, r2
 8009606:	658b      	str	r3, [r1, #88]	; 0x58
 8009608:	e001      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d032      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961e:	2b30      	cmp	r3, #48	; 0x30
 8009620:	d01c      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009622:	2b30      	cmp	r3, #48	; 0x30
 8009624:	d817      	bhi.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009626:	2b20      	cmp	r3, #32
 8009628:	d00c      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800962a:	2b20      	cmp	r3, #32
 800962c:	d813      	bhi.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d016      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009632:	2b10      	cmp	r3, #16
 8009634:	d10f      	bne.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009636:	4b89      	ldr	r3, [pc, #548]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	4a88      	ldr	r2, [pc, #544]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800963c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009642:	e00e      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	2102      	movs	r1, #2
 800964a:	4618      	mov	r0, r3
 800964c:	f001 fe8a 	bl	800b364 <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009654:	e005      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
      break;
 800965a:	e002      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800965c:	bf00      	nop
 800965e:	e000      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d109      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009668:	4b7c      	ldr	r3, [pc, #496]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009674:	4979      	ldr	r1, [pc, #484]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009676:	4313      	orrs	r3, r2
 8009678:	64cb      	str	r3, [r1, #76]	; 0x4c
 800967a:	e001      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d047      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009694:	d030      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800969a:	d82a      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800969c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096a0:	d02c      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80096a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096a6:	d824      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ac:	d018      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80096ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b2:	d81e      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80096b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096bc:	d007      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80096be:	e018      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c0:	4b66      	ldr	r3, [pc, #408]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	4a65      	ldr	r2, [pc, #404]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096cc:	e017      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3304      	adds	r3, #4
 80096d2:	2100      	movs	r1, #0
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 fe45 	bl	800b364 <RCCEx_PLL2_Config>
 80096da:	4603      	mov	r3, r0
 80096dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096de:	e00e      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3324      	adds	r3, #36	; 0x24
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 feee 	bl	800b4c8 <RCCEx_PLL3_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096f0:	e005      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	75fb      	strb	r3, [r7, #23]
      break;
 80096f6:	e002      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009704:	4b55      	ldr	r3, [pc, #340]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009710:	4952      	ldr	r1, [pc, #328]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009712:	4313      	orrs	r3, r2
 8009714:	650b      	str	r3, [r1, #80]	; 0x50
 8009716:	e001      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d049      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009730:	d02e      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009736:	d828      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800973c:	d02a      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800973e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009742:	d822      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009744:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009748:	d026      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800974a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800974e:	d81c      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009754:	d010      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800975a:	d816      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01d      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009764:	d111      	bne.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3304      	adds	r3, #4
 800976a:	2101      	movs	r1, #1
 800976c:	4618      	mov	r0, r3
 800976e:	f001 fdf9 	bl	800b364 <RCCEx_PLL2_Config>
 8009772:	4603      	mov	r3, r0
 8009774:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009776:	e012      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3324      	adds	r3, #36	; 0x24
 800977c:	2101      	movs	r1, #1
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fea2 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009784:	4603      	mov	r3, r0
 8009786:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009788:	e009      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	75fb      	strb	r3, [r7, #23]
      break;
 800978e:	e006      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009790:	bf00      	nop
 8009792:	e004      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009794:	bf00      	nop
 8009796:	e002      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009798:	bf00      	nop
 800979a:	e000      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800979c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d109      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097a4:	4b2d      	ldr	r3, [pc, #180]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b0:	492a      	ldr	r1, [pc, #168]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	650b      	str	r3, [r1, #80]	; 0x50
 80097b6:	e001      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d04d      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d2:	d02e      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80097d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d8:	d828      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d02a      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80097e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e4:	d822      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ea:	d026      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80097ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097f0:	d81c      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f6:	d010      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80097f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097fc:	d816      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01d      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009806:	d111      	bne.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	2101      	movs	r1, #1
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fda8 	bl	800b364 <RCCEx_PLL2_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009818:	e012      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3324      	adds	r3, #36	; 0x24
 800981e:	2101      	movs	r1, #1
 8009820:	4618      	mov	r0, r3
 8009822:	f001 fe51 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800982a:	e009      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	75fb      	strb	r3, [r7, #23]
      break;
 8009830:	e006      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009832:	bf00      	nop
 8009834:	e004      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009836:	bf00      	nop
 8009838:	e002      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800983a:	bf00      	nop
 800983c:	e000      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800983e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10c      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009854:	4901      	ldr	r1, [pc, #4]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009856:	4313      	orrs	r3, r2
 8009858:	658b      	str	r3, [r1, #88]	; 0x58
 800985a:	e003      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800985c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d02f      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009878:	d00e      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800987a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800987e:	d814      	bhi.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d015      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009888:	d10f      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800988a:	4baf      	ldr	r3, [pc, #700]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	4aae      	ldr	r2, [pc, #696]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009896:	e00c      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3304      	adds	r3, #4
 800989c:	2101      	movs	r1, #1
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 fd60 	bl	800b364 <RCCEx_PLL2_Config>
 80098a4:	4603      	mov	r3, r0
 80098a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098a8:	e003      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
      break;
 80098ae:	e000      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80098b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098b8:	4ba3      	ldr	r3, [pc, #652]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c4:	49a0      	ldr	r1, [pc, #640]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	650b      	str	r3, [r1, #80]	; 0x50
 80098ca:	e001      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d032      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d81b      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80098e4:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80098e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ea:	bf00      	nop
 80098ec:	08009923 	.word	0x08009923
 80098f0:	080098fd 	.word	0x080098fd
 80098f4:	0800990b 	.word	0x0800990b
 80098f8:	08009923 	.word	0x08009923
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fc:	4b92      	ldr	r3, [pc, #584]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	4a91      	ldr	r2, [pc, #580]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009908:	e00c      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3304      	adds	r3, #4
 800990e:	2102      	movs	r1, #2
 8009910:	4618      	mov	r0, r3
 8009912:	f001 fd27 	bl	800b364 <RCCEx_PLL2_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800991a:	e003      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	75fb      	strb	r3, [r7, #23]
      break;
 8009920:	e000      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800992a:	4b87      	ldr	r3, [pc, #540]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800992c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992e:	f023 0203 	bic.w	r2, r3, #3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	4984      	ldr	r1, [pc, #528]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009938:	4313      	orrs	r3, r2
 800993a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800993c:	e001      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8086 	beq.w	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009950:	4b7e      	ldr	r3, [pc, #504]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a7d      	ldr	r2, [pc, #500]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800995a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800995c:	f7f8 ffcc 	bl	80028f8 <HAL_GetTick>
 8009960:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009962:	e009      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009964:	f7f8 ffc8 	bl	80028f8 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b64      	cmp	r3, #100	; 0x64
 8009970:	d902      	bls.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	75fb      	strb	r3, [r7, #23]
        break;
 8009976:	e005      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009978:	4b74      	ldr	r3, [pc, #464]	; (8009b4c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0ef      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d166      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800998a:	4b6f      	ldr	r3, [pc, #444]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800998c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009994:	4053      	eors	r3, r2
 8009996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800999a:	2b00      	cmp	r3, #0
 800999c:	d013      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800999e:	4b6a      	ldr	r3, [pc, #424]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099a8:	4b67      	ldr	r3, [pc, #412]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ac:	4a66      	ldr	r2, [pc, #408]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099b4:	4b64      	ldr	r3, [pc, #400]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b8:	4a63      	ldr	r2, [pc, #396]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80099c0:	4a61      	ldr	r2, [pc, #388]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d0:	d115      	bne.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d2:	f7f8 ff91 	bl	80028f8 <HAL_GetTick>
 80099d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099d8:	e00b      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099da:	f7f8 ff8d 	bl	80028f8 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d902      	bls.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	75fb      	strb	r3, [r7, #23]
            break;
 80099f0:	e005      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099f2:	4b55      	ldr	r3, [pc, #340]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0ed      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d126      	bne.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a12:	d10d      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009a14:	4b4c      	ldr	r3, [pc, #304]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a22:	0919      	lsrs	r1, r3, #4
 8009a24:	4b4a      	ldr	r3, [pc, #296]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009a26:	400b      	ands	r3, r1
 8009a28:	4947      	ldr	r1, [pc, #284]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	610b      	str	r3, [r1, #16]
 8009a2e:	e005      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009a30:	4b45      	ldr	r3, [pc, #276]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	4a44      	ldr	r2, [pc, #272]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a3a:	6113      	str	r3, [r2, #16]
 8009a3c:	4b42      	ldr	r3, [pc, #264]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a4a:	493f      	ldr	r1, [pc, #252]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	670b      	str	r3, [r1, #112]	; 0x70
 8009a50:	e004      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	75bb      	strb	r3, [r7, #22]
 8009a56:	e001      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8085 	beq.w	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a6e:	2b28      	cmp	r3, #40	; 0x28
 8009a70:	d866      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009b55 	.word	0x08009b55
 8009a7c:	08009b41 	.word	0x08009b41
 8009a80:	08009b41 	.word	0x08009b41
 8009a84:	08009b41 	.word	0x08009b41
 8009a88:	08009b41 	.word	0x08009b41
 8009a8c:	08009b41 	.word	0x08009b41
 8009a90:	08009b41 	.word	0x08009b41
 8009a94:	08009b41 	.word	0x08009b41
 8009a98:	08009b1d 	.word	0x08009b1d
 8009a9c:	08009b41 	.word	0x08009b41
 8009aa0:	08009b41 	.word	0x08009b41
 8009aa4:	08009b41 	.word	0x08009b41
 8009aa8:	08009b41 	.word	0x08009b41
 8009aac:	08009b41 	.word	0x08009b41
 8009ab0:	08009b41 	.word	0x08009b41
 8009ab4:	08009b41 	.word	0x08009b41
 8009ab8:	08009b2f 	.word	0x08009b2f
 8009abc:	08009b41 	.word	0x08009b41
 8009ac0:	08009b41 	.word	0x08009b41
 8009ac4:	08009b41 	.word	0x08009b41
 8009ac8:	08009b41 	.word	0x08009b41
 8009acc:	08009b41 	.word	0x08009b41
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009b55 	.word	0x08009b55
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009b41 	.word	0x08009b41
 8009ae4:	08009b41 	.word	0x08009b41
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009b41 	.word	0x08009b41
 8009af4:	08009b41 	.word	0x08009b41
 8009af8:	08009b55 	.word	0x08009b55
 8009afc:	08009b41 	.word	0x08009b41
 8009b00:	08009b41 	.word	0x08009b41
 8009b04:	08009b41 	.word	0x08009b41
 8009b08:	08009b41 	.word	0x08009b41
 8009b0c:	08009b41 	.word	0x08009b41
 8009b10:	08009b41 	.word	0x08009b41
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	08009b55 	.word	0x08009b55
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	2101      	movs	r1, #1
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fc1e 	bl	800b364 <RCCEx_PLL2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b2c:	e013      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3324      	adds	r3, #36	; 0x24
 8009b32:	2101      	movs	r1, #1
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 fcc7 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b3e:	e00a      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	75fb      	strb	r3, [r7, #23]
      break;
 8009b44:	e007      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b46:	bf00      	nop
 8009b48:	58024400 	.word	0x58024400
 8009b4c:	58024800 	.word	0x58024800
 8009b50:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b5c:	4b96      	ldr	r3, [pc, #600]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b60:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b68:	4993      	ldr	r1, [pc, #588]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	654b      	str	r3, [r1, #84]	; 0x54
 8009b6e:	e001      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d038      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	d821      	bhi.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009bd3 	.word	0x08009bd3
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009bbb 	.word	0x08009bbb
 8009b9c:	08009bd3 	.word	0x08009bd3
 8009ba0:	08009bd3 	.word	0x08009bd3
 8009ba4:	08009bd3 	.word	0x08009bd3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3304      	adds	r3, #4
 8009bac:	2101      	movs	r1, #1
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f001 fbd8 	bl	800b364 <RCCEx_PLL2_Config>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bb8:	e00c      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3324      	adds	r3, #36	; 0x24
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f001 fc81 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bca:	e003      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd0:	e000      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bda:	4b77      	ldr	r3, [pc, #476]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	f023 0207 	bic.w	r2, r3, #7
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be6:	4974      	ldr	r1, [pc, #464]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	654b      	str	r3, [r1, #84]	; 0x54
 8009bec:	e001      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d03a      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c04:	2b05      	cmp	r3, #5
 8009c06:	d821      	bhi.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c53 	.word	0x08009c53
 8009c14:	08009c29 	.word	0x08009c29
 8009c18:	08009c3b 	.word	0x08009c3b
 8009c1c:	08009c53 	.word	0x08009c53
 8009c20:	08009c53 	.word	0x08009c53
 8009c24:	08009c53 	.word	0x08009c53
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 fb98 	bl	800b364 <RCCEx_PLL2_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c38:	e00c      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3324      	adds	r3, #36	; 0x24
 8009c3e:	2101      	movs	r1, #1
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 fc41 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c50:	e000      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c5a:	4b57      	ldr	r3, [pc, #348]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5e:	f023 0207 	bic.w	r2, r3, #7
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c68:	4953      	ldr	r1, [pc, #332]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8009c6e:	e001      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d04b      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c8a:	d02e      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c90:	d828      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c96:	d02a      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9c:	d822      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ca2:	d026      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009ca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ca8:	d81c      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cae:	d010      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cb4:	d816      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01d      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cbe:	d111      	bne.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fb4c 	bl	800b364 <RCCEx_PLL2_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cd0:	e012      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3324      	adds	r3, #36	; 0x24
 8009cd6:	2102      	movs	r1, #2
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fbf5 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ce2:	e009      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce8:	e006      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cea:	bf00      	nop
 8009cec:	e004      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cfe:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d0c:	492a      	ldr	r1, [pc, #168]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	654b      	str	r3, [r1, #84]	; 0x54
 8009d12:	e001      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d04d      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d2e:	d02e      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009d30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d34:	d828      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d3a:	d02a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d40:	d822      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d46:	d026      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d4c:	d81c      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d52:	d010      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d58:	d816      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01d      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d62:	d111      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3304      	adds	r3, #4
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fafa 	bl	800b364 <RCCEx_PLL2_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d74:	e012      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3324      	adds	r3, #36	; 0x24
 8009d7a:	2102      	movs	r1, #2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 fba3 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d86:	e009      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8c:	e006      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d8e:	bf00      	nop
 8009d90:	e004      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d92:	bf00      	nop
 8009d94:	e002      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d96:	bf00      	nop
 8009d98:	e000      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10c      	bne.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009db0:	4901      	ldr	r1, [pc, #4]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	658b      	str	r3, [r1, #88]	; 0x58
 8009db6:	e003      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
 8009dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d04b      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dd6:	d02e      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009dd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ddc:	d828      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de2:	d02a      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de8:	d822      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dee:	d026      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009df0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009df4:	d81c      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dfa:	d010      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e00:	d816      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01d      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e0a:	d111      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3304      	adds	r3, #4
 8009e10:	2100      	movs	r1, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 faa6 	bl	800b364 <RCCEx_PLL2_Config>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e1c:	e012      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3324      	adds	r3, #36	; 0x24
 8009e22:	2102      	movs	r1, #2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 fb4f 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e2e:	e009      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	75fb      	strb	r3, [r7, #23]
      break;
 8009e34:	e006      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e36:	bf00      	nop
 8009e38:	e004      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e3a:	bf00      	nop
 8009e3c:	e002      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e3e:	bf00      	nop
 8009e40:	e000      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e4a:	4b9d      	ldr	r3, [pc, #628]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e58:	4999      	ldr	r1, [pc, #612]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8009e5e:	e001      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
 8009e62:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01a      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e7a:	d10a      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3324      	adds	r3, #36	; 0x24
 8009e80:	2102      	movs	r1, #2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 fb20 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e92:	4b8b      	ldr	r3, [pc, #556]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ea0:	4987      	ldr	r1, [pc, #540]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01a      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ebc:	d10a      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3324      	adds	r3, #36	; 0x24
 8009ec2:	2102      	movs	r1, #2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f001 faff 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ed4:	4b7a      	ldr	r3, [pc, #488]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ee2:	4977      	ldr	r1, [pc, #476]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d034      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009efe:	d01d      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f04:	d817      	bhi.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0e:	d009      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009f10:	e011      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3304      	adds	r3, #4
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 fa23 	bl	800b364 <RCCEx_PLL2_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f22:	e00c      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3324      	adds	r3, #36	; 0x24
 8009f28:	2102      	movs	r1, #2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 facc 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f34:	e003      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3a:	e000      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f44:	4b5e      	ldr	r3, [pc, #376]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f52:	495b      	ldr	r1, [pc, #364]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	658b      	str	r3, [r1, #88]	; 0x58
 8009f58:	e001      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d033      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f74:	d01c      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f7a:	d816      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f80:	d003      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f86:	d007      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f88:	e00f      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f8a:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	4a4c      	ldr	r2, [pc, #304]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f96:	e00c      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3324      	adds	r3, #36	; 0x24
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 fa92 	bl	800b4c8 <RCCEx_PLL3_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fa8:	e003      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	75fb      	strb	r3, [r7, #23]
      break;
 8009fae:	e000      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fb8:	4b41      	ldr	r3, [pc, #260]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fc6:	493e      	ldr	r1, [pc, #248]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	654b      	str	r3, [r1, #84]	; 0x54
 8009fcc:	e001      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d029      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fea:	d007      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009fec:	e00f      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fee:	4b34      	ldr	r3, [pc, #208]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	4a33      	ldr	r2, [pc, #204]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ffa:	e00b      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3304      	adds	r3, #4
 800a000:	2102      	movs	r1, #2
 800a002:	4618      	mov	r0, r3
 800a004:	f001 f9ae 	bl	800b364 <RCCEx_PLL2_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a00c:	e002      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	75fb      	strb	r3, [r7, #23]
      break;
 800a012:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d109      	bne.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a01a:	4b29      	ldr	r3, [pc, #164]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a026:	4926      	ldr	r1, [pc, #152]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a02c:	e001      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	3324      	adds	r3, #36	; 0x24
 800a042:	2102      	movs	r1, #2
 800a044:	4618      	mov	r0, r3
 800a046:	f001 fa3f 	bl	800b4c8 <RCCEx_PLL3_Config>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d033      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a068:	d017      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a06e:	d811      	bhi.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a074:	d013      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a07a:	d80b      	bhi.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d010      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	d106      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a086:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08a:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a08c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a092:	e007      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]
      break;
 800a098:	e004      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a09a:	bf00      	nop
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a0a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10c      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0b6:	4902      	ldr	r1, [pc, #8]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	654b      	str	r3, [r1, #84]	; 0x54
 800a0bc:	e004      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a0be:	bf00      	nop
 800a0c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0d4:	4b31      	ldr	r3, [pc, #196]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e0:	492e      	ldr	r1, [pc, #184]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0f2:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a100:	4926      	ldr	r1, [pc, #152]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a102:	4313      	orrs	r3, r2
 800a104:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d008      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a112:	4b22      	ldr	r3, [pc, #136]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a116:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a11e:	491f      	ldr	r1, [pc, #124]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a120:	4313      	orrs	r3, r2
 800a122:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00d      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a130:	4b1a      	ldr	r3, [pc, #104]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	4a19      	ldr	r2, [pc, #100]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a13a:	6113      	str	r3, [r2, #16]
 800a13c:	4b17      	ldr	r3, [pc, #92]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a13e:	691a      	ldr	r2, [r3, #16]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a146:	4915      	ldr	r1, [pc, #84]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	da08      	bge.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a154:	4b11      	ldr	r3, [pc, #68]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a158:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a160:	490e      	ldr	r1, [pc, #56]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a162:	4313      	orrs	r3, r2
 800a164:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d009      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a172:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a180:	4906      	ldr	r1, [pc, #24]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a182:	4313      	orrs	r3, r2
 800a184:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a186:	7dbb      	ldrb	r3, [r7, #22]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	e000      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	58024400 	.word	0x58024400

0800a1a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b090      	sub	sp, #64	; 0x40
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ae:	f040 8095 	bne.w	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a1b2:	4b97      	ldr	r3, [pc, #604]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	f200 8088 	bhi.w	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a1e1 	.word	0x0800a1e1
 800a1d0:	0800a209 	.word	0x0800a209
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a2cd 	.word	0x0800a2cd
 800a1dc:	0800a259 	.word	0x0800a259
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1e0:	4b8b      	ldr	r3, [pc, #556]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1ec:	d108      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 ff64 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1fc:	f000 bc94 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a204:	f000 bc90 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a208:	4b81      	ldr	r3, [pc, #516]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a214:	d108      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a216:	f107 0318 	add.w	r3, r7, #24
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 fca8 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a224:	f000 bc80 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a22c:	f000 bc7c 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a230:	4b77      	ldr	r3, [pc, #476]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a23c:	d108      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a23e:	f107 030c 	add.w	r3, r7, #12
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fde8 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a24c:	f000 bc6c 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a254:	f000 bc68 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a258:	4b6d      	ldr	r3, [pc, #436]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a260:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a262:	4b6b      	ldr	r3, [pc, #428]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0304 	and.w	r3, r3, #4
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	d10c      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a270:	2b00      	cmp	r3, #0
 800a272:	d109      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a274:	4b66      	ldr	r3, [pc, #408]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	08db      	lsrs	r3, r3, #3
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	4a65      	ldr	r2, [pc, #404]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a280:	fa22 f303 	lsr.w	r3, r2, r3
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a286:	e01f      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a288:	4b61      	ldr	r3, [pc, #388]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a294:	d106      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a29c:	d102      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a29e:	4b5e      	ldr	r3, [pc, #376]	; (800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a2:	e011      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2a4:	4b5a      	ldr	r3, [pc, #360]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2b0:	d106      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b8:	d102      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a2ba:	4b58      	ldr	r3, [pc, #352]	; (800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2be:	e003      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a2c4:	f000 bc30 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a2c8:	f000 bc2e 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2cc:	4b54      	ldr	r3, [pc, #336]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2d0:	f000 bc2a 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2d8:	f000 bc26 	b.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2e2:	f040 809f 	bne.w	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a2e6:	4b4a      	ldr	r3, [pc, #296]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a2ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f6:	d04d      	beq.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fe:	f200 8084 	bhi.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	2bc0      	cmp	r3, #192	; 0xc0
 800a306:	d07d      	beq.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	2bc0      	cmp	r3, #192	; 0xc0
 800a30c:	d87d      	bhi.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	2b80      	cmp	r3, #128	; 0x80
 800a312:	d02d      	beq.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	2b80      	cmp	r3, #128	; 0x80
 800a318:	d877      	bhi.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	2b40      	cmp	r3, #64	; 0x40
 800a324:	d012      	beq.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a326:	e070      	b.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a328:	4b39      	ldr	r3, [pc, #228]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a334:	d107      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fec0 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a344:	e3f0      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a34a:	e3ed      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a34c:	4b30      	ldr	r3, [pc, #192]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a358:	d107      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a35a:	f107 0318 	add.w	r3, r7, #24
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fc06 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a368:	e3de      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a36e:	e3db      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a37c:	d107      	bne.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a37e:	f107 030c 	add.w	r3, r7, #12
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fd48 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a38c:	e3cc      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a392:	e3c9      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a394:	4b1e      	ldr	r3, [pc, #120]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a39c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a39e:	4b1c      	ldr	r3, [pc, #112]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0304 	and.w	r3, r3, #4
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d10c      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3b0:	4b17      	ldr	r3, [pc, #92]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	08db      	lsrs	r3, r3, #3
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	4a16      	ldr	r2, [pc, #88]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c2:	e01e      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3c4:	4b12      	ldr	r3, [pc, #72]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d0:	d106      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3d8:	d102      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3da:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3de:	e010      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3e0:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ec:	d106      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f4:	d102      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3fa:	e002      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a400:	e392      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a402:	e391      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a404:	4b06      	ldr	r3, [pc, #24]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a408:	e38e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a40e:	e38b      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a410:	58024400 	.word	0x58024400
 800a414:	03d09000 	.word	0x03d09000
 800a418:	003d0900 	.word	0x003d0900
 800a41c:	017d7840 	.word	0x017d7840
 800a420:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a42a:	f040 809c 	bne.w	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a42e:	4b9d      	ldr	r3, [pc, #628]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a436:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a43e:	d054      	beq.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a446:	f200 808b 	bhi.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a450:	f000 8083 	beq.w	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a45a:	f200 8081 	bhi.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a464:	d02f      	beq.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a46c:	d878      	bhi.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	d004      	beq.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a47a:	d012      	beq.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a47c:	e070      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a47e:	4b89      	ldr	r3, [pc, #548]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a48a:	d107      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a48c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fe15 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a49a:	e345      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a0:	e342      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4a2:	4b80      	ldr	r3, [pc, #512]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4ae:	d107      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4b0:	f107 0318 	add.w	r3, r7, #24
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 fb5b 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4be:	e333      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4c4:	e330      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4c6:	4b77      	ldr	r3, [pc, #476]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4d4:	f107 030c 	add.w	r3, r7, #12
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fc9d 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4e2:	e321      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4e8:	e31e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4ea:	4b6e      	ldr	r3, [pc, #440]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4f2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4f4:	4b6b      	ldr	r3, [pc, #428]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b04      	cmp	r3, #4
 800a4fe:	d10c      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a506:	4b67      	ldr	r3, [pc, #412]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	08db      	lsrs	r3, r3, #3
 800a50c:	f003 0303 	and.w	r3, r3, #3
 800a510:	4a65      	ldr	r2, [pc, #404]	; (800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a512:	fa22 f303 	lsr.w	r3, r2, r3
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a518:	e01e      	b.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a51a:	4b62      	ldr	r3, [pc, #392]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a526:	d106      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a52e:	d102      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a530:	4b5e      	ldr	r3, [pc, #376]	; (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a534:	e010      	b.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a536:	4b5b      	ldr	r3, [pc, #364]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a542:	d106      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a54a:	d102      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a54c:	4b58      	ldr	r3, [pc, #352]	; (800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a550:	e002      	b.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a556:	e2e7      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a558:	e2e6      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a55a:	4b56      	ldr	r3, [pc, #344]	; (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55e:	e2e3      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a564:	e2e0      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a56c:	f040 80a7 	bne.w	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a570:	4b4c      	ldr	r3, [pc, #304]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a578:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a580:	d055      	beq.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a588:	f200 8096 	bhi.w	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a592:	f000 8084 	beq.w	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a59c:	f200 808c 	bhi.w	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5a6:	d030      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ae:	f200 8083 	bhi.w	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5be:	d012      	beq.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a5c0:	e07a      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5c2:	4b38      	ldr	r3, [pc, #224]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ce:	d107      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fd73 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5de:	e2a3      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e4:	e2a0      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e6:	4b2f      	ldr	r3, [pc, #188]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5f2:	d107      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f4:	f107 0318 	add.w	r3, r7, #24
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fab9 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a602:	e291      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a608:	e28e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a60a:	4b26      	ldr	r3, [pc, #152]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a616:	d107      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a618:	f107 030c 	add.w	r3, r7, #12
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fbfb 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a626:	e27f      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a62c:	e27c      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a62e:	4b1d      	ldr	r3, [pc, #116]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a636:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a638:	4b1a      	ldr	r3, [pc, #104]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d10c      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a646:	2b00      	cmp	r3, #0
 800a648:	d109      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a64a:	4b16      	ldr	r3, [pc, #88]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	08db      	lsrs	r3, r3, #3
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	4a14      	ldr	r2, [pc, #80]	; (800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a65c:	e01e      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a66a:	d106      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a672:	d102      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a674:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a676:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a678:	e010      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a67a:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a686:	d106      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a68e:	d102      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a694:	e002      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a69a:	e245      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a69c:	e244      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6a2:	e241      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6a4:	58024400 	.word	0x58024400
 800a6a8:	03d09000 	.word	0x03d09000
 800a6ac:	003d0900 	.word	0x003d0900
 800a6b0:	017d7840 	.word	0x017d7840
 800a6b4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6bc:	e234      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c4:	f040 809c 	bne.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a6c8:	4b9b      	ldr	r3, [pc, #620]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a6d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6d8:	d054      	beq.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e0:	f200 808b 	bhi.w	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6ea:	f000 8083 	beq.w	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6f4:	f200 8081 	bhi.w	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fe:	d02f      	beq.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a706:	d878      	bhi.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a714:	d012      	beq.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a716:	e070      	b.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a718:	4b87      	ldr	r3, [pc, #540]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a724:	d107      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fcc8 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a734:	e1f8      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a73a:	e1f5      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a73c:	4b7e      	ldr	r3, [pc, #504]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a748:	d107      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a74a:	f107 0318 	add.w	r3, r7, #24
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fa0e 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a758:	e1e6      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a75e:	e1e3      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a760:	4b75      	ldr	r3, [pc, #468]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a76c:	d107      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a76e:	f107 030c 	add.w	r3, r7, #12
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fb50 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a77c:	e1d4      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a782:	e1d1      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a784:	4b6c      	ldr	r3, [pc, #432]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a78c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a78e:	4b6a      	ldr	r3, [pc, #424]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	2b04      	cmp	r3, #4
 800a798:	d10c      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d109      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7a0:	4b65      	ldr	r3, [pc, #404]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	08db      	lsrs	r3, r3, #3
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	4a64      	ldr	r2, [pc, #400]	; (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b2:	e01e      	b.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7b4:	4b60      	ldr	r3, [pc, #384]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c0:	d106      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c8:	d102      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a7ca:	4b5d      	ldr	r3, [pc, #372]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ce:	e010      	b.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7d0:	4b59      	ldr	r3, [pc, #356]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7dc:	d106      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7e4:	d102      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7e6:	4b57      	ldr	r3, [pc, #348]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ea:	e002      	b.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7f0:	e19a      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7f2:	e199      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7f4:	4b54      	ldr	r3, [pc, #336]	; (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f8:	e196      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7fe:	e193      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a806:	d173      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a808:	4b4b      	ldr	r3, [pc, #300]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a810:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a818:	d02f      	beq.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a820:	d863      	bhi.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a82e:	d012      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a830:	e05b      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a832:	4b41      	ldr	r3, [pc, #260]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a83a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a83e:	d107      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a840:	f107 0318 	add.w	r3, r7, #24
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f993 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a84e:	e16b      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a854:	e168      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a856:	4b38      	ldr	r3, [pc, #224]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a85e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a862:	d107      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a864:	f107 030c 	add.w	r3, r7, #12
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fad5 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a872:	e159      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a878:	e156      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a87a:	4b2f      	ldr	r3, [pc, #188]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a882:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a884:	4b2c      	ldr	r3, [pc, #176]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	d10c      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a892:	2b00      	cmp	r3, #0
 800a894:	d109      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a896:	4b28      	ldr	r3, [pc, #160]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	08db      	lsrs	r3, r3, #3
 800a89c:	f003 0303 	and.w	r3, r3, #3
 800a8a0:	4a26      	ldr	r2, [pc, #152]	; (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a8:	e01e      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8aa:	4b23      	ldr	r3, [pc, #140]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	d106      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8be:	d102      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8c0:	4b1f      	ldr	r3, [pc, #124]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c4:	e010      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c6:	4b1c      	ldr	r3, [pc, #112]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8d2:	d106      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8da:	d102      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8dc:	4b19      	ldr	r3, [pc, #100]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e0:	e002      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8e6:	e11f      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8e8:	e11e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ee:	e11b      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f6:	d13e      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a8f8:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a900:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	d004      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a90e:	d01d      	beq.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a910:	e02e      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a91a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a91e:	d107      	bne.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fbcb 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a92e:	e0fb      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a934:	e0f8      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a936:	bf00      	nop
 800a938:	58024400 	.word	0x58024400
 800a93c:	03d09000 	.word	0x03d09000
 800a940:	003d0900 	.word	0x003d0900
 800a944:	017d7840 	.word	0x017d7840
 800a948:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a94c:	4b79      	ldr	r3, [pc, #484]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a958:	d107      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a95a:	f107 0318 	add.w	r3, r7, #24
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f906 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a968:	e0de      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a96e:	e0db      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a974:	e0d8      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a97c:	f040 8085 	bne.w	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a980:	4b6c      	ldr	r3, [pc, #432]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a984:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a988:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a990:	d06b      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a998:	d874      	bhi.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a0:	d056      	beq.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a8:	d86c      	bhi.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9b0:	d03b      	beq.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9b8:	d864      	bhi.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c0:	d021      	beq.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c8:	d85c      	bhi.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9d6:	d004      	beq.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a9d8:	e054      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a9da:	f000 f8b3 	bl	800ab44 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9de:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a9e0:	e0a2      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9e2:	4b54      	ldr	r3, [pc, #336]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ee:	d107      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9f0:	f107 0318 	add.w	r3, r7, #24
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 f8bb 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9fe:	e093      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa04:	e090      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa06:	4b4b      	ldr	r3, [pc, #300]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa12:	d107      	bne.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa14:	f107 030c 	add.w	r3, r7, #12
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 f9fd 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa22:	e081      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa28:	e07e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa2a:	4b42      	ldr	r3, [pc, #264]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0304 	and.w	r3, r3, #4
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d109      	bne.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa36:	4b3f      	ldr	r3, [pc, #252]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	08db      	lsrs	r3, r3, #3
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	4a3d      	ldr	r2, [pc, #244]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa42:	fa22 f303 	lsr.w	r3, r2, r3
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa48:	e06e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa4e:	e06b      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa50:	4b38      	ldr	r3, [pc, #224]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa5c:	d102      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aa5e:	4b37      	ldr	r3, [pc, #220]	; (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa62:	e061      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa68:	e05e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa6a:	4b32      	ldr	r3, [pc, #200]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa76:	d102      	bne.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa78:	4b31      	ldr	r3, [pc, #196]	; (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa7c:	e054      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa82:	e051      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa88:	e04e      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa90:	d148      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa92:	4b28      	ldr	r3, [pc, #160]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa9a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaa2:	d02a      	beq.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaaa:	d838      	bhi.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aab8:	d00d      	beq.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aaba:	e030      	b.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aabc:	4b1d      	ldr	r3, [pc, #116]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac8:	d102      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aaca:	4b1d      	ldr	r3, [pc, #116]	; (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aace:	e02b      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad4:	e028      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aad6:	4b17      	ldr	r3, [pc, #92]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae2:	d107      	bne.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fae9 	bl	800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaf2:	e019      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf8:	e016      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aafa:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab06:	d107      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab08:	f107 0318 	add.w	r3, r7, #24
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 f82f 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab16:	e007      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1c:	e004      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab22:	e001      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ab28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3740      	adds	r7, #64	; 0x40
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	58024400 	.word	0x58024400
 800ab38:	03d09000 	.word	0x03d09000
 800ab3c:	003d0900 	.word	0x003d0900
 800ab40:	017d7840 	.word	0x017d7840

0800ab44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab48:	f7fe fb88 	bl	800925c <HAL_RCC_GetHCLKFreq>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	091b      	lsrs	r3, r3, #4
 800ab54:	f003 0307 	and.w	r3, r3, #7
 800ab58:	4904      	ldr	r1, [pc, #16]	; (800ab6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab5a:	5ccb      	ldrb	r3, [r1, r3]
 800ab5c:	f003 031f 	and.w	r3, r3, #31
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	58024400 	.word	0x58024400
 800ab6c:	0800fe90 	.word	0x0800fe90

0800ab70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b089      	sub	sp, #36	; 0x24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab78:	4ba1      	ldr	r3, [pc, #644]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab82:	4b9f      	ldr	r3, [pc, #636]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab86:	0b1b      	lsrs	r3, r3, #12
 800ab88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab8e:	4b9c      	ldr	r3, [pc, #624]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	091b      	lsrs	r3, r3, #4
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab9a:	4b99      	ldr	r3, [pc, #612]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	08db      	lsrs	r3, r3, #3
 800aba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 8111 	beq.w	800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	f000 8083 	beq.w	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	f200 80a1 	bhi.w	800ad10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d056      	beq.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800abda:	e099      	b.n	800ad10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abdc:	4b88      	ldr	r3, [pc, #544]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d02d      	beq.n	800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abe8:	4b85      	ldr	r3, [pc, #532]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	08db      	lsrs	r3, r3, #3
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	4a84      	ldr	r2, [pc, #528]	; (800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abf4:	fa22 f303 	lsr.w	r3, r2, r3
 800abf8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	ee07 3a90 	vmov	s15, r3
 800ac00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac12:	4b7b      	ldr	r3, [pc, #492]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac26:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac42:	e087      	b.n	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac56:	4b6a      	ldr	r3, [pc, #424]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac86:	e065      	b.n	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9a:	4b59      	ldr	r3, [pc, #356]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800acae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acca:	e043      	b.n	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800acda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acde:	4b48      	ldr	r3, [pc, #288]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acee:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad0e:	e021      	b.n	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad22:	4b37      	ldr	r3, [pc, #220]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad54:	4b2a      	ldr	r3, [pc, #168]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	0a5b      	lsrs	r3, r3, #9
 800ad5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad7a:	ee17 2a90 	vmov	r2, s15
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad82:	4b1f      	ldr	r3, [pc, #124]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	0c1b      	lsrs	r3, r3, #16
 800ad88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8c:	ee07 3a90 	vmov	s15, r3
 800ad90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada8:	ee17 2a90 	vmov	r2, s15
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800adb0:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	0e1b      	lsrs	r3, r3, #24
 800adb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adca:	edd7 6a07 	vldr	s13, [r7, #28]
 800adce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800add6:	ee17 2a90 	vmov	r2, s15
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800adde:	e008      	b.n	800adf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	609a      	str	r2, [r3, #8]
}
 800adf2:	bf00      	nop
 800adf4:	3724      	adds	r7, #36	; 0x24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	58024400 	.word	0x58024400
 800ae04:	03d09000 	.word	0x03d09000
 800ae08:	46000000 	.word	0x46000000
 800ae0c:	4c742400 	.word	0x4c742400
 800ae10:	4a742400 	.word	0x4a742400
 800ae14:	4bbebc20 	.word	0x4bbebc20

0800ae18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b089      	sub	sp, #36	; 0x24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae20:	4ba1      	ldr	r3, [pc, #644]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	f003 0303 	and.w	r3, r3, #3
 800ae28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae2a:	4b9f      	ldr	r3, [pc, #636]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	0d1b      	lsrs	r3, r3, #20
 800ae30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae36:	4b9c      	ldr	r3, [pc, #624]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae42:	4b99      	ldr	r3, [pc, #612]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae46:	08db      	lsrs	r3, r3, #3
 800ae48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	fb02 f303 	mul.w	r3, r2, r3
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8111 	beq.w	800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	f000 8083 	beq.w	800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f200 80a1 	bhi.w	800afb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d056      	beq.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae82:	e099      	b.n	800afb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae84:	4b88      	ldr	r3, [pc, #544]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0320 	and.w	r3, r3, #32
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02d      	beq.n	800aeec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae90:	4b85      	ldr	r3, [pc, #532]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	08db      	lsrs	r3, r3, #3
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	4a84      	ldr	r2, [pc, #528]	; (800b0ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aea0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	ee07 3a90 	vmov	s15, r3
 800aea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeba:	4b7b      	ldr	r3, [pc, #492]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aece:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aeea:	e087      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefe:	4b6a      	ldr	r3, [pc, #424]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af2e:	e065      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af42:	4b59      	ldr	r3, [pc, #356]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af52:	ed97 6a03 	vldr	s12, [r7, #12]
 800af56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af72:	e043      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af86:	4b48      	ldr	r3, [pc, #288]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afb6:	e021      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afca:	4b37      	ldr	r3, [pc, #220]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afda:	ed97 6a03 	vldr	s12, [r7, #12]
 800afde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800affa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800affc:	4b2a      	ldr	r3, [pc, #168]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b000:	0a5b      	lsrs	r3, r3, #9
 800b002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b016:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b022:	ee17 2a90 	vmov	r2, s15
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b02a:	4b1f      	ldr	r3, [pc, #124]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	0c1b      	lsrs	r3, r3, #16
 800b030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b044:	edd7 6a07 	vldr	s13, [r7, #28]
 800b048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b050:	ee17 2a90 	vmov	r2, s15
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b058:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05c:	0e1b      	lsrs	r3, r3, #24
 800b05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b06e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b072:	edd7 6a07 	vldr	s13, [r7, #28]
 800b076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b07a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b07e:	ee17 2a90 	vmov	r2, s15
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b086:	e008      	b.n	800b09a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	609a      	str	r2, [r3, #8]
}
 800b09a:	bf00      	nop
 800b09c:	3724      	adds	r7, #36	; 0x24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	58024400 	.word	0x58024400
 800b0ac:	03d09000 	.word	0x03d09000
 800b0b0:	46000000 	.word	0x46000000
 800b0b4:	4c742400 	.word	0x4c742400
 800b0b8:	4a742400 	.word	0x4a742400
 800b0bc:	4bbebc20 	.word	0x4bbebc20

0800b0c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b089      	sub	sp, #36	; 0x24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0c8:	4ba0      	ldr	r3, [pc, #640]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0cc:	f003 0303 	and.w	r3, r3, #3
 800b0d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b0d2:	4b9e      	ldr	r3, [pc, #632]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	091b      	lsrs	r3, r3, #4
 800b0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0de:	4b9b      	ldr	r3, [pc, #620]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b0e8:	4b98      	ldr	r3, [pc, #608]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ec:	08db      	lsrs	r3, r3, #3
 800b0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	fb02 f303 	mul.w	r3, r2, r3
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b100:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 8111 	beq.w	800b32e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	f000 8083 	beq.w	800b21a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	2b02      	cmp	r3, #2
 800b118:	f200 80a1 	bhi.w	800b25e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d056      	beq.n	800b1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b128:	e099      	b.n	800b25e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b12a:	4b88      	ldr	r3, [pc, #544]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b00      	cmp	r3, #0
 800b134:	d02d      	beq.n	800b192 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b136:	4b85      	ldr	r3, [pc, #532]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	08db      	lsrs	r3, r3, #3
 800b13c:	f003 0303 	and.w	r3, r3, #3
 800b140:	4a83      	ldr	r2, [pc, #524]	; (800b350 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b142:	fa22 f303 	lsr.w	r3, r2, r3
 800b146:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	ee07 3a90 	vmov	s15, r3
 800b158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b160:	4b7a      	ldr	r3, [pc, #488]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b168:	ee07 3a90 	vmov	s15, r3
 800b16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b170:	ed97 6a03 	vldr	s12, [r7, #12]
 800b174:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b190:	e087      	b.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	ee07 3a90 	vmov	s15, r3
 800b198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b358 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a4:	4b69      	ldr	r3, [pc, #420]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ac:	ee07 3a90 	vmov	s15, r3
 800b1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1d4:	e065      	b.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	ee07 3a90 	vmov	s15, r3
 800b1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b35c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e8:	4b58      	ldr	r3, [pc, #352]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b214:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b218:	e043      	b.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	ee07 3a90 	vmov	s15, r3
 800b220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b224:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b360 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22c:	4b47      	ldr	r3, [pc, #284]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b240:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b25c:	e021      	b.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b268:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b358 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b26c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b270:	4b36      	ldr	r3, [pc, #216]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b278:	ee07 3a90 	vmov	s15, r3
 800b27c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b280:	ed97 6a03 	vldr	s12, [r7, #12]
 800b284:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b28c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b29c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b2a2:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a6:	0a5b      	lsrs	r3, r3, #9
 800b2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ac:	ee07 3a90 	vmov	s15, r3
 800b2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c8:	ee17 2a90 	vmov	r2, s15
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b2d0:	4b1e      	ldr	r3, [pc, #120]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d4:	0c1b      	lsrs	r3, r3, #16
 800b2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f6:	ee17 2a90 	vmov	r2, s15
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b2fe:	4b13      	ldr	r3, [pc, #76]	; (800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b302:	0e1b      	lsrs	r3, r3, #24
 800b304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b318:	edd7 6a07 	vldr	s13, [r7, #28]
 800b31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b324:	ee17 2a90 	vmov	r2, s15
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b32c:	e008      	b.n	800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	609a      	str	r2, [r3, #8]
}
 800b340:	bf00      	nop
 800b342:	3724      	adds	r7, #36	; 0x24
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	58024400 	.word	0x58024400
 800b350:	03d09000 	.word	0x03d09000
 800b354:	46000000 	.word	0x46000000
 800b358:	4c742400 	.word	0x4c742400
 800b35c:	4a742400 	.word	0x4a742400
 800b360:	4bbebc20 	.word	0x4bbebc20

0800b364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b372:	4b53      	ldr	r3, [pc, #332]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b376:	f003 0303 	and.w	r3, r3, #3
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d101      	bne.n	800b382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e099      	b.n	800b4b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b382:	4b4f      	ldr	r3, [pc, #316]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a4e      	ldr	r2, [pc, #312]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b38c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b38e:	f7f7 fab3 	bl	80028f8 <HAL_GetTick>
 800b392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b394:	e008      	b.n	800b3a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b396:	f7f7 faaf 	bl	80028f8 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d901      	bls.n	800b3a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e086      	b.n	800b4b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3a8:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1f0      	bne.n	800b396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3b4:	4b42      	ldr	r3, [pc, #264]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	031b      	lsls	r3, r3, #12
 800b3c2:	493f      	ldr	r1, [pc, #252]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	628b      	str	r3, [r1, #40]	; 0x28
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	025b      	lsls	r3, r3, #9
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	041b      	lsls	r3, r3, #16
 800b3e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	061b      	lsls	r3, r3, #24
 800b3f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3f8:	4931      	ldr	r1, [pc, #196]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3fe:	4b30      	ldr	r3, [pc, #192]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	492d      	ldr	r1, [pc, #180]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b410:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	f023 0220 	bic.w	r2, r3, #32
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	4928      	ldr	r1, [pc, #160]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b422:	4b27      	ldr	r3, [pc, #156]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	4a26      	ldr	r2, [pc, #152]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b428:	f023 0310 	bic.w	r3, r3, #16
 800b42c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b42e:	4b24      	ldr	r3, [pc, #144]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b432:	4b24      	ldr	r3, [pc, #144]	; (800b4c4 <RCCEx_PLL2_Config+0x160>)
 800b434:	4013      	ands	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	69d2      	ldr	r2, [r2, #28]
 800b43a:	00d2      	lsls	r2, r2, #3
 800b43c:	4920      	ldr	r1, [pc, #128]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b43e:	4313      	orrs	r3, r2
 800b440:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b442:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b448:	f043 0310 	orr.w	r3, r3, #16
 800b44c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	4a19      	ldr	r2, [pc, #100]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b45a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b460:	e00f      	b.n	800b482 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d106      	bne.n	800b476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	4a14      	ldr	r2, [pc, #80]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b472:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b474:	e005      	b.n	800b482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b476:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	4a11      	ldr	r2, [pc, #68]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b482:	4b0f      	ldr	r3, [pc, #60]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a0e      	ldr	r2, [pc, #56]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b48e:	f7f7 fa33 	bl	80028f8 <HAL_GetTick>
 800b492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b494:	e008      	b.n	800b4a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b496:	f7f7 fa2f 	bl	80028f8 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d901      	bls.n	800b4a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e006      	b.n	800b4b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4a8:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0f0      	beq.n	800b496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	ffff0007 	.word	0xffff0007

0800b4c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4d6:	4b53      	ldr	r3, [pc, #332]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d101      	bne.n	800b4e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e099      	b.n	800b61a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4e6:	4b4f      	ldr	r3, [pc, #316]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a4e      	ldr	r2, [pc, #312]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b4ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4f2:	f7f7 fa01 	bl	80028f8 <HAL_GetTick>
 800b4f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4f8:	e008      	b.n	800b50c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4fa:	f7f7 f9fd 	bl	80028f8 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b02      	cmp	r3, #2
 800b506:	d901      	bls.n	800b50c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e086      	b.n	800b61a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b50c:	4b45      	ldr	r3, [pc, #276]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f0      	bne.n	800b4fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	051b      	lsls	r3, r3, #20
 800b526:	493f      	ldr	r1, [pc, #252]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	628b      	str	r3, [r1, #40]	; 0x28
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	3b01      	subs	r3, #1
 800b532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	025b      	lsls	r3, r3, #9
 800b53e:	b29b      	uxth	r3, r3
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	3b01      	subs	r3, #1
 800b548:	041b      	lsls	r3, r3, #16
 800b54a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b54e:	431a      	orrs	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	3b01      	subs	r3, #1
 800b556:	061b      	lsls	r3, r3, #24
 800b558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b55c:	4931      	ldr	r1, [pc, #196]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b562:	4b30      	ldr	r3, [pc, #192]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	492d      	ldr	r1, [pc, #180]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b570:	4313      	orrs	r3, r2
 800b572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b574:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	4928      	ldr	r1, [pc, #160]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b582:	4313      	orrs	r3, r2
 800b584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b586:	4b27      	ldr	r3, [pc, #156]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58a:	4a26      	ldr	r2, [pc, #152]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b596:	4b24      	ldr	r3, [pc, #144]	; (800b628 <RCCEx_PLL3_Config+0x160>)
 800b598:	4013      	ands	r3, r2
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	69d2      	ldr	r2, [r2, #28]
 800b59e:	00d2      	lsls	r2, r2, #3
 800b5a0:	4920      	ldr	r1, [pc, #128]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5a6:	4b1f      	ldr	r3, [pc, #124]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	4a1e      	ldr	r2, [pc, #120]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5b8:	4b1a      	ldr	r3, [pc, #104]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	4a19      	ldr	r2, [pc, #100]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5c4:	e00f      	b.n	800b5e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d106      	bne.n	800b5da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5cc:	4b15      	ldr	r3, [pc, #84]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	4a14      	ldr	r2, [pc, #80]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5d8:	e005      	b.n	800b5e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5da:	4b12      	ldr	r3, [pc, #72]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	4a11      	ldr	r2, [pc, #68]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5e6:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a0e      	ldr	r2, [pc, #56]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b5ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5f2:	f7f7 f981 	bl	80028f8 <HAL_GetTick>
 800b5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5f8:	e008      	b.n	800b60c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5fa:	f7f7 f97d 	bl	80028f8 <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	2b02      	cmp	r3, #2
 800b606:	d901      	bls.n	800b60c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e006      	b.n	800b61a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b60c:	4b05      	ldr	r3, [pc, #20]	; (800b624 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0f0      	beq.n	800b5fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b618:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	58024400 	.word	0x58024400
 800b628:	ffff0007 	.word	0xffff0007

0800b62c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e0f1      	b.n	800b822 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a78      	ldr	r2, [pc, #480]	; (800b82c <HAL_SPI_Init+0x200>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d00f      	beq.n	800b66e <HAL_SPI_Init+0x42>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a77      	ldr	r2, [pc, #476]	; (800b830 <HAL_SPI_Init+0x204>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00a      	beq.n	800b66e <HAL_SPI_Init+0x42>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a75      	ldr	r2, [pc, #468]	; (800b834 <HAL_SPI_Init+0x208>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d005      	beq.n	800b66e <HAL_SPI_Init+0x42>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	2b0f      	cmp	r3, #15
 800b668:	d901      	bls.n	800b66e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e0d9      	b.n	800b822 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fd74 	bl	800c15c <SPI_GetPacketSize>
 800b674:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a6c      	ldr	r2, [pc, #432]	; (800b82c <HAL_SPI_Init+0x200>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00c      	beq.n	800b69a <HAL_SPI_Init+0x6e>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a6a      	ldr	r2, [pc, #424]	; (800b830 <HAL_SPI_Init+0x204>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d007      	beq.n	800b69a <HAL_SPI_Init+0x6e>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a69      	ldr	r2, [pc, #420]	; (800b834 <HAL_SPI_Init+0x208>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d002      	beq.n	800b69a <HAL_SPI_Init+0x6e>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2b08      	cmp	r3, #8
 800b698:	d811      	bhi.n	800b6be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b69e:	4a63      	ldr	r2, [pc, #396]	; (800b82c <HAL_SPI_Init+0x200>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d009      	beq.n	800b6b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a61      	ldr	r2, [pc, #388]	; (800b830 <HAL_SPI_Init+0x204>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d004      	beq.n	800b6b8 <HAL_SPI_Init+0x8c>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a60      	ldr	r2, [pc, #384]	; (800b834 <HAL_SPI_Init+0x208>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d104      	bne.n	800b6c2 <HAL_SPI_Init+0x96>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b10      	cmp	r3, #16
 800b6bc:	d901      	bls.n	800b6c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e0af      	b.n	800b822 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7f6 fd46 	bl	8002168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f022 0201 	bic.w	r2, r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b6fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b708:	d119      	bne.n	800b73e <HAL_SPI_Init+0x112>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b712:	d103      	bne.n	800b71c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d008      	beq.n	800b72e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10c      	bne.n	800b73e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b72c:	d107      	bne.n	800b73e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b73c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	69da      	ldr	r2, [r3, #28]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b746:	431a      	orrs	r2, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	431a      	orrs	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b750:	ea42 0103 	orr.w	r1, r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68da      	ldr	r2, [r3, #12]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	430a      	orrs	r2, r1
 800b75e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	431a      	orrs	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	431a      	orrs	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	431a      	orrs	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	431a      	orrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	431a      	orrs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	431a      	orrs	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b792:	431a      	orrs	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b79e:	ea42 0103 	orr.w	r1, r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d113      	bne.n	800b7de <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f022 0201 	bic.w	r2, r2, #1
 800b7ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00a      	beq.n	800b810 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	430a      	orrs	r2, r1
 800b80e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40013000 	.word	0x40013000
 800b830:	40003800 	.word	0x40003800
 800b834:	40003c00 	.word	0x40003c00

0800b838 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08a      	sub	sp, #40	; 0x28
 800b83c:	af02      	add	r7, sp, #8
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	4613      	mov	r3, r2
 800b846:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3330      	adds	r3, #48	; 0x30
 800b852:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b85c:	d112      	bne.n	800b884 <HAL_SPI_Receive+0x4c>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10e      	bne.n	800b884 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2204      	movs	r2, #4
 800b86a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b86e:	88fa      	ldrh	r2, [r7, #6]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	4613      	mov	r3, r2
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f978 	bl	800bb70 <HAL_SPI_TransmitReceive>
 800b880:	4603      	mov	r3, r0
 800b882:	e16f      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d101      	bne.n	800b892 <HAL_SPI_Receive+0x5a>
 800b88e:	2302      	movs	r3, #2
 800b890:	e168      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b89a:	f7f7 f82d 	bl	80028f8 <HAL_GetTick>
 800b89e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d007      	beq.n	800b8bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8b8:	7ffb      	ldrb	r3, [r7, #31]
 800b8ba:	e153      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <HAL_SPI_Receive+0x90>
 800b8c2:	88fb      	ldrh	r3, [r7, #6]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d107      	bne.n	800b8d8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8d4:	7ffb      	ldrb	r3, [r7, #31]
 800b8d6:	e145      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2204      	movs	r2, #4
 800b8dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	88fa      	ldrh	r2, [r7, #6]
 800b8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	88fa      	ldrh	r2, [r7, #6]
 800b8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b928:	d107      	bne.n	800b93a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b938:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	4b8a      	ldr	r3, [pc, #552]	; (800bb6c <HAL_SPI_Receive+0x334>)
 800b942:	4013      	ands	r3, r2
 800b944:	88f9      	ldrh	r1, [r7, #6]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	6812      	ldr	r2, [r2, #0]
 800b94a:	430b      	orrs	r3, r1
 800b94c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f042 0201 	orr.w	r2, r2, #1
 800b95c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b966:	d107      	bne.n	800b978 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b976:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	2b0f      	cmp	r3, #15
 800b97e:	d948      	bls.n	800ba12 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b980:	e040      	b.n	800ba04 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	695a      	ldr	r2, [r3, #20]
 800b988:	f248 0308 	movw	r3, #32776	; 0x8008
 800b98c:	4013      	ands	r3, r2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d014      	beq.n	800b9bc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b99a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b99c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9a2:	1d1a      	adds	r2, r3, #4
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9ba:	e023      	b.n	800ba04 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9bc:	f7f6 ff9c 	bl	80028f8 <HAL_GetTick>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d803      	bhi.n	800b9d4 <HAL_SPI_Receive+0x19c>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9d2:	d102      	bne.n	800b9da <HAL_SPI_Receive+0x1a2>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d114      	bne.n	800ba04 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 faf0 	bl	800bfc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e0af      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1b8      	bne.n	800b982 <HAL_SPI_Receive+0x14a>
 800ba10:	e095      	b.n	800bb3e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	2b07      	cmp	r3, #7
 800ba18:	f240 808b 	bls.w	800bb32 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ba1c:	e03f      	b.n	800ba9e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d114      	bne.n	800ba56 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba30:	69ba      	ldr	r2, [r7, #24]
 800ba32:	8812      	ldrh	r2, [r2, #0]
 800ba34:	b292      	uxth	r2, r2
 800ba36:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba3c:	1c9a      	adds	r2, r3, #2
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba54:	e023      	b.n	800ba9e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba56:	f7f6 ff4f 	bl	80028f8 <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d803      	bhi.n	800ba6e <HAL_SPI_Receive+0x236>
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba6c:	d102      	bne.n	800ba74 <HAL_SPI_Receive+0x23c>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d114      	bne.n	800ba9e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 faa3 	bl	800bfc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e062      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1b9      	bne.n	800ba1e <HAL_SPI_Receive+0x1e6>
 800baaa:	e048      	b.n	800bb3e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d117      	bne.n	800baea <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bac6:	7812      	ldrb	r2, [r2, #0]
 800bac8:	b2d2      	uxtb	r2, r2
 800baca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800badc:	b29b      	uxth	r3, r3
 800bade:	3b01      	subs	r3, #1
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bae8:	e023      	b.n	800bb32 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baea:	f7f6 ff05 	bl	80028f8 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d803      	bhi.n	800bb02 <HAL_SPI_Receive+0x2ca>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb00:	d102      	bne.n	800bb08 <HAL_SPI_Receive+0x2d0>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d114      	bne.n	800bb32 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 fa59 	bl	800bfc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e018      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1b6      	bne.n	800baac <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fa3e 	bl	800bfc0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e000      	b.n	800bb64 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bb62:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	ffff0000 	.word	0xffff0000

0800bb70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08e      	sub	sp, #56	; 0x38
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3320      	adds	r3, #32
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3330      	adds	r3, #48	; 0x30
 800bb92:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d101      	bne.n	800bba2 <HAL_SPI_TransmitReceive+0x32>
 800bb9e:	2302      	movs	r3, #2
 800bba0:	e209      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbaa:	f7f6 fea5 	bl	80028f8 <HAL_GetTick>
 800bbae:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bbb0:	887b      	ldrh	r3, [r7, #2]
 800bbb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bbb4:	887b      	ldrh	r3, [r7, #2]
 800bbb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bbbe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bbc6:	7efb      	ldrb	r3, [r7, #27]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d014      	beq.n	800bbf6 <HAL_SPI_TransmitReceive+0x86>
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbd2:	d106      	bne.n	800bbe2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bbdc:	7efb      	ldrb	r3, [r7, #27]
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d009      	beq.n	800bbf6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbf4:	e1df      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <HAL_SPI_TransmitReceive+0x98>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <HAL_SPI_TransmitReceive+0x98>
 800bc02:	887b      	ldrh	r3, [r7, #2]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d109      	bne.n	800bc1c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc1a:	e1cc      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	2b04      	cmp	r3, #4
 800bc26:	d003      	beq.n	800bc30 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	887a      	ldrh	r2, [r7, #2]
 800bc42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	887a      	ldrh	r2, [r7, #2]
 800bc4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	887a      	ldrh	r2, [r7, #2]
 800bc58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	887a      	ldrh	r2, [r7, #2]
 800bc60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	4b82      	ldr	r3, [pc, #520]	; (800be80 <HAL_SPI_TransmitReceive+0x310>)
 800bc78:	4013      	ands	r3, r2
 800bc7a:	8879      	ldrh	r1, [r7, #2]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	430b      	orrs	r3, r1
 800bc82:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0201 	orr.w	r2, r2, #1
 800bc92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc9c:	d107      	bne.n	800bcae <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	2b0f      	cmp	r3, #15
 800bcb4:	d970      	bls.n	800bd98 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bcb6:	e068      	b.n	800bd8a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	f003 0302 	and.w	r3, r3, #2
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d11a      	bne.n	800bcfc <HAL_SPI_TransmitReceive+0x18c>
 800bcc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d017      	beq.n	800bcfc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6812      	ldr	r2, [r2, #0]
 800bcd6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	3b01      	subs	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695a      	ldr	r2, [r3, #20]
 800bd02:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd06:	4013      	ands	r3, r2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d01a      	beq.n	800bd42 <HAL_SPI_TransmitReceive+0x1d2>
 800bd0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d017      	beq.n	800bd42 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd1c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd22:	1d1a      	adds	r2, r3, #4
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	3b01      	subs	r3, #1
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd40:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd42:	f7f6 fdd9 	bl	80028f8 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d803      	bhi.n	800bd5a <HAL_SPI_TransmitReceive+0x1ea>
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd58:	d102      	bne.n	800bd60 <HAL_SPI_TransmitReceive+0x1f0>
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d114      	bne.n	800bd8a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 f92d 	bl	800bfc0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e115      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d193      	bne.n	800bcb8 <HAL_SPI_TransmitReceive+0x148>
 800bd90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d190      	bne.n	800bcb8 <HAL_SPI_TransmitReceive+0x148>
 800bd96:	e0e7      	b.n	800bf68 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b07      	cmp	r3, #7
 800bd9e:	f240 80dd 	bls.w	800bf5c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bda2:	e066      	b.n	800be72 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d119      	bne.n	800bde6 <HAL_SPI_TransmitReceive+0x276>
 800bdb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d016      	beq.n	800bde6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdbc:	881a      	ldrh	r2, [r3, #0]
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdc6:	1c9a      	adds	r2, r3, #2
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bde4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	f003 0301 	and.w	r3, r3, #1
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d11a      	bne.n	800be2a <HAL_SPI_TransmitReceive+0x2ba>
 800bdf4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d017      	beq.n	800be2a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdfe:	6a3a      	ldr	r2, [r7, #32]
 800be00:	8812      	ldrh	r2, [r2, #0]
 800be02:	b292      	uxth	r2, r2
 800be04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be0a:	1c9a      	adds	r2, r3, #2
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be16:	b29b      	uxth	r3, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be28:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be2a:	f7f6 fd65 	bl	80028f8 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be36:	429a      	cmp	r2, r3
 800be38:	d803      	bhi.n	800be42 <HAL_SPI_TransmitReceive+0x2d2>
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be40:	d102      	bne.n	800be48 <HAL_SPI_TransmitReceive+0x2d8>
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	2b00      	cmp	r3, #0
 800be46:	d114      	bne.n	800be72 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f000 f8b9 	bl	800bfc0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e0a1      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be74:	2b00      	cmp	r3, #0
 800be76:	d195      	bne.n	800bda4 <HAL_SPI_TransmitReceive+0x234>
 800be78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d192      	bne.n	800bda4 <HAL_SPI_TransmitReceive+0x234>
 800be7e:	e073      	b.n	800bf68 <HAL_SPI_TransmitReceive+0x3f8>
 800be80:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d11b      	bne.n	800beca <HAL_SPI_TransmitReceive+0x35a>
 800be92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be94:	2b00      	cmp	r3, #0
 800be96:	d018      	beq.n	800beca <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3320      	adds	r3, #32
 800bea2:	7812      	ldrb	r2, [r2, #0]
 800bea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	3b01      	subs	r3, #1
 800beba:	b29a      	uxth	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bec8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d11d      	bne.n	800bf14 <HAL_SPI_TransmitReceive+0x3a4>
 800bed8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d01a      	beq.n	800bf14 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beea:	7812      	ldrb	r2, [r2, #0]
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf12:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf14:	f7f6 fcf0 	bl	80028f8 <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d803      	bhi.n	800bf2c <HAL_SPI_TransmitReceive+0x3bc>
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf2a:	d102      	bne.n	800bf32 <HAL_SPI_TransmitReceive+0x3c2>
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d114      	bne.n	800bf5c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f844 	bl	800bfc0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e02c      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d190      	bne.n	800be84 <HAL_SPI_TransmitReceive+0x314>
 800bf62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d18d      	bne.n	800be84 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2108      	movs	r1, #8
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f8c4 	bl	800c100 <SPI_WaitOnFlagUntilTimeout>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf84:	f043 0220 	orr.w	r2, r3, #32
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 f816 	bl	800bfc0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e001      	b.n	800bfb6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bfb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3730      	adds	r7, #48	; 0x30
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop

0800bfc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0208 	orr.w	r2, r2, #8
 800bfde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 0210 	orr.w	r2, r2, #16
 800bfee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f022 0201 	bic.w	r2, r2, #1
 800bffe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6919      	ldr	r1, [r3, #16]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	4b3c      	ldr	r3, [pc, #240]	; (800c0fc <SPI_CloseTransfer+0x13c>)
 800c00c:	400b      	ands	r3, r1
 800c00e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689a      	ldr	r2, [r3, #8]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c01e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d014      	beq.n	800c056 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00f      	beq.n	800c056 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c03c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	699a      	ldr	r2, [r3, #24]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f042 0220 	orr.w	r2, r2, #32
 800c054:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b03      	cmp	r3, #3
 800c060:	d014      	beq.n	800c08c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00f      	beq.n	800c08c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c072:	f043 0204 	orr.w	r2, r3, #4
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	699a      	ldr	r2, [r3, #24]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c08a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00f      	beq.n	800c0b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c09c:	f043 0201 	orr.w	r2, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	699a      	ldr	r2, [r3, #24]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00f      	beq.n	800c0e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0c6:	f043 0208 	orr.w	r2, r3, #8
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c0f0:	bf00      	nop
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	fffffc90 	.word	0xfffffc90

0800c100 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	603b      	str	r3, [r7, #0]
 800c10c:	4613      	mov	r3, r2
 800c10e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c110:	e010      	b.n	800c134 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c112:	f7f6 fbf1 	bl	80028f8 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d803      	bhi.n	800c12a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c128:	d102      	bne.n	800c130 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c130:	2303      	movs	r3, #3
 800c132:	e00f      	b.n	800c154 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	695a      	ldr	r2, [r3, #20]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	4013      	ands	r3, r2
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	429a      	cmp	r2, r3
 800c142:	bf0c      	ite	eq
 800c144:	2301      	moveq	r3, #1
 800c146:	2300      	movne	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	461a      	mov	r2, r3
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d0df      	beq.n	800c112 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c168:	095b      	lsrs	r3, r3, #5
 800c16a:	3301      	adds	r3, #1
 800c16c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	3301      	adds	r3, #1
 800c174:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	3307      	adds	r3, #7
 800c17a:	08db      	lsrs	r3, r3, #3
 800c17c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	fb02 f303 	mul.w	r3, r2, r3
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d109      	bne.n	800c1bc <HAL_TIM_OC_Start_IT+0x28>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	bf14      	ite	ne
 800c1b4:	2301      	movne	r3, #1
 800c1b6:	2300      	moveq	r3, #0
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	e03c      	b.n	800c236 <HAL_TIM_OC_Start_IT+0xa2>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d109      	bne.n	800c1d6 <HAL_TIM_OC_Start_IT+0x42>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	bf14      	ite	ne
 800c1ce:	2301      	movne	r3, #1
 800c1d0:	2300      	moveq	r3, #0
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	e02f      	b.n	800c236 <HAL_TIM_OC_Start_IT+0xa2>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b08      	cmp	r3, #8
 800c1da:	d109      	bne.n	800c1f0 <HAL_TIM_OC_Start_IT+0x5c>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	bf14      	ite	ne
 800c1e8:	2301      	movne	r3, #1
 800c1ea:	2300      	moveq	r3, #0
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	e022      	b.n	800c236 <HAL_TIM_OC_Start_IT+0xa2>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b0c      	cmp	r3, #12
 800c1f4:	d109      	bne.n	800c20a <HAL_TIM_OC_Start_IT+0x76>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	bf14      	ite	ne
 800c202:	2301      	movne	r3, #1
 800c204:	2300      	moveq	r3, #0
 800c206:	b2db      	uxtb	r3, r3
 800c208:	e015      	b.n	800c236 <HAL_TIM_OC_Start_IT+0xa2>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b10      	cmp	r3, #16
 800c20e:	d109      	bne.n	800c224 <HAL_TIM_OC_Start_IT+0x90>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b01      	cmp	r3, #1
 800c21a:	bf14      	ite	ne
 800c21c:	2301      	movne	r3, #1
 800c21e:	2300      	moveq	r3, #0
 800c220:	b2db      	uxtb	r3, r3
 800c222:	e008      	b.n	800c236 <HAL_TIM_OC_Start_IT+0xa2>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	bf14      	ite	ne
 800c230:	2301      	movne	r3, #1
 800c232:	2300      	moveq	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e0ec      	b.n	800c418 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d104      	bne.n	800c24e <HAL_TIM_OC_Start_IT+0xba>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2202      	movs	r2, #2
 800c248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c24c:	e023      	b.n	800c296 <HAL_TIM_OC_Start_IT+0x102>
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b04      	cmp	r3, #4
 800c252:	d104      	bne.n	800c25e <HAL_TIM_OC_Start_IT+0xca>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c25c:	e01b      	b.n	800c296 <HAL_TIM_OC_Start_IT+0x102>
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b08      	cmp	r3, #8
 800c262:	d104      	bne.n	800c26e <HAL_TIM_OC_Start_IT+0xda>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c26c:	e013      	b.n	800c296 <HAL_TIM_OC_Start_IT+0x102>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b0c      	cmp	r3, #12
 800c272:	d104      	bne.n	800c27e <HAL_TIM_OC_Start_IT+0xea>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c27c:	e00b      	b.n	800c296 <HAL_TIM_OC_Start_IT+0x102>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b10      	cmp	r3, #16
 800c282:	d104      	bne.n	800c28e <HAL_TIM_OC_Start_IT+0xfa>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c28c:	e003      	b.n	800c296 <HAL_TIM_OC_Start_IT+0x102>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2202      	movs	r2, #2
 800c292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b0c      	cmp	r3, #12
 800c29a:	d841      	bhi.n	800c320 <HAL_TIM_OC_Start_IT+0x18c>
 800c29c:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <HAL_TIM_OC_Start_IT+0x110>)
 800c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a2:	bf00      	nop
 800c2a4:	0800c2d9 	.word	0x0800c2d9
 800c2a8:	0800c321 	.word	0x0800c321
 800c2ac:	0800c321 	.word	0x0800c321
 800c2b0:	0800c321 	.word	0x0800c321
 800c2b4:	0800c2eb 	.word	0x0800c2eb
 800c2b8:	0800c321 	.word	0x0800c321
 800c2bc:	0800c321 	.word	0x0800c321
 800c2c0:	0800c321 	.word	0x0800c321
 800c2c4:	0800c2fd 	.word	0x0800c2fd
 800c2c8:	0800c321 	.word	0x0800c321
 800c2cc:	0800c321 	.word	0x0800c321
 800c2d0:	0800c321 	.word	0x0800c321
 800c2d4:	0800c30f 	.word	0x0800c30f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68da      	ldr	r2, [r3, #12]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f042 0202 	orr.w	r2, r2, #2
 800c2e6:	60da      	str	r2, [r3, #12]
      break;
 800c2e8:	e01d      	b.n	800c326 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68da      	ldr	r2, [r3, #12]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f042 0204 	orr.w	r2, r2, #4
 800c2f8:	60da      	str	r2, [r3, #12]
      break;
 800c2fa:	e014      	b.n	800c326 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0208 	orr.w	r2, r2, #8
 800c30a:	60da      	str	r2, [r3, #12]
      break;
 800c30c:	e00b      	b.n	800c326 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68da      	ldr	r2, [r3, #12]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f042 0210 	orr.w	r2, r2, #16
 800c31c:	60da      	str	r2, [r3, #12]
      break;
 800c31e:	e002      	b.n	800c326 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	73fb      	strb	r3, [r7, #15]
      break;
 800c324:	bf00      	nop
  }

  if (status == HAL_OK)
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d174      	bne.n	800c416 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2201      	movs	r2, #1
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	4618      	mov	r0, r3
 800c336:	f000 ff8d 	bl	800d254 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a38      	ldr	r2, [pc, #224]	; (800c420 <HAL_TIM_OC_Start_IT+0x28c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d013      	beq.n	800c36c <HAL_TIM_OC_Start_IT+0x1d8>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a36      	ldr	r2, [pc, #216]	; (800c424 <HAL_TIM_OC_Start_IT+0x290>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00e      	beq.n	800c36c <HAL_TIM_OC_Start_IT+0x1d8>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a35      	ldr	r2, [pc, #212]	; (800c428 <HAL_TIM_OC_Start_IT+0x294>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d009      	beq.n	800c36c <HAL_TIM_OC_Start_IT+0x1d8>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a33      	ldr	r2, [pc, #204]	; (800c42c <HAL_TIM_OC_Start_IT+0x298>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d004      	beq.n	800c36c <HAL_TIM_OC_Start_IT+0x1d8>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a32      	ldr	r2, [pc, #200]	; (800c430 <HAL_TIM_OC_Start_IT+0x29c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d101      	bne.n	800c370 <HAL_TIM_OC_Start_IT+0x1dc>
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <HAL_TIM_OC_Start_IT+0x1de>
 800c370:	2300      	movs	r3, #0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c384:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a25      	ldr	r2, [pc, #148]	; (800c420 <HAL_TIM_OC_Start_IT+0x28c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d022      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c398:	d01d      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a25      	ldr	r2, [pc, #148]	; (800c434 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d018      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a23      	ldr	r2, [pc, #140]	; (800c438 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d013      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a22      	ldr	r2, [pc, #136]	; (800c43c <HAL_TIM_OC_Start_IT+0x2a8>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d00e      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a19      	ldr	r2, [pc, #100]	; (800c424 <HAL_TIM_OC_Start_IT+0x290>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d009      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a1e      	ldr	r2, [pc, #120]	; (800c440 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d004      	beq.n	800c3d6 <HAL_TIM_OC_Start_IT+0x242>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a15      	ldr	r2, [pc, #84]	; (800c428 <HAL_TIM_OC_Start_IT+0x294>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d115      	bne.n	800c402 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	689a      	ldr	r2, [r3, #8]
 800c3dc:	4b19      	ldr	r3, [pc, #100]	; (800c444 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c3de:	4013      	ands	r3, r2
 800c3e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b06      	cmp	r3, #6
 800c3e6:	d015      	beq.n	800c414 <HAL_TIM_OC_Start_IT+0x280>
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ee:	d011      	beq.n	800c414 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c400:	e008      	b.n	800c414 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f042 0201 	orr.w	r2, r2, #1
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	e000      	b.n	800c416 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c414:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	40010000 	.word	0x40010000
 800c424:	40010400 	.word	0x40010400
 800c428:	40014000 	.word	0x40014000
 800c42c:	40014400 	.word	0x40014400
 800c430:	40014800 	.word	0x40014800
 800c434:	40000400 	.word	0x40000400
 800c438:	40000800 	.word	0x40000800
 800c43c:	40000c00 	.word	0x40000c00
 800c440:	40001800 	.word	0x40001800
 800c444:	00010007 	.word	0x00010007

0800c448 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b0c      	cmp	r3, #12
 800c45a:	d841      	bhi.n	800c4e0 <HAL_TIM_OC_Stop_IT+0x98>
 800c45c:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c462:	bf00      	nop
 800c464:	0800c499 	.word	0x0800c499
 800c468:	0800c4e1 	.word	0x0800c4e1
 800c46c:	0800c4e1 	.word	0x0800c4e1
 800c470:	0800c4e1 	.word	0x0800c4e1
 800c474:	0800c4ab 	.word	0x0800c4ab
 800c478:	0800c4e1 	.word	0x0800c4e1
 800c47c:	0800c4e1 	.word	0x0800c4e1
 800c480:	0800c4e1 	.word	0x0800c4e1
 800c484:	0800c4bd 	.word	0x0800c4bd
 800c488:	0800c4e1 	.word	0x0800c4e1
 800c48c:	0800c4e1 	.word	0x0800c4e1
 800c490:	0800c4e1 	.word	0x0800c4e1
 800c494:	0800c4cf 	.word	0x0800c4cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68da      	ldr	r2, [r3, #12]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 0202 	bic.w	r2, r2, #2
 800c4a6:	60da      	str	r2, [r3, #12]
      break;
 800c4a8:	e01d      	b.n	800c4e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68da      	ldr	r2, [r3, #12]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f022 0204 	bic.w	r2, r2, #4
 800c4b8:	60da      	str	r2, [r3, #12]
      break;
 800c4ba:	e014      	b.n	800c4e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68da      	ldr	r2, [r3, #12]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0208 	bic.w	r2, r2, #8
 800c4ca:	60da      	str	r2, [r3, #12]
      break;
 800c4cc:	e00b      	b.n	800c4e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68da      	ldr	r2, [r3, #12]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 0210 	bic.w	r2, r2, #16
 800c4dc:	60da      	str	r2, [r3, #12]
      break;
 800c4de:	e002      	b.n	800c4e6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 8081 	bne.w	800c5f0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 feac 	bl	800d254 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a3e      	ldr	r2, [pc, #248]	; (800c5fc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d013      	beq.n	800c52e <HAL_TIM_OC_Stop_IT+0xe6>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a3d      	ldr	r2, [pc, #244]	; (800c600 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d00e      	beq.n	800c52e <HAL_TIM_OC_Stop_IT+0xe6>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a3b      	ldr	r2, [pc, #236]	; (800c604 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d009      	beq.n	800c52e <HAL_TIM_OC_Stop_IT+0xe6>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a3a      	ldr	r2, [pc, #232]	; (800c608 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d004      	beq.n	800c52e <HAL_TIM_OC_Stop_IT+0xe6>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a38      	ldr	r2, [pc, #224]	; (800c60c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d101      	bne.n	800c532 <HAL_TIM_OC_Stop_IT+0xea>
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <HAL_TIM_OC_Stop_IT+0xec>
 800c532:	2300      	movs	r3, #0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d017      	beq.n	800c568 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6a1a      	ldr	r2, [r3, #32]
 800c53e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c542:	4013      	ands	r3, r2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10f      	bne.n	800c568 <HAL_TIM_OC_Stop_IT+0x120>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6a1a      	ldr	r2, [r3, #32]
 800c54e:	f240 4344 	movw	r3, #1092	; 0x444
 800c552:	4013      	ands	r3, r2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d107      	bne.n	800c568 <HAL_TIM_OC_Stop_IT+0x120>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c566:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6a1a      	ldr	r2, [r3, #32]
 800c56e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c572:	4013      	ands	r3, r2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10f      	bne.n	800c598 <HAL_TIM_OC_Stop_IT+0x150>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6a1a      	ldr	r2, [r3, #32]
 800c57e:	f240 4344 	movw	r3, #1092	; 0x444
 800c582:	4013      	ands	r3, r2
 800c584:	2b00      	cmp	r3, #0
 800c586:	d107      	bne.n	800c598 <HAL_TIM_OC_Stop_IT+0x150>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f022 0201 	bic.w	r2, r2, #1
 800c596:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d104      	bne.n	800c5a8 <HAL_TIM_OC_Stop_IT+0x160>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5a6:	e023      	b.n	800c5f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	d104      	bne.n	800c5b8 <HAL_TIM_OC_Stop_IT+0x170>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5b6:	e01b      	b.n	800c5f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b08      	cmp	r3, #8
 800c5bc:	d104      	bne.n	800c5c8 <HAL_TIM_OC_Stop_IT+0x180>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5c6:	e013      	b.n	800c5f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b0c      	cmp	r3, #12
 800c5cc:	d104      	bne.n	800c5d8 <HAL_TIM_OC_Stop_IT+0x190>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5d6:	e00b      	b.n	800c5f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b10      	cmp	r3, #16
 800c5dc:	d104      	bne.n	800c5e8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5e6:	e003      	b.n	800c5f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	40010000 	.word	0x40010000
 800c600:	40010400 	.word	0x40010400
 800c604:	40014000 	.word	0x40014000
 800c608:	40014400 	.word	0x40014400
 800c60c:	40014800 	.word	0x40014800

0800c610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e049      	b.n	800c6b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7f5 fe46 	bl	80022c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f000 fa90 	bl	800cb74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d122      	bne.n	800c71a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	d11b      	bne.n	800c71a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f06f 0202 	mvn.w	r2, #2
 800c6ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	f003 0303 	and.w	r3, r3, #3
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fa19 	bl	800cb38 <HAL_TIM_IC_CaptureCallback>
 800c706:	e005      	b.n	800c714 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7f4 faa9 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fa1c 	bl	800cb4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b04      	cmp	r3, #4
 800c726:	d122      	bne.n	800c76e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	f003 0304 	and.w	r3, r3, #4
 800c732:	2b04      	cmp	r3, #4
 800c734:	d11b      	bne.n	800c76e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f06f 0204 	mvn.w	r2, #4
 800c73e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2202      	movs	r2, #2
 800c744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f9ef 	bl	800cb38 <HAL_TIM_IC_CaptureCallback>
 800c75a:	e005      	b.n	800c768 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7f4 fa7f 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f9f2 	bl	800cb4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	f003 0308 	and.w	r3, r3, #8
 800c778:	2b08      	cmp	r3, #8
 800c77a:	d122      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	f003 0308 	and.w	r3, r3, #8
 800c786:	2b08      	cmp	r3, #8
 800c788:	d11b      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f06f 0208 	mvn.w	r2, #8
 800c792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2204      	movs	r2, #4
 800c798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	f003 0303 	and.w	r3, r3, #3
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f9c5 	bl	800cb38 <HAL_TIM_IC_CaptureCallback>
 800c7ae:	e005      	b.n	800c7bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7f4 fa55 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f9c8 	bl	800cb4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	f003 0310 	and.w	r3, r3, #16
 800c7cc:	2b10      	cmp	r3, #16
 800c7ce:	d122      	bne.n	800c816 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f003 0310 	and.w	r3, r3, #16
 800c7da:	2b10      	cmp	r3, #16
 800c7dc:	d11b      	bne.n	800c816 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f06f 0210 	mvn.w	r2, #16
 800c7e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2208      	movs	r2, #8
 800c7ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	69db      	ldr	r3, [r3, #28]
 800c7f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f99b 	bl	800cb38 <HAL_TIM_IC_CaptureCallback>
 800c802:	e005      	b.n	800c810 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f4 fa2b 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f99e 	bl	800cb4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b01      	cmp	r3, #1
 800c822:	d10e      	bne.n	800c842 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f003 0301 	and.w	r3, r3, #1
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d107      	bne.n	800c842 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f06f 0201 	mvn.w	r2, #1
 800c83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f971 	bl	800cb24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84c:	2b80      	cmp	r3, #128	; 0x80
 800c84e:	d10e      	bne.n	800c86e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85a:	2b80      	cmp	r3, #128	; 0x80
 800c85c:	d107      	bne.n	800c86e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fe2f 	bl	800d4cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87c:	d10e      	bne.n	800c89c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c888:	2b80      	cmp	r3, #128	; 0x80
 800c88a:	d107      	bne.n	800c89c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fe22 	bl	800d4e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a6:	2b40      	cmp	r3, #64	; 0x40
 800c8a8:	d10e      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b4:	2b40      	cmp	r3, #64	; 0x40
 800c8b6:	d107      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f94c 	bl	800cb60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	f003 0320 	and.w	r3, r3, #32
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d10e      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	f003 0320 	and.w	r3, r3, #32
 800c8e0:	2b20      	cmp	r3, #32
 800c8e2:	d107      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f06f 0220 	mvn.w	r2, #32
 800c8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fde2 	bl	800d4b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c912:	2b01      	cmp	r3, #1
 800c914:	d101      	bne.n	800c91a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c916:	2302      	movs	r3, #2
 800c918:	e0ff      	b.n	800cb1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b14      	cmp	r3, #20
 800c926:	f200 80f0 	bhi.w	800cb0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c92a:	a201      	add	r2, pc, #4	; (adr r2, 800c930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c985 	.word	0x0800c985
 800c934:	0800cb0b 	.word	0x0800cb0b
 800c938:	0800cb0b 	.word	0x0800cb0b
 800c93c:	0800cb0b 	.word	0x0800cb0b
 800c940:	0800c9c5 	.word	0x0800c9c5
 800c944:	0800cb0b 	.word	0x0800cb0b
 800c948:	0800cb0b 	.word	0x0800cb0b
 800c94c:	0800cb0b 	.word	0x0800cb0b
 800c950:	0800ca07 	.word	0x0800ca07
 800c954:	0800cb0b 	.word	0x0800cb0b
 800c958:	0800cb0b 	.word	0x0800cb0b
 800c95c:	0800cb0b 	.word	0x0800cb0b
 800c960:	0800ca47 	.word	0x0800ca47
 800c964:	0800cb0b 	.word	0x0800cb0b
 800c968:	0800cb0b 	.word	0x0800cb0b
 800c96c:	0800cb0b 	.word	0x0800cb0b
 800c970:	0800ca89 	.word	0x0800ca89
 800c974:	0800cb0b 	.word	0x0800cb0b
 800c978:	0800cb0b 	.word	0x0800cb0b
 800c97c:	0800cb0b 	.word	0x0800cb0b
 800c980:	0800cac9 	.word	0x0800cac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 f98c 	bl	800cca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f042 0208 	orr.w	r2, r2, #8
 800c99e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	699a      	ldr	r2, [r3, #24]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 0204 	bic.w	r2, r2, #4
 800c9ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6999      	ldr	r1, [r3, #24]
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	691a      	ldr	r2, [r3, #16]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	619a      	str	r2, [r3, #24]
      break;
 800c9c2:	e0a5      	b.n	800cb10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f9fc 	bl	800cdc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	699a      	ldr	r2, [r3, #24]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	699a      	ldr	r2, [r3, #24]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6999      	ldr	r1, [r3, #24]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	021a      	lsls	r2, r3, #8
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	430a      	orrs	r2, r1
 800ca02:	619a      	str	r2, [r3, #24]
      break;
 800ca04:	e084      	b.n	800cb10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 fa65 	bl	800cedc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69da      	ldr	r2, [r3, #28]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f042 0208 	orr.w	r2, r2, #8
 800ca20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	69da      	ldr	r2, [r3, #28]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f022 0204 	bic.w	r2, r2, #4
 800ca30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	69d9      	ldr	r1, [r3, #28]
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	691a      	ldr	r2, [r3, #16]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	430a      	orrs	r2, r1
 800ca42:	61da      	str	r2, [r3, #28]
      break;
 800ca44:	e064      	b.n	800cb10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68b9      	ldr	r1, [r7, #8]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 facd 	bl	800cfec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	69da      	ldr	r2, [r3, #28]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	69da      	ldr	r2, [r3, #28]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	69d9      	ldr	r1, [r3, #28]
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	021a      	lsls	r2, r3, #8
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	430a      	orrs	r2, r1
 800ca84:	61da      	str	r2, [r3, #28]
      break;
 800ca86:	e043      	b.n	800cb10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68b9      	ldr	r1, [r7, #8]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fb16 	bl	800d0c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f042 0208 	orr.w	r2, r2, #8
 800caa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f022 0204 	bic.w	r2, r2, #4
 800cab2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	691a      	ldr	r2, [r3, #16]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cac6:	e023      	b.n	800cb10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 fb5a 	bl	800d188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	021a      	lsls	r2, r3, #8
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	430a      	orrs	r2, r1
 800cb06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb08:	e002      	b.n	800cb10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	75fb      	strb	r3, [r7, #23]
      break;
 800cb0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop

0800cb24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a40      	ldr	r2, [pc, #256]	; (800cc88 <TIM_Base_SetConfig+0x114>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d013      	beq.n	800cbb4 <TIM_Base_SetConfig+0x40>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb92:	d00f      	beq.n	800cbb4 <TIM_Base_SetConfig+0x40>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a3d      	ldr	r2, [pc, #244]	; (800cc8c <TIM_Base_SetConfig+0x118>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d00b      	beq.n	800cbb4 <TIM_Base_SetConfig+0x40>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a3c      	ldr	r2, [pc, #240]	; (800cc90 <TIM_Base_SetConfig+0x11c>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d007      	beq.n	800cbb4 <TIM_Base_SetConfig+0x40>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a3b      	ldr	r2, [pc, #236]	; (800cc94 <TIM_Base_SetConfig+0x120>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d003      	beq.n	800cbb4 <TIM_Base_SetConfig+0x40>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a3a      	ldr	r2, [pc, #232]	; (800cc98 <TIM_Base_SetConfig+0x124>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d108      	bne.n	800cbc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a2f      	ldr	r2, [pc, #188]	; (800cc88 <TIM_Base_SetConfig+0x114>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d01f      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbd4:	d01b      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a2c      	ldr	r2, [pc, #176]	; (800cc8c <TIM_Base_SetConfig+0x118>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d017      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a2b      	ldr	r2, [pc, #172]	; (800cc90 <TIM_Base_SetConfig+0x11c>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d013      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a2a      	ldr	r2, [pc, #168]	; (800cc94 <TIM_Base_SetConfig+0x120>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d00f      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4a29      	ldr	r2, [pc, #164]	; (800cc98 <TIM_Base_SetConfig+0x124>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d00b      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a28      	ldr	r2, [pc, #160]	; (800cc9c <TIM_Base_SetConfig+0x128>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d007      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a27      	ldr	r2, [pc, #156]	; (800cca0 <TIM_Base_SetConfig+0x12c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d003      	beq.n	800cc0e <TIM_Base_SetConfig+0x9a>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a26      	ldr	r2, [pc, #152]	; (800cca4 <TIM_Base_SetConfig+0x130>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d108      	bne.n	800cc20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	689a      	ldr	r2, [r3, #8]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a10      	ldr	r2, [pc, #64]	; (800cc88 <TIM_Base_SetConfig+0x114>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d00f      	beq.n	800cc6c <TIM_Base_SetConfig+0xf8>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a12      	ldr	r2, [pc, #72]	; (800cc98 <TIM_Base_SetConfig+0x124>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00b      	beq.n	800cc6c <TIM_Base_SetConfig+0xf8>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a11      	ldr	r2, [pc, #68]	; (800cc9c <TIM_Base_SetConfig+0x128>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d007      	beq.n	800cc6c <TIM_Base_SetConfig+0xf8>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a10      	ldr	r2, [pc, #64]	; (800cca0 <TIM_Base_SetConfig+0x12c>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d003      	beq.n	800cc6c <TIM_Base_SetConfig+0xf8>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a0f      	ldr	r2, [pc, #60]	; (800cca4 <TIM_Base_SetConfig+0x130>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d103      	bne.n	800cc74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	691a      	ldr	r2, [r3, #16]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	615a      	str	r2, [r3, #20]
}
 800cc7a:	bf00      	nop
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	40010000 	.word	0x40010000
 800cc8c:	40000400 	.word	0x40000400
 800cc90:	40000800 	.word	0x40000800
 800cc94:	40000c00 	.word	0x40000c00
 800cc98:	40010400 	.word	0x40010400
 800cc9c:	40014000 	.word	0x40014000
 800cca0:	40014400 	.word	0x40014400
 800cca4:	40014800 	.word	0x40014800

0800cca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	f023 0201 	bic.w	r2, r3, #1
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4b37      	ldr	r3, [pc, #220]	; (800cdb0 <TIM_OC1_SetConfig+0x108>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f023 0303 	bic.w	r3, r3, #3
 800ccde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	f023 0302 	bic.w	r3, r3, #2
 800ccf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a2d      	ldr	r2, [pc, #180]	; (800cdb4 <TIM_OC1_SetConfig+0x10c>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d00f      	beq.n	800cd24 <TIM_OC1_SetConfig+0x7c>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a2c      	ldr	r2, [pc, #176]	; (800cdb8 <TIM_OC1_SetConfig+0x110>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d00b      	beq.n	800cd24 <TIM_OC1_SetConfig+0x7c>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a2b      	ldr	r2, [pc, #172]	; (800cdbc <TIM_OC1_SetConfig+0x114>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d007      	beq.n	800cd24 <TIM_OC1_SetConfig+0x7c>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a2a      	ldr	r2, [pc, #168]	; (800cdc0 <TIM_OC1_SetConfig+0x118>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d003      	beq.n	800cd24 <TIM_OC1_SetConfig+0x7c>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a29      	ldr	r2, [pc, #164]	; (800cdc4 <TIM_OC1_SetConfig+0x11c>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d10c      	bne.n	800cd3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f023 0308 	bic.w	r3, r3, #8
 800cd2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f023 0304 	bic.w	r3, r3, #4
 800cd3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a1c      	ldr	r2, [pc, #112]	; (800cdb4 <TIM_OC1_SetConfig+0x10c>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00f      	beq.n	800cd66 <TIM_OC1_SetConfig+0xbe>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a1b      	ldr	r2, [pc, #108]	; (800cdb8 <TIM_OC1_SetConfig+0x110>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d00b      	beq.n	800cd66 <TIM_OC1_SetConfig+0xbe>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a1a      	ldr	r2, [pc, #104]	; (800cdbc <TIM_OC1_SetConfig+0x114>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d007      	beq.n	800cd66 <TIM_OC1_SetConfig+0xbe>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a19      	ldr	r2, [pc, #100]	; (800cdc0 <TIM_OC1_SetConfig+0x118>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d003      	beq.n	800cd66 <TIM_OC1_SetConfig+0xbe>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a18      	ldr	r2, [pc, #96]	; (800cdc4 <TIM_OC1_SetConfig+0x11c>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d111      	bne.n	800cd8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	621a      	str	r2, [r3, #32]
}
 800cda4:	bf00      	nop
 800cda6:	371c      	adds	r7, #28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	fffeff8f 	.word	0xfffeff8f
 800cdb4:	40010000 	.word	0x40010000
 800cdb8:	40010400 	.word	0x40010400
 800cdbc:	40014000 	.word	0x40014000
 800cdc0:	40014400 	.word	0x40014400
 800cdc4:	40014800 	.word	0x40014800

0800cdc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	f023 0210 	bic.w	r2, r3, #16
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4b34      	ldr	r3, [pc, #208]	; (800cec4 <TIM_OC2_SetConfig+0xfc>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	021b      	lsls	r3, r3, #8
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	f023 0320 	bic.w	r3, r3, #32
 800ce12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a29      	ldr	r2, [pc, #164]	; (800cec8 <TIM_OC2_SetConfig+0x100>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d003      	beq.n	800ce30 <TIM_OC2_SetConfig+0x68>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a28      	ldr	r2, [pc, #160]	; (800cecc <TIM_OC2_SetConfig+0x104>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d10d      	bne.n	800ce4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	011b      	lsls	r3, r3, #4
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a1e      	ldr	r2, [pc, #120]	; (800cec8 <TIM_OC2_SetConfig+0x100>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d00f      	beq.n	800ce74 <TIM_OC2_SetConfig+0xac>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a1d      	ldr	r2, [pc, #116]	; (800cecc <TIM_OC2_SetConfig+0x104>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d00b      	beq.n	800ce74 <TIM_OC2_SetConfig+0xac>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a1c      	ldr	r2, [pc, #112]	; (800ced0 <TIM_OC2_SetConfig+0x108>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d007      	beq.n	800ce74 <TIM_OC2_SetConfig+0xac>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a1b      	ldr	r2, [pc, #108]	; (800ced4 <TIM_OC2_SetConfig+0x10c>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d003      	beq.n	800ce74 <TIM_OC2_SetConfig+0xac>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4a1a      	ldr	r2, [pc, #104]	; (800ced8 <TIM_OC2_SetConfig+0x110>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d113      	bne.n	800ce9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	695b      	ldr	r3, [r3, #20]
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	621a      	str	r2, [r3, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	feff8fff 	.word	0xfeff8fff
 800cec8:	40010000 	.word	0x40010000
 800cecc:	40010400 	.word	0x40010400
 800ced0:	40014000 	.word	0x40014000
 800ced4:	40014400 	.word	0x40014400
 800ced8:	40014800 	.word	0x40014800

0800cedc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cedc:	b480      	push	{r7}
 800cede:	b087      	sub	sp, #28
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a1b      	ldr	r3, [r3, #32]
 800cef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	4b33      	ldr	r3, [pc, #204]	; (800cfd4 <TIM_OC3_SetConfig+0xf8>)
 800cf08:	4013      	ands	r3, r2
 800cf0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f023 0303 	bic.w	r3, r3, #3
 800cf12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	021b      	lsls	r3, r3, #8
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a28      	ldr	r2, [pc, #160]	; (800cfd8 <TIM_OC3_SetConfig+0xfc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d003      	beq.n	800cf42 <TIM_OC3_SetConfig+0x66>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a27      	ldr	r2, [pc, #156]	; (800cfdc <TIM_OC3_SetConfig+0x100>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d10d      	bne.n	800cf5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a1d      	ldr	r2, [pc, #116]	; (800cfd8 <TIM_OC3_SetConfig+0xfc>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00f      	beq.n	800cf86 <TIM_OC3_SetConfig+0xaa>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a1c      	ldr	r2, [pc, #112]	; (800cfdc <TIM_OC3_SetConfig+0x100>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d00b      	beq.n	800cf86 <TIM_OC3_SetConfig+0xaa>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a1b      	ldr	r2, [pc, #108]	; (800cfe0 <TIM_OC3_SetConfig+0x104>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d007      	beq.n	800cf86 <TIM_OC3_SetConfig+0xaa>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a1a      	ldr	r2, [pc, #104]	; (800cfe4 <TIM_OC3_SetConfig+0x108>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d003      	beq.n	800cf86 <TIM_OC3_SetConfig+0xaa>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a19      	ldr	r2, [pc, #100]	; (800cfe8 <TIM_OC3_SetConfig+0x10c>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d113      	bne.n	800cfae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	011b      	lsls	r3, r3, #4
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	693a      	ldr	r2, [r7, #16]
 800cfb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	621a      	str	r2, [r3, #32]
}
 800cfc8:	bf00      	nop
 800cfca:	371c      	adds	r7, #28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	fffeff8f 	.word	0xfffeff8f
 800cfd8:	40010000 	.word	0x40010000
 800cfdc:	40010400 	.word	0x40010400
 800cfe0:	40014000 	.word	0x40014000
 800cfe4:	40014400 	.word	0x40014400
 800cfe8:	40014800 	.word	0x40014800

0800cfec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a1b      	ldr	r3, [r3, #32]
 800cffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	4b24      	ldr	r3, [pc, #144]	; (800d0a8 <TIM_OC4_SetConfig+0xbc>)
 800d018:	4013      	ands	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	021b      	lsls	r3, r3, #8
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	031b      	lsls	r3, r3, #12
 800d03e:	693a      	ldr	r2, [r7, #16]
 800d040:	4313      	orrs	r3, r2
 800d042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a19      	ldr	r2, [pc, #100]	; (800d0ac <TIM_OC4_SetConfig+0xc0>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d00f      	beq.n	800d06c <TIM_OC4_SetConfig+0x80>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a18      	ldr	r2, [pc, #96]	; (800d0b0 <TIM_OC4_SetConfig+0xc4>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d00b      	beq.n	800d06c <TIM_OC4_SetConfig+0x80>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a17      	ldr	r2, [pc, #92]	; (800d0b4 <TIM_OC4_SetConfig+0xc8>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d007      	beq.n	800d06c <TIM_OC4_SetConfig+0x80>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a16      	ldr	r2, [pc, #88]	; (800d0b8 <TIM_OC4_SetConfig+0xcc>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d003      	beq.n	800d06c <TIM_OC4_SetConfig+0x80>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a15      	ldr	r2, [pc, #84]	; (800d0bc <TIM_OC4_SetConfig+0xd0>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d109      	bne.n	800d080 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	019b      	lsls	r3, r3, #6
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	697a      	ldr	r2, [r7, #20]
 800d084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	621a      	str	r2, [r3, #32]
}
 800d09a:	bf00      	nop
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	feff8fff 	.word	0xfeff8fff
 800d0ac:	40010000 	.word	0x40010000
 800d0b0:	40010400 	.word	0x40010400
 800d0b4:	40014000 	.word	0x40014000
 800d0b8:	40014400 	.word	0x40014400
 800d0bc:	40014800 	.word	0x40014800

0800d0c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a1b      	ldr	r3, [r3, #32]
 800d0da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4b21      	ldr	r3, [pc, #132]	; (800d170 <TIM_OC5_SetConfig+0xb0>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	041b      	lsls	r3, r3, #16
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a18      	ldr	r2, [pc, #96]	; (800d174 <TIM_OC5_SetConfig+0xb4>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d00f      	beq.n	800d136 <TIM_OC5_SetConfig+0x76>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a17      	ldr	r2, [pc, #92]	; (800d178 <TIM_OC5_SetConfig+0xb8>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d00b      	beq.n	800d136 <TIM_OC5_SetConfig+0x76>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4a16      	ldr	r2, [pc, #88]	; (800d17c <TIM_OC5_SetConfig+0xbc>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d007      	beq.n	800d136 <TIM_OC5_SetConfig+0x76>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a15      	ldr	r2, [pc, #84]	; (800d180 <TIM_OC5_SetConfig+0xc0>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d003      	beq.n	800d136 <TIM_OC5_SetConfig+0x76>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a14      	ldr	r2, [pc, #80]	; (800d184 <TIM_OC5_SetConfig+0xc4>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d109      	bne.n	800d14a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d13c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	695b      	ldr	r3, [r3, #20]
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	4313      	orrs	r3, r2
 800d148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	621a      	str	r2, [r3, #32]
}
 800d164:	bf00      	nop
 800d166:	371c      	adds	r7, #28
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	fffeff8f 	.word	0xfffeff8f
 800d174:	40010000 	.word	0x40010000
 800d178:	40010400 	.word	0x40010400
 800d17c:	40014000 	.word	0x40014000
 800d180:	40014400 	.word	0x40014400
 800d184:	40014800 	.word	0x40014800

0800d188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d188:	b480      	push	{r7}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	4b22      	ldr	r3, [pc, #136]	; (800d23c <TIM_OC6_SetConfig+0xb4>)
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	021b      	lsls	r3, r3, #8
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	051b      	lsls	r3, r3, #20
 800d1d2:	693a      	ldr	r2, [r7, #16]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a19      	ldr	r2, [pc, #100]	; (800d240 <TIM_OC6_SetConfig+0xb8>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00f      	beq.n	800d200 <TIM_OC6_SetConfig+0x78>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a18      	ldr	r2, [pc, #96]	; (800d244 <TIM_OC6_SetConfig+0xbc>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d00b      	beq.n	800d200 <TIM_OC6_SetConfig+0x78>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a17      	ldr	r2, [pc, #92]	; (800d248 <TIM_OC6_SetConfig+0xc0>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d007      	beq.n	800d200 <TIM_OC6_SetConfig+0x78>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a16      	ldr	r2, [pc, #88]	; (800d24c <TIM_OC6_SetConfig+0xc4>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d003      	beq.n	800d200 <TIM_OC6_SetConfig+0x78>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a15      	ldr	r2, [pc, #84]	; (800d250 <TIM_OC6_SetConfig+0xc8>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d109      	bne.n	800d214 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	029b      	lsls	r3, r3, #10
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4313      	orrs	r3, r2
 800d212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	693a      	ldr	r2, [r7, #16]
 800d22c:	621a      	str	r2, [r3, #32]
}
 800d22e:	bf00      	nop
 800d230:	371c      	adds	r7, #28
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	feff8fff 	.word	0xfeff8fff
 800d240:	40010000 	.word	0x40010000
 800d244:	40010400 	.word	0x40010400
 800d248:	40014000 	.word	0x40014000
 800d24c:	40014400 	.word	0x40014400
 800d250:	40014800 	.word	0x40014800

0800d254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d254:	b480      	push	{r7}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f003 031f 	and.w	r3, r3, #31
 800d266:	2201      	movs	r2, #1
 800d268:	fa02 f303 	lsl.w	r3, r2, r3
 800d26c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6a1a      	ldr	r2, [r3, #32]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	43db      	mvns	r3, r3
 800d276:	401a      	ands	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6a1a      	ldr	r2, [r3, #32]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f003 031f 	and.w	r3, r3, #31
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	fa01 f303 	lsl.w	r3, r1, r3
 800d28c:	431a      	orrs	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	621a      	str	r2, [r3, #32]
}
 800d292:	bf00      	nop
 800d294:	371c      	adds	r7, #28
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
	...

0800d2a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d101      	bne.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	e06d      	b.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a30      	ldr	r2, [pc, #192]	; (800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d004      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a2f      	ldr	r2, [pc, #188]	; (800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d108      	bne.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d304:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a20      	ldr	r2, [pc, #128]	; (800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d022      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d32a:	d01d      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a1d      	ldr	r2, [pc, #116]	; (800d3a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d018      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a1c      	ldr	r2, [pc, #112]	; (800d3ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d013      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a1a      	ldr	r2, [pc, #104]	; (800d3b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d00e      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a15      	ldr	r2, [pc, #84]	; (800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d009      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a16      	ldr	r2, [pc, #88]	; (800d3b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d004      	beq.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a15      	ldr	r2, [pc, #84]	; (800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d10c      	bne.n	800d382 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d36e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	68ba      	ldr	r2, [r7, #8]
 800d376:	4313      	orrs	r3, r2
 800d378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	40010000 	.word	0x40010000
 800d3a4:	40010400 	.word	0x40010400
 800d3a8:	40000400 	.word	0x40000400
 800d3ac:	40000800 	.word	0x40000800
 800d3b0:	40000c00 	.word	0x40000c00
 800d3b4:	40001800 	.word	0x40001800
 800d3b8:	40014000 	.word	0x40014000

0800d3bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d101      	bne.n	800d3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3d4:	2302      	movs	r3, #2
 800d3d6:	e065      	b.n	800d4a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	4313      	orrs	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4313      	orrs	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	041b      	lsls	r3, r3, #16
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a16      	ldr	r2, [pc, #88]	; (800d4b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d004      	beq.n	800d466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a14      	ldr	r2, [pc, #80]	; (800d4b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d115      	bne.n	800d492 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d470:	051b      	lsls	r3, r3, #20
 800d472:	4313      	orrs	r3, r2
 800d474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	4313      	orrs	r3, r2
 800d482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	4313      	orrs	r3, r2
 800d490:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3714      	adds	r7, #20
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	40010000 	.word	0x40010000
 800d4b4:	40010400 	.word	0x40010400

0800d4b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d101      	bne.n	800d506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	e042      	b.n	800d58c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7f4 ff97 	bl	800244c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2224      	movs	r2, #36	; 0x24
 800d522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f022 0201 	bic.w	r2, r2, #1
 800d534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fcd6 	bl	800dee8 <UART_SetConfig>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d101      	bne.n	800d546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e022      	b.n	800d58c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 fa32 	bl	800e9b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685a      	ldr	r2, [r3, #4]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	689a      	ldr	r2, [r3, #8]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0201 	orr.w	r2, r2, #1
 800d582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f001 fab9 	bl	800eafc <UART_CheckIdleState>
 800d58a:	4603      	mov	r3, r0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	; 0x28
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5aa:	2b20      	cmp	r3, #32
 800d5ac:	f040 8083 	bne.w	800d6b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d002      	beq.n	800d5bc <HAL_UART_Transmit+0x28>
 800d5b6:	88fb      	ldrh	r3, [r7, #6]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e07b      	b.n	800d6b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d101      	bne.n	800d5ce <HAL_UART_Transmit+0x3a>
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	e074      	b.n	800d6b8 <HAL_UART_Transmit+0x124>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2221      	movs	r2, #33	; 0x21
 800d5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5e6:	f7f5 f987 	bl	80028f8 <HAL_GetTick>
 800d5ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	88fa      	ldrh	r2, [r7, #6]
 800d5f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	88fa      	ldrh	r2, [r7, #6]
 800d5f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d604:	d108      	bne.n	800d618 <HAL_UART_Transmit+0x84>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d104      	bne.n	800d618 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d60e:	2300      	movs	r3, #0
 800d610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	61bb      	str	r3, [r7, #24]
 800d616:	e003      	b.n	800d620 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d61c:	2300      	movs	r3, #0
 800d61e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d628:	e02c      	b.n	800d684 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2200      	movs	r2, #0
 800d632:	2180      	movs	r1, #128	; 0x80
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f001 faac 	bl	800eb92 <UART_WaitOnFlagUntilTimeout>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d640:	2303      	movs	r3, #3
 800d642:	e039      	b.n	800d6b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10b      	bne.n	800d662 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	461a      	mov	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	3302      	adds	r3, #2
 800d65e:	61bb      	str	r3, [r7, #24]
 800d660:	e007      	b.n	800d672 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	781a      	ldrb	r2, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	3301      	adds	r3, #1
 800d670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d678:	b29b      	uxth	r3, r3
 800d67a:	3b01      	subs	r3, #1
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1cc      	bne.n	800d62a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2200      	movs	r2, #0
 800d698:	2140      	movs	r1, #64	; 0x40
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f001 fa79 	bl	800eb92 <UART_WaitOnFlagUntilTimeout>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e006      	b.n	800d6b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	e000      	b.n	800d6b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d6b6:	2302      	movs	r3, #2
  }
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08a      	sub	sp, #40	; 0x28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6d4:	2b20      	cmp	r3, #32
 800d6d6:	d142      	bne.n	800d75e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <HAL_UART_Receive_IT+0x24>
 800d6de:	88fb      	ldrh	r3, [r7, #6]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e03b      	b.n	800d760 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d101      	bne.n	800d6f6 <HAL_UART_Receive_IT+0x36>
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	e034      	b.n	800d760 <HAL_UART_Receive_IT+0xa0>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2200      	movs	r2, #0
 800d702:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a17      	ldr	r2, [pc, #92]	; (800d768 <HAL_UART_Receive_IT+0xa8>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d01f      	beq.n	800d74e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d018      	beq.n	800d74e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	e853 3f00 	ldrex	r3, [r3]
 800d728:	613b      	str	r3, [r7, #16]
   return(result);
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	461a      	mov	r2, r3
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	623b      	str	r3, [r7, #32]
 800d73c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d73e:	69f9      	ldr	r1, [r7, #28]
 800d740:	6a3a      	ldr	r2, [r7, #32]
 800d742:	e841 2300 	strex	r3, r2, [r1]
 800d746:	61bb      	str	r3, [r7, #24]
   return(result);
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1e6      	bne.n	800d71c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d74e:	88fb      	ldrh	r3, [r7, #6]
 800d750:	461a      	mov	r2, r3
 800d752:	68b9      	ldr	r1, [r7, #8]
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f001 fae5 	bl	800ed24 <UART_Start_Receive_IT>
 800d75a:	4603      	mov	r3, r0
 800d75c:	e000      	b.n	800d760 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d75e:	2302      	movs	r3, #2
  }
}
 800d760:	4618      	mov	r0, r3
 800d762:	3728      	adds	r7, #40	; 0x28
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	58000c00 	.word	0x58000c00

0800d76c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b0ba      	sub	sp, #232	; 0xe8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	69db      	ldr	r3, [r3, #28]
 800d77a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d796:	f640 030f 	movw	r3, #2063	; 0x80f
 800d79a:	4013      	ands	r3, r2
 800d79c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d7a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d11b      	bne.n	800d7e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d015      	beq.n	800d7e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d105      	bne.n	800d7cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 835a 	beq.w	800de8a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	4798      	blx	r3
      }
      return;
 800d7de:	e354      	b.n	800de8a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 811f 	beq.w	800da28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7ee:	4b8b      	ldr	r3, [pc, #556]	; (800da1c <HAL_UART_IRQHandler+0x2b0>)
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d106      	bne.n	800d804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7fa:	4b89      	ldr	r3, [pc, #548]	; (800da20 <HAL_UART_IRQHandler+0x2b4>)
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 8112 	beq.w	800da28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d011      	beq.n	800d834 <HAL_UART_IRQHandler+0xc8>
 800d810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00b      	beq.n	800d834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2201      	movs	r2, #1
 800d822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d82a:	f043 0201 	orr.w	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d838:	f003 0302 	and.w	r3, r3, #2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d011      	beq.n	800d864 <HAL_UART_IRQHandler+0xf8>
 800d840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d844:	f003 0301 	and.w	r3, r3, #1
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00b      	beq.n	800d864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2202      	movs	r2, #2
 800d852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d85a:	f043 0204 	orr.w	r2, r3, #4
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d868:	f003 0304 	and.w	r3, r3, #4
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d011      	beq.n	800d894 <HAL_UART_IRQHandler+0x128>
 800d870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2204      	movs	r2, #4
 800d882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d88a:	f043 0202 	orr.w	r2, r3, #2
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d898:	f003 0308 	and.w	r3, r3, #8
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d017      	beq.n	800d8d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8a4:	f003 0320 	and.w	r3, r3, #32
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d105      	bne.n	800d8b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d8ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8b0:	4b5a      	ldr	r3, [pc, #360]	; (800da1c <HAL_UART_IRQHandler+0x2b0>)
 800d8b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00b      	beq.n	800d8d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2208      	movs	r2, #8
 800d8be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8c6:	f043 0208 	orr.w	r2, r3, #8
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d012      	beq.n	800d902 <HAL_UART_IRQHandler+0x196>
 800d8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00c      	beq.n	800d902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8f8:	f043 0220 	orr.w	r2, r3, #32
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 82c0 	beq.w	800de8e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d912:	f003 0320 	and.w	r3, r3, #32
 800d916:	2b00      	cmp	r3, #0
 800d918:	d013      	beq.n	800d942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d91a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d91e:	f003 0320 	and.w	r3, r3, #32
 800d922:	2b00      	cmp	r3, #0
 800d924:	d105      	bne.n	800d932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d92a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d007      	beq.n	800d942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d956:	2b40      	cmp	r3, #64	; 0x40
 800d958:	d005      	beq.n	800d966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d95a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d95e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d962:	2b00      	cmp	r3, #0
 800d964:	d04f      	beq.n	800da06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f001 fb06 	bl	800ef78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d976:	2b40      	cmp	r3, #64	; 0x40
 800d978:	d141      	bne.n	800d9fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3308      	adds	r3, #8
 800d980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d988:	e853 3f00 	ldrex	r3, [r3]
 800d98c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3308      	adds	r3, #8
 800d9a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d9a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d9aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d9b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d9b6:	e841 2300 	strex	r3, r2, [r1]
 800d9ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d9be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1d9      	bne.n	800d97a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d013      	beq.n	800d9f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9d2:	4a14      	ldr	r2, [pc, #80]	; (800da24 <HAL_UART_IRQHandler+0x2b8>)
 800d9d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7f7 ffa6 	bl	800592c <HAL_DMA_Abort_IT>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d017      	beq.n	800da16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9f4:	e00f      	b.n	800da16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fa60 	bl	800debc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9fc:	e00b      	b.n	800da16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fa5c 	bl	800debc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da04:	e007      	b.n	800da16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fa58 	bl	800debc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800da14:	e23b      	b.n	800de8e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da16:	bf00      	nop
    return;
 800da18:	e239      	b.n	800de8e <HAL_UART_IRQHandler+0x722>
 800da1a:	bf00      	nop
 800da1c:	10000001 	.word	0x10000001
 800da20:	04000120 	.word	0x04000120
 800da24:	0800f045 	.word	0x0800f045

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	f040 81ce 	bne.w	800ddce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da36:	f003 0310 	and.w	r3, r3, #16
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 81c7 	beq.w	800ddce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da44:	f003 0310 	and.w	r3, r3, #16
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 81c0 	beq.w	800ddce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2210      	movs	r2, #16
 800da54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da60:	2b40      	cmp	r3, #64	; 0x40
 800da62:	f040 813b 	bne.w	800dcdc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a8b      	ldr	r2, [pc, #556]	; (800dc9c <HAL_UART_IRQHandler+0x530>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d059      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a89      	ldr	r2, [pc, #548]	; (800dca0 <HAL_UART_IRQHandler+0x534>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d053      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a87      	ldr	r2, [pc, #540]	; (800dca4 <HAL_UART_IRQHandler+0x538>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d04d      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a85      	ldr	r2, [pc, #532]	; (800dca8 <HAL_UART_IRQHandler+0x53c>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d047      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a83      	ldr	r2, [pc, #524]	; (800dcac <HAL_UART_IRQHandler+0x540>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d041      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a81      	ldr	r2, [pc, #516]	; (800dcb0 <HAL_UART_IRQHandler+0x544>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d03b      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a7f      	ldr	r2, [pc, #508]	; (800dcb4 <HAL_UART_IRQHandler+0x548>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d035      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a7d      	ldr	r2, [pc, #500]	; (800dcb8 <HAL_UART_IRQHandler+0x54c>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d02f      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a7b      	ldr	r2, [pc, #492]	; (800dcbc <HAL_UART_IRQHandler+0x550>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d029      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a79      	ldr	r2, [pc, #484]	; (800dcc0 <HAL_UART_IRQHandler+0x554>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d023      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a77      	ldr	r2, [pc, #476]	; (800dcc4 <HAL_UART_IRQHandler+0x558>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d01d      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a75      	ldr	r2, [pc, #468]	; (800dcc8 <HAL_UART_IRQHandler+0x55c>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d017      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a73      	ldr	r2, [pc, #460]	; (800dccc <HAL_UART_IRQHandler+0x560>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d011      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a71      	ldr	r2, [pc, #452]	; (800dcd0 <HAL_UART_IRQHandler+0x564>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d00b      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a6f      	ldr	r2, [pc, #444]	; (800dcd4 <HAL_UART_IRQHandler+0x568>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d005      	beq.n	800db26 <HAL_UART_IRQHandler+0x3ba>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a6d      	ldr	r2, [pc, #436]	; (800dcd8 <HAL_UART_IRQHandler+0x56c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d105      	bne.n	800db32 <HAL_UART_IRQHandler+0x3c6>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	b29b      	uxth	r3, r3
 800db30:	e004      	b.n	800db3c <HAL_UART_IRQHandler+0x3d0>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db44:	2b00      	cmp	r3, #0
 800db46:	f000 81a4 	beq.w	800de92 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db54:	429a      	cmp	r2, r3
 800db56:	f080 819c 	bcs.w	800de92 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db68:	69db      	ldr	r3, [r3, #28]
 800db6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db6e:	f000 8086 	beq.w	800dc7e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db7e:	e853 3f00 	ldrex	r3, [r3]
 800db82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dba0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dbac:	e841 2300 	strex	r3, r2, [r1]
 800dbb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dbb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1da      	bne.n	800db72 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbc6:	e853 3f00 	ldrex	r3, [r3]
 800dbca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dbcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbce:	f023 0301 	bic.w	r3, r3, #1
 800dbd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbe0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dbe4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dbe8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dbec:	e841 2300 	strex	r3, r2, [r1]
 800dbf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dbf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1e1      	bne.n	800dbbc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc02:	e853 3f00 	ldrex	r3, [r3]
 800dc06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dc08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3308      	adds	r3, #8
 800dc18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc24:	e841 2300 	strex	r3, r2, [r1]
 800dc28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d1e3      	bne.n	800dbf8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2220      	movs	r2, #32
 800dc34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc46:	e853 3f00 	ldrex	r3, [r3]
 800dc4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc4e:	f023 0310 	bic.w	r3, r3, #16
 800dc52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc60:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc68:	e841 2300 	strex	r3, r2, [r1]
 800dc6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1e4      	bne.n	800dc3e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f7 fb39 	bl	80052f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4619      	mov	r1, r3
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f91c 	bl	800ded0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc98:	e0fb      	b.n	800de92 <HAL_UART_IRQHandler+0x726>
 800dc9a:	bf00      	nop
 800dc9c:	40020010 	.word	0x40020010
 800dca0:	40020028 	.word	0x40020028
 800dca4:	40020040 	.word	0x40020040
 800dca8:	40020058 	.word	0x40020058
 800dcac:	40020070 	.word	0x40020070
 800dcb0:	40020088 	.word	0x40020088
 800dcb4:	400200a0 	.word	0x400200a0
 800dcb8:	400200b8 	.word	0x400200b8
 800dcbc:	40020410 	.word	0x40020410
 800dcc0:	40020428 	.word	0x40020428
 800dcc4:	40020440 	.word	0x40020440
 800dcc8:	40020458 	.word	0x40020458
 800dccc:	40020470 	.word	0x40020470
 800dcd0:	40020488 	.word	0x40020488
 800dcd4:	400204a0 	.word	0x400204a0
 800dcd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 80cc 	beq.w	800de96 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dcfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f000 80c7 	beq.w	800de96 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd10:	e853 3f00 	ldrex	r3, [r3]
 800dd14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	461a      	mov	r2, r3
 800dd26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd2a:	647b      	str	r3, [r7, #68]	; 0x44
 800dd2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd32:	e841 2300 	strex	r3, r2, [r1]
 800dd36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1e4      	bne.n	800dd08 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	3308      	adds	r3, #8
 800dd44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	e853 3f00 	ldrex	r3, [r3]
 800dd4c:	623b      	str	r3, [r7, #32]
   return(result);
 800dd4e:	6a3a      	ldr	r2, [r7, #32]
 800dd50:	4b54      	ldr	r3, [pc, #336]	; (800dea4 <HAL_UART_IRQHandler+0x738>)
 800dd52:	4013      	ands	r3, r2
 800dd54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3308      	adds	r3, #8
 800dd5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd62:	633a      	str	r2, [r7, #48]	; 0x30
 800dd64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd6a:	e841 2300 	strex	r3, r2, [r1]
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1e3      	bne.n	800dd3e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	e853 3f00 	ldrex	r3, [r3]
 800dd96:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f023 0310 	bic.w	r3, r3, #16
 800dd9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	461a      	mov	r2, r3
 800dda8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ddac:	61fb      	str	r3, [r7, #28]
 800ddae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb0:	69b9      	ldr	r1, [r7, #24]
 800ddb2:	69fa      	ldr	r2, [r7, #28]
 800ddb4:	e841 2300 	strex	r3, r2, [r1]
 800ddb8:	617b      	str	r3, [r7, #20]
   return(result);
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1e4      	bne.n	800dd8a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f882 	bl	800ded0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddcc:	e063      	b.n	800de96 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ddce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00e      	beq.n	800ddf8 <HAL_UART_IRQHandler+0x68c>
 800ddda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d008      	beq.n	800ddf8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ddee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f001 fdc5 	bl	800f980 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddf6:	e051      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ddf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de00:	2b00      	cmp	r3, #0
 800de02:	d014      	beq.n	800de2e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800de04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d105      	bne.n	800de1c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d008      	beq.n	800de2e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de20:	2b00      	cmp	r3, #0
 800de22:	d03a      	beq.n	800de9a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	4798      	blx	r3
    }
    return;
 800de2c:	e035      	b.n	800de9a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de36:	2b00      	cmp	r3, #0
 800de38:	d009      	beq.n	800de4e <HAL_UART_IRQHandler+0x6e2>
 800de3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 f912 	bl	800f070 <UART_EndTransmit_IT>
    return;
 800de4c:	e026      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d009      	beq.n	800de6e <HAL_UART_IRQHandler+0x702>
 800de5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de62:	2b00      	cmp	r3, #0
 800de64:	d003      	beq.n	800de6e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f001 fd9e 	bl	800f9a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de6c:	e016      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de76:	2b00      	cmp	r3, #0
 800de78:	d010      	beq.n	800de9c <HAL_UART_IRQHandler+0x730>
 800de7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	da0c      	bge.n	800de9c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f001 fd86 	bl	800f994 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de88:	e008      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
      return;
 800de8a:	bf00      	nop
 800de8c:	e006      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
    return;
 800de8e:	bf00      	nop
 800de90:	e004      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
      return;
 800de92:	bf00      	nop
 800de94:	e002      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
      return;
 800de96:	bf00      	nop
 800de98:	e000      	b.n	800de9c <HAL_UART_IRQHandler+0x730>
    return;
 800de9a:	bf00      	nop
  }
}
 800de9c:	37e8      	adds	r7, #232	; 0xe8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	effffffe 	.word	0xeffffffe

0800dea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800deec:	b092      	sub	sp, #72	; 0x48
 800deee:	af00      	add	r7, sp, #0
 800def0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800def2:	2300      	movs	r3, #0
 800def4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	689a      	ldr	r2, [r3, #8]
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	431a      	orrs	r2, r3
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	431a      	orrs	r2, r3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	4bbe      	ldr	r3, [pc, #760]	; (800e210 <UART_SetConfig+0x328>)
 800df18:	4013      	ands	r3, r2
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	6812      	ldr	r2, [r2, #0]
 800df1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df20:	430b      	orrs	r3, r1
 800df22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	68da      	ldr	r2, [r3, #12]
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	430a      	orrs	r2, r1
 800df38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4ab3      	ldr	r2, [pc, #716]	; (800e214 <UART_SetConfig+0x32c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d004      	beq.n	800df54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	6a1b      	ldr	r3, [r3, #32]
 800df4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df50:	4313      	orrs	r3, r2
 800df52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	689a      	ldr	r2, [r3, #8]
 800df5a:	4baf      	ldr	r3, [pc, #700]	; (800e218 <UART_SetConfig+0x330>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	6812      	ldr	r2, [r2, #0]
 800df62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df64:	430b      	orrs	r3, r1
 800df66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6e:	f023 010f 	bic.w	r1, r3, #15
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	430a      	orrs	r2, r1
 800df7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4aa6      	ldr	r2, [pc, #664]	; (800e21c <UART_SetConfig+0x334>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d177      	bne.n	800e078 <UART_SetConfig+0x190>
 800df88:	4ba5      	ldr	r3, [pc, #660]	; (800e220 <UART_SetConfig+0x338>)
 800df8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df90:	2b28      	cmp	r3, #40	; 0x28
 800df92:	d86d      	bhi.n	800e070 <UART_SetConfig+0x188>
 800df94:	a201      	add	r2, pc, #4	; (adr r2, 800df9c <UART_SetConfig+0xb4>)
 800df96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9a:	bf00      	nop
 800df9c:	0800e041 	.word	0x0800e041
 800dfa0:	0800e071 	.word	0x0800e071
 800dfa4:	0800e071 	.word	0x0800e071
 800dfa8:	0800e071 	.word	0x0800e071
 800dfac:	0800e071 	.word	0x0800e071
 800dfb0:	0800e071 	.word	0x0800e071
 800dfb4:	0800e071 	.word	0x0800e071
 800dfb8:	0800e071 	.word	0x0800e071
 800dfbc:	0800e049 	.word	0x0800e049
 800dfc0:	0800e071 	.word	0x0800e071
 800dfc4:	0800e071 	.word	0x0800e071
 800dfc8:	0800e071 	.word	0x0800e071
 800dfcc:	0800e071 	.word	0x0800e071
 800dfd0:	0800e071 	.word	0x0800e071
 800dfd4:	0800e071 	.word	0x0800e071
 800dfd8:	0800e071 	.word	0x0800e071
 800dfdc:	0800e051 	.word	0x0800e051
 800dfe0:	0800e071 	.word	0x0800e071
 800dfe4:	0800e071 	.word	0x0800e071
 800dfe8:	0800e071 	.word	0x0800e071
 800dfec:	0800e071 	.word	0x0800e071
 800dff0:	0800e071 	.word	0x0800e071
 800dff4:	0800e071 	.word	0x0800e071
 800dff8:	0800e071 	.word	0x0800e071
 800dffc:	0800e059 	.word	0x0800e059
 800e000:	0800e071 	.word	0x0800e071
 800e004:	0800e071 	.word	0x0800e071
 800e008:	0800e071 	.word	0x0800e071
 800e00c:	0800e071 	.word	0x0800e071
 800e010:	0800e071 	.word	0x0800e071
 800e014:	0800e071 	.word	0x0800e071
 800e018:	0800e071 	.word	0x0800e071
 800e01c:	0800e061 	.word	0x0800e061
 800e020:	0800e071 	.word	0x0800e071
 800e024:	0800e071 	.word	0x0800e071
 800e028:	0800e071 	.word	0x0800e071
 800e02c:	0800e071 	.word	0x0800e071
 800e030:	0800e071 	.word	0x0800e071
 800e034:	0800e071 	.word	0x0800e071
 800e038:	0800e071 	.word	0x0800e071
 800e03c:	0800e069 	.word	0x0800e069
 800e040:	2301      	movs	r3, #1
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e222      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e048:	2304      	movs	r3, #4
 800e04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04e:	e21e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e050:	2308      	movs	r3, #8
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e056:	e21a      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e058:	2310      	movs	r3, #16
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e216      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e060:	2320      	movs	r3, #32
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e212      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e068:	2340      	movs	r3, #64	; 0x40
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e20e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e070:	2380      	movs	r3, #128	; 0x80
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e20a      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a69      	ldr	r2, [pc, #420]	; (800e224 <UART_SetConfig+0x33c>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d130      	bne.n	800e0e4 <UART_SetConfig+0x1fc>
 800e082:	4b67      	ldr	r3, [pc, #412]	; (800e220 <UART_SetConfig+0x338>)
 800e084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e086:	f003 0307 	and.w	r3, r3, #7
 800e08a:	2b05      	cmp	r3, #5
 800e08c:	d826      	bhi.n	800e0dc <UART_SetConfig+0x1f4>
 800e08e:	a201      	add	r2, pc, #4	; (adr r2, 800e094 <UART_SetConfig+0x1ac>)
 800e090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e094:	0800e0ad 	.word	0x0800e0ad
 800e098:	0800e0b5 	.word	0x0800e0b5
 800e09c:	0800e0bd 	.word	0x0800e0bd
 800e0a0:	0800e0c5 	.word	0x0800e0c5
 800e0a4:	0800e0cd 	.word	0x0800e0cd
 800e0a8:	0800e0d5 	.word	0x0800e0d5
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b2:	e1ec      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0b4:	2304      	movs	r3, #4
 800e0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ba:	e1e8      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0bc:	2308      	movs	r3, #8
 800e0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c2:	e1e4      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0c4:	2310      	movs	r3, #16
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ca:	e1e0      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0cc:	2320      	movs	r3, #32
 800e0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d2:	e1dc      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0d4:	2340      	movs	r3, #64	; 0x40
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0da:	e1d8      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0dc:	2380      	movs	r3, #128	; 0x80
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e2:	e1d4      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a4f      	ldr	r2, [pc, #316]	; (800e228 <UART_SetConfig+0x340>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d130      	bne.n	800e150 <UART_SetConfig+0x268>
 800e0ee:	4b4c      	ldr	r3, [pc, #304]	; (800e220 <UART_SetConfig+0x338>)
 800e0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0f2:	f003 0307 	and.w	r3, r3, #7
 800e0f6:	2b05      	cmp	r3, #5
 800e0f8:	d826      	bhi.n	800e148 <UART_SetConfig+0x260>
 800e0fa:	a201      	add	r2, pc, #4	; (adr r2, 800e100 <UART_SetConfig+0x218>)
 800e0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e100:	0800e119 	.word	0x0800e119
 800e104:	0800e121 	.word	0x0800e121
 800e108:	0800e129 	.word	0x0800e129
 800e10c:	0800e131 	.word	0x0800e131
 800e110:	0800e139 	.word	0x0800e139
 800e114:	0800e141 	.word	0x0800e141
 800e118:	2300      	movs	r3, #0
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e1b6      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e120:	2304      	movs	r3, #4
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e1b2      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e128:	2308      	movs	r3, #8
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e1ae      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e130:	2310      	movs	r3, #16
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e1aa      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e138:	2320      	movs	r3, #32
 800e13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13e:	e1a6      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e140:	2340      	movs	r3, #64	; 0x40
 800e142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e146:	e1a2      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e148:	2380      	movs	r3, #128	; 0x80
 800e14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14e:	e19e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a35      	ldr	r2, [pc, #212]	; (800e22c <UART_SetConfig+0x344>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d130      	bne.n	800e1bc <UART_SetConfig+0x2d4>
 800e15a:	4b31      	ldr	r3, [pc, #196]	; (800e220 <UART_SetConfig+0x338>)
 800e15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e15e:	f003 0307 	and.w	r3, r3, #7
 800e162:	2b05      	cmp	r3, #5
 800e164:	d826      	bhi.n	800e1b4 <UART_SetConfig+0x2cc>
 800e166:	a201      	add	r2, pc, #4	; (adr r2, 800e16c <UART_SetConfig+0x284>)
 800e168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16c:	0800e185 	.word	0x0800e185
 800e170:	0800e18d 	.word	0x0800e18d
 800e174:	0800e195 	.word	0x0800e195
 800e178:	0800e19d 	.word	0x0800e19d
 800e17c:	0800e1a5 	.word	0x0800e1a5
 800e180:	0800e1ad 	.word	0x0800e1ad
 800e184:	2300      	movs	r3, #0
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e180      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e18c:	2304      	movs	r3, #4
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e17c      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e194:	2308      	movs	r3, #8
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19a:	e178      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e19c:	2310      	movs	r3, #16
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e174      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e1a4:	2320      	movs	r3, #32
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1aa:	e170      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e1ac:	2340      	movs	r3, #64	; 0x40
 800e1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b2:	e16c      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e1b4:	2380      	movs	r3, #128	; 0x80
 800e1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ba:	e168      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a1b      	ldr	r2, [pc, #108]	; (800e230 <UART_SetConfig+0x348>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d142      	bne.n	800e24c <UART_SetConfig+0x364>
 800e1c6:	4b16      	ldr	r3, [pc, #88]	; (800e220 <UART_SetConfig+0x338>)
 800e1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ca:	f003 0307 	and.w	r3, r3, #7
 800e1ce:	2b05      	cmp	r3, #5
 800e1d0:	d838      	bhi.n	800e244 <UART_SetConfig+0x35c>
 800e1d2:	a201      	add	r2, pc, #4	; (adr r2, 800e1d8 <UART_SetConfig+0x2f0>)
 800e1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d8:	0800e1f1 	.word	0x0800e1f1
 800e1dc:	0800e1f9 	.word	0x0800e1f9
 800e1e0:	0800e201 	.word	0x0800e201
 800e1e4:	0800e209 	.word	0x0800e209
 800e1e8:	0800e235 	.word	0x0800e235
 800e1ec:	0800e23d 	.word	0x0800e23d
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e14a      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e1f8:	2304      	movs	r3, #4
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e146      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e200:	2308      	movs	r3, #8
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e142      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e208:	2310      	movs	r3, #16
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e13e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e210:	cfff69f3 	.word	0xcfff69f3
 800e214:	58000c00 	.word	0x58000c00
 800e218:	11fff4ff 	.word	0x11fff4ff
 800e21c:	40011000 	.word	0x40011000
 800e220:	58024400 	.word	0x58024400
 800e224:	40004400 	.word	0x40004400
 800e228:	40004800 	.word	0x40004800
 800e22c:	40004c00 	.word	0x40004c00
 800e230:	40005000 	.word	0x40005000
 800e234:	2320      	movs	r3, #32
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e128      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e23c:	2340      	movs	r3, #64	; 0x40
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e124      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e244:	2380      	movs	r3, #128	; 0x80
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e120      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4acb      	ldr	r2, [pc, #812]	; (800e580 <UART_SetConfig+0x698>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d176      	bne.n	800e344 <UART_SetConfig+0x45c>
 800e256:	4bcb      	ldr	r3, [pc, #812]	; (800e584 <UART_SetConfig+0x69c>)
 800e258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e25a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e25e:	2b28      	cmp	r3, #40	; 0x28
 800e260:	d86c      	bhi.n	800e33c <UART_SetConfig+0x454>
 800e262:	a201      	add	r2, pc, #4	; (adr r2, 800e268 <UART_SetConfig+0x380>)
 800e264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e268:	0800e30d 	.word	0x0800e30d
 800e26c:	0800e33d 	.word	0x0800e33d
 800e270:	0800e33d 	.word	0x0800e33d
 800e274:	0800e33d 	.word	0x0800e33d
 800e278:	0800e33d 	.word	0x0800e33d
 800e27c:	0800e33d 	.word	0x0800e33d
 800e280:	0800e33d 	.word	0x0800e33d
 800e284:	0800e33d 	.word	0x0800e33d
 800e288:	0800e315 	.word	0x0800e315
 800e28c:	0800e33d 	.word	0x0800e33d
 800e290:	0800e33d 	.word	0x0800e33d
 800e294:	0800e33d 	.word	0x0800e33d
 800e298:	0800e33d 	.word	0x0800e33d
 800e29c:	0800e33d 	.word	0x0800e33d
 800e2a0:	0800e33d 	.word	0x0800e33d
 800e2a4:	0800e33d 	.word	0x0800e33d
 800e2a8:	0800e31d 	.word	0x0800e31d
 800e2ac:	0800e33d 	.word	0x0800e33d
 800e2b0:	0800e33d 	.word	0x0800e33d
 800e2b4:	0800e33d 	.word	0x0800e33d
 800e2b8:	0800e33d 	.word	0x0800e33d
 800e2bc:	0800e33d 	.word	0x0800e33d
 800e2c0:	0800e33d 	.word	0x0800e33d
 800e2c4:	0800e33d 	.word	0x0800e33d
 800e2c8:	0800e325 	.word	0x0800e325
 800e2cc:	0800e33d 	.word	0x0800e33d
 800e2d0:	0800e33d 	.word	0x0800e33d
 800e2d4:	0800e33d 	.word	0x0800e33d
 800e2d8:	0800e33d 	.word	0x0800e33d
 800e2dc:	0800e33d 	.word	0x0800e33d
 800e2e0:	0800e33d 	.word	0x0800e33d
 800e2e4:	0800e33d 	.word	0x0800e33d
 800e2e8:	0800e32d 	.word	0x0800e32d
 800e2ec:	0800e33d 	.word	0x0800e33d
 800e2f0:	0800e33d 	.word	0x0800e33d
 800e2f4:	0800e33d 	.word	0x0800e33d
 800e2f8:	0800e33d 	.word	0x0800e33d
 800e2fc:	0800e33d 	.word	0x0800e33d
 800e300:	0800e33d 	.word	0x0800e33d
 800e304:	0800e33d 	.word	0x0800e33d
 800e308:	0800e335 	.word	0x0800e335
 800e30c:	2301      	movs	r3, #1
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e0bc      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e314:	2304      	movs	r3, #4
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e0b8      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e31c:	2308      	movs	r3, #8
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e0b4      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e324:	2310      	movs	r3, #16
 800e326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32a:	e0b0      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e32c:	2320      	movs	r3, #32
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e0ac      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e334:	2340      	movs	r3, #64	; 0x40
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e0a8      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e33c:	2380      	movs	r3, #128	; 0x80
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e0a4      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a8f      	ldr	r2, [pc, #572]	; (800e588 <UART_SetConfig+0x6a0>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d130      	bne.n	800e3b0 <UART_SetConfig+0x4c8>
 800e34e:	4b8d      	ldr	r3, [pc, #564]	; (800e584 <UART_SetConfig+0x69c>)
 800e350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e352:	f003 0307 	and.w	r3, r3, #7
 800e356:	2b05      	cmp	r3, #5
 800e358:	d826      	bhi.n	800e3a8 <UART_SetConfig+0x4c0>
 800e35a:	a201      	add	r2, pc, #4	; (adr r2, 800e360 <UART_SetConfig+0x478>)
 800e35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e360:	0800e379 	.word	0x0800e379
 800e364:	0800e381 	.word	0x0800e381
 800e368:	0800e389 	.word	0x0800e389
 800e36c:	0800e391 	.word	0x0800e391
 800e370:	0800e399 	.word	0x0800e399
 800e374:	0800e3a1 	.word	0x0800e3a1
 800e378:	2300      	movs	r3, #0
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e086      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e380:	2304      	movs	r3, #4
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e082      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e388:	2308      	movs	r3, #8
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e07e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e390:	2310      	movs	r3, #16
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e07a      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e398:	2320      	movs	r3, #32
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e076      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e3a0:	2340      	movs	r3, #64	; 0x40
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e072      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e3a8:	2380      	movs	r3, #128	; 0x80
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e06e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a75      	ldr	r2, [pc, #468]	; (800e58c <UART_SetConfig+0x6a4>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d130      	bne.n	800e41c <UART_SetConfig+0x534>
 800e3ba:	4b72      	ldr	r3, [pc, #456]	; (800e584 <UART_SetConfig+0x69c>)
 800e3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3be:	f003 0307 	and.w	r3, r3, #7
 800e3c2:	2b05      	cmp	r3, #5
 800e3c4:	d826      	bhi.n	800e414 <UART_SetConfig+0x52c>
 800e3c6:	a201      	add	r2, pc, #4	; (adr r2, 800e3cc <UART_SetConfig+0x4e4>)
 800e3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3cc:	0800e3e5 	.word	0x0800e3e5
 800e3d0:	0800e3ed 	.word	0x0800e3ed
 800e3d4:	0800e3f5 	.word	0x0800e3f5
 800e3d8:	0800e3fd 	.word	0x0800e3fd
 800e3dc:	0800e405 	.word	0x0800e405
 800e3e0:	0800e40d 	.word	0x0800e40d
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e050      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e3ec:	2304      	movs	r3, #4
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e04c      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e3f4:	2308      	movs	r3, #8
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e048      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e3fc:	2310      	movs	r3, #16
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e044      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e404:	2320      	movs	r3, #32
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e040      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e40c:	2340      	movs	r3, #64	; 0x40
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e412:	e03c      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e414:	2380      	movs	r3, #128	; 0x80
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41a:	e038      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a5b      	ldr	r2, [pc, #364]	; (800e590 <UART_SetConfig+0x6a8>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d130      	bne.n	800e488 <UART_SetConfig+0x5a0>
 800e426:	4b57      	ldr	r3, [pc, #348]	; (800e584 <UART_SetConfig+0x69c>)
 800e428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e42a:	f003 0307 	and.w	r3, r3, #7
 800e42e:	2b05      	cmp	r3, #5
 800e430:	d826      	bhi.n	800e480 <UART_SetConfig+0x598>
 800e432:	a201      	add	r2, pc, #4	; (adr r2, 800e438 <UART_SetConfig+0x550>)
 800e434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e438:	0800e451 	.word	0x0800e451
 800e43c:	0800e459 	.word	0x0800e459
 800e440:	0800e461 	.word	0x0800e461
 800e444:	0800e469 	.word	0x0800e469
 800e448:	0800e471 	.word	0x0800e471
 800e44c:	0800e479 	.word	0x0800e479
 800e450:	2302      	movs	r3, #2
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e01a      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e458:	2304      	movs	r3, #4
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e016      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e460:	2308      	movs	r3, #8
 800e462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e466:	e012      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e468:	2310      	movs	r3, #16
 800e46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46e:	e00e      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e470:	2320      	movs	r3, #32
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e476:	e00a      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e478:	2340      	movs	r3, #64	; 0x40
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47e:	e006      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e480:	2380      	movs	r3, #128	; 0x80
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e486:	e002      	b.n	800e48e <UART_SetConfig+0x5a6>
 800e488:	2380      	movs	r3, #128	; 0x80
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a3f      	ldr	r2, [pc, #252]	; (800e590 <UART_SetConfig+0x6a8>)
 800e494:	4293      	cmp	r3, r2
 800e496:	f040 80f8 	bne.w	800e68a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e49a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	dc46      	bgt.n	800e530 <UART_SetConfig+0x648>
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	f2c0 8082 	blt.w	800e5ac <UART_SetConfig+0x6c4>
 800e4a8:	3b02      	subs	r3, #2
 800e4aa:	2b1e      	cmp	r3, #30
 800e4ac:	d87e      	bhi.n	800e5ac <UART_SetConfig+0x6c4>
 800e4ae:	a201      	add	r2, pc, #4	; (adr r2, 800e4b4 <UART_SetConfig+0x5cc>)
 800e4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b4:	0800e537 	.word	0x0800e537
 800e4b8:	0800e5ad 	.word	0x0800e5ad
 800e4bc:	0800e53f 	.word	0x0800e53f
 800e4c0:	0800e5ad 	.word	0x0800e5ad
 800e4c4:	0800e5ad 	.word	0x0800e5ad
 800e4c8:	0800e5ad 	.word	0x0800e5ad
 800e4cc:	0800e54f 	.word	0x0800e54f
 800e4d0:	0800e5ad 	.word	0x0800e5ad
 800e4d4:	0800e5ad 	.word	0x0800e5ad
 800e4d8:	0800e5ad 	.word	0x0800e5ad
 800e4dc:	0800e5ad 	.word	0x0800e5ad
 800e4e0:	0800e5ad 	.word	0x0800e5ad
 800e4e4:	0800e5ad 	.word	0x0800e5ad
 800e4e8:	0800e5ad 	.word	0x0800e5ad
 800e4ec:	0800e55f 	.word	0x0800e55f
 800e4f0:	0800e5ad 	.word	0x0800e5ad
 800e4f4:	0800e5ad 	.word	0x0800e5ad
 800e4f8:	0800e5ad 	.word	0x0800e5ad
 800e4fc:	0800e5ad 	.word	0x0800e5ad
 800e500:	0800e5ad 	.word	0x0800e5ad
 800e504:	0800e5ad 	.word	0x0800e5ad
 800e508:	0800e5ad 	.word	0x0800e5ad
 800e50c:	0800e5ad 	.word	0x0800e5ad
 800e510:	0800e5ad 	.word	0x0800e5ad
 800e514:	0800e5ad 	.word	0x0800e5ad
 800e518:	0800e5ad 	.word	0x0800e5ad
 800e51c:	0800e5ad 	.word	0x0800e5ad
 800e520:	0800e5ad 	.word	0x0800e5ad
 800e524:	0800e5ad 	.word	0x0800e5ad
 800e528:	0800e5ad 	.word	0x0800e5ad
 800e52c:	0800e59f 	.word	0x0800e59f
 800e530:	2b40      	cmp	r3, #64	; 0x40
 800e532:	d037      	beq.n	800e5a4 <UART_SetConfig+0x6bc>
 800e534:	e03a      	b.n	800e5ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e536:	f7fc fb05 	bl	800ab44 <HAL_RCCEx_GetD3PCLK1Freq>
 800e53a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e53c:	e03c      	b.n	800e5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e53e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e542:	4618      	mov	r0, r3
 800e544:	f7fc fb14 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e54c:	e034      	b.n	800e5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e54e:	f107 0318 	add.w	r3, r7, #24
 800e552:	4618      	mov	r0, r3
 800e554:	f7fc fc60 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e55c:	e02c      	b.n	800e5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e55e:	4b09      	ldr	r3, [pc, #36]	; (800e584 <UART_SetConfig+0x69c>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f003 0320 	and.w	r3, r3, #32
 800e566:	2b00      	cmp	r3, #0
 800e568:	d016      	beq.n	800e598 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e56a:	4b06      	ldr	r3, [pc, #24]	; (800e584 <UART_SetConfig+0x69c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	08db      	lsrs	r3, r3, #3
 800e570:	f003 0303 	and.w	r3, r3, #3
 800e574:	4a07      	ldr	r2, [pc, #28]	; (800e594 <UART_SetConfig+0x6ac>)
 800e576:	fa22 f303 	lsr.w	r3, r2, r3
 800e57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e57c:	e01c      	b.n	800e5b8 <UART_SetConfig+0x6d0>
 800e57e:	bf00      	nop
 800e580:	40011400 	.word	0x40011400
 800e584:	58024400 	.word	0x58024400
 800e588:	40007800 	.word	0x40007800
 800e58c:	40007c00 	.word	0x40007c00
 800e590:	58000c00 	.word	0x58000c00
 800e594:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e598:	4b9d      	ldr	r3, [pc, #628]	; (800e810 <UART_SetConfig+0x928>)
 800e59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e59c:	e00c      	b.n	800e5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e59e:	4b9d      	ldr	r3, [pc, #628]	; (800e814 <UART_SetConfig+0x92c>)
 800e5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a2:	e009      	b.n	800e5b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5aa:	e005      	b.n	800e5b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 81de 	beq.w	800e97c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c4:	4a94      	ldr	r2, [pc, #592]	; (800e818 <UART_SetConfig+0x930>)
 800e5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	4413      	add	r3, r2
 800e5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d305      	bcc.n	800e5f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d903      	bls.n	800e5f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e5f6:	e1c1      	b.n	800e97c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	60bb      	str	r3, [r7, #8]
 800e5fe:	60fa      	str	r2, [r7, #12]
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e604:	4a84      	ldr	r2, [pc, #528]	; (800e818 <UART_SetConfig+0x930>)
 800e606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	2200      	movs	r2, #0
 800e60e:	603b      	str	r3, [r7, #0]
 800e610:	607a      	str	r2, [r7, #4]
 800e612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e61a:	f7f1 fe5d 	bl	80002d8 <__aeabi_uldivmod>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4610      	mov	r0, r2
 800e624:	4619      	mov	r1, r3
 800e626:	f04f 0200 	mov.w	r2, #0
 800e62a:	f04f 0300 	mov.w	r3, #0
 800e62e:	020b      	lsls	r3, r1, #8
 800e630:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e634:	0202      	lsls	r2, r0, #8
 800e636:	6979      	ldr	r1, [r7, #20]
 800e638:	6849      	ldr	r1, [r1, #4]
 800e63a:	0849      	lsrs	r1, r1, #1
 800e63c:	2000      	movs	r0, #0
 800e63e:	460c      	mov	r4, r1
 800e640:	4605      	mov	r5, r0
 800e642:	eb12 0804 	adds.w	r8, r2, r4
 800e646:	eb43 0905 	adc.w	r9, r3, r5
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	469a      	mov	sl, r3
 800e652:	4693      	mov	fp, r2
 800e654:	4652      	mov	r2, sl
 800e656:	465b      	mov	r3, fp
 800e658:	4640      	mov	r0, r8
 800e65a:	4649      	mov	r1, r9
 800e65c:	f7f1 fe3c 	bl	80002d8 <__aeabi_uldivmod>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	4613      	mov	r3, r2
 800e666:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e66e:	d308      	bcc.n	800e682 <UART_SetConfig+0x79a>
 800e670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e676:	d204      	bcs.n	800e682 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67e:	60da      	str	r2, [r3, #12]
 800e680:	e17c      	b.n	800e97c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e682:	2301      	movs	r3, #1
 800e684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e688:	e178      	b.n	800e97c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	69db      	ldr	r3, [r3, #28]
 800e68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e692:	f040 80c5 	bne.w	800e820 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e696:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e69a:	2b20      	cmp	r3, #32
 800e69c:	dc48      	bgt.n	800e730 <UART_SetConfig+0x848>
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	db7b      	blt.n	800e79a <UART_SetConfig+0x8b2>
 800e6a2:	2b20      	cmp	r3, #32
 800e6a4:	d879      	bhi.n	800e79a <UART_SetConfig+0x8b2>
 800e6a6:	a201      	add	r2, pc, #4	; (adr r2, 800e6ac <UART_SetConfig+0x7c4>)
 800e6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ac:	0800e737 	.word	0x0800e737
 800e6b0:	0800e73f 	.word	0x0800e73f
 800e6b4:	0800e79b 	.word	0x0800e79b
 800e6b8:	0800e79b 	.word	0x0800e79b
 800e6bc:	0800e747 	.word	0x0800e747
 800e6c0:	0800e79b 	.word	0x0800e79b
 800e6c4:	0800e79b 	.word	0x0800e79b
 800e6c8:	0800e79b 	.word	0x0800e79b
 800e6cc:	0800e757 	.word	0x0800e757
 800e6d0:	0800e79b 	.word	0x0800e79b
 800e6d4:	0800e79b 	.word	0x0800e79b
 800e6d8:	0800e79b 	.word	0x0800e79b
 800e6dc:	0800e79b 	.word	0x0800e79b
 800e6e0:	0800e79b 	.word	0x0800e79b
 800e6e4:	0800e79b 	.word	0x0800e79b
 800e6e8:	0800e79b 	.word	0x0800e79b
 800e6ec:	0800e767 	.word	0x0800e767
 800e6f0:	0800e79b 	.word	0x0800e79b
 800e6f4:	0800e79b 	.word	0x0800e79b
 800e6f8:	0800e79b 	.word	0x0800e79b
 800e6fc:	0800e79b 	.word	0x0800e79b
 800e700:	0800e79b 	.word	0x0800e79b
 800e704:	0800e79b 	.word	0x0800e79b
 800e708:	0800e79b 	.word	0x0800e79b
 800e70c:	0800e79b 	.word	0x0800e79b
 800e710:	0800e79b 	.word	0x0800e79b
 800e714:	0800e79b 	.word	0x0800e79b
 800e718:	0800e79b 	.word	0x0800e79b
 800e71c:	0800e79b 	.word	0x0800e79b
 800e720:	0800e79b 	.word	0x0800e79b
 800e724:	0800e79b 	.word	0x0800e79b
 800e728:	0800e79b 	.word	0x0800e79b
 800e72c:	0800e78d 	.word	0x0800e78d
 800e730:	2b40      	cmp	r3, #64	; 0x40
 800e732:	d02e      	beq.n	800e792 <UART_SetConfig+0x8aa>
 800e734:	e031      	b.n	800e79a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e736:	f7fa fdc1 	bl	80092bc <HAL_RCC_GetPCLK1Freq>
 800e73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e73c:	e033      	b.n	800e7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e73e:	f7fa fdd3 	bl	80092e8 <HAL_RCC_GetPCLK2Freq>
 800e742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e744:	e02f      	b.n	800e7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fc fa10 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e754:	e027      	b.n	800e7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e756:	f107 0318 	add.w	r3, r7, #24
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fc fb5c 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e764:	e01f      	b.n	800e7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e766:	4b2d      	ldr	r3, [pc, #180]	; (800e81c <UART_SetConfig+0x934>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f003 0320 	and.w	r3, r3, #32
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e772:	4b2a      	ldr	r3, [pc, #168]	; (800e81c <UART_SetConfig+0x934>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	08db      	lsrs	r3, r3, #3
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	4a24      	ldr	r2, [pc, #144]	; (800e810 <UART_SetConfig+0x928>)
 800e77e:	fa22 f303 	lsr.w	r3, r2, r3
 800e782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e784:	e00f      	b.n	800e7a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e786:	4b22      	ldr	r3, [pc, #136]	; (800e810 <UART_SetConfig+0x928>)
 800e788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e78a:	e00c      	b.n	800e7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e78c:	4b21      	ldr	r3, [pc, #132]	; (800e814 <UART_SetConfig+0x92c>)
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e790:	e009      	b.n	800e7a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e798:	e005      	b.n	800e7a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e79a:	2300      	movs	r3, #0
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 80e7 	beq.w	800e97c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b2:	4a19      	ldr	r2, [pc, #100]	; (800e818 <UART_SetConfig+0x930>)
 800e7b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c0:	005a      	lsls	r2, r3, #1
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	085b      	lsrs	r3, r3, #1
 800e7c8:	441a      	add	r2, r3
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d6:	2b0f      	cmp	r3, #15
 800e7d8:	d916      	bls.n	800e808 <UART_SetConfig+0x920>
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7e0:	d212      	bcs.n	800e808 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f023 030f 	bic.w	r3, r3, #15
 800e7ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ee:	085b      	lsrs	r3, r3, #1
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e804:	60da      	str	r2, [r3, #12]
 800e806:	e0b9      	b.n	800e97c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e808:	2301      	movs	r3, #1
 800e80a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e80e:	e0b5      	b.n	800e97c <UART_SetConfig+0xa94>
 800e810:	03d09000 	.word	0x03d09000
 800e814:	003d0900 	.word	0x003d0900
 800e818:	0800fea8 	.word	0x0800fea8
 800e81c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e820:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e824:	2b20      	cmp	r3, #32
 800e826:	dc49      	bgt.n	800e8bc <UART_SetConfig+0x9d4>
 800e828:	2b00      	cmp	r3, #0
 800e82a:	db7c      	blt.n	800e926 <UART_SetConfig+0xa3e>
 800e82c:	2b20      	cmp	r3, #32
 800e82e:	d87a      	bhi.n	800e926 <UART_SetConfig+0xa3e>
 800e830:	a201      	add	r2, pc, #4	; (adr r2, 800e838 <UART_SetConfig+0x950>)
 800e832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e836:	bf00      	nop
 800e838:	0800e8c3 	.word	0x0800e8c3
 800e83c:	0800e8cb 	.word	0x0800e8cb
 800e840:	0800e927 	.word	0x0800e927
 800e844:	0800e927 	.word	0x0800e927
 800e848:	0800e8d3 	.word	0x0800e8d3
 800e84c:	0800e927 	.word	0x0800e927
 800e850:	0800e927 	.word	0x0800e927
 800e854:	0800e927 	.word	0x0800e927
 800e858:	0800e8e3 	.word	0x0800e8e3
 800e85c:	0800e927 	.word	0x0800e927
 800e860:	0800e927 	.word	0x0800e927
 800e864:	0800e927 	.word	0x0800e927
 800e868:	0800e927 	.word	0x0800e927
 800e86c:	0800e927 	.word	0x0800e927
 800e870:	0800e927 	.word	0x0800e927
 800e874:	0800e927 	.word	0x0800e927
 800e878:	0800e8f3 	.word	0x0800e8f3
 800e87c:	0800e927 	.word	0x0800e927
 800e880:	0800e927 	.word	0x0800e927
 800e884:	0800e927 	.word	0x0800e927
 800e888:	0800e927 	.word	0x0800e927
 800e88c:	0800e927 	.word	0x0800e927
 800e890:	0800e927 	.word	0x0800e927
 800e894:	0800e927 	.word	0x0800e927
 800e898:	0800e927 	.word	0x0800e927
 800e89c:	0800e927 	.word	0x0800e927
 800e8a0:	0800e927 	.word	0x0800e927
 800e8a4:	0800e927 	.word	0x0800e927
 800e8a8:	0800e927 	.word	0x0800e927
 800e8ac:	0800e927 	.word	0x0800e927
 800e8b0:	0800e927 	.word	0x0800e927
 800e8b4:	0800e927 	.word	0x0800e927
 800e8b8:	0800e919 	.word	0x0800e919
 800e8bc:	2b40      	cmp	r3, #64	; 0x40
 800e8be:	d02e      	beq.n	800e91e <UART_SetConfig+0xa36>
 800e8c0:	e031      	b.n	800e926 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8c2:	f7fa fcfb 	bl	80092bc <HAL_RCC_GetPCLK1Freq>
 800e8c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8c8:	e033      	b.n	800e932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8ca:	f7fa fd0d 	bl	80092e8 <HAL_RCC_GetPCLK2Freq>
 800e8ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8d0:	e02f      	b.n	800e932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fc f94a 	bl	800ab70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e0:	e027      	b.n	800e932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8e2:	f107 0318 	add.w	r3, r7, #24
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fc fa96 	bl	800ae18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f0:	e01f      	b.n	800e932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8f2:	4b2d      	ldr	r3, [pc, #180]	; (800e9a8 <UART_SetConfig+0xac0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f003 0320 	and.w	r3, r3, #32
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d009      	beq.n	800e912 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8fe:	4b2a      	ldr	r3, [pc, #168]	; (800e9a8 <UART_SetConfig+0xac0>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	08db      	lsrs	r3, r3, #3
 800e904:	f003 0303 	and.w	r3, r3, #3
 800e908:	4a28      	ldr	r2, [pc, #160]	; (800e9ac <UART_SetConfig+0xac4>)
 800e90a:	fa22 f303 	lsr.w	r3, r2, r3
 800e90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e910:	e00f      	b.n	800e932 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e912:	4b26      	ldr	r3, [pc, #152]	; (800e9ac <UART_SetConfig+0xac4>)
 800e914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e916:	e00c      	b.n	800e932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e918:	4b25      	ldr	r3, [pc, #148]	; (800e9b0 <UART_SetConfig+0xac8>)
 800e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e91c:	e009      	b.n	800e932 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e924:	e005      	b.n	800e932 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e926:	2300      	movs	r3, #0
 800e928:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e92a:	2301      	movs	r3, #1
 800e92c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e930:	bf00      	nop
    }

    if (pclk != 0U)
 800e932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e934:	2b00      	cmp	r3, #0
 800e936:	d021      	beq.n	800e97c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93c:	4a1d      	ldr	r2, [pc, #116]	; (800e9b4 <UART_SetConfig+0xacc>)
 800e93e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e942:	461a      	mov	r2, r3
 800e944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e946:	fbb3 f2f2 	udiv	r2, r3, r2
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	085b      	lsrs	r3, r3, #1
 800e950:	441a      	add	r2, r3
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	fbb2 f3f3 	udiv	r3, r2, r3
 800e95a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	2b0f      	cmp	r3, #15
 800e960:	d909      	bls.n	800e976 <UART_SetConfig+0xa8e>
 800e962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e968:	d205      	bcs.n	800e976 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	60da      	str	r2, [r3, #12]
 800e974:	e002      	b.n	800e97c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	2201      	movs	r2, #1
 800e980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	2201      	movs	r2, #1
 800e988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2200      	movs	r2, #0
 800e990:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	2200      	movs	r2, #0
 800e996:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e998:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3748      	adds	r7, #72	; 0x48
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9a6:	bf00      	nop
 800e9a8:	58024400 	.word	0x58024400
 800e9ac:	03d09000 	.word	0x03d09000
 800e9b0:	003d0900 	.word	0x003d0900
 800e9b4:	0800fea8 	.word	0x0800fea8

0800e9b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c4:	f003 0301 	and.w	r3, r3, #1
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00a      	beq.n	800e9e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e6:	f003 0302 	and.w	r3, r3, #2
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00a      	beq.n	800ea04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	430a      	orrs	r2, r1
 800ea02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea08:	f003 0304 	and.w	r3, r3, #4
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00a      	beq.n	800ea26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	430a      	orrs	r2, r1
 800ea24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2a:	f003 0308 	and.w	r3, r3, #8
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00a      	beq.n	800ea48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	430a      	orrs	r2, r1
 800ea46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea4c:	f003 0310 	and.w	r3, r3, #16
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00a      	beq.n	800ea6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6e:	f003 0320 	and.w	r3, r3, #32
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00a      	beq.n	800ea8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d01a      	beq.n	800eace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eab6:	d10a      	bne.n	800eace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	430a      	orrs	r2, r1
 800eacc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ead2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00a      	beq.n	800eaf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	430a      	orrs	r2, r1
 800eaee:	605a      	str	r2, [r3, #4]
  }
}
 800eaf0:	bf00      	nop
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af02      	add	r7, sp, #8
 800eb02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb0c:	f7f3 fef4 	bl	80028f8 <HAL_GetTick>
 800eb10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f003 0308 	and.w	r3, r3, #8
 800eb1c:	2b08      	cmp	r3, #8
 800eb1e:	d10e      	bne.n	800eb3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f82f 	bl	800eb92 <UART_WaitOnFlagUntilTimeout>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e025      	b.n	800eb8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f003 0304 	and.w	r3, r3, #4
 800eb48:	2b04      	cmp	r3, #4
 800eb4a:	d10e      	bne.n	800eb6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f819 	bl	800eb92 <UART_WaitOnFlagUntilTimeout>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e00f      	b.n	800eb8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2220      	movs	r2, #32
 800eb76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b09c      	sub	sp, #112	; 0x70
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	603b      	str	r3, [r7, #0]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eba2:	e0a9      	b.n	800ecf8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebaa:	f000 80a5 	beq.w	800ecf8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebae:	f7f3 fea3 	bl	80028f8 <HAL_GetTick>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d302      	bcc.n	800ebc4 <UART_WaitOnFlagUntilTimeout+0x32>
 800ebbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d140      	bne.n	800ec46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebcc:	e853 3f00 	ldrex	r3, [r3]
 800ebd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ebd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ebd8:	667b      	str	r3, [r7, #100]	; 0x64
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebe4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebea:	e841 2300 	strex	r3, r2, [r1]
 800ebee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ebf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1e6      	bne.n	800ebc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec00:	e853 3f00 	ldrex	r3, [r3]
 800ec04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec08:	f023 0301 	bic.w	r3, r3, #1
 800ec0c:	663b      	str	r3, [r7, #96]	; 0x60
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3308      	adds	r3, #8
 800ec14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec16:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e5      	bne.n	800ebf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2220      	movs	r2, #32
 800ec2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2220      	movs	r2, #32
 800ec36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec42:	2303      	movs	r3, #3
 800ec44:	e069      	b.n	800ed1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f003 0304 	and.w	r3, r3, #4
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d051      	beq.n	800ecf8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec62:	d149      	bne.n	800ecf8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	e853 3f00 	ldrex	r3, [r3]
 800ec7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec94:	e841 2300 	strex	r3, r2, [r1]
 800ec98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e6      	bne.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3308      	adds	r3, #8
 800eca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	e853 3f00 	ldrex	r3, [r3]
 800ecae:	613b      	str	r3, [r7, #16]
   return(result);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	f023 0301 	bic.w	r3, r3, #1
 800ecb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3308      	adds	r3, #8
 800ecbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ecc0:	623a      	str	r2, [r7, #32]
 800ecc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc4:	69f9      	ldr	r1, [r7, #28]
 800ecc6:	6a3a      	ldr	r2, [r7, #32]
 800ecc8:	e841 2300 	strex	r3, r2, [r1]
 800eccc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1e5      	bne.n	800eca0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2220      	movs	r2, #32
 800ece0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2220      	movs	r2, #32
 800ece8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	e010      	b.n	800ed1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	69da      	ldr	r2, [r3, #28]
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	4013      	ands	r3, r2
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	bf0c      	ite	eq
 800ed08:	2301      	moveq	r3, #1
 800ed0a:	2300      	movne	r3, #0
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	461a      	mov	r2, r3
 800ed10:	79fb      	ldrb	r3, [r7, #7]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	f43f af46 	beq.w	800eba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3770      	adds	r7, #112	; 0x70
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b0a3      	sub	sp, #140	; 0x8c
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	88fa      	ldrh	r2, [r7, #6]
 800ed3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	88fa      	ldrh	r2, [r7, #6]
 800ed44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed56:	d10e      	bne.n	800ed76 <UART_Start_Receive_IT+0x52>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d105      	bne.n	800ed6c <UART_Start_Receive_IT+0x48>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed6a:	e02d      	b.n	800edc8 <UART_Start_Receive_IT+0xa4>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	22ff      	movs	r2, #255	; 0xff
 800ed70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed74:	e028      	b.n	800edc8 <UART_Start_Receive_IT+0xa4>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d10d      	bne.n	800ed9a <UART_Start_Receive_IT+0x76>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d104      	bne.n	800ed90 <UART_Start_Receive_IT+0x6c>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	22ff      	movs	r2, #255	; 0xff
 800ed8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed8e:	e01b      	b.n	800edc8 <UART_Start_Receive_IT+0xa4>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	227f      	movs	r2, #127	; 0x7f
 800ed94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed98:	e016      	b.n	800edc8 <UART_Start_Receive_IT+0xa4>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eda2:	d10d      	bne.n	800edc0 <UART_Start_Receive_IT+0x9c>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d104      	bne.n	800edb6 <UART_Start_Receive_IT+0x92>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	227f      	movs	r2, #127	; 0x7f
 800edb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edb4:	e008      	b.n	800edc8 <UART_Start_Receive_IT+0xa4>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	223f      	movs	r2, #63	; 0x3f
 800edba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edbe:	e003      	b.n	800edc8 <UART_Start_Receive_IT+0xa4>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2222      	movs	r2, #34	; 0x22
 800edd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	3308      	adds	r3, #8
 800edde:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ede0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ede2:	e853 3f00 	ldrex	r3, [r3]
 800ede6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ede8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edea:	f043 0301 	orr.w	r3, r3, #1
 800edee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3308      	adds	r3, #8
 800edf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800edfc:	673a      	str	r2, [r7, #112]	; 0x70
 800edfe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ee02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee04:	e841 2300 	strex	r3, r2, [r1]
 800ee08:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ee0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1e3      	bne.n	800edd8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee18:	d153      	bne.n	800eec2 <UART_Start_Receive_IT+0x19e>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee20:	88fa      	ldrh	r2, [r7, #6]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d34d      	bcc.n	800eec2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee2e:	d107      	bne.n	800ee40 <UART_Start_Receive_IT+0x11c>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d103      	bne.n	800ee40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	4a4b      	ldr	r2, [pc, #300]	; (800ef68 <UART_Start_Receive_IT+0x244>)
 800ee3c:	671a      	str	r2, [r3, #112]	; 0x70
 800ee3e:	e002      	b.n	800ee46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	4a4a      	ldr	r2, [pc, #296]	; (800ef6c <UART_Start_Receive_IT+0x248>)
 800ee44:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d01a      	beq.n	800ee8c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee7a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee80:	e841 2300 	strex	r3, r2, [r1]
 800ee84:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1e4      	bne.n	800ee56 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	3308      	adds	r3, #8
 800ee92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee96:	e853 3f00 	ldrex	r3, [r3]
 800ee9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eea2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	3308      	adds	r3, #8
 800eeaa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eeac:	64ba      	str	r2, [r7, #72]	; 0x48
 800eeae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eeb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeb4:	e841 2300 	strex	r3, r2, [r1]
 800eeb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eeba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1e5      	bne.n	800ee8c <UART_Start_Receive_IT+0x168>
 800eec0:	e04a      	b.n	800ef58 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eeca:	d107      	bne.n	800eedc <UART_Start_Receive_IT+0x1b8>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	691b      	ldr	r3, [r3, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d103      	bne.n	800eedc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	4a26      	ldr	r2, [pc, #152]	; (800ef70 <UART_Start_Receive_IT+0x24c>)
 800eed8:	671a      	str	r2, [r3, #112]	; 0x70
 800eeda:	e002      	b.n	800eee2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4a25      	ldr	r2, [pc, #148]	; (800ef74 <UART_Start_Receive_IT+0x250>)
 800eee0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d019      	beq.n	800ef26 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	e853 3f00 	ldrex	r3, [r3]
 800eefe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ef06:	677b      	str	r3, [r7, #116]	; 0x74
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef10:	637b      	str	r3, [r7, #52]	; 0x34
 800ef12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef18:	e841 2300 	strex	r3, r2, [r1]
 800ef1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1e6      	bne.n	800eef2 <UART_Start_Receive_IT+0x1ce>
 800ef24:	e018      	b.n	800ef58 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	e853 3f00 	ldrex	r3, [r3]
 800ef32:	613b      	str	r3, [r7, #16]
   return(result);
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	f043 0320 	orr.w	r3, r3, #32
 800ef3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	461a      	mov	r2, r3
 800ef42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef44:	623b      	str	r3, [r7, #32]
 800ef46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef48:	69f9      	ldr	r1, [r7, #28]
 800ef4a:	6a3a      	ldr	r2, [r7, #32]
 800ef4c:	e841 2300 	strex	r3, r2, [r1]
 800ef50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1e6      	bne.n	800ef26 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	378c      	adds	r7, #140	; 0x8c
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	0800f681 	.word	0x0800f681
 800ef6c:	0800f389 	.word	0x0800f389
 800ef70:	0800f227 	.word	0x0800f227
 800ef74:	0800f0c7 	.word	0x0800f0c7

0800ef78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b095      	sub	sp, #84	; 0x54
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef9e:	643b      	str	r3, [r7, #64]	; 0x40
 800efa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800efa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efa6:	e841 2300 	strex	r3, r2, [r1]
 800efaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1e6      	bne.n	800ef80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	3308      	adds	r3, #8
 800efb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efba:	6a3b      	ldr	r3, [r7, #32]
 800efbc:	e853 3f00 	ldrex	r3, [r3]
 800efc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800efc2:	69fa      	ldr	r2, [r7, #28]
 800efc4:	4b1e      	ldr	r3, [pc, #120]	; (800f040 <UART_EndRxTransfer+0xc8>)
 800efc6:	4013      	ands	r3, r2
 800efc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	3308      	adds	r3, #8
 800efd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800efd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efda:	e841 2300 	strex	r3, r2, [r1]
 800efde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1e5      	bne.n	800efb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efea:	2b01      	cmp	r3, #1
 800efec:	d118      	bne.n	800f020 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	e853 3f00 	ldrex	r3, [r3]
 800effa:	60bb      	str	r3, [r7, #8]
   return(result);
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	f023 0310 	bic.w	r3, r3, #16
 800f002:	647b      	str	r3, [r7, #68]	; 0x44
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	461a      	mov	r2, r3
 800f00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f00c:	61bb      	str	r3, [r7, #24]
 800f00e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f010:	6979      	ldr	r1, [r7, #20]
 800f012:	69ba      	ldr	r2, [r7, #24]
 800f014:	e841 2300 	strex	r3, r2, [r1]
 800f018:	613b      	str	r3, [r7, #16]
   return(result);
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1e6      	bne.n	800efee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2220      	movs	r2, #32
 800f024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f034:	bf00      	nop
 800f036:	3754      	adds	r7, #84	; 0x54
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	effffffe 	.word	0xeffffffe

0800f044 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2200      	movs	r2, #0
 800f056:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7fe ff2a 	bl	800debc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f068:	bf00      	nop
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b088      	sub	sp, #32
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	e853 3f00 	ldrex	r3, [r3]
 800f084:	60bb      	str	r3, [r7, #8]
   return(result);
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f08c:	61fb      	str	r3, [r7, #28]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	61bb      	str	r3, [r7, #24]
 800f098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09a:	6979      	ldr	r1, [r7, #20]
 800f09c:	69ba      	ldr	r2, [r7, #24]
 800f09e:	e841 2300 	strex	r3, r2, [r1]
 800f0a2:	613b      	str	r3, [r7, #16]
   return(result);
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1e6      	bne.n	800f078 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2220      	movs	r2, #32
 800f0ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7fe fef5 	bl	800dea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0be:	bf00      	nop
 800f0c0:	3720      	adds	r7, #32
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b096      	sub	sp, #88	; 0x58
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0de:	2b22      	cmp	r3, #34	; 0x22
 800f0e0:	f040 8095 	bne.w	800f20e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f0f2:	b2d9      	uxtb	r1, r3
 800f0f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0fe:	400a      	ands	r2, r1
 800f100:	b2d2      	uxtb	r2, r2
 800f102:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f114:	b29b      	uxth	r3, r3
 800f116:	3b01      	subs	r3, #1
 800f118:	b29a      	uxth	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f126:	b29b      	uxth	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d178      	bne.n	800f21e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f134:	e853 3f00 	ldrex	r3, [r3]
 800f138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f13c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f140:	653b      	str	r3, [r7, #80]	; 0x50
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f14a:	647b      	str	r3, [r7, #68]	; 0x44
 800f14c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e6      	bne.n	800f12c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3308      	adds	r3, #8
 800f164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	e853 3f00 	ldrex	r3, [r3]
 800f16c:	623b      	str	r3, [r7, #32]
   return(result);
 800f16e:	6a3b      	ldr	r3, [r7, #32]
 800f170:	f023 0301 	bic.w	r3, r3, #1
 800f174:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3308      	adds	r3, #8
 800f17c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f17e:	633a      	str	r2, [r7, #48]	; 0x30
 800f180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f186:	e841 2300 	strex	r3, r2, [r1]
 800f18a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1e5      	bne.n	800f15e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2220      	movs	r2, #32
 800f196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2200      	movs	r2, #0
 800f19e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d12e      	bne.n	800f206 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	e853 3f00 	ldrex	r3, [r3]
 800f1ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f023 0310 	bic.w	r3, r3, #16
 800f1c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1cc:	61fb      	str	r3, [r7, #28]
 800f1ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d0:	69b9      	ldr	r1, [r7, #24]
 800f1d2:	69fa      	ldr	r2, [r7, #28]
 800f1d4:	e841 2300 	strex	r3, r2, [r1]
 800f1d8:	617b      	str	r3, [r7, #20]
   return(result);
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1e6      	bne.n	800f1ae <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	f003 0310 	and.w	r3, r3, #16
 800f1ea:	2b10      	cmp	r3, #16
 800f1ec:	d103      	bne.n	800f1f6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2210      	movs	r2, #16
 800f1f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7fe fe66 	bl	800ded0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f204:	e00b      	b.n	800f21e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7f1 fde4 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 800f20c:	e007      	b.n	800f21e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	699a      	ldr	r2, [r3, #24]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f042 0208 	orr.w	r2, r2, #8
 800f21c:	619a      	str	r2, [r3, #24]
}
 800f21e:	bf00      	nop
 800f220:	3758      	adds	r7, #88	; 0x58
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b096      	sub	sp, #88	; 0x58
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f234:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f23e:	2b22      	cmp	r3, #34	; 0x22
 800f240:	f040 8095 	bne.w	800f36e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f252:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f254:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f258:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f25c:	4013      	ands	r3, r2
 800f25e:	b29a      	uxth	r2, r3
 800f260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f262:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f268:	1c9a      	adds	r2, r3, #2
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f274:	b29b      	uxth	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f286:	b29b      	uxth	r3, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d178      	bne.n	800f37e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f294:	e853 3f00 	ldrex	r3, [r3]
 800f298:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2aa:	643b      	str	r3, [r7, #64]	; 0x40
 800f2ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2b2:	e841 2300 	strex	r3, r2, [r1]
 800f2b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d1e6      	bne.n	800f28c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	3308      	adds	r3, #8
 800f2c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	e853 3f00 	ldrex	r3, [r3]
 800f2cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	f023 0301 	bic.w	r3, r3, #1
 800f2d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e6:	e841 2300 	strex	r3, r2, [r1]
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1e5      	bne.n	800f2be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2220      	movs	r2, #32
 800f2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f304:	2b01      	cmp	r3, #1
 800f306:	d12e      	bne.n	800f366 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	e853 3f00 	ldrex	r3, [r3]
 800f31a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	f023 0310 	bic.w	r3, r3, #16
 800f322:	647b      	str	r3, [r7, #68]	; 0x44
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	461a      	mov	r2, r3
 800f32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f32c:	61bb      	str	r3, [r7, #24]
 800f32e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f330:	6979      	ldr	r1, [r7, #20]
 800f332:	69ba      	ldr	r2, [r7, #24]
 800f334:	e841 2300 	strex	r3, r2, [r1]
 800f338:	613b      	str	r3, [r7, #16]
   return(result);
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1e6      	bne.n	800f30e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	f003 0310 	and.w	r3, r3, #16
 800f34a:	2b10      	cmp	r3, #16
 800f34c:	d103      	bne.n	800f356 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2210      	movs	r2, #16
 800f354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f35c:	4619      	mov	r1, r3
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f7fe fdb6 	bl	800ded0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f364:	e00b      	b.n	800f37e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7f1 fd34 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 800f36c:	e007      	b.n	800f37e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	699a      	ldr	r2, [r3, #24]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f042 0208 	orr.w	r2, r2, #8
 800f37c:	619a      	str	r2, [r3, #24]
}
 800f37e:	bf00      	nop
 800f380:	3758      	adds	r7, #88	; 0x58
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
	...

0800f388 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b0a6      	sub	sp, #152	; 0x98
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f396:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3be:	2b22      	cmp	r3, #34	; 0x22
 800f3c0:	f040 814d 	bne.w	800f65e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f3ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3ce:	e0f4      	b.n	800f5ba <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f3da:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f3de:	b2d9      	uxtb	r1, r3
 800f3e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ea:	400a      	ands	r2, r1
 800f3ec:	b2d2      	uxtb	r2, r2
 800f3ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f400:	b29b      	uxth	r3, r3
 800f402:	3b01      	subs	r3, #1
 800f404:	b29a      	uxth	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	69db      	ldr	r3, [r3, #28]
 800f412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f41a:	f003 0307 	and.w	r3, r3, #7
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d053      	beq.n	800f4ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f426:	f003 0301 	and.w	r3, r3, #1
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d011      	beq.n	800f452 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f42e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00b      	beq.n	800f452 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2201      	movs	r2, #1
 800f440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f448:	f043 0201 	orr.w	r2, r3, #1
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f456:	f003 0302 	and.w	r3, r3, #2
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d011      	beq.n	800f482 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f45e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00b      	beq.n	800f482 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2202      	movs	r2, #2
 800f470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f478:	f043 0204 	orr.w	r2, r3, #4
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f486:	f003 0304 	and.w	r3, r3, #4
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d011      	beq.n	800f4b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f48e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00b      	beq.n	800f4b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2204      	movs	r2, #4
 800f4a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4a8:	f043 0202 	orr.w	r2, r3, #2
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d006      	beq.n	800f4ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7fe fcfd 	bl	800debc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d171      	bne.n	800f5ba <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4de:	e853 3f00 	ldrex	r3, [r3]
 800f4e2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f4e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4fa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f4fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f500:	e841 2300 	strex	r3, r2, [r1]
 800f504:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1e4      	bne.n	800f4d6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	3308      	adds	r3, #8
 800f512:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f516:	e853 3f00 	ldrex	r3, [r3]
 800f51a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f51c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f51e:	4b56      	ldr	r3, [pc, #344]	; (800f678 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f520:	4013      	ands	r3, r2
 800f522:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	3308      	adds	r3, #8
 800f52a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f52c:	657a      	str	r2, [r7, #84]	; 0x54
 800f52e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f530:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f534:	e841 2300 	strex	r3, r2, [r1]
 800f538:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1e5      	bne.n	800f50c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2220      	movs	r2, #32
 800f544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f552:	2b01      	cmp	r3, #1
 800f554:	d12e      	bne.n	800f5b4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f564:	e853 3f00 	ldrex	r3, [r3]
 800f568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56c:	f023 0310 	bic.w	r3, r3, #16
 800f570:	67bb      	str	r3, [r7, #120]	; 0x78
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	461a      	mov	r2, r3
 800f578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f57a:	643b      	str	r3, [r7, #64]	; 0x40
 800f57c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f582:	e841 2300 	strex	r3, r2, [r1]
 800f586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1e6      	bne.n	800f55c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	69db      	ldr	r3, [r3, #28]
 800f594:	f003 0310 	and.w	r3, r3, #16
 800f598:	2b10      	cmp	r3, #16
 800f59a:	d103      	bne.n	800f5a4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2210      	movs	r2, #16
 800f5a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7fe fc8f 	bl	800ded0 <HAL_UARTEx_RxEventCallback>
 800f5b2:	e002      	b.n	800f5ba <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7f1 fc0d 	bl	8000dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d006      	beq.n	800f5d0 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f5c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5c6:	f003 0320 	and.w	r3, r3, #32
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f47f af00 	bne.w	800f3d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f5da:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d045      	beq.n	800f66e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d23e      	bcs.n	800f66e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3308      	adds	r3, #8
 800f5f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f8:	6a3b      	ldr	r3, [r7, #32]
 800f5fa:	e853 3f00 	ldrex	r3, [r3]
 800f5fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f606:	673b      	str	r3, [r7, #112]	; 0x70
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3308      	adds	r3, #8
 800f60e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f610:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e5      	bne.n	800f5f0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4a15      	ldr	r2, [pc, #84]	; (800f67c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f628:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	e853 3f00 	ldrex	r3, [r3]
 800f636:	60bb      	str	r3, [r7, #8]
   return(result);
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	f043 0320 	orr.w	r3, r3, #32
 800f63e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	461a      	mov	r2, r3
 800f646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f648:	61bb      	str	r3, [r7, #24]
 800f64a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64c:	6979      	ldr	r1, [r7, #20]
 800f64e:	69ba      	ldr	r2, [r7, #24]
 800f650:	e841 2300 	strex	r3, r2, [r1]
 800f654:	613b      	str	r3, [r7, #16]
   return(result);
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e6      	bne.n	800f62a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f65c:	e007      	b.n	800f66e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	699a      	ldr	r2, [r3, #24]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f042 0208 	orr.w	r2, r2, #8
 800f66c:	619a      	str	r2, [r3, #24]
}
 800f66e:	bf00      	nop
 800f670:	3798      	adds	r7, #152	; 0x98
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	effffffe 	.word	0xeffffffe
 800f67c:	0800f0c7 	.word	0x0800f0c7

0800f680 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b0a8      	sub	sp, #160	; 0xa0
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f68e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	69db      	ldr	r3, [r3, #28]
 800f698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6b6:	2b22      	cmp	r3, #34	; 0x22
 800f6b8:	f040 8151 	bne.w	800f95e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f6c6:	e0f8      	b.n	800f8ba <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f6da:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f6de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f0:	1c9a      	adds	r2, r3, #2
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	3b01      	subs	r3, #1
 800f700:	b29a      	uxth	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	69db      	ldr	r3, [r3, #28]
 800f70e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f716:	f003 0307 	and.w	r3, r3, #7
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d053      	beq.n	800f7c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f71e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d011      	beq.n	800f74e <UART_RxISR_16BIT_FIFOEN+0xce>
 800f72a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00b      	beq.n	800f74e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2201      	movs	r2, #1
 800f73c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f744:	f043 0201 	orr.w	r2, r3, #1
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f74e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f752:	f003 0302 	and.w	r3, r3, #2
 800f756:	2b00      	cmp	r3, #0
 800f758:	d011      	beq.n	800f77e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f75a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f75e:	f003 0301 	and.w	r3, r3, #1
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00b      	beq.n	800f77e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2202      	movs	r2, #2
 800f76c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f774:	f043 0204 	orr.w	r2, r3, #4
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f77e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f782:	f003 0304 	and.w	r3, r3, #4
 800f786:	2b00      	cmp	r3, #0
 800f788:	d011      	beq.n	800f7ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f78a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00b      	beq.n	800f7ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2204      	movs	r2, #4
 800f79c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7a4:	f043 0202 	orr.w	r2, r3, #2
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d006      	beq.n	800f7c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7fe fb7f 	bl	800debc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d173      	bne.n	800f8ba <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7da:	e853 3f00 	ldrex	r3, [r3]
 800f7de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7f6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7fc:	e841 2300 	strex	r3, r2, [r1]
 800f800:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1e4      	bne.n	800f7d2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3308      	adds	r3, #8
 800f80e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f812:	e853 3f00 	ldrex	r3, [r3]
 800f816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f81a:	4b57      	ldr	r3, [pc, #348]	; (800f978 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f81c:	4013      	ands	r3, r2
 800f81e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3308      	adds	r3, #8
 800f828:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f82c:	65ba      	str	r2, [r7, #88]	; 0x58
 800f82e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f834:	e841 2300 	strex	r3, r2, [r1]
 800f838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1e3      	bne.n	800f808 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2220      	movs	r2, #32
 800f844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f852:	2b01      	cmp	r3, #1
 800f854:	d12e      	bne.n	800f8b4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f864:	e853 3f00 	ldrex	r3, [r3]
 800f868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86c:	f023 0310 	bic.w	r3, r3, #16
 800f870:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	461a      	mov	r2, r3
 800f878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f87a:	647b      	str	r3, [r7, #68]	; 0x44
 800f87c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f882:	e841 2300 	strex	r3, r2, [r1]
 800f886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1e6      	bne.n	800f85c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	69db      	ldr	r3, [r3, #28]
 800f894:	f003 0310 	and.w	r3, r3, #16
 800f898:	2b10      	cmp	r3, #16
 800f89a:	d103      	bne.n	800f8a4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2210      	movs	r2, #16
 800f8a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7fe fb0f 	bl	800ded0 <HAL_UARTEx_RxEventCallback>
 800f8b2:	e002      	b.n	800f8ba <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7f1 fa8d 	bl	8000dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d006      	beq.n	800f8d0 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f8c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8c6:	f003 0320 	and.w	r3, r3, #32
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f47f aefc 	bne.w	800f6c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f8da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d045      	beq.n	800f96e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d23e      	bcs.n	800f96e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	3308      	adds	r3, #8
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	e853 3f00 	ldrex	r3, [r3]
 800f8fe:	623b      	str	r3, [r7, #32]
   return(result);
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f906:	677b      	str	r3, [r7, #116]	; 0x74
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3308      	adds	r3, #8
 800f90e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f910:	633a      	str	r2, [r7, #48]	; 0x30
 800f912:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f918:	e841 2300 	strex	r3, r2, [r1]
 800f91c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1e5      	bne.n	800f8f0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a15      	ldr	r2, [pc, #84]	; (800f97c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f928:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	e853 3f00 	ldrex	r3, [r3]
 800f936:	60fb      	str	r3, [r7, #12]
   return(result);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f043 0320 	orr.w	r3, r3, #32
 800f93e:	673b      	str	r3, [r7, #112]	; 0x70
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f948:	61fb      	str	r3, [r7, #28]
 800f94a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f94c:	69b9      	ldr	r1, [r7, #24]
 800f94e:	69fa      	ldr	r2, [r7, #28]
 800f950:	e841 2300 	strex	r3, r2, [r1]
 800f954:	617b      	str	r3, [r7, #20]
   return(result);
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1e6      	bne.n	800f92a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f95c:	e007      	b.n	800f96e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	699a      	ldr	r2, [r3, #24]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f042 0208 	orr.w	r2, r2, #8
 800f96c:	619a      	str	r2, [r3, #24]
}
 800f96e:	bf00      	nop
 800f970:	37a0      	adds	r7, #160	; 0xa0
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	effffffe 	.word	0xeffffffe
 800f97c:	0800f227 	.word	0x0800f227

0800f980 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d101      	bne.n	800f9d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e027      	b.n	800fa22 <HAL_UARTEx_DisableFifoMode+0x66>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2224      	movs	r2, #36	; 0x24
 800f9de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f022 0201 	bic.w	r2, r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fa00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2220      	movs	r2, #32
 800fa14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b084      	sub	sp, #16
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
 800fa36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d101      	bne.n	800fa46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa42:	2302      	movs	r3, #2
 800fa44:	e02d      	b.n	800faa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2224      	movs	r2, #36	; 0x24
 800fa52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f022 0201 	bic.w	r2, r2, #1
 800fa6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	430a      	orrs	r2, r1
 800fa80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f850 	bl	800fb28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2220      	movs	r2, #32
 800fa94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b084      	sub	sp, #16
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d101      	bne.n	800fac2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fabe:	2302      	movs	r3, #2
 800fac0:	e02d      	b.n	800fb1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2224      	movs	r2, #36	; 0x24
 800face:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f022 0201 	bic.w	r2, r2, #1
 800fae8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	689b      	ldr	r3, [r3, #8]
 800faf0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	683a      	ldr	r2, [r7, #0]
 800fafa:	430a      	orrs	r2, r1
 800fafc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f812 	bl	800fb28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2220      	movs	r2, #32
 800fb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2200      	movs	r2, #0
 800fb18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb1c:	2300      	movs	r3, #0
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
	...

0800fb28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d108      	bne.n	800fb4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb48:	e031      	b.n	800fbae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb4a:	2310      	movs	r3, #16
 800fb4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb4e:	2310      	movs	r3, #16
 800fb50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	0e5b      	lsrs	r3, r3, #25
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	f003 0307 	and.w	r3, r3, #7
 800fb60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	0f5b      	lsrs	r3, r3, #29
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	f003 0307 	and.w	r3, r3, #7
 800fb70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb72:	7bbb      	ldrb	r3, [r7, #14]
 800fb74:	7b3a      	ldrb	r2, [r7, #12]
 800fb76:	4911      	ldr	r1, [pc, #68]	; (800fbbc <UARTEx_SetNbDataToProcess+0x94>)
 800fb78:	5c8a      	ldrb	r2, [r1, r2]
 800fb7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb7e:	7b3a      	ldrb	r2, [r7, #12]
 800fb80:	490f      	ldr	r1, [pc, #60]	; (800fbc0 <UARTEx_SetNbDataToProcess+0x98>)
 800fb82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb84:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb90:	7bfb      	ldrb	r3, [r7, #15]
 800fb92:	7b7a      	ldrb	r2, [r7, #13]
 800fb94:	4909      	ldr	r1, [pc, #36]	; (800fbbc <UARTEx_SetNbDataToProcess+0x94>)
 800fb96:	5c8a      	ldrb	r2, [r1, r2]
 800fb98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb9c:	7b7a      	ldrb	r2, [r7, #13]
 800fb9e:	4908      	ldr	r1, [pc, #32]	; (800fbc0 <UARTEx_SetNbDataToProcess+0x98>)
 800fba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fba2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fbae:	bf00      	nop
 800fbb0:	3714      	adds	r7, #20
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	0800fec0 	.word	0x0800fec0
 800fbc0:	0800fec8 	.word	0x0800fec8

0800fbc4 <__errno>:
 800fbc4:	4b01      	ldr	r3, [pc, #4]	; (800fbcc <__errno+0x8>)
 800fbc6:	6818      	ldr	r0, [r3, #0]
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	24000040 	.word	0x24000040

0800fbd0 <__libc_init_array>:
 800fbd0:	b570      	push	{r4, r5, r6, lr}
 800fbd2:	4d0d      	ldr	r5, [pc, #52]	; (800fc08 <__libc_init_array+0x38>)
 800fbd4:	4c0d      	ldr	r4, [pc, #52]	; (800fc0c <__libc_init_array+0x3c>)
 800fbd6:	1b64      	subs	r4, r4, r5
 800fbd8:	10a4      	asrs	r4, r4, #2
 800fbda:	2600      	movs	r6, #0
 800fbdc:	42a6      	cmp	r6, r4
 800fbde:	d109      	bne.n	800fbf4 <__libc_init_array+0x24>
 800fbe0:	4d0b      	ldr	r5, [pc, #44]	; (800fc10 <__libc_init_array+0x40>)
 800fbe2:	4c0c      	ldr	r4, [pc, #48]	; (800fc14 <__libc_init_array+0x44>)
 800fbe4:	f000 f93c 	bl	800fe60 <_init>
 800fbe8:	1b64      	subs	r4, r4, r5
 800fbea:	10a4      	asrs	r4, r4, #2
 800fbec:	2600      	movs	r6, #0
 800fbee:	42a6      	cmp	r6, r4
 800fbf0:	d105      	bne.n	800fbfe <__libc_init_array+0x2e>
 800fbf2:	bd70      	pop	{r4, r5, r6, pc}
 800fbf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbf8:	4798      	blx	r3
 800fbfa:	3601      	adds	r6, #1
 800fbfc:	e7ee      	b.n	800fbdc <__libc_init_array+0xc>
 800fbfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc02:	4798      	blx	r3
 800fc04:	3601      	adds	r6, #1
 800fc06:	e7f2      	b.n	800fbee <__libc_init_array+0x1e>
 800fc08:	0800fed8 	.word	0x0800fed8
 800fc0c:	0800fed8 	.word	0x0800fed8
 800fc10:	0800fed8 	.word	0x0800fed8
 800fc14:	0800fedc 	.word	0x0800fedc

0800fc18 <malloc>:
 800fc18:	4b02      	ldr	r3, [pc, #8]	; (800fc24 <malloc+0xc>)
 800fc1a:	4601      	mov	r1, r0
 800fc1c:	6818      	ldr	r0, [r3, #0]
 800fc1e:	f000 b88d 	b.w	800fd3c <_malloc_r>
 800fc22:	bf00      	nop
 800fc24:	24000040 	.word	0x24000040

0800fc28 <free>:
 800fc28:	4b02      	ldr	r3, [pc, #8]	; (800fc34 <free+0xc>)
 800fc2a:	4601      	mov	r1, r0
 800fc2c:	6818      	ldr	r0, [r3, #0]
 800fc2e:	f000 b819 	b.w	800fc64 <_free_r>
 800fc32:	bf00      	nop
 800fc34:	24000040 	.word	0x24000040

0800fc38 <memcpy>:
 800fc38:	440a      	add	r2, r1
 800fc3a:	4291      	cmp	r1, r2
 800fc3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc40:	d100      	bne.n	800fc44 <memcpy+0xc>
 800fc42:	4770      	bx	lr
 800fc44:	b510      	push	{r4, lr}
 800fc46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc4e:	4291      	cmp	r1, r2
 800fc50:	d1f9      	bne.n	800fc46 <memcpy+0xe>
 800fc52:	bd10      	pop	{r4, pc}

0800fc54 <memset>:
 800fc54:	4402      	add	r2, r0
 800fc56:	4603      	mov	r3, r0
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d100      	bne.n	800fc5e <memset+0xa>
 800fc5c:	4770      	bx	lr
 800fc5e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc62:	e7f9      	b.n	800fc58 <memset+0x4>

0800fc64 <_free_r>:
 800fc64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc66:	2900      	cmp	r1, #0
 800fc68:	d044      	beq.n	800fcf4 <_free_r+0x90>
 800fc6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc6e:	9001      	str	r0, [sp, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f1a1 0404 	sub.w	r4, r1, #4
 800fc76:	bfb8      	it	lt
 800fc78:	18e4      	addlt	r4, r4, r3
 800fc7a:	f000 f8e3 	bl	800fe44 <__malloc_lock>
 800fc7e:	4a1e      	ldr	r2, [pc, #120]	; (800fcf8 <_free_r+0x94>)
 800fc80:	9801      	ldr	r0, [sp, #4]
 800fc82:	6813      	ldr	r3, [r2, #0]
 800fc84:	b933      	cbnz	r3, 800fc94 <_free_r+0x30>
 800fc86:	6063      	str	r3, [r4, #4]
 800fc88:	6014      	str	r4, [r2, #0]
 800fc8a:	b003      	add	sp, #12
 800fc8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc90:	f000 b8de 	b.w	800fe50 <__malloc_unlock>
 800fc94:	42a3      	cmp	r3, r4
 800fc96:	d908      	bls.n	800fcaa <_free_r+0x46>
 800fc98:	6825      	ldr	r5, [r4, #0]
 800fc9a:	1961      	adds	r1, r4, r5
 800fc9c:	428b      	cmp	r3, r1
 800fc9e:	bf01      	itttt	eq
 800fca0:	6819      	ldreq	r1, [r3, #0]
 800fca2:	685b      	ldreq	r3, [r3, #4]
 800fca4:	1949      	addeq	r1, r1, r5
 800fca6:	6021      	streq	r1, [r4, #0]
 800fca8:	e7ed      	b.n	800fc86 <_free_r+0x22>
 800fcaa:	461a      	mov	r2, r3
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	b10b      	cbz	r3, 800fcb4 <_free_r+0x50>
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	d9fa      	bls.n	800fcaa <_free_r+0x46>
 800fcb4:	6811      	ldr	r1, [r2, #0]
 800fcb6:	1855      	adds	r5, r2, r1
 800fcb8:	42a5      	cmp	r5, r4
 800fcba:	d10b      	bne.n	800fcd4 <_free_r+0x70>
 800fcbc:	6824      	ldr	r4, [r4, #0]
 800fcbe:	4421      	add	r1, r4
 800fcc0:	1854      	adds	r4, r2, r1
 800fcc2:	42a3      	cmp	r3, r4
 800fcc4:	6011      	str	r1, [r2, #0]
 800fcc6:	d1e0      	bne.n	800fc8a <_free_r+0x26>
 800fcc8:	681c      	ldr	r4, [r3, #0]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	6053      	str	r3, [r2, #4]
 800fcce:	4421      	add	r1, r4
 800fcd0:	6011      	str	r1, [r2, #0]
 800fcd2:	e7da      	b.n	800fc8a <_free_r+0x26>
 800fcd4:	d902      	bls.n	800fcdc <_free_r+0x78>
 800fcd6:	230c      	movs	r3, #12
 800fcd8:	6003      	str	r3, [r0, #0]
 800fcda:	e7d6      	b.n	800fc8a <_free_r+0x26>
 800fcdc:	6825      	ldr	r5, [r4, #0]
 800fcde:	1961      	adds	r1, r4, r5
 800fce0:	428b      	cmp	r3, r1
 800fce2:	bf04      	itt	eq
 800fce4:	6819      	ldreq	r1, [r3, #0]
 800fce6:	685b      	ldreq	r3, [r3, #4]
 800fce8:	6063      	str	r3, [r4, #4]
 800fcea:	bf04      	itt	eq
 800fcec:	1949      	addeq	r1, r1, r5
 800fcee:	6021      	streq	r1, [r4, #0]
 800fcf0:	6054      	str	r4, [r2, #4]
 800fcf2:	e7ca      	b.n	800fc8a <_free_r+0x26>
 800fcf4:	b003      	add	sp, #12
 800fcf6:	bd30      	pop	{r4, r5, pc}
 800fcf8:	240005ec 	.word	0x240005ec

0800fcfc <sbrk_aligned>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	4e0e      	ldr	r6, [pc, #56]	; (800fd38 <sbrk_aligned+0x3c>)
 800fd00:	460c      	mov	r4, r1
 800fd02:	6831      	ldr	r1, [r6, #0]
 800fd04:	4605      	mov	r5, r0
 800fd06:	b911      	cbnz	r1, 800fd0e <sbrk_aligned+0x12>
 800fd08:	f000 f88c 	bl	800fe24 <_sbrk_r>
 800fd0c:	6030      	str	r0, [r6, #0]
 800fd0e:	4621      	mov	r1, r4
 800fd10:	4628      	mov	r0, r5
 800fd12:	f000 f887 	bl	800fe24 <_sbrk_r>
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	d00a      	beq.n	800fd30 <sbrk_aligned+0x34>
 800fd1a:	1cc4      	adds	r4, r0, #3
 800fd1c:	f024 0403 	bic.w	r4, r4, #3
 800fd20:	42a0      	cmp	r0, r4
 800fd22:	d007      	beq.n	800fd34 <sbrk_aligned+0x38>
 800fd24:	1a21      	subs	r1, r4, r0
 800fd26:	4628      	mov	r0, r5
 800fd28:	f000 f87c 	bl	800fe24 <_sbrk_r>
 800fd2c:	3001      	adds	r0, #1
 800fd2e:	d101      	bne.n	800fd34 <sbrk_aligned+0x38>
 800fd30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd34:	4620      	mov	r0, r4
 800fd36:	bd70      	pop	{r4, r5, r6, pc}
 800fd38:	240005f0 	.word	0x240005f0

0800fd3c <_malloc_r>:
 800fd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd40:	1ccd      	adds	r5, r1, #3
 800fd42:	f025 0503 	bic.w	r5, r5, #3
 800fd46:	3508      	adds	r5, #8
 800fd48:	2d0c      	cmp	r5, #12
 800fd4a:	bf38      	it	cc
 800fd4c:	250c      	movcc	r5, #12
 800fd4e:	2d00      	cmp	r5, #0
 800fd50:	4607      	mov	r7, r0
 800fd52:	db01      	blt.n	800fd58 <_malloc_r+0x1c>
 800fd54:	42a9      	cmp	r1, r5
 800fd56:	d905      	bls.n	800fd64 <_malloc_r+0x28>
 800fd58:	230c      	movs	r3, #12
 800fd5a:	603b      	str	r3, [r7, #0]
 800fd5c:	2600      	movs	r6, #0
 800fd5e:	4630      	mov	r0, r6
 800fd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd64:	4e2e      	ldr	r6, [pc, #184]	; (800fe20 <_malloc_r+0xe4>)
 800fd66:	f000 f86d 	bl	800fe44 <__malloc_lock>
 800fd6a:	6833      	ldr	r3, [r6, #0]
 800fd6c:	461c      	mov	r4, r3
 800fd6e:	bb34      	cbnz	r4, 800fdbe <_malloc_r+0x82>
 800fd70:	4629      	mov	r1, r5
 800fd72:	4638      	mov	r0, r7
 800fd74:	f7ff ffc2 	bl	800fcfc <sbrk_aligned>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	d14d      	bne.n	800fe1a <_malloc_r+0xde>
 800fd7e:	6834      	ldr	r4, [r6, #0]
 800fd80:	4626      	mov	r6, r4
 800fd82:	2e00      	cmp	r6, #0
 800fd84:	d140      	bne.n	800fe08 <_malloc_r+0xcc>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	4631      	mov	r1, r6
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	eb04 0803 	add.w	r8, r4, r3
 800fd90:	f000 f848 	bl	800fe24 <_sbrk_r>
 800fd94:	4580      	cmp	r8, r0
 800fd96:	d13a      	bne.n	800fe0e <_malloc_r+0xd2>
 800fd98:	6821      	ldr	r1, [r4, #0]
 800fd9a:	3503      	adds	r5, #3
 800fd9c:	1a6d      	subs	r5, r5, r1
 800fd9e:	f025 0503 	bic.w	r5, r5, #3
 800fda2:	3508      	adds	r5, #8
 800fda4:	2d0c      	cmp	r5, #12
 800fda6:	bf38      	it	cc
 800fda8:	250c      	movcc	r5, #12
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4638      	mov	r0, r7
 800fdae:	f7ff ffa5 	bl	800fcfc <sbrk_aligned>
 800fdb2:	3001      	adds	r0, #1
 800fdb4:	d02b      	beq.n	800fe0e <_malloc_r+0xd2>
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	442b      	add	r3, r5
 800fdba:	6023      	str	r3, [r4, #0]
 800fdbc:	e00e      	b.n	800fddc <_malloc_r+0xa0>
 800fdbe:	6822      	ldr	r2, [r4, #0]
 800fdc0:	1b52      	subs	r2, r2, r5
 800fdc2:	d41e      	bmi.n	800fe02 <_malloc_r+0xc6>
 800fdc4:	2a0b      	cmp	r2, #11
 800fdc6:	d916      	bls.n	800fdf6 <_malloc_r+0xba>
 800fdc8:	1961      	adds	r1, r4, r5
 800fdca:	42a3      	cmp	r3, r4
 800fdcc:	6025      	str	r5, [r4, #0]
 800fdce:	bf18      	it	ne
 800fdd0:	6059      	strne	r1, [r3, #4]
 800fdd2:	6863      	ldr	r3, [r4, #4]
 800fdd4:	bf08      	it	eq
 800fdd6:	6031      	streq	r1, [r6, #0]
 800fdd8:	5162      	str	r2, [r4, r5]
 800fdda:	604b      	str	r3, [r1, #4]
 800fddc:	4638      	mov	r0, r7
 800fdde:	f104 060b 	add.w	r6, r4, #11
 800fde2:	f000 f835 	bl	800fe50 <__malloc_unlock>
 800fde6:	f026 0607 	bic.w	r6, r6, #7
 800fdea:	1d23      	adds	r3, r4, #4
 800fdec:	1af2      	subs	r2, r6, r3
 800fdee:	d0b6      	beq.n	800fd5e <_malloc_r+0x22>
 800fdf0:	1b9b      	subs	r3, r3, r6
 800fdf2:	50a3      	str	r3, [r4, r2]
 800fdf4:	e7b3      	b.n	800fd5e <_malloc_r+0x22>
 800fdf6:	6862      	ldr	r2, [r4, #4]
 800fdf8:	42a3      	cmp	r3, r4
 800fdfa:	bf0c      	ite	eq
 800fdfc:	6032      	streq	r2, [r6, #0]
 800fdfe:	605a      	strne	r2, [r3, #4]
 800fe00:	e7ec      	b.n	800fddc <_malloc_r+0xa0>
 800fe02:	4623      	mov	r3, r4
 800fe04:	6864      	ldr	r4, [r4, #4]
 800fe06:	e7b2      	b.n	800fd6e <_malloc_r+0x32>
 800fe08:	4634      	mov	r4, r6
 800fe0a:	6876      	ldr	r6, [r6, #4]
 800fe0c:	e7b9      	b.n	800fd82 <_malloc_r+0x46>
 800fe0e:	230c      	movs	r3, #12
 800fe10:	603b      	str	r3, [r7, #0]
 800fe12:	4638      	mov	r0, r7
 800fe14:	f000 f81c 	bl	800fe50 <__malloc_unlock>
 800fe18:	e7a1      	b.n	800fd5e <_malloc_r+0x22>
 800fe1a:	6025      	str	r5, [r4, #0]
 800fe1c:	e7de      	b.n	800fddc <_malloc_r+0xa0>
 800fe1e:	bf00      	nop
 800fe20:	240005ec 	.word	0x240005ec

0800fe24 <_sbrk_r>:
 800fe24:	b538      	push	{r3, r4, r5, lr}
 800fe26:	4d06      	ldr	r5, [pc, #24]	; (800fe40 <_sbrk_r+0x1c>)
 800fe28:	2300      	movs	r3, #0
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	4608      	mov	r0, r1
 800fe2e:	602b      	str	r3, [r5, #0]
 800fe30:	f7f2 fbf4 	bl	800261c <_sbrk>
 800fe34:	1c43      	adds	r3, r0, #1
 800fe36:	d102      	bne.n	800fe3e <_sbrk_r+0x1a>
 800fe38:	682b      	ldr	r3, [r5, #0]
 800fe3a:	b103      	cbz	r3, 800fe3e <_sbrk_r+0x1a>
 800fe3c:	6023      	str	r3, [r4, #0]
 800fe3e:	bd38      	pop	{r3, r4, r5, pc}
 800fe40:	240005f4 	.word	0x240005f4

0800fe44 <__malloc_lock>:
 800fe44:	4801      	ldr	r0, [pc, #4]	; (800fe4c <__malloc_lock+0x8>)
 800fe46:	f000 b809 	b.w	800fe5c <__retarget_lock_acquire_recursive>
 800fe4a:	bf00      	nop
 800fe4c:	240005f8 	.word	0x240005f8

0800fe50 <__malloc_unlock>:
 800fe50:	4801      	ldr	r0, [pc, #4]	; (800fe58 <__malloc_unlock+0x8>)
 800fe52:	f000 b804 	b.w	800fe5e <__retarget_lock_release_recursive>
 800fe56:	bf00      	nop
 800fe58:	240005f8 	.word	0x240005f8

0800fe5c <__retarget_lock_acquire_recursive>:
 800fe5c:	4770      	bx	lr

0800fe5e <__retarget_lock_release_recursive>:
 800fe5e:	4770      	bx	lr

0800fe60 <_init>:
 800fe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe62:	bf00      	nop
 800fe64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe66:	bc08      	pop	{r3}
 800fe68:	469e      	mov	lr, r3
 800fe6a:	4770      	bx	lr

0800fe6c <_fini>:
 800fe6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6e:	bf00      	nop
 800fe70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe72:	bc08      	pop	{r3}
 800fe74:	469e      	mov	lr, r3
 800fe76:	4770      	bx	lr
