
H7-LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbb4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fe4c  0800fe4c  0001fe4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fea4  0800fea4  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800feac  0800feac  0001feac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800feb0  0800feb0  0001feb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  0800feb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000053c  240000c0  0800ff58  000200c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005fc  0800ff58  000205fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a2e  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036dd  00000000  00000000  00043b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  000471e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a38  00000000  00000000  00048d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b205  00000000  00000000  0004a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023fdb  00000000  00000000  0008596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180607  00000000  00000000  000a9948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00229f4f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007938  00000000  00000000  00229fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe34 	.word	0x0800fe34

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	0800fe34 	.word	0x0800fe34

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 f934 	bl	8007894 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fa0e 	bl	8007a7c <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	240002a8 	.word	0x240002a8
 80006a0:	0800fe4c 	.word	0x0800fe4c
 80006a4:	0800fe58 	.word	0x0800fe58

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fa84 	bl	800fbec <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (step == 9)
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <do_auto_sweep+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d109      	bne.n	8000730 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <do_auto_sweep+0x84>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		  step--;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <do_auto_sweep+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <do_auto_sweep+0x80>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00c      	b.n	800074a <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <do_auto_sweep+0x80>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <do_auto_sweep+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
	    step++;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <do_auto_sweep+0x80>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <do_auto_sweep+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <do_auto_sweep+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <do_auto_sweep+0x50>
	  {
	    step++;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <do_auto_sweep+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <do_auto_sweep+0x80>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <do_auto_sweep+0x80>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <do_auto_sweep+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <do_auto_sweep+0x88>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <do_auto_sweep+0x8c>)
 800077e:	f003 fe86 	bl	800448e <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <do_auto_sweep+0x8c>)
 8000786:	f003 fe30 	bl	80043ea <HAL_DAC_Start>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	240005c8 	.word	0x240005c8
 8000794:	24000028 	.word	0x24000028
 8000798:	24000000 	.word	0x24000000
 800079c:	24000294 	.word	0x24000294

080007a0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 80007a0:	b084      	sub	sp, #16
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f107 0c18 	add.w	ip, r7, #24
 80007ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	f107 0018 	add.w	r0, r7, #24
 80007ba:	f00b f827 	bl	800b80c <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007d0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007d2:	2002      	movs	r0, #2
 80007d4:	f00f fa0a 	bl	800fbec <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	701a      	strb	r2, [r3, #0]
	return results;
 80007ea:	68bb      	ldr	r3, [r7, #8]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
	...

080007fc <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <set_erpa_sweep+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <set_erpa_sweep+0x2c>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <set_erpa_sweep+0x30>)
 8000812:	f003 fe3c 	bl	800448e <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <set_erpa_sweep+0x30>)
 800081a:	f003 fde6 	bl	80043ea <HAL_DAC_Start>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240005c8 	.word	0x240005c8
 8000828:	24000000 	.word	0x24000000
 800082c:	24000294 	.word	0x24000294

08000830 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <erpa_adc+0x34>)
 8000838:	885b      	ldrh	r3, [r3, #2]
 800083a:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified doesn't need to change
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <erpa_adc+0x34>)
 800083e:	895b      	ldrh	r3, [r3, #10]
 8000840:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(2 * sizeof(uint16_t));
 8000842:	2004      	movs	r0, #4
 8000844:	f00f f9d2 	bl	800fbec <malloc>
 8000848:	4603      	mov	r3, r0
 800084a:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	88fa      	ldrh	r2, [r7, #6]
 8000850:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	88ba      	ldrh	r2, [r7, #4]
 8000858:	801a      	strh	r2, [r3, #0]

	return results;
 800085a:	683b      	ldr	r3, [r7, #0]


}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	240005a0 	.word	0x240005a0

08000868 <hk_adc1>:

uint16_t* hk_adc1() {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];			// BUSVmon -- verified doesn't need to change
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <hk_adc1+0x98>)
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];				// BUSImon -- verified doesn't need to change
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <hk_adc1+0x98>)
 8000876:	8a1b      	ldrh	r3, [r3, #16]
 8000878:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified doesn't need to change
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <hk_adc1+0x98>)
 800087c:	899b      	ldrh	r3, [r3, #12]
 800087e:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <hk_adc1+0x98>)
 8000882:	8a5b      	ldrh	r3, [r3, #18]
 8000884:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];				// n200v -- verified doesn't need to change
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <hk_adc1+0x98>)
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <hk_adc1+0x98>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <hk_adc1+0x98>)
 8000894:	89db      	ldrh	r3, [r3, #14]
 8000896:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified doesn't need to change
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <hk_adc1+0x98>)
 800089a:	891b      	ldrh	r3, [r3, #8]
 800089c:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <hk_adc1+0x98>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 80008a4:	2012      	movs	r0, #18
 80008a6:	f00f f9a1 	bl	800fbec <malloc>
 80008aa:	4603      	mov	r3, r0
 80008ac:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	8afa      	ldrh	r2, [r7, #22]
 80008b2:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	3302      	adds	r3, #2
 80008b8:	8aba      	ldrh	r2, [r7, #20]
 80008ba:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8a7a      	ldrh	r2, [r7, #18]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3306      	adds	r3, #6
 80008c8:	8a3a      	ldrh	r2, [r7, #16]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3308      	adds	r3, #8
 80008d0:	89fa      	ldrh	r2, [r7, #14]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	330a      	adds	r3, #10
 80008d8:	89ba      	ldrh	r2, [r7, #12]
 80008da:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	330c      	adds	r3, #12
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	330e      	adds	r3, #14
 80008e8:	893a      	ldrh	r2, [r7, #8]
 80008ea:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3310      	adds	r3, #16
 80008f0:	88fa      	ldrh	r2, [r7, #6]
 80008f2:	801a      	strh	r2, [r3, #0]

	return results;
 80008f4:	683b      	ldr	r3, [r7, #0]

}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	240005a0 	.word	0x240005a0

08000904 <hk_adc3>:

uint16_t* hk_adc3() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <hk_adc3+0x50>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <hk_adc3+0x50>)
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <hk_adc3+0x50>)
 8000918:	889b      	ldrh	r3, [r3, #4]
 800091a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <hk_adc3+0x50>)
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000922:	2008      	movs	r0, #8
 8000924:	f00f f962 	bl	800fbec <malloc>
 8000928:	4603      	mov	r3, r0
 800092a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	89fa      	ldrh	r2, [r7, #14]
 8000930:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3302      	adds	r3, #2
 8000936:	89ba      	ldrh	r2, [r7, #12]
 8000938:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3304      	adds	r3, #4
 800093e:	897a      	ldrh	r2, [r7, #10]
 8000940:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3306      	adds	r3, #6
 8000946:	893a      	ldrh	r2, [r7, #8]
 8000948:	801a      	strh	r2, [r3, #0]

	return results;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	240005c0 	.word	0x240005c0

08000958 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 8000962:	23aa      	movs	r3, #170	; 0xaa
 8000964:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 8000966:	23aa      	movs	r3, #170	; 0xaa
 8000968:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <send_erpa_packet+0x90>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <send_erpa_packet+0x90>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  							// ENDmon MSB
 800097e:	2300      	movs	r3, #0
 8000980:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               						// ENDmon LSB
 8000982:	2300      	movs	r3, #0
 8000984:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);               		// SWP Monitored LSB
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3302      	adds	r3, #2
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);               		// TEMPURATURE 1 LSB
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3302      	adds	r3, #2
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009b2:	2300      	movs	r3, #0
 80009b4:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009b6:	2300      	movs	r3, #0
 80009b8:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009c6:	f107 0108 	add.w	r1, r7, #8
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	220e      	movs	r2, #14
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <send_erpa_packet+0x94>)
 80009d0:	f00c fdca 	bl	800d568 <HAL_UART_Transmit>
	erpa_seq++;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <send_erpa_packet+0x90>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <send_erpa_packet+0x90>)
 80009de:	801a      	strh	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	240005d8 	.word	0x240005d8
 80009ec:	2400049c 	.word	0x2400049c

080009f0 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 80009fc:	23cc      	movs	r3, #204	; 0xcc
 80009fe:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000a00:	23cc      	movs	r3, #204	; 0xcc
 8000a02:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <send_hk_packet+0x20c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000a10:	4b7a      	ldr	r3, [pc, #488]	; (8000bfc <send_hk_packet+0x20c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3302      	adds	r3, #2
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4a:	121b      	asrs	r3, r3, #8
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a62:	121b      	asrs	r3, r3, #8
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3304      	adds	r3, #4
 8000a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7c:	121b      	asrs	r3, r3, #8
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3304      	adds	r3, #4
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3306      	adds	r3, #6
 8000a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3304      	adds	r3, #4
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3306      	adds	r3, #6
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	330c      	adds	r3, #12
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	330c      	adds	r3, #12
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3306      	adds	r3, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	330e      	adds	r3, #14
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	330e      	adds	r3, #14
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3310      	adds	r3, #16
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3310      	adds	r3, #16
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	330a      	adds	r3, #10
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	330a      	adds	r3, #10
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bd8:	f107 0110 	add.w	r1, r7, #16
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	2226      	movs	r2, #38	; 0x26
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <send_hk_packet+0x210>)
 8000be2:	f00c fcc1 	bl	800d568 <HAL_UART_Transmit>
	hk_seq++;
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <send_hk_packet+0x20c>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <send_hk_packet+0x20c>)
 8000bf0:	801a      	strh	r2, [r3, #0]


}
 8000bf2:	bf00      	nop
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240005dc 	.word	0x240005dc
 8000c00:	2400049c 	.word	0x2400049c

08000c04 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000c0c:	23bb      	movs	r3, #187	; 0xbb
 8000c0e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000c10:	23bb      	movs	r3, #187	; 0xbb
 8000c12:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <send_pmt_packet+0x54>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <send_pmt_packet+0x54>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <send_pmt_packet+0x58>)
 8000c3e:	f00c fc93 	bl	800d568 <HAL_UART_Transmit>
	pmt_seq++;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <send_pmt_packet+0x54>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <send_pmt_packet+0x54>)
 8000c4c:	801a      	strh	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240005da 	.word	0x240005da
 8000c5c:	2400049c 	.word	0x2400049c

08000c60 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b0a9      	sub	sp, #164	; 0xa4
 8000c64:	af1e      	add	r7, sp, #120	; 0x78
 8000c66:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d16e      	bne.n	8000d4e <HAL_TIM_OC_DelayElapsedCallback+0xee>
  {
	  FACTOR_COUNTER++;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c78:	6013      	str	r3, [r2, #0]
	  SWP_FACTOR_COUNTER++;
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a49      	ldr	r2, [pc, #292]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000c82:	6013      	str	r3, [r2, #0]
	  int samp_check = SAMPLING_FACTOR;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
	  int fact_check = FACTOR_COUNTER;
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	61fb      	str	r3, [r7, #28]
	  if (FACTOR_COUNTER >= SAMPLING_FACTOR) {
 8000c90:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b45      	ldr	r3, [pc, #276]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	db7c      	blt.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
		  FACTOR_COUNTER = 0;
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		  if (ERPA_ON)
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d035      	beq.n	8000d16 <HAL_TIM_OC_DelayElapsedCallback+0xb6>
		  {

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000caa:	bf00      	nop
 8000cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000cb2:	f006 fd2d 	bl	8007710 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f7      	bne.n	8000cac <HAL_TIM_OC_DelayElapsedCallback+0x4c>

			uint8_t* spi2_results = spi(hspi2);
 8000cbc:	4c3e      	ldr	r4, [pc, #248]	; (8000db8 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000cbe:	4668      	mov	r0, sp
 8000cc0:	f104 0310 	add.w	r3, r4, #16
 8000cc4:	2278      	movs	r2, #120	; 0x78
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f00e ffa0 	bl	800fc0c <memcpy>
 8000ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cd0:	f7ff fd66 	bl	80007a0 <spi>
 8000cd4:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000cd6:	f7ff fdab 	bl	8000830 <erpa_adc>
 8000cda:	6178      	str	r0, [r7, #20]

			if (SWP_FACTOR_COUNTER == (SAMPLING_FACTOR * 2)) {
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	005a      	lsls	r2, r3, #1
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10b      	bne.n	8000d02 <HAL_TIM_OC_DelayElapsedCallback+0xa2>
				if (auto_sweep)
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x98>
				{
					do_auto_sweep();
 8000cf2:	f7ff fd0d 	bl	8000710 <do_auto_sweep>
 8000cf6:	e001      	b.n	8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
				} else {
					set_erpa_sweep();
 8000cf8:	f7ff fd80 	bl	80007fc <set_erpa_sweep>
				}
				SWP_FACTOR_COUNTER = 0;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
			}


			send_erpa_packet(spi2_results, erpa_adc_results);
 8000d02:	6979      	ldr	r1, [r7, #20]
 8000d04:	69b8      	ldr	r0, [r7, #24]
 8000d06:	f7ff fe27 	bl	8000958 <send_erpa_packet>

			free(spi2_results);
 8000d0a:	69b8      	ldr	r0, [r7, #24]
 8000d0c:	f00e ff76 	bl	800fbfc <free>
			free(erpa_adc_results);
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f00e ff73 	bl	800fbfc <free>
		  }
		  if (HK_ON)
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d03b      	beq.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
		  {
			  int16_t *i2c_values = i2c();
 8000d1e:	f7ff fcc3 	bl	80006a8 <i2c>
 8000d22:	6138      	str	r0, [r7, #16]
			  uint16_t* hk_adc1_results = hk_adc1();
 8000d24:	f7ff fda0 	bl	8000868 <hk_adc1>
 8000d28:	60f8      	str	r0, [r7, #12]
			  uint16_t* hk_adc3_results = hk_adc3();
 8000d2a:	f7ff fdeb 	bl	8000904 <hk_adc3>
 8000d2e:	60b8      	str	r0, [r7, #8]


			  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	68f9      	ldr	r1, [r7, #12]
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f7ff fe5b 	bl	80009f0 <send_hk_packet>


			  free(i2c_values);
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f00e ff5e 	bl	800fbfc <free>
			  free(hk_adc1_results);
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f00e ff5b 	bl	800fbfc <free>
			  free(hk_adc3_results);
 8000d46:	68b8      	ldr	r0, [r7, #8]
 8000d48:	f00e ff58 	bl	800fbfc <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d4c:	e023      	b.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
  else if (htim == &htim1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d11f      	bne.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
      if (PMT_ON)
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d01b      	beq.n	8000d96 <HAL_TIM_OC_DelayElapsedCallback+0x136>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d5e:	bf00      	nop
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	4819      	ldr	r0, [pc, #100]	; (8000dcc <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000d66:	f006 fcd3 	bl	8007710 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f7      	bne.n	8000d60 <HAL_TIM_OC_DelayElapsedCallback+0x100>
  		uint8_t* spi1_results = spi(hspi1);
 8000d70:	4c17      	ldr	r4, [pc, #92]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000d72:	4668      	mov	r0, sp
 8000d74:	f104 0310 	add.w	r3, r4, #16
 8000d78:	2278      	movs	r2, #120	; 0x78
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f00e ff46 	bl	800fc0c <memcpy>
 8000d80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d84:	f7ff fd0c 	bl	80007a0 <spi>
 8000d88:	6278      	str	r0, [r7, #36]	; 0x24
  		send_pmt_packet(spi1_results);
 8000d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d8c:	f7ff ff3a 	bl	8000c04 <send_pmt_packet>
		free(spi1_results);
 8000d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d92:	f00e ff33 	bl	800fbfc <free>
}
 8000d96:	bf00      	nop
 8000d98:	372c      	adds	r7, #44	; 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000450 	.word	0x24000450
 8000da4:	240005d0 	.word	0x240005d0
 8000da8:	240005d4 	.word	0x240005d4
 8000dac:	2400002c 	.word	0x2400002c
 8000db0:	240005df 	.word	0x240005df
 8000db4:	58020400 	.word	0x58020400
 8000db8:	2400037c 	.word	0x2400037c
 8000dbc:	240005cc 	.word	0x240005cc
 8000dc0:	240005e0 	.word	0x240005e0
 8000dc4:	24000404 	.word	0x24000404
 8000dc8:	240005de 	.word	0x240005de
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	240002f4 	.word	0x240002f4

08000dd4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	49b6      	ldr	r1, [pc, #728]	; (80010b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8000de0:	48b6      	ldr	r0, [pc, #728]	; (80010bc <HAL_UART_RxCpltCallback+0x2e8>)
 8000de2:	f00c fc57 	bl	800d694 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000de6:	4bb4      	ldr	r3, [pc, #720]	; (80010b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b25      	cmp	r3, #37	; 0x25
 8000df0:	f200 815d 	bhi.w	80010ae <HAL_UART_RxCpltCallback+0x2da>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <HAL_UART_RxCpltCallback+0x28>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000f51 	.word	0x08000f51
 8000e00:	08000f6d 	.word	0x08000f6d
 8000e04:	08000f89 	.word	0x08000f89
 8000e08:	08000fa9 	.word	0x08000fa9
 8000e0c:	08000fc9 	.word	0x08000fc9
 8000e10:	08000fe5 	.word	0x08000fe5
 8000e14:	08001005 	.word	0x08001005
 8000e18:	08001025 	.word	0x08001025
 8000e1c:	080010af 	.word	0x080010af
 8000e20:	080010af 	.word	0x080010af
 8000e24:	08000ea3 	.word	0x08000ea3
 8000e28:	08000e95 	.word	0x08000e95
 8000e2c:	08001041 	.word	0x08001041
 8000e30:	08001051 	.word	0x08001051
 8000e34:	08001071 	.word	0x08001071
 8000e38:	08001091 	.word	0x08001091
 8000e3c:	08001061 	.word	0x08001061
 8000e40:	08001081 	.word	0x08001081
 8000e44:	08001099 	.word	0x08001099
 8000e48:	08000f5f 	.word	0x08000f5f
 8000e4c:	08000f7b 	.word	0x08000f7b
 8000e50:	08000f99 	.word	0x08000f99
 8000e54:	08000fb9 	.word	0x08000fb9
 8000e58:	08000fd7 	.word	0x08000fd7
 8000e5c:	08000ff5 	.word	0x08000ff5
 8000e60:	08001015 	.word	0x08001015
 8000e64:	08001033 	.word	0x08001033
 8000e68:	08000eb1 	.word	0x08000eb1
 8000e6c:	08000ec9 	.word	0x08000ec9
 8000e70:	08000ee1 	.word	0x08000ee1
 8000e74:	080010af 	.word	0x080010af
 8000e78:	080010af 	.word	0x080010af
 8000e7c:	080010af 	.word	0x080010af
 8000e80:	080010af 	.word	0x080010af
 8000e84:	080010af 	.word	0x080010af
 8000e88:	080010af 	.word	0x080010af
 8000e8c:	08000f05 	.word	0x08000f05
 8000e90:	08000f27 	.word	0x08000f27
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e94:	4b8a      	ldr	r3, [pc, #552]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fc50 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000ea0:	e105      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ea2:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fc49 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000eae:	e0fe      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000eb0:	4b84      	ldr	r3, [pc, #528]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	f200 80f3 	bhi.w	80010a0 <HAL_UART_RxCpltCallback+0x2cc>
	  {
		step++;
 8000eba:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000ec6:	e0eb      	b.n	80010a0 <HAL_UART_RxCpltCallback+0x2cc>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ec8:	4b7e      	ldr	r3, [pc, #504]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80e9 	beq.w	80010a4 <HAL_UART_RxCpltCallback+0x2d0>
    {
      step--;
 8000ed2:	4b7c      	ldr	r3, [pc, #496]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b7a      	ldr	r3, [pc, #488]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000edc:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ede:	e0e1      	b.n	80010a4 <HAL_UART_RxCpltCallback+0x2d0>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ee0:	4b79      	ldr	r3, [pc, #484]	; (80010c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d106      	bne.n	8000ef6 <HAL_UART_RxCpltCallback+0x122>
		auto_sweep = 1;
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
		step = 0;
 8000eee:	4b75      	ldr	r3, [pc, #468]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000ef4:	e0db      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
		auto_sweep = 0;
 8000ef6:	4b74      	ldr	r3, [pc, #464]	; (80010c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
		step = 0;
 8000efc:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
  	break;
 8000f02:	e0d4      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
   }
  case 0x24:
  {
	  if (SAMPLING_FACTOR < 32)
 8000f04:	4b71      	ldr	r3, [pc, #452]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b1f      	cmp	r3, #31
 8000f0a:	f300 80cd 	bgt.w	80010a8 <HAL_UART_RxCpltCallback+0x2d4>
	  {
		  SAMPLING_FACTOR *= 2;
 8000f0e:	4b6f      	ldr	r3, [pc, #444]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f16:	6013      	str	r3, [r2, #0]
		  FACTOR_COUNTER = 0;
 8000f18:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f1e:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_UART_RxCpltCallback+0x300>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f24:	e0c0      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2d4>
  }
  case 0x25:
  {
	  if (SAMPLING_FACTOR > 1)
 8000f26:	4b69      	ldr	r3, [pc, #420]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f340 80be 	ble.w	80010ac <HAL_UART_RxCpltCallback+0x2d8>
	  {
		  SAMPLING_FACTOR /= 2;
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da00      	bge.n	8000f3a <HAL_UART_RxCpltCallback+0x166>
 8000f38:	3301      	adds	r3, #1
 8000f3a:	105b      	asrs	r3, r3, #1
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_UART_RxCpltCallback+0x2f8>)
 8000f40:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
		  SWP_FACTOR_COUNTER = 0;
 8000f48:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_UART_RxCpltCallback+0x300>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f4e:	e0ad      	b.n	80010ac <HAL_UART_RxCpltCallback+0x2d8>
  }
  case 0x00:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f50:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f52:	2120      	movs	r1, #32
 8000f54:	2201      	movs	r2, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fbf2 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000f5c:	e0a7      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f5e:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f60:	2120      	movs	r1, #32
 8000f62:	2200      	movs	r2, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f006 fbeb 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000f6a:	e0a0      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x01:
  {

    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	2201      	movs	r2, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fbe4 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000f78:	e099      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f006 fbdd 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000f86:	e092      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f006 fbd5 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000f96:	e08a      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fbcd 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000fa6:	e082      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fbc5 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000fb6:	e07a      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000fb8:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 fbbd 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000fc6:	e072      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fbb6 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000fd4:	e06b      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fd6:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f006 fbaf 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000fe2:	e064      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	2201      	movs	r2, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 fba7 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8000ff2:	e05c      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fb9f 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8001002:	e054      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	2201      	movs	r2, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fb97 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8001012:	e04c      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101a:	2200      	movs	r2, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f006 fb8f 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8001022:	e044      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	2201      	movs	r2, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fb88 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 8001030:	e03d      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_UART_RxCpltCallback+0x304>)
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	2200      	movs	r2, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fb81 	bl	8007740 <HAL_GPIO_WritePin>
    break;
 800103e:	e036      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001040:	f001 fc74 	bl	800292c <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001044:	2101      	movs	r1, #1
 8001046:	2001      	movs	r0, #1
 8001048:	f007 f91e 	bl	8008288 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 800104c:	f7ff fac6 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_UART_RxCpltCallback+0x308>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	4821      	ldr	r0, [pc, #132]	; (80010e0 <HAL_UART_RxCpltCallback+0x30c>)
 800105a:	f00b f885 	bl	800c168 <HAL_TIM_OC_Start_IT>
    break;
 800105e:	e026      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_UART_RxCpltCallback+0x308>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001066:	2100      	movs	r1, #0
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <HAL_UART_RxCpltCallback+0x30c>)
 800106a:	f00b f9d7 	bl	800c41c <HAL_TIM_OC_Stop_IT>

    break;
 800106e:	e01e      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_UART_RxCpltCallback+0x310>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001076:	210c      	movs	r1, #12
 8001078:	481b      	ldr	r0, [pc, #108]	; (80010e8 <HAL_UART_RxCpltCallback+0x314>)
 800107a:	f00b f875 	bl	800c168 <HAL_TIM_OC_Start_IT>
    break;
 800107e:	e016      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_RxCpltCallback+0x310>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001086:	210c      	movs	r1, #12
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_UART_RxCpltCallback+0x314>)
 800108a:	f00b f9c7 	bl	800c41c <HAL_TIM_OC_Stop_IT>

    break;
 800108e:	e00e      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_UART_RxCpltCallback+0x318>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
    break;
 8001096:	e00a      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_UART_RxCpltCallback+0x318>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    break;
 800109e:	e006      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a0:	bf00      	nop
 80010a2:	e004      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
    break;
 80010a4:	bf00      	nop
 80010a6:	e002      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2da>
	  break;
 80010ac:	bf00      	nop
  }
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2400052c 	.word	0x2400052c
 80010bc:	2400049c 	.word	0x2400049c
 80010c0:	58020400 	.word	0x58020400
 80010c4:	240005c8 	.word	0x240005c8
 80010c8:	240005cc 	.word	0x240005cc
 80010cc:	2400002c 	.word	0x2400002c
 80010d0:	240005d0 	.word	0x240005d0
 80010d4:	240005d4 	.word	0x240005d4
 80010d8:	58020800 	.word	0x58020800
 80010dc:	240005de 	.word	0x240005de
 80010e0:	24000404 	.word	0x24000404
 80010e4:	240005df 	.word	0x240005df
 80010e8:	24000450 	.word	0x24000450
 80010ec:	240005e0 	.word	0x240005e0

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 fb64 	bl	80027c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f868 	bl	80011cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010fc:	f000 f8ec 	bl	80012d8 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001100:	f000 fd50 	bl	8001ba4 <MX_GPIO_Init>
   MX_DAC1_Init();
 8001104:	f000 face 	bl	80016a4 <MX_DAC1_Init>
   MX_TIM1_Init();
 8001108:	f000 fbee 	bl	80018e8 <MX_TIM1_Init>
   MX_TIM2_Init();
 800110c:	f000 fc7c 	bl	8001a08 <MX_TIM2_Init>
   MX_I2C1_Init();
 8001110:	f000 fafa 	bl	8001708 <MX_I2C1_Init>
   MX_SPI1_Init();
 8001114:	f000 fb38 	bl	8001788 <MX_SPI1_Init>
   MX_DMA_Init();
 8001118:	f000 fd1c 	bl	8001b54 <MX_DMA_Init>
   MX_ADC1_Init();
 800111c:	f000 f90a 	bl	8001334 <MX_ADC1_Init>
   MX_USART1_UART_Init();
 8001120:	f000 fccc 	bl	8001abc <MX_USART1_UART_Init>
   MX_ADC3_Init();
 8001124:	f000 fa28 	bl	8001578 <MX_ADC3_Init>
   MX_SPI2_Init();
 8001128:	f000 fb86 	bl	8001838 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800112c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001134:	481f      	ldr	r0, [pc, #124]	; (80011b4 <main+0xc4>)
 8001136:	f002 fee5 	bl	8003f04 <HAL_ADCEx_Calibration_Start>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 8001140:	f000 fe16 	bl	8001d70 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 8001144:	220b      	movs	r2, #11
 8001146:	491c      	ldr	r1, [pc, #112]	; (80011b8 <main+0xc8>)
 8001148:	481a      	ldr	r0, [pc, #104]	; (80011b4 <main+0xc4>)
 800114a:	f001 ffd1 	bl	80030f0 <HAL_ADC_Start_DMA>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <main+0x68>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 8001154:	f000 fe0c 	bl	8001d70 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001158:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800115c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <main+0xcc>)
 8001162:	f002 fecf 	bl	8003f04 <HAL_ADCEx_Calibration_Start>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <main+0x80>
  {
	/* Calibration Error */
	Error_Handler();
 800116c:	f000 fe00 	bl	8001d70 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 8001170:	2204      	movs	r2, #4
 8001172:	4913      	ldr	r1, [pc, #76]	; (80011c0 <main+0xd0>)
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <main+0xcc>)
 8001176:	f001 ffbb 	bl	80030f0 <HAL_ADC_Start_DMA>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <main+0x94>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 8001180:	f000 fdf6 	bl	8001d70 <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001184:	bf00      	nop
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <main+0xd4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d0f7      	beq.n	8001186 <main+0x96>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001196:	bf00      	nop
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <main+0xd4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a6:	d1f7      	bne.n	8001198 <main+0xa8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4907      	ldr	r1, [pc, #28]	; (80011c8 <main+0xd8>)
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <main+0xd4>)
 80011ae:	f00c fa71 	bl	800d694 <HAL_UART_Receive_IT>
 80011b2:	e7f9      	b.n	80011a8 <main+0xb8>
 80011b4:	240000dc 	.word	0x240000dc
 80011b8:	240005a0 	.word	0x240005a0
 80011bc:	24000140 	.word	0x24000140
 80011c0:	240005c0 	.word	0x240005c0
 80011c4:	2400049c 	.word	0x2400049c
 80011c8:	2400052c 	.word	0x2400052c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09c      	sub	sp, #112	; 0x70
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	224c      	movs	r2, #76	; 0x4c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00e fd24 	bl	800fc28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00e fd1e 	bl	800fc28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f007 f887 	bl	8008300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <SystemClock_Config+0x100>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <SystemClock_Config+0x100>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <SystemClock_Config+0x100>)
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <SystemClock_Config+0x104>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <SystemClock_Config+0x104>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <SystemClock_Config+0x104>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <SystemClock_Config+0x104>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <SystemClock_Config+0x108>)
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <SystemClock_Config+0x108>)
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001248:	2301      	movs	r3, #1
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124c:	2340      	movs	r3, #64	; 0x40
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800125c:	230c      	movs	r3, #12
 800125e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800126c:	230c      	movs	r3, #12
 800126e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001270:	2300      	movs	r3, #0
 8001272:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4618      	mov	r0, r3
 800127e:	f007 f879 	bl	8008374 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001288:	f000 fd72 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	233f      	movs	r3, #63	; 0x3f
 800128e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2303      	movs	r3, #3
 8001292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f007 fc8b 	bl	8008bd0 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012c0:	f000 fd56 	bl	8001d70 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3770      	adds	r7, #112	; 0x70
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	58000400 	.word	0x58000400
 80012d0:	58024800 	.word	0x58024800
 80012d4:	58024400 	.word	0x58024400

080012d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0b0      	sub	sp, #192	; 0xc0
 80012dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	22bc      	movs	r2, #188	; 0xbc
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00e fc9f 	bl	800fc28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ee:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012f4:	2309      	movs	r3, #9
 80012f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001308:	2320      	movs	r3, #32
 800130a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800130c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f007 ffe4 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001326:	f000 fd23 	bl	8001d70 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	37c0      	adds	r7, #192	; 0xc0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001358:	4b7a      	ldr	r3, [pc, #488]	; (8001544 <MX_ADC1_Init+0x210>)
 800135a:	4a7b      	ldr	r2, [pc, #492]	; (8001548 <MX_ADC1_Init+0x214>)
 800135c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800135e:	4b79      	ldr	r3, [pc, #484]	; (8001544 <MX_ADC1_Init+0x210>)
 8001360:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001366:	4b77      	ldr	r3, [pc, #476]	; (8001544 <MX_ADC1_Init+0x210>)
 8001368:	2208      	movs	r2, #8
 800136a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800136c:	4b75      	ldr	r3, [pc, #468]	; (8001544 <MX_ADC1_Init+0x210>)
 800136e:	2201      	movs	r2, #1
 8001370:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001372:	4b74      	ldr	r3, [pc, #464]	; (8001544 <MX_ADC1_Init+0x210>)
 8001374:	2204      	movs	r2, #4
 8001376:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001378:	4b72      	ldr	r3, [pc, #456]	; (8001544 <MX_ADC1_Init+0x210>)
 800137a:	2200      	movs	r2, #0
 800137c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800137e:	4b71      	ldr	r3, [pc, #452]	; (8001544 <MX_ADC1_Init+0x210>)
 8001380:	2201      	movs	r2, #1
 8001382:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001384:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <MX_ADC1_Init+0x210>)
 8001386:	220b      	movs	r2, #11
 8001388:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b6e      	ldr	r3, [pc, #440]	; (8001544 <MX_ADC1_Init+0x210>)
 800138c:	2200      	movs	r2, #0
 800138e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001390:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <MX_ADC1_Init+0x210>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001396:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <MX_ADC1_Init+0x210>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <MX_ADC1_Init+0x210>)
 800139e:	2203      	movs	r2, #3
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013a2:	4b68      	ldr	r3, [pc, #416]	; (8001544 <MX_ADC1_Init+0x210>)
 80013a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <MX_ADC1_Init+0x210>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <MX_ADC1_Init+0x210>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	4862      	ldr	r0, [pc, #392]	; (8001544 <MX_ADC1_Init+0x210>)
 80013ba:	f001 fcf7 	bl	8002dac <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013c4:	f000 fcd4 	bl	8001d70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	485c      	ldr	r0, [pc, #368]	; (8001544 <MX_ADC1_Init+0x210>)
 80013d4:	f002 fdfa 	bl	8003fcc <HAL_ADCEx_MultiModeConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80013de:	f000 fcc7 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <MX_ADC1_Init+0x218>)
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e6:	2306      	movs	r3, #6
 80013e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80013ea:	2307      	movs	r3, #7
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013f4:	2304      	movs	r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	484f      	ldr	r0, [pc, #316]	; (8001544 <MX_ADC1_Init+0x210>)
 8001406:	f001 ff4b 	bl	80032a0 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001410:	f000 fcae 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001414:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <MX_ADC1_Init+0x21c>)
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001418:	230c      	movs	r3, #12
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4848      	ldr	r0, [pc, #288]	; (8001544 <MX_ADC1_Init+0x210>)
 8001422:	f001 ff3d 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800142c:	f000 fca0 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <MX_ADC1_Init+0x220>)
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001434:	2312      	movs	r3, #18
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4841      	ldr	r0, [pc, #260]	; (8001544 <MX_ADC1_Init+0x210>)
 800143e:	f001 ff2f 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001448:	f000 fc92 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <MX_ADC1_Init+0x224>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001450:	2318      	movs	r3, #24
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	483a      	ldr	r0, [pc, #232]	; (8001544 <MX_ADC1_Init+0x210>)
 800145a:	f001 ff21 	bl	80032a0 <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001464:	f000 fc84 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001468:	4b3c      	ldr	r3, [pc, #240]	; (800155c <MX_ADC1_Init+0x228>)
 800146a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800146c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001470:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	4619      	mov	r1, r3
 8001476:	4833      	ldr	r0, [pc, #204]	; (8001544 <MX_ADC1_Init+0x210>)
 8001478:	f001 ff12 	bl	80032a0 <HAL_ADC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001482:	f000 fc75 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <MX_ADC1_Init+0x22c>)
 8001488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800148a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800148e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	482b      	ldr	r0, [pc, #172]	; (8001544 <MX_ADC1_Init+0x210>)
 8001496:	f001 ff03 	bl	80032a0 <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80014a0:	f000 fc66 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_ADC1_Init+0x230>)
 80014a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014a8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	4824      	ldr	r0, [pc, #144]	; (8001544 <MX_ADC1_Init+0x210>)
 80014b4:	f001 fef4 	bl	80032a0 <HAL_ADC_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80014be:	f000 fc57 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <MX_ADC1_Init+0x234>)
 80014c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014c6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80014ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	481c      	ldr	r0, [pc, #112]	; (8001544 <MX_ADC1_Init+0x210>)
 80014d2:	f001 fee5 	bl	80032a0 <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80014dc:	f000 fc48 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_ADC1_Init+0x238>)
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80014e4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80014e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4815      	ldr	r0, [pc, #84]	; (8001544 <MX_ADC1_Init+0x210>)
 80014f0:	f001 fed6 	bl	80032a0 <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80014fa:	f000 fc39 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_ADC1_Init+0x23c>)
 8001500:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_ADC1_Init+0x210>)
 800150e:	f001 fec7 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001518:	f000 fc2a 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_ADC1_Init+0x240>)
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001520:	f240 2306 	movw	r3, #518	; 0x206
 8001524:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_ADC1_Init+0x210>)
 800152c:	f001 feb8 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001536:	f000 fc1b 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	240000dc 	.word	0x240000dc
 8001548:	40022000 	.word	0x40022000
 800154c:	0c900008 	.word	0x0c900008
 8001550:	10c00010 	.word	0x10c00010
 8001554:	14f00020 	.word	0x14f00020
 8001558:	1d500080 	.word	0x1d500080
 800155c:	21800100 	.word	0x21800100
 8001560:	25b00200 	.word	0x25b00200
 8001564:	2a000400 	.word	0x2a000400
 8001568:	2e300800 	.word	0x2e300800
 800156c:	3ac04000 	.word	0x3ac04000
 8001570:	3ef08000 	.word	0x3ef08000
 8001574:	47520000 	.word	0x47520000

08001578 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001590:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <MX_ADC3_Init+0x118>)
 8001592:	4a40      	ldr	r2, [pc, #256]	; (8001694 <MX_ADC3_Init+0x11c>)
 8001594:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <MX_ADC3_Init+0x118>)
 8001598:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800159c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <MX_ADC3_Init+0x118>)
 80015a0:	2208      	movs	r2, #8
 80015a2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <MX_ADC3_Init+0x118>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <MX_ADC3_Init+0x118>)
 80015ac:	2204      	movs	r2, #4
 80015ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MX_ADC3_Init+0x118>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <MX_ADC3_Init+0x118>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <MX_ADC3_Init+0x118>)
 80015be:	2204      	movs	r2, #4
 80015c0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <MX_ADC3_Init+0x118>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <MX_ADC3_Init+0x118>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_ADC3_Init+0x118>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_ADC3_Init+0x118>)
 80015d6:	2203      	movs	r2, #3
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_ADC3_Init+0x118>)
 80015dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_ADC3_Init+0x118>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_ADC3_Init+0x118>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015f0:	4827      	ldr	r0, [pc, #156]	; (8001690 <MX_ADC3_Init+0x118>)
 80015f2:	f001 fbdb 	bl	8002dac <HAL_ADC_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 80015fc:	f000 fbb8 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_ADC3_Init+0x120>)
 8001602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001604:	2306      	movs	r3, #6
 8001606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001608:	2307      	movs	r3, #7
 800160a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800160c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001610:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001612:	2304      	movs	r3, #4
 8001614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	481b      	ldr	r0, [pc, #108]	; (8001690 <MX_ADC3_Init+0x118>)
 8001624:	f001 fe3c 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800162e:	f000 fb9f 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_ADC3_Init+0x124>)
 8001634:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001636:	230c      	movs	r3, #12
 8001638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_ADC3_Init+0x118>)
 8001640:	f001 fe2e 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 800164a:	f000 fb91 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800164e:	2301      	movs	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001652:	2312      	movs	r3, #18
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_ADC3_Init+0x118>)
 800165c:	f001 fe20 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 8001666:	f000 fb83 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_ADC3_Init+0x128>)
 800166c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800166e:	2318      	movs	r3, #24
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_ADC3_Init+0x118>)
 8001678:	f001 fe12 	bl	80032a0 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001682:	f000 fb75 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	24000140 	.word	0x24000140
 8001694:	58026000 	.word	0x58026000
 8001698:	cb840000 	.word	0xcb840000
 800169c:	cfb80000 	.word	0xcfb80000
 80016a0:	04300002 	.word	0x04300002

080016a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2224      	movs	r2, #36	; 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00e fab9 	bl	800fc28 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_DAC1_Init+0x5c>)
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_DAC1_Init+0x60>)
 80016ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <MX_DAC1_Init+0x5c>)
 80016be:	f002 fe72 	bl	80043a6 <HAL_DAC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016c8:	f000 fb52 	bl	8001d70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_DAC1_Init+0x5c>)
 80016e8:	f002 fef6 	bl	80044d8 <HAL_DAC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016f2:	f000 fb3d 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000294 	.word	0x24000294
 8001704:	40007400 	.word	0x40007400

08001708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_I2C1_Init+0x74>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <MX_I2C1_Init+0x78>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_I2C1_Init+0x74>)
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <MX_I2C1_Init+0x7c>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_I2C1_Init+0x74>)
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_I2C1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_I2C1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001742:	480e      	ldr	r0, [pc, #56]	; (800177c <MX_I2C1_Init+0x74>)
 8001744:	f006 f816 	bl	8007774 <HAL_I2C_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800174e:	f000 fb0f 	bl	8001d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4809      	ldr	r0, [pc, #36]	; (800177c <MX_I2C1_Init+0x74>)
 8001756:	f006 fcff 	bl	8008158 <HAL_I2CEx_ConfigAnalogFilter>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001760:	f000 fb06 	bl	8001d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_I2C1_Init+0x74>)
 8001768:	f006 fd41 	bl	80081ee <HAL_I2CEx_ConfigDigitalFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 fafd 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	240002a8 	.word	0x240002a8
 8001780:	40005400 	.word	0x40005400
 8001784:	00506682 	.word	0x00506682

08001788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <MX_SPI1_Init+0xa8>)
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <MX_SPI1_Init+0xac>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_SPI1_Init+0xa8>)
 800179c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017a4:	220f      	movs	r2, #15
 80017a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_SPI1_Init+0xa8>)
 800181c:	f009 fef0 	bl	800b600 <HAL_SPI_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001826:	f000 faa3 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240002f4 	.word	0x240002f4
 8001834:	40013000 	.word	0x40013000

08001838 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <MX_SPI2_Init+0xac>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001848:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800184c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001850:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001854:	220f      	movs	r2, #15
 8001856:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001866:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800186a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800186e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800188e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018cc:	f009 fe98 	bl	800b600 <HAL_SPI_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018d6:	f000 fa4b 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2400037c 	.word	0x2400037c
 80018e4:	40003800 	.word	0x40003800

080018e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b096      	sub	sp, #88	; 0x58
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	222c      	movs	r2, #44	; 0x2c
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f00e f987 	bl	800fc28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191a:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <MX_TIM1_Init+0x118>)
 800191c:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <MX_TIM1_Init+0x11c>)
 800191e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001920:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <MX_TIM1_Init+0x118>)
 8001922:	2263      	movs	r2, #99	; 0x63
 8001924:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <MX_TIM1_Init+0x118>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <MX_TIM1_Init+0x118>)
 800192e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001932:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <MX_TIM1_Init+0x118>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193a:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <MX_TIM1_Init+0x118>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <MX_TIM1_Init+0x118>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001946:	482e      	ldr	r0, [pc, #184]	; (8001a00 <MX_TIM1_Init+0x118>)
 8001948:	f00a fe4c 	bl	800c5e4 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001952:	f000 fa0d 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001962:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001966:	4619      	mov	r1, r3
 8001968:	4825      	ldr	r0, [pc, #148]	; (8001a00 <MX_TIM1_Init+0x118>)
 800196a:	f00b fc83 	bl	800d274 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001974:	f000 f9fc 	bl	8001d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001978:	2360      	movs	r3, #96	; 0x60
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 - 1;
 800197c:	f240 13df 	movw	r3, #479	; 0x1df
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_TIM1_Init+0x118>)
 80019a0:	f00a ff96 	bl	800c8d0 <HAL_TIM_PWM_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019aa:	f000 f9e1 	bl	8001d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM1_Init+0x118>)
 80019e4:	f00b fcd4 	bl	800d390 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80019ee:	f000 f9bf 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM1_Init+0x118>)
 80019f4:	f000 fcb0 	bl	8002358 <HAL_TIM_MspPostInit>

}
 80019f8:	bf00      	nop
 80019fa:	3758      	adds	r7, #88	; 0x58
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000404 	.word	0x24000404
 8001a04:	40010000 	.word	0x40010000

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150 - 1;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a44:	2295      	movs	r2, #149	; 0x95
 8001a46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a54:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a56:	f00a fdc5 	bl	800c5e4 <HAL_TIM_PWM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a60:	f000 f986 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a74:	f00b fbfe 	bl	800d274 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a7e:	f000 f977 	bl	8001d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a82:	2360      	movs	r3, #96	; 0x60
 8001a84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30 - 1;
 8001a86:	231d      	movs	r3, #29
 8001a88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	220c      	movs	r2, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001a9a:	f00a ff19 	bl	800c8d0 <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001aa4:	f000 f964 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <MX_TIM2_Init+0xb0>)
 8001aaa:	f000 fc55 	bl	8002358 <HAL_TIM_MspPostInit>

}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	24000450 	.word	0x24000450

08001abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ac2:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <MX_USART1_UART_Init+0x94>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ac8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b06:	f00b fcdf 	bl	800d4c8 <HAL_UART_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b10:	f000 f92e 	bl	8001d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b18:	f00d ff73 	bl	800fa02 <HAL_UARTEx_SetTxFifoThreshold>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b22:	f000 f925 	bl	8001d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b2a:	f00d ffa8 	bl	800fa7e <HAL_UARTEx_SetRxFifoThreshold>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b34:	f000 f91c 	bl	8001d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b3a:	f00d ff29 	bl	800f990 <HAL_UARTEx_DisableFifoMode>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b44:	f000 f914 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2400049c 	.word	0x2400049c
 8001b50:	40011000 	.word	0x40011000

08001b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_DMA_Init+0x4c>)
 8001b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <MX_DMA_Init+0x4c>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_DMA_Init+0x4c>)
 8001b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	200b      	movs	r0, #11
 8001b7e:	f002 fbde 	bl	800433e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b82:	200b      	movs	r0, #11
 8001b84:	f002 fbf5 	bl	8004372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	200c      	movs	r0, #12
 8001b8e:	f002 fbd6 	bl	800433e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b92:	200c      	movs	r0, #12
 8001b94:	f002 fbed 	bl	8004372 <HAL_NVIC_EnableIRQ>

}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58024400 	.word	0x58024400

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_GPIO_Init+0xe8>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c38:	4815      	ldr	r0, [pc, #84]	; (8001c90 <MX_GPIO_Init+0xec>)
 8001c3a:	f005 fd81 	bl	8007740 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2164      	movs	r1, #100	; 0x64
 8001c42:	4814      	ldr	r0, [pc, #80]	; (8001c94 <MX_GPIO_Init+0xf0>)
 8001c44:	f005 fd7c 	bl	8007740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c48:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <MX_GPIO_Init+0xec>)
 8001c62:	f005 fba5 	bl	80073b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c66:	2364      	movs	r3, #100	; 0x64
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_GPIO_Init+0xf0>)
 8001c7e:	f005 fb97 	bl	80073b0 <HAL_GPIO_Init>

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58020800 	.word	0x58020800
 8001c94:	58020400 	.word	0x58020400

08001c98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b08b      	sub	sp, #44	; 0x2c
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <HAL_ADC_ConvCpltCallback+0xc4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d125      	bne.n	8001cf4 <HAL_ADC_ConvCpltCallback+0x5c>
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	230b      	movs	r3, #11
 8001cae:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	dd48      	ble.n	8001d48 <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc6:	f3bf 8f4f 	dsb	sy
}
 8001cca:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ccc:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	3320      	adds	r3, #32
 8001cd8:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b20      	subs	r3, #32
 8001cde:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dcf2      	bgt.n	8001ccc <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce6:	f3bf 8f4f 	dsb	sy
}
 8001cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cec:	f3bf 8f6f 	isb	sy
}
 8001cf0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001cf2:	e029      	b.n	8001d48 <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d128      	bne.n	8001d4e <HAL_ADC_ConvCpltCallback+0xb6>
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	2304      	movs	r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dd20      	ble.n	8001d4c <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1a:	f3bf 8f4f 	dsb	sy
}
 8001d1e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	3320      	adds	r3, #32
 8001d2c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b20      	subs	r3, #32
 8001d32:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dcf2      	bgt.n	8001d20 <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3a:	f3bf 8f4f 	dsb	sy
}
 8001d3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d40:	f3bf 8f6f 	isb	sy
}
 8001d44:	bf00      	nop
}
 8001d46:	e001      	b.n	8001d4c <HAL_ADC_ConvCpltCallback+0xb4>
 8001d48:	bf00      	nop
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_ConvCpltCallback+0xb6>
 8001d4c:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001d4e:	bf00      	nop
 8001d50:	372c      	adds	r7, #44	; 0x2c
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	240000dc 	.word	0x240000dc
 8001d60:	240005aa 	.word	0x240005aa
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	24000140 	.word	0x24000140
 8001d6c:	240005c4 	.word	0x240005c4

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>
	...

08001d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_MspInit+0x30>)
 8001d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d88:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x30>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x30>)
 8001d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	58024400 	.word	0x58024400

08001db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	; 0x38
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a7b      	ldr	r2, [pc, #492]	; (8001fbc <HAL_ADC_MspInit+0x20c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f040 8091 	bne.w	8001ef6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dd4:	4b7a      	ldr	r3, [pc, #488]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dda:	4a79      	ldr	r2, [pc, #484]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001de4:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	4a71      	ldr	r2, [pc, #452]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e02:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e20:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	4a62      	ldr	r2, [pc, #392]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3e:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e4c:	2333      	movs	r3, #51	; 0x33
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e50:	2303      	movs	r3, #3
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4859      	ldr	r0, [pc, #356]	; (8001fc4 <HAL_ADC_MspInit+0x214>)
 8001e60:	f005 faa6 	bl	80073b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001e64:	23ce      	movs	r3, #206	; 0xce
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4854      	ldr	r0, [pc, #336]	; (8001fc8 <HAL_ADC_MspInit+0x218>)
 8001e78:	f005 fa9a 	bl	80073b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	484f      	ldr	r0, [pc, #316]	; (8001fcc <HAL_ADC_MspInit+0x21c>)
 8001e90:	f005 fa8e 	bl	80073b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e94:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001e96:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_ADC_MspInit+0x224>)
 8001e98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001e9c:	2209      	movs	r2, #9
 8001e9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ebc:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec4:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ed8:	483d      	ldr	r0, [pc, #244]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001eda:	f002 fc2d 	bl	8004738 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001ee4:	f7ff ff44 	bl	8001d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eee:	4a38      	ldr	r2, [pc, #224]	; (8001fd0 <HAL_ADC_MspInit+0x220>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ef4:	e05e      	b.n	8001fb4 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <HAL_ADC_MspInit+0x228>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d159      	bne.n	8001fb4 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	4a2e      	ldr	r2, [pc, #184]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_ADC_MspInit+0x210>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f3c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f40:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f44:	f000 fd0e 	bl	8002964 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f4c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f50:	f000 fd08 	bl	8002964 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_ADC_MspInit+0x230>)
 8001f58:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f5c:	2273      	movs	r2, #115	; 0x73
 8001f5e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f72:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f82:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f98:	4810      	ldr	r0, [pc, #64]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001f9a:	f002 fbcd 	bl	8004738 <HAL_DMA_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001fa4:	f7ff fee4 	bl	8001d70 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001fac:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_ADC_MspInit+0x22c>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fb4:	bf00      	nop
 8001fb6:	3738      	adds	r7, #56	; 0x38
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	58024400 	.word	0x58024400
 8001fc4:	58020800 	.word	0x58020800
 8001fc8:	58020000 	.word	0x58020000
 8001fcc:	58020400 	.word	0x58020400
 8001fd0:	240001a4 	.word	0x240001a4
 8001fd4:	40020010 	.word	0x40020010
 8001fd8:	58026000 	.word	0x58026000
 8001fdc:	2400021c 	.word	0x2400021c
 8001fe0:	40020028 	.word	0x40020028

08001fe4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_DAC_MspInit+0x80>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d129      	bne.n	800205a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_DAC_MspInit+0x84>)
 8002008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800200c:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_DAC_MspInit+0x84>)
 800200e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002012:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_DAC_MspInit+0x84>)
 8002018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_DAC_MspInit+0x84>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_DAC_MspInit+0x84>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_DAC_MspInit+0x84>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002042:	2310      	movs	r3, #16
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002046:	2303      	movs	r3, #3
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_DAC_MspInit+0x88>)
 8002056:	f005 f9ab 	bl	80073b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40007400 	.word	0x40007400
 8002068:	58024400 	.word	0x58024400
 800206c:	58020000 	.word	0x58020000

08002070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0b8      	sub	sp, #224	; 0xe0
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	22bc      	movs	r2, #188	; 0xbc
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f00d fdc9 	bl	800fc28 <memset>
  if(hi2c->Instance==I2C1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_I2C_MspInit+0xc0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d142      	bne.n	8002126 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020a0:	2308      	movs	r3, #8
 80020a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f007 f91a 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020ba:	f7ff fe59 	bl	8001d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_I2C_MspInit+0xc4>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_I2C_MspInit+0xc4>)
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_I2C_MspInit+0xc4>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e4:	2312      	movs	r3, #18
 80020e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f6:	2304      	movs	r3, #4
 80020f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002100:	4619      	mov	r1, r3
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <HAL_I2C_MspInit+0xc8>)
 8002104:	f005 f954 	bl	80073b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_I2C_MspInit+0xc4>)
 800210a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_I2C_MspInit+0xc4>)
 8002110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_I2C_MspInit+0xc4>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	37e0      	adds	r7, #224	; 0xe0
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40005400 	.word	0x40005400
 8002134:	58024400 	.word	0x58024400
 8002138:	58020400 	.word	0x58020400

0800213c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0ba      	sub	sp, #232	; 0xe8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	22bc      	movs	r2, #188	; 0xbc
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f00d fd63 	bl	800fc28 <memset>
  if(hspi->Instance==SPI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a49      	ldr	r2, [pc, #292]	; (800228c <HAL_SPI_MspInit+0x150>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d142      	bne.n	80021f2 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800216c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002170:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002172:	2300      	movs	r3, #0
 8002174:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 0318 	add.w	r3, r7, #24
 800217a:	4618      	mov	r0, r3
 800217c:	f007 f8b4 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002186:	f7ff fdf3 	bl	8001d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_SPI_MspInit+0x154>)
 800218c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <HAL_SPI_MspInit+0x154>)
 8002192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002196:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_SPI_MspInit+0x154>)
 800219c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_SPI_MspInit+0x154>)
 80021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ae:	4a38      	ldr	r2, [pc, #224]	; (8002290 <HAL_SPI_MspInit+0x154>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_SPI_MspInit+0x154>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80021c6:	2318      	movs	r3, #24
 80021c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021de:	2305      	movs	r3, #5
 80021e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021e8:	4619      	mov	r1, r3
 80021ea:	482a      	ldr	r0, [pc, #168]	; (8002294 <HAL_SPI_MspInit+0x158>)
 80021ec:	f005 f8e0 	bl	80073b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021f0:	e047      	b.n	8002282 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <HAL_SPI_MspInit+0x15c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d142      	bne.n	8002282 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002200:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002202:	2300      	movs	r3, #0
 8002204:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	4618      	mov	r0, r3
 800220c:	f007 f86c 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002216:	f7ff fdab 	bl	8001d70 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_SPI_MspInit+0x154>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_SPI_MspInit+0x154>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_SPI_MspInit+0x154>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_SPI_MspInit+0x154>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_SPI_MspInit+0x154>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_SPI_MspInit+0x154>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002256:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800225a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002270:	2305      	movs	r3, #5
 8002272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <HAL_SPI_MspInit+0x158>)
 800227e:	f005 f897 	bl	80073b0 <HAL_GPIO_Init>
}
 8002282:	bf00      	nop
 8002284:	37e8      	adds	r7, #232	; 0xe8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40013000 	.word	0x40013000
 8002290:	58024400 	.word	0x58024400
 8002294:	58020400 	.word	0x58020400
 8002298:	40003800 	.word	0x40003800

0800229c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a29      	ldr	r2, [pc, #164]	; (8002350 <HAL_TIM_PWM_MspInit+0xb4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12f      	bne.n	800230e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_TIM_PWM_MspInit+0xb8>)
 80022b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_TIM_PWM_MspInit+0xb8>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_TIM_PWM_MspInit+0xb8>)
 80022c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2018      	movs	r0, #24
 80022d2:	f002 f834 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022d6:	2018      	movs	r0, #24
 80022d8:	f002 f84b 	bl	8004372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2019      	movs	r0, #25
 80022e2:	f002 f82c 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022e6:	2019      	movs	r0, #25
 80022e8:	f002 f843 	bl	8004372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	201a      	movs	r0, #26
 80022f2:	f002 f824 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022f6:	201a      	movs	r0, #26
 80022f8:	f002 f83b 	bl	8004372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	201b      	movs	r0, #27
 8002302:	f002 f81c 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002306:	201b      	movs	r0, #27
 8002308:	f002 f833 	bl	8004372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800230c:	e01b      	b.n	8002346 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002316:	d116      	bne.n	8002346 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_TIM_PWM_MspInit+0xb8>)
 800231a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800231e:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_TIM_PWM_MspInit+0xb8>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_TIM_PWM_MspInit+0xb8>)
 800232a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2101      	movs	r1, #1
 800233a:	201c      	movs	r0, #28
 800233c:	f001 ffff 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002340:	201c      	movs	r0, #28
 8002342:	f002 f816 	bl	8004372 <HAL_NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	58024400 	.word	0x58024400

08002358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_TIM_MspPostInit+0xb8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d120      	bne.n	80023bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002380:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4818      	ldr	r0, [pc, #96]	; (8002418 <HAL_TIM_MspPostInit+0xc0>)
 80023b6:	f004 fffb 	bl	80073b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023ba:	e024      	b.n	8002406 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d11f      	bne.n	8002406 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_TIM_MspPostInit+0xbc>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023f6:	2301      	movs	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4806      	ldr	r0, [pc, #24]	; (800241c <HAL_TIM_MspPostInit+0xc4>)
 8002402:	f004 ffd5 	bl	80073b0 <HAL_GPIO_Init>
}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	58024400 	.word	0x58024400
 8002418:	58020000 	.word	0x58020000
 800241c:	58020400 	.word	0x58020400

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0b8      	sub	sp, #224	; 0xe0
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	22bc      	movs	r2, #188	; 0xbc
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f00d fbf1 	bl	800fc28 <memset>
  if(huart->Instance==USART1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_UART_MspInit+0xd0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d14a      	bne.n	80024e6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4618      	mov	r0, r3
 8002460:	f006 ff42 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800246a:	f7ff fc81 	bl	8001d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_UART_MspInit+0xd4>)
 8002470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_UART_MspInit+0xd4>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_UART_MspInit+0xd4>)
 8002480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_UART_MspInit+0xd4>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002492:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_UART_MspInit+0xd4>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_UART_MspInit+0xd4>)
 800249e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024c4:	2307      	movs	r3, #7
 80024c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ce:	4619      	mov	r1, r3
 80024d0:	4809      	ldr	r0, [pc, #36]	; (80024f8 <HAL_UART_MspInit+0xd8>)
 80024d2:	f004 ff6d 	bl	80073b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2025      	movs	r0, #37	; 0x25
 80024dc:	f001 ff2f 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024e0:	2025      	movs	r0, #37	; 0x25
 80024e2:	f001 ff46 	bl	8004372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024e6:	bf00      	nop
 80024e8:	37e0      	adds	r7, #224	; 0xe0
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40011000 	.word	0x40011000
 80024f4:	58024400 	.word	0x58024400
 80024f8:	58020000 	.word	0x58020000

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <NMI_Handler+0x4>

08002502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <MemManage_Handler+0x4>

0800250e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <BusFault_Handler+0x4>

08002514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <UsageFault_Handler+0x4>

0800251a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002548:	f000 f9ac 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA1_Stream0_IRQHandler+0x10>)
 8002556:	f003 fc19 	bl	8005d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	240001a4 	.word	0x240001a4

08002564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA1_Stream1_IRQHandler+0x10>)
 800256a:	f003 fc0f 	bl	8005d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2400021c 	.word	0x2400021c

08002578 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM1_BRK_IRQHandler+0x10>)
 800257e:	f00a f888 	bl	800c692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24000404 	.word	0x24000404

0800258c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM1_UP_IRQHandler+0x10>)
 8002592:	f00a f87e 	bl	800c692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	24000404 	.word	0x24000404

080025a0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80025a6:	f00a f874 	bl	800c692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	24000404 	.word	0x24000404

080025b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM1_CC_IRQHandler+0x10>)
 80025ba:	f00a f86a 	bl	800c692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	24000404 	.word	0x24000404

080025c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM2_IRQHandler+0x10>)
 80025ce:	f00a f860 	bl	800c692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	24000450 	.word	0x24000450

080025dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <USART1_IRQHandler+0x10>)
 80025e2:	f00b f8ad 	bl	800d740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2400049c 	.word	0x2400049c

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f00d faba 	bl	800fb98 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	24080000 	.word	0x24080000
 8002650:	00000400 	.word	0x00000400
 8002654:	240005e4 	.word	0x240005e4
 8002658:	24000600 	.word	0x24000600

0800265c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <SystemInit+0xe4>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	4a36      	ldr	r2, [pc, #216]	; (8002740 <SystemInit+0xe4>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <SystemInit+0xe8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	2b06      	cmp	r3, #6
 800267a:	d807      	bhi.n	800268c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <SystemInit+0xe8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 030f 	bic.w	r3, r3, #15
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <SystemInit+0xe8>)
 8002686:	f043 0307 	orr.w	r3, r3, #7
 800268a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <SystemInit+0xec>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <SystemInit+0xec>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <SystemInit+0xec>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <SystemInit+0xec>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4929      	ldr	r1, [pc, #164]	; (8002748 <SystemInit+0xec>)
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <SystemInit+0xf0>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <SystemInit+0xe8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <SystemInit+0xe8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 030f 	bic.w	r3, r3, #15
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <SystemInit+0xe8>)
 80026c0:	f043 0307 	orr.w	r3, r3, #7
 80026c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <SystemInit+0xec>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <SystemInit+0xec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <SystemInit+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <SystemInit+0xec>)
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <SystemInit+0xf4>)
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <SystemInit+0xec>)
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <SystemInit+0xf8>)
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <SystemInit+0xec>)
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <SystemInit+0xfc>)
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <SystemInit+0xec>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <SystemInit+0xec>)
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <SystemInit+0xfc>)
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <SystemInit+0xec>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <SystemInit+0xec>)
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <SystemInit+0xfc>)
 8002700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <SystemInit+0xec>)
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <SystemInit+0xec>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <SystemInit+0xec>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <SystemInit+0xec>)
 8002716:	2200      	movs	r2, #0
 8002718:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <SystemInit+0x100>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <SystemInit+0x104>)
 8002720:	4013      	ands	r3, r2
 8002722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002726:	d202      	bcs.n	800272e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <SystemInit+0x108>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <SystemInit+0x10c>)
 8002730:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002734:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00
 8002744:	52002000 	.word	0x52002000
 8002748:	58024400 	.word	0x58024400
 800274c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002750:	02020200 	.word	0x02020200
 8002754:	01ff0000 	.word	0x01ff0000
 8002758:	01010280 	.word	0x01010280
 800275c:	5c001000 	.word	0x5c001000
 8002760:	ffff0000 	.word	0xffff0000
 8002764:	51008108 	.word	0x51008108
 8002768:	52004000 	.word	0x52004000

0800276c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800276c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002770:	f7ff ff74 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002776:	490d      	ldr	r1, [pc, #52]	; (80027ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800278c:	4c0a      	ldr	r4, [pc, #40]	; (80027b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279a:	f00d fa03 	bl	800fba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279e:	f7fe fca7 	bl	80010f0 <main>
  bx  lr
 80027a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80027a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027ac:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 80027b0:	0800feb4 	.word	0x0800feb4
  ldr r2, =_sbss
 80027b4:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 80027b8:	240005fc 	.word	0x240005fc

080027bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC3_IRQHandler>
	...

080027c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c6:	2003      	movs	r0, #3
 80027c8:	f001 fdae 	bl	8004328 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027cc:	f006 fbb6 	bl	8008f3c <HAL_RCC_GetSysClockFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_Init+0x68>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	4913      	ldr	r1, [pc, #76]	; (800282c <HAL_Init+0x6c>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_Init+0x68>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_Init+0x6c>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_Init+0x70>)
 8002802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <HAL_Init+0x74>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800280a:	200f      	movs	r0, #15
 800280c:	f000 f814 	bl	8002838 <HAL_InitTick>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e002      	b.n	8002820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800281a:	f7ff faaf 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	58024400 	.word	0x58024400
 800282c:	0800fe64 	.word	0x0800fe64
 8002830:	24000034 	.word	0x24000034
 8002834:	24000030 	.word	0x24000030

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_InitTick+0x60>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e021      	b.n	8002890 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_InitTick+0x64>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_InitTick+0x60>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fd93 	bl	800438e <HAL_SYSTICK_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00e      	b.n	8002890 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d80a      	bhi.n	800288e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002880:	f001 fd5d 	bl	800433e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002884:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <HAL_InitTick+0x68>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2400003c 	.word	0x2400003c
 800289c:	24000030 	.word	0x24000030
 80028a0:	24000038 	.word	0x24000038

080028a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	2400003c 	.word	0x2400003c
 80028c8:	240005e8 	.word	0x240005e8

080028cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	240005e8 	.word	0x240005e8

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2400003c 	.word	0x2400003c

0800292c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_SuspendTick+0x1c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_SuspendTick+0x1c>)
 8002936:	f023 0302 	bic.w	r3, r3, #2
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_GetREVID+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0c1b      	lsrs	r3, r3, #16
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	5c001000 	.word	0x5c001000

08002964 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	4904      	ldr	r1, [pc, #16]	; (800298c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	58000400 	.word	0x58000400

08002990 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
  }
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3330      	adds	r3, #48	; 0x30
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	4413      	add	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	211f      	movs	r1, #31
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 011f 	and.w	r1, r3, #31
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f023 0203 	bic.w	r2, r3, #3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3314      	adds	r3, #20
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0e5b      	lsrs	r3, r3, #25
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	0d1b      	lsrs	r3, r3, #20
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2107      	movs	r1, #7
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0d1b      	lsrs	r3, r3, #20
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0318 	and.w	r3, r3, #24
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bc0:	40d9      	lsrs	r1, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	000fffff 	.word	0x000fffff

08002be4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6093      	str	r3, [r2, #8]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	5fffffc0 	.word	0x5fffffc0

08002c24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	6fffffc0 	.word	0x6fffffc0

08002c74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c88:	d101      	bne.n	8002c8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <LL_ADC_Enable+0x24>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	7fffffc0 	.word	0x7fffffc0

08002cc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <LL_ADC_Disable+0x24>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	7fffffc0 	.word	0x7fffffc0

08002cec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <LL_ADC_IsEnabled+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_ADC_IsEnabled+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsDisableOngoing+0x18>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsDisableOngoing+0x1a>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <LL_ADC_REG_StartConversion+0x24>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	f043 0204 	orr.w	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	7fffffc0 	.word	0x7fffffc0

08002d60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d101      	bne.n	8002d78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d101      	bne.n	8002d9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e18f      	b.n	80030e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe ffeb 	bl	8001db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff19 	bl	8002c24 <LL_ADC_IsDeepPowerDownEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff feff 	bl	8002c00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff34 	bl	8002c74 <LL_ADC_IsInternalRegulatorEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff18 	bl	8002c4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e1c:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_ADC_Init+0x290>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	4a87      	ldr	r2, [pc, #540]	; (8003040 <HAL_ADC_Init+0x294>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e2e:	e002      	b.n	8002e36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f9      	bne.n	8002e30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff17 	bl	8002c74 <LL_ADC_IsInternalRegulatorEnabled>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f043 0210 	orr.w	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff77 	bl	8002d60 <LL_ADC_REG_IsConversionOngoing>
 8002e72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 8129 	bne.w	80030d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 8125 	bne.w	80030d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e92:	f043 0202 	orr.w	r2, r3, #2
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff24 	bl	8002cec <LL_ADC_IsEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d136      	bne.n	8002f18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_ADC_Init+0x298>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Init+0x112>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a63      	ldr	r2, [pc, #396]	; (8003048 <HAL_ADC_Init+0x29c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10e      	bne.n	8002edc <HAL_ADC_Init+0x130>
 8002ebe:	4861      	ldr	r0, [pc, #388]	; (8003044 <HAL_ADC_Init+0x298>)
 8002ec0:	f7ff ff14 	bl	8002cec <LL_ADC_IsEnabled>
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	4860      	ldr	r0, [pc, #384]	; (8003048 <HAL_ADC_Init+0x29c>)
 8002ec8:	f7ff ff10 	bl	8002cec <LL_ADC_IsEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e008      	b.n	8002eee <HAL_ADC_Init+0x142>
 8002edc:	485b      	ldr	r0, [pc, #364]	; (800304c <HAL_ADC_Init+0x2a0>)
 8002ede:	f7ff ff05 	bl	8002cec <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a53      	ldr	r2, [pc, #332]	; (8003044 <HAL_ADC_Init+0x298>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_ADC_Init+0x15a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a51      	ldr	r2, [pc, #324]	; (8003048 <HAL_ADC_Init+0x29c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x15e>
 8002f06:	4a52      	ldr	r2, [pc, #328]	; (8003050 <HAL_ADC_Init+0x2a4>)
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_Init+0x160>
 8002f0a:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_ADC_Init+0x2a8>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f7ff fd3c 	bl	8002990 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f18:	f7ff fd18 	bl	800294c <HAL_GetREVID>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d914      	bls.n	8002f50 <HAL_ADC_Init+0x1a4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d110      	bne.n	8002f50 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7d5b      	ldrb	r3, [r3, #21]
 8002f32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7f1b      	ldrb	r3, [r3, #28]
 8002f44:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f46:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f48:	f043 030c 	orr.w	r3, r3, #12
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e00d      	b.n	8002f6c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7d5b      	ldrb	r3, [r3, #21]
 8002f54:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f5a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f60:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7f1b      	ldrb	r3, [r3, #28]
 8002f66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7f1b      	ldrb	r3, [r3, #28]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	045b      	lsls	r3, r3, #17
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_ADC_Init+0x2ac>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	69b9      	ldr	r1, [r7, #24]
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fed2 	bl	8002d60 <LL_ADC_REG_IsConversionOngoing>
 8002fbc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fedf 	bl	8002d86 <LL_ADC_INJ_IsConversionOngoing>
 8002fc8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d15f      	bne.n	8003090 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d15c      	bne.n	8003090 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7d1b      	ldrb	r3, [r3, #20]
 8002fda:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_ADC_Init+0x2b0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d130      	bne.n	8003064 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_ADC_Init+0x2b4>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003016:	3a01      	subs	r2, #1
 8003018:	0411      	lsls	r1, r2, #16
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800302a:	430a      	orrs	r2, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	611a      	str	r2, [r3, #16]
 8003038:	e01c      	b.n	8003074 <HAL_ADC_Init+0x2c8>
 800303a:	bf00      	nop
 800303c:	24000030 	.word	0x24000030
 8003040:	053e2d63 	.word	0x053e2d63
 8003044:	40022000 	.word	0x40022000
 8003048:	40022100 	.word	0x40022100
 800304c:	58026000 	.word	0x58026000
 8003050:	40022300 	.word	0x40022300
 8003054:	58026300 	.word	0x58026300
 8003058:	fff0c003 	.word	0xfff0c003
 800305c:	ffffbffc 	.word	0xffffbffc
 8003060:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fdd6 	bl	8003c3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10c      	bne.n	80030b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f023 010f 	bic.w	r1, r3, #15
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
 80030b0:	e007      	b.n	80030c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 020f 	bic.w	r2, r2, #15
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
 80030d2:	e007      	b.n	80030e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0210 	orr.w	r2, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}
 80030ee:	bf00      	nop

080030f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a55      	ldr	r2, [pc, #340]	; (8003258 <HAL_ADC_Start_DMA+0x168>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_ADC_Start_DMA+0x20>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_ADC_Start_DMA+0x16c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_ADC_Start_DMA+0x24>
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_ADC_Start_DMA+0x170>)
 8003112:	e000      	b.n	8003116 <HAL_ADC_Start_DMA+0x26>
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_ADC_Start_DMA+0x174>)
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fd64 	bl	8002be4 <LL_ADC_GetMultimode>
 800311c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fe1c 	bl	8002d60 <LL_ADC_REG_IsConversionOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 808c 	bne.w	8003248 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADC_Start_DMA+0x4e>
 800313a:	2302      	movs	r3, #2
 800313c:	e087      	b.n	800324e <HAL_ADC_Start_DMA+0x15e>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d002      	beq.n	8003158 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d170      	bne.n	800323a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fbf1 	bl	8003940 <ADC_Enable>
 800315e:	4603      	mov	r3, r0
 8003160:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d163      	bne.n	8003230 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_ADC_Start_DMA+0x178>)
 800316e:	4013      	ands	r3, r2
 8003170:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a37      	ldr	r2, [pc, #220]	; (800325c <HAL_ADC_Start_DMA+0x16c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d002      	beq.n	8003188 <HAL_ADC_Start_DMA+0x98>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e000      	b.n	800318a <HAL_ADC_Start_DMA+0x9a>
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_ADC_Start_DMA+0x168>)
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	4293      	cmp	r3, r2
 8003190:	d002      	beq.n	8003198 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f023 0206 	bic.w	r2, r3, #6
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58
 80031bc:	e002      	b.n	80031c4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <HAL_ADC_Start_DMA+0x17c>)
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	4a27      	ldr	r2, [pc, #156]	; (8003270 <HAL_ADC_Start_DMA+0x180>)
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	4a26      	ldr	r2, [pc, #152]	; (8003274 <HAL_ADC_Start_DMA+0x184>)
 80031da:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	221c      	movs	r2, #28
 80031e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0210 	orr.w	r2, r2, #16
 80031fa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7ff fc89 	bl	8002b1e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3340      	adds	r3, #64	; 0x40
 8003216:	4619      	mov	r1, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f001 fde8 	bl	8004df0 <HAL_DMA_Start_IT>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fd85 	bl	8002d38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800322e:	e00d      	b.n	800324c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003238:	e008      	b.n	800324c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003246:	e001      	b.n	800324c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800324c:	7dfb      	ldrb	r3, [r7, #23]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40022100 	.word	0x40022100
 8003260:	40022300 	.word	0x40022300
 8003264:	58026300 	.word	0x58026300
 8003268:	fffff0fe 	.word	0xfffff0fe
 800326c:	08003b13 	.word	0x08003b13
 8003270:	08003beb 	.word	0x08003beb
 8003274:	08003c07 	.word	0x08003c07

08003278 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b0a1      	sub	sp, #132	; 0x84
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a9d      	ldr	r2, [pc, #628]	; (8003530 <HAL_ADC_ConfigChannel+0x290>)
 80032ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x2a>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e321      	b.n	800390e <HAL_ADC_ConfigChannel+0x66e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fd42 	bl	8002d60 <LL_ADC_REG_IsConversionOngoing>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 8306 	bne.w	80038f0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x62>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2201      	movs	r2, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	e016      	b.n	8003330 <HAL_ADC_ConfigChannel+0x90>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003312:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e003      	b.n	8003326 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800331e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2201      	movs	r2, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	69d1      	ldr	r1, [r2, #28]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	430b      	orrs	r3, r1
 800333c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7ff fbbb 	bl	8002ac6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fd03 	bl	8002d60 <LL_ADC_REG_IsConversionOngoing>
 800335a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fd10 	bl	8002d86 <LL_ADC_INJ_IsConversionOngoing>
 8003366:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80b3 	bne.w	80034d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 80af 	bne.w	80034d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	461a      	mov	r2, r3
 8003386:	f7ff fbdd 	bl	8002b44 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800338a:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <HAL_ADC_ConfigChannel+0x294>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003396:	d10b      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x110>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	e01d      	b.n	80033ec <HAL_ADC_ConfigChannel+0x14c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x136>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	e00a      	b.n	80033ec <HAL_ADC_ConfigChannel+0x14c>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d027      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003404:	f7ff faf8 	bl	80029f8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	7e5b      	ldrb	r3, [r3, #25]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_ADC_ConfigChannel+0x17e>
 8003418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800341c:	e000      	b.n	8003420 <HAL_ADC_ConfigChannel+0x180>
 800341e:	2300      	movs	r3, #0
 8003420:	461a      	mov	r2, r3
 8003422:	f7ff fb22 	bl	8002a6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6919      	ldr	r1, [r3, #16]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	7e1b      	ldrb	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_ADC_ConfigChannel+0x19c>
 8003436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800343a:	e000      	b.n	800343e <HAL_ADC_ConfigChannel+0x19e>
 800343c:	2300      	movs	r3, #0
 800343e:	461a      	mov	r2, r3
 8003440:	f7ff fafa 	bl	8002a38 <LL_ADC_SetDataRightShift>
 8003444:	e047      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	429a      	cmp	r2, r3
 8003458:	d107      	bne.n	800346a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003468:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003470:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	429a      	cmp	r2, r3
 800347c:	d107      	bne.n	800348e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800348c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	069b      	lsls	r3, r3, #26
 800349e:	429a      	cmp	r2, r3
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	069b      	lsls	r3, r3, #26
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d107      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fc06 	bl	8002cec <LL_ADC_IsEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 820d 	bne.w	8003902 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f7ff fb51 	bl	8002b9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <HAL_ADC_ConfigChannel+0x290>)
 8003500:	4293      	cmp	r3, r2
 8003502:	f040 8133 	bne.w	800376c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003512:	2b00      	cmp	r3, #0
 8003514:	d110      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x298>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	3301      	adds	r3, #1
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2b09      	cmp	r3, #9
 8003524:	bf94      	ite	ls
 8003526:	2301      	movls	r3, #1
 8003528:	2300      	movhi	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e01e      	b.n	800356c <HAL_ADC_ConfigChannel+0x2cc>
 800352e:	bf00      	nop
 8003530:	47ff0000 	.word	0x47ff0000
 8003534:	5c001000 	.word	0x5c001000
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800354a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e003      	b.n	800355c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b09      	cmp	r3, #9
 8003564:	bf94      	ite	ls
 8003566:	2301      	movls	r3, #1
 8003568:	2300      	movhi	r3, #0
 800356a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356c:	2b00      	cmp	r3, #0
 800356e:	d079      	beq.n	8003664 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_ADC_ConfigChannel+0x2ec>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	3301      	adds	r3, #1
 8003584:	069b      	lsls	r3, r3, #26
 8003586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358a:	e015      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x318>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800359e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e003      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	069b      	lsls	r3, r3, #26
 80035b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x338>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	3301      	adds	r3, #1
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	e017      	b.n	8003608 <HAL_ADC_ConfigChannel+0x368>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80035ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	ea42 0103 	orr.w	r1, r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_ADC_ConfigChannel+0x38e>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	051b      	lsls	r3, r3, #20
 800362c:	e018      	b.n	8003660 <HAL_ADC_ConfigChannel+0x3c0>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003646:	2320      	movs	r3, #32
 8003648:	e003      	b.n	8003652 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	430b      	orrs	r3, r1
 8003662:	e07e      	b.n	8003762 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x3e0>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	3301      	adds	r3, #1
 8003678:	069b      	lsls	r3, r3, #26
 800367a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367e:	e015      	b.n	80036ac <HAL_ADC_ConfigChannel+0x40c>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x42c>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	3301      	adds	r3, #1
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	e017      	b.n	80036fc <HAL_ADC_ConfigChannel+0x45c>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	61bb      	str	r3, [r7, #24]
  return result;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	ea42 0103 	orr.w	r1, r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x488>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	3b1e      	subs	r3, #30
 8003720:	051b      	lsls	r3, r3, #20
 8003722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003726:	e01b      	b.n	8003760 <HAL_ADC_ConfigChannel+0x4c0>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	60fb      	str	r3, [r7, #12]
  return result;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	3b1e      	subs	r3, #30
 800375a:	051b      	lsls	r3, r3, #20
 800375c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	430b      	orrs	r3, r1
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	4619      	mov	r1, r3
 8003768:	f7ff f9ec 	bl	8002b44 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f280 80c6 	bge.w	8003902 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a67      	ldr	r2, [pc, #412]	; (8003918 <HAL_ADC_ConfigChannel+0x678>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_ADC_ConfigChannel+0x4ea>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a65      	ldr	r2, [pc, #404]	; (800391c <HAL_ADC_ConfigChannel+0x67c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_ADC_ConfigChannel+0x4ee>
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_ADC_ConfigChannel+0x680>)
 800378c:	e000      	b.n	8003790 <HAL_ADC_ConfigChannel+0x4f0>
 800378e:	4b65      	ldr	r3, [pc, #404]	; (8003924 <HAL_ADC_ConfigChannel+0x684>)
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f923 	bl	80029dc <LL_ADC_GetCommonPathInternalCh>
 8003796:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a5e      	ldr	r2, [pc, #376]	; (8003918 <HAL_ADC_ConfigChannel+0x678>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_ADC_ConfigChannel+0x50c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_ADC_ConfigChannel+0x67c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10e      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x52a>
 80037ac:	485a      	ldr	r0, [pc, #360]	; (8003918 <HAL_ADC_ConfigChannel+0x678>)
 80037ae:	f7ff fa9d 	bl	8002cec <LL_ADC_IsEnabled>
 80037b2:	4604      	mov	r4, r0
 80037b4:	4859      	ldr	r0, [pc, #356]	; (800391c <HAL_ADC_ConfigChannel+0x67c>)
 80037b6:	f7ff fa99 	bl	8002cec <LL_ADC_IsEnabled>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4323      	orrs	r3, r4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e008      	b.n	80037dc <HAL_ADC_ConfigChannel+0x53c>
 80037ca:	4857      	ldr	r0, [pc, #348]	; (8003928 <HAL_ADC_ConfigChannel+0x688>)
 80037cc:	f7ff fa8e 	bl	8002cec <LL_ADC_IsEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d07d      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_ADC_ConfigChannel+0x68c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d130      	bne.n	800384c <HAL_ADC_ConfigChannel+0x5ac>
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d12b      	bne.n	800384c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a4b      	ldr	r2, [pc, #300]	; (8003928 <HAL_ADC_ConfigChannel+0x688>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	f040 8081 	bne.w	8003902 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a44      	ldr	r2, [pc, #272]	; (8003918 <HAL_ADC_ConfigChannel+0x678>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADC_ConfigChannel+0x574>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a43      	ldr	r2, [pc, #268]	; (800391c <HAL_ADC_ConfigChannel+0x67c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x578>
 8003814:	4a42      	ldr	r2, [pc, #264]	; (8003920 <HAL_ADC_ConfigChannel+0x680>)
 8003816:	e000      	b.n	800381a <HAL_ADC_ConfigChannel+0x57a>
 8003818:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_ADC_ConfigChannel+0x684>)
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f7ff f8c7 	bl	80029b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_ADC_ConfigChannel+0x690>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_ADC_ConfigChannel+0x694>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	3301      	adds	r3, #1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800383c:	e002      	b.n	8003844 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f9      	bne.n	800383e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800384a:	e05a      	b.n	8003902 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a39      	ldr	r2, [pc, #228]	; (8003938 <HAL_ADC_ConfigChannel+0x698>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d11e      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x5f4>
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d119      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a30      	ldr	r2, [pc, #192]	; (8003928 <HAL_ADC_ConfigChannel+0x688>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d14b      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <HAL_ADC_ConfigChannel+0x678>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_ADC_ConfigChannel+0x5de>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a28      	ldr	r2, [pc, #160]	; (800391c <HAL_ADC_ConfigChannel+0x67c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x5e2>
 800387e:	4a28      	ldr	r2, [pc, #160]	; (8003920 <HAL_ADC_ConfigChannel+0x680>)
 8003880:	e000      	b.n	8003884 <HAL_ADC_ConfigChannel+0x5e4>
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <HAL_ADC_ConfigChannel+0x684>)
 8003884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7ff f892 	bl	80029b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003892:	e036      	b.n	8003902 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_ADC_ConfigChannel+0x69c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d131      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x662>
 800389e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d12c      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_ADC_ConfigChannel+0x688>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d127      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_ADC_ConfigChannel+0x678>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_ADC_ConfigChannel+0x626>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <HAL_ADC_ConfigChannel+0x67c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x62a>
 80038c6:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_ADC_ConfigChannel+0x680>)
 80038c8:	e000      	b.n	80038cc <HAL_ADC_ConfigChannel+0x62c>
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <HAL_ADC_ConfigChannel+0x684>)
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7ff f86e 	bl	80029b6 <LL_ADC_SetCommonPathInternalCh>
 80038da:	e012      	b.n	8003902 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038ee:	e008      	b.n	8003902 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800390a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800390e:	4618      	mov	r0, r3
 8003910:	3784      	adds	r7, #132	; 0x84
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	bf00      	nop
 8003918:	40022000 	.word	0x40022000
 800391c:	40022100 	.word	0x40022100
 8003920:	40022300 	.word	0x40022300
 8003924:	58026300 	.word	0x58026300
 8003928:	58026000 	.word	0x58026000
 800392c:	cb840000 	.word	0xcb840000
 8003930:	24000030 	.word	0x24000030
 8003934:	053e2d63 	.word	0x053e2d63
 8003938:	c7520000 	.word	0xc7520000
 800393c:	cfb80000 	.word	0xcfb80000

08003940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff f9cd 	bl	8002cec <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d16e      	bne.n	8003a36 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	4b38      	ldr	r3, [pc, #224]	; (8003a40 <ADC_Enable+0x100>)
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e05a      	b.n	8003a38 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f988 	bl	8002c9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800398c:	f7fe ff9e 	bl	80028cc <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2b      	ldr	r2, [pc, #172]	; (8003a44 <ADC_Enable+0x104>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <ADC_Enable+0x66>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <ADC_Enable+0x108>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <ADC_Enable+0x6a>
 80039a6:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <ADC_Enable+0x10c>)
 80039a8:	e000      	b.n	80039ac <ADC_Enable+0x6c>
 80039aa:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <ADC_Enable+0x110>)
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f919 	bl	8002be4 <LL_ADC_GetMultimode>
 80039b2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <ADC_Enable+0x108>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d002      	beq.n	80039c4 <ADC_Enable+0x84>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	e000      	b.n	80039c6 <ADC_Enable+0x86>
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <ADC_Enable+0x104>)
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02c      	beq.n	8003a28 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d130      	bne.n	8003a36 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039d4:	e028      	b.n	8003a28 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f986 	bl	8002cec <LL_ADC_IsEnabled>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f956 	bl	8002c9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039f0:	f7fe ff6c 	bl	80028cc <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d914      	bls.n	8003a28 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d00d      	beq.n	8003a28 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e007      	b.n	8003a38 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d1cf      	bne.n	80039d6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	8000003f 	.word	0x8000003f
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40022100 	.word	0x40022100
 8003a4c:	40022300 	.word	0x40022300
 8003a50:	58026300 	.word	0x58026300

08003a54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f956 	bl	8002d12 <LL_ADC_IsDisableOngoing>
 8003a66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff f93d 	bl	8002cec <LL_ADC_IsEnabled>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d047      	beq.n	8003b08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d144      	bne.n	8003b08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030d 	and.w	r3, r3, #13
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10c      	bne.n	8003aa6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff f917 	bl	8002cc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe ff15 	bl	80028cc <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aa4:	e029      	b.n	8003afa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e023      	b.n	8003b0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ac2:	f7fe ff03 	bl	80028cc <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d914      	bls.n	8003afa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1dc      	bne.n	8003ac2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d14b      	bne.n	8003bc4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d021      	beq.n	8003b8a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe ffa8 	bl	8002aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d032      	beq.n	8003bbc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d12b      	bne.n	8003bbc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11f      	bne.n	8003bbc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0201 	orr.w	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
 8003b88:	e018      	b.n	8003bbc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7fe f86b 	bl	8001c98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bc2:	e00e      	b.n	8003be2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fb5b 	bl	800328c <HAL_ADC_ErrorCallback>
}
 8003bd6:	e004      	b.n	8003be2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fb3d 	bl	8003278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f043 0204 	orr.w	r2, r3, #4
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff fb2d 	bl	800328c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a79      	ldr	r2, [pc, #484]	; (8003e30 <ADC_ConfigureBoostMode+0x1f4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <ADC_ConfigureBoostMode+0x1c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a78      	ldr	r2, [pc, #480]	; (8003e34 <ADC_ConfigureBoostMode+0x1f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d109      	bne.n	8003c6c <ADC_ConfigureBoostMode+0x30>
 8003c58:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <ADC_ConfigureBoostMode+0x1fc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e008      	b.n	8003c7e <ADC_ConfigureBoostMode+0x42>
 8003c6c:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <ADC_ConfigureBoostMode+0x200>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01c      	beq.n	8003cbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c82:	f005 fad5 	bl	8009230 <HAL_RCC_GetHCLKFreq>
 8003c86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c90:	d010      	beq.n	8003cb4 <ADC_ConfigureBoostMode+0x78>
 8003c92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c96:	d871      	bhi.n	8003d7c <ADC_ConfigureBoostMode+0x140>
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d002      	beq.n	8003ca4 <ADC_ConfigureBoostMode+0x68>
 8003c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca2:	d16b      	bne.n	8003d7c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
        break;
 8003cb2:	e066      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	60fb      	str	r3, [r7, #12]
        break;
 8003cba:	e062      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cc0:	f006 fa58 	bl	800a174 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cce:	d051      	beq.n	8003d74 <ADC_ConfigureBoostMode+0x138>
 8003cd0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cd4:	d854      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003cd6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cda:	d047      	beq.n	8003d6c <ADC_ConfigureBoostMode+0x130>
 8003cdc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ce0:	d84e      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003ce2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ce6:	d03d      	beq.n	8003d64 <ADC_ConfigureBoostMode+0x128>
 8003ce8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cec:	d848      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf2:	d033      	beq.n	8003d5c <ADC_ConfigureBoostMode+0x120>
 8003cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf8:	d842      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003cfa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003cfe:	d029      	beq.n	8003d54 <ADC_ConfigureBoostMode+0x118>
 8003d00:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d04:	d83c      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003d06:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d0a:	d01a      	beq.n	8003d42 <ADC_ConfigureBoostMode+0x106>
 8003d0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d10:	d836      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003d12:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d16:	d014      	beq.n	8003d42 <ADC_ConfigureBoostMode+0x106>
 8003d18:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d1c:	d830      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d00e      	beq.n	8003d42 <ADC_ConfigureBoostMode+0x106>
 8003d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d28:	d82a      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003d2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d2e:	d008      	beq.n	8003d42 <ADC_ConfigureBoostMode+0x106>
 8003d30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d34:	d824      	bhi.n	8003d80 <ADC_ConfigureBoostMode+0x144>
 8003d36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d3a:	d002      	beq.n	8003d42 <ADC_ConfigureBoostMode+0x106>
 8003d3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d40:	d11e      	bne.n	8003d80 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	60fb      	str	r3, [r7, #12]
        break;
 8003d52:	e016      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
        break;
 8003d5a:	e012      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	60fb      	str	r3, [r7, #12]
        break;
 8003d62:	e00e      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	60fb      	str	r3, [r7, #12]
        break;
 8003d6a:	e00a      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	09db      	lsrs	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
        break;
 8003d72:	e006      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	60fb      	str	r3, [r7, #12]
        break;
 8003d7a:	e002      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
        break;
 8003d7c:	bf00      	nop
 8003d7e:	e000      	b.n	8003d82 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003d80:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003d82:	f7fe fde3 	bl	800294c <HAL_GetREVID>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d815      	bhi.n	8003dbc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <ADC_ConfigureBoostMode+0x204>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d908      	bls.n	8003daa <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003da8:	e03e      	b.n	8003e28 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	e035      	b.n	8003e28 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <ADC_ConfigureBoostMode+0x208>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d808      	bhi.n	8003ddc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dd8:	609a      	str	r2, [r3, #8]
}
 8003dda:	e025      	b.n	8003e28 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <ADC_ConfigureBoostMode+0x20c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d80a      	bhi.n	8003dfa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	e016      	b.n	8003e28 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <ADC_ConfigureBoostMode+0x210>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d80a      	bhi.n	8003e18 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	609a      	str	r2, [r3, #8]
}
 8003e16:	e007      	b.n	8003e28 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40022100 	.word	0x40022100
 8003e38:	40022300 	.word	0x40022300
 8003e3c:	58026300 	.word	0x58026300
 8003e40:	01312d00 	.word	0x01312d00
 8003e44:	005f5e10 	.word	0x005f5e10
 8003e48:	00bebc20 	.word	0x00bebc20
 8003e4c:	017d7840 	.word	0x017d7840

08003e50 <LL_ADC_IsEnabled>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <LL_ADC_IsEnabled+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_ADC_IsEnabled+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <LL_ADC_StartCalibration>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <LL_ADC_StartCalibration+0x38>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	3ffeffc0 	.word	0x3ffeffc0

08003eb4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec8:	d101      	bne.n	8003ece <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_REG_IsConversionOngoing>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d101      	bne.n	8003ef4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e04c      	b.n	8003fbc <HAL_ADCEx_Calibration_Start+0xb8>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff fd92 	bl	8003a54 <ADC_Disable>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d135      	bne.n	8003fa6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	f043 0202 	orr.w	r2, r3, #2
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff90 	bl	8003e78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f58:	e014      	b.n	8003f84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d30d      	bcc.n	8003f84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f023 0312 	bic.w	r3, r3, #18
 8003f70:	f043 0210 	orr.w	r2, r3, #16
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e01b      	b.n	8003fbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff93 	bl	8003eb4 <LL_ADC_IsCalibrationOnGoing>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e2      	bne.n	8003f5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	f023 0303 	bic.w	r3, r3, #3
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
 8003fa4:	e005      	b.n	8003fb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	ffffeefd 	.word	0xffffeefd
 8003fc8:	25c3f800 	.word	0x25c3f800

08003fcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b09f      	sub	sp, #124	; 0x7c
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0be      	b.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5c      	ldr	r2, [pc, #368]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d102      	bne.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004004:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	e001      	b.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e09d      	b.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff54 	bl	8003edc <LL_ADC_REG_IsConversionOngoing>
 8004034:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff4e 	bl	8003edc <LL_ADC_REG_IsConversionOngoing>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d17f      	bne.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004048:	2b00      	cmp	r3, #0
 800404a:	d17c      	bne.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a47      	ldr	r2, [pc, #284]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a46      	ldr	r2, [pc, #280]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004060:	4b45      	ldr	r3, [pc, #276]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004062:	e000      	b.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004064:	4b45      	ldr	r3, [pc, #276]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004066:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d039      	beq.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	431a      	orrs	r2, r3
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a38      	ldr	r2, [pc, #224]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10e      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004096:	4836      	ldr	r0, [pc, #216]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004098:	f7ff feda 	bl	8003e50 <LL_ADC_IsEnabled>
 800409c:	4604      	mov	r4, r0
 800409e:	4835      	ldr	r0, [pc, #212]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040a0:	f7ff fed6 	bl	8003e50 <LL_ADC_IsEnabled>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4323      	orrs	r3, r4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e008      	b.n	80040c6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040b4:	4832      	ldr	r0, [pc, #200]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040b6:	f7ff fecb 	bl	8003e50 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d047      	beq.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	6811      	ldr	r1, [r2, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6892      	ldr	r2, [r2, #8]
 80040da:	430a      	orrs	r2, r1
 80040dc:	431a      	orrs	r2, r3
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e2:	e03a      	b.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10e      	bne.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004104:	481a      	ldr	r0, [pc, #104]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004106:	f7ff fea3 	bl	8003e50 <LL_ADC_IsEnabled>
 800410a:	4604      	mov	r4, r0
 800410c:	4819      	ldr	r0, [pc, #100]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800410e:	f7ff fe9f 	bl	8003e50 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	4323      	orrs	r3, r4
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e008      	b.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004122:	4817      	ldr	r0, [pc, #92]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004124:	f7ff fe94 	bl	8003e50 <LL_ADC_IsEnabled>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800413e:	4013      	ands	r3, r2
 8004140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004142:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004144:	e009      	b.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004158:	e000      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800415a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004164:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004168:	4618      	mov	r0, r3
 800416a:	377c      	adds	r7, #124	; 0x7c
 800416c:	46bd      	mov	sp, r7
 800416e:	bd90      	pop	{r4, r7, pc}
 8004170:	40022000 	.word	0x40022000
 8004174:	40022100 	.word	0x40022100
 8004178:	40022300 	.word	0x40022300
 800417c:	58026300 	.word	0x58026300
 8004180:	58026000 	.word	0x58026000
 8004184:	fffff0e0 	.word	0xfffff0e0

08004188 <__NVIC_SetPriorityGrouping>:
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <__NVIC_SetPriorityGrouping+0x40>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <__NVIC_SetPriorityGrouping+0x40>)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	60d3      	str	r3, [r2, #12]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000ed00 	.word	0xe000ed00
 80041cc:	05fa0000 	.word	0x05fa0000

080041d0 <__NVIC_GetPriorityGrouping>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <__NVIC_GetPriorityGrouping+0x18>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 0307 	and.w	r3, r3, #7
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_EnableIRQ>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0b      	blt.n	8004216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <__NVIC_EnableIRQ+0x38>)
 8004206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000e100 	.word	0xe000e100

08004228 <__NVIC_SetPriority>:
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0a      	blt.n	8004252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	490c      	ldr	r1, [pc, #48]	; (8004274 <__NVIC_SetPriority+0x4c>)
 8004242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004250:	e00a      	b.n	8004268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4908      	ldr	r1, [pc, #32]	; (8004278 <__NVIC_SetPriority+0x50>)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3b04      	subs	r3, #4
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	440b      	add	r3, r1
 8004266:	761a      	strb	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000e100 	.word	0xe000e100
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <NVIC_EncodePriority>:
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f1c3 0307 	rsb	r3, r3, #7
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf28      	it	cs
 800429a:	2304      	movcs	r3, #4
 800429c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d902      	bls.n	80042ac <NVIC_EncodePriority+0x30>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3b03      	subs	r3, #3
 80042aa:	e000      	b.n	80042ae <NVIC_EncodePriority+0x32>
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	401a      	ands	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	43d9      	mvns	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	4313      	orrs	r3, r2
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f4:	d301      	bcc.n	80042fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042f6:	2301      	movs	r3, #1
 80042f8:	e00f      	b.n	800431a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <SysTick_Config+0x40>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3b01      	subs	r3, #1
 8004300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004302:	210f      	movs	r1, #15
 8004304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004308:	f7ff ff8e 	bl	8004228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <SysTick_Config+0x40>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <SysTick_Config+0x40>)
 8004314:	2207      	movs	r2, #7
 8004316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	e000e010 	.word	0xe000e010

08004328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff ff29 	bl	8004188 <__NVIC_SetPriorityGrouping>
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	4603      	mov	r3, r0
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800434c:	f7ff ff40 	bl	80041d0 <__NVIC_GetPriorityGrouping>
 8004350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	6978      	ldr	r0, [r7, #20]
 8004358:	f7ff ff90 	bl	800427c <NVIC_EncodePriority>
 800435c:	4602      	mov	r2, r0
 800435e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff5f 	bl	8004228 <__NVIC_SetPriority>
}
 800436a:	bf00      	nop
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	4603      	mov	r3, r0
 800437a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800437c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff33 	bl	80041ec <__NVIC_EnableIRQ>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff ffa4 	bl	80042e4 <SysTick_Config>
 800439c:	4603      	mov	r3, r0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e014      	b.n	80043e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd fe0b 	bl	8001fe4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	795b      	ldrb	r3, [r3, #5]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_DAC_Start+0x16>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e040      	b.n	8004482 <HAL_DAC_Start+0x98>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2201      	movs	r2, #1
 800441a:	409a      	lsls	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10f      	bne.n	800444a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11d      	bne.n	8004474 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	e014      	b.n	8004474 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2102      	movs	r1, #2
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0202 	orr.w	r2, r2, #2
 8004472:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800448e:	b480      	push	{r7}
 8004490:	b087      	sub	sp, #28
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	3308      	adds	r3, #8
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e004      	b.n	80044c2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	3314      	adds	r3, #20
 80044c0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	461a      	mov	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	795b      	ldrb	r3, [r3, #5]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_DAC_ConfigChannel+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e11d      	b.n	800472c <HAL_DAC_ConfigChannel+0x254>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d174      	bne.n	80045ee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004504:	f7fe f9e2 	bl	80028cc <HAL_GetTick>
 8004508:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d134      	bne.n	800457a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004510:	e011      	b.n	8004536 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004512:	f7fe f9db 	bl	80028cc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d90a      	bls.n	8004536 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f043 0208 	orr.w	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2203      	movs	r2, #3
 8004530:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0fa      	b.n	800472c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453c:	4b7d      	ldr	r3, [pc, #500]	; (8004734 <HAL_DAC_ConfigChannel+0x25c>)
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e6      	bne.n	8004512 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004544:	2001      	movs	r0, #1
 8004546:	f7fe f9cd 	bl	80028e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	6992      	ldr	r2, [r2, #24]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
 8004554:	e01e      	b.n	8004594 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004556:	f7fe f9b9 	bl	80028cc <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d90a      	bls.n	800457a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f043 0208 	orr.w	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2203      	movs	r2, #3
 8004574:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0d8      	b.n	800472c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	dbe8      	blt.n	8004556 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004584:	2001      	movs	r0, #1
 8004586:	f7fe f9ad 	bl	80028e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	6992      	ldr	r2, [r2, #24]
 8004592:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	ea02 0103 	and.w	r1, r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	21ff      	movs	r1, #255	; 0xff
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	ea02 0103 	and.w	r1, r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6a1a      	ldr	r2, [r3, #32]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	409a      	lsls	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d11d      	bne.n	8004632 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	221f      	movs	r2, #31
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4013      	ands	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2207      	movs	r2, #7
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4013      	ands	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e00f      	b.n	800467c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d102      	bne.n	800466a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004664:	2301      	movs	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	e008      	b.n	800467c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004672:	2301      	movs	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e001      	b.n	800467c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4313      	orrs	r3, r2
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4013      	ands	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6819      	ldr	r1, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	22c0      	movs	r2, #192	; 0xc0
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43da      	mvns	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20008000 	.word	0x20008000

08004738 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004740:	f7fe f8c4 	bl	80028cc <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e316      	b.n	8004d7e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a66      	ldr	r2, [pc, #408]	; (80048f0 <HAL_DMA_Init+0x1b8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d04a      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_DMA_Init+0x1bc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d045      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a63      	ldr	r2, [pc, #396]	; (80048f8 <HAL_DMA_Init+0x1c0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d040      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a62      	ldr	r2, [pc, #392]	; (80048fc <HAL_DMA_Init+0x1c4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d03b      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a60      	ldr	r2, [pc, #384]	; (8004900 <HAL_DMA_Init+0x1c8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d036      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a5f      	ldr	r2, [pc, #380]	; (8004904 <HAL_DMA_Init+0x1cc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d031      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <HAL_DMA_Init+0x1d0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d02c      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a5c      	ldr	r2, [pc, #368]	; (800490c <HAL_DMA_Init+0x1d4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d027      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5a      	ldr	r2, [pc, #360]	; (8004910 <HAL_DMA_Init+0x1d8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d022      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a59      	ldr	r2, [pc, #356]	; (8004914 <HAL_DMA_Init+0x1dc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d01d      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_DMA_Init+0x1e0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d018      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a56      	ldr	r2, [pc, #344]	; (800491c <HAL_DMA_Init+0x1e4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d013      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_DMA_Init+0x1e8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00e      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a53      	ldr	r2, [pc, #332]	; (8004924 <HAL_DMA_Init+0x1ec>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d009      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a51      	ldr	r2, [pc, #324]	; (8004928 <HAL_DMA_Init+0x1f0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_DMA_Init+0xb8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a50      	ldr	r2, [pc, #320]	; (800492c <HAL_DMA_Init+0x1f4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <HAL_DMA_Init+0xbc>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_DMA_Init+0xbe>
 80047f4:	2300      	movs	r3, #0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 813b 	beq.w	8004a72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a37      	ldr	r2, [pc, #220]	; (80048f0 <HAL_DMA_Init+0x1b8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d04a      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a36      	ldr	r2, [pc, #216]	; (80048f4 <HAL_DMA_Init+0x1bc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d045      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a34      	ldr	r2, [pc, #208]	; (80048f8 <HAL_DMA_Init+0x1c0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d040      	beq.n	80048ac <HAL_DMA_Init+0x174>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a33      	ldr	r2, [pc, #204]	; (80048fc <HAL_DMA_Init+0x1c4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d03b      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a31      	ldr	r2, [pc, #196]	; (8004900 <HAL_DMA_Init+0x1c8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d036      	beq.n	80048ac <HAL_DMA_Init+0x174>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a30      	ldr	r2, [pc, #192]	; (8004904 <HAL_DMA_Init+0x1cc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d031      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2e      	ldr	r2, [pc, #184]	; (8004908 <HAL_DMA_Init+0x1d0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02c      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2d      	ldr	r2, [pc, #180]	; (800490c <HAL_DMA_Init+0x1d4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d027      	beq.n	80048ac <HAL_DMA_Init+0x174>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <HAL_DMA_Init+0x1d8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d022      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_DMA_Init+0x1dc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01d      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_DMA_Init+0x1e0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d018      	beq.n	80048ac <HAL_DMA_Init+0x174>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a27      	ldr	r2, [pc, #156]	; (800491c <HAL_DMA_Init+0x1e4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a25      	ldr	r2, [pc, #148]	; (8004920 <HAL_DMA_Init+0x1e8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00e      	beq.n	80048ac <HAL_DMA_Init+0x174>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a24      	ldr	r2, [pc, #144]	; (8004924 <HAL_DMA_Init+0x1ec>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_DMA_Init+0x174>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <HAL_DMA_Init+0x1f0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_DMA_Init+0x174>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_DMA_Init+0x1f4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <HAL_DMA_Init+0x186>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e007      	b.n	80048ce <HAL_DMA_Init+0x196>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048ce:	e02f      	b.n	8004930 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048d0:	f7fd fffc 	bl	80028cc <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d928      	bls.n	8004930 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2203      	movs	r2, #3
 80048e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e246      	b.n	8004d7e <HAL_DMA_Init+0x646>
 80048f0:	40020010 	.word	0x40020010
 80048f4:	40020028 	.word	0x40020028
 80048f8:	40020040 	.word	0x40020040
 80048fc:	40020058 	.word	0x40020058
 8004900:	40020070 	.word	0x40020070
 8004904:	40020088 	.word	0x40020088
 8004908:	400200a0 	.word	0x400200a0
 800490c:	400200b8 	.word	0x400200b8
 8004910:	40020410 	.word	0x40020410
 8004914:	40020428 	.word	0x40020428
 8004918:	40020440 	.word	0x40020440
 800491c:	40020458 	.word	0x40020458
 8004920:	40020470 	.word	0x40020470
 8004924:	40020488 	.word	0x40020488
 8004928:	400204a0 	.word	0x400204a0
 800492c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1c8      	bne.n	80048d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <HAL_DMA_Init+0x420>)
 800494a:	4013      	ands	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004956:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004962:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800496e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b04      	cmp	r3, #4
 8004982:	d107      	bne.n	8004994 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	4313      	orrs	r3, r2
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004994:	4b71      	ldr	r3, [pc, #452]	; (8004b5c <HAL_DMA_Init+0x424>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b71      	ldr	r3, [pc, #452]	; (8004b60 <HAL_DMA_Init+0x428>)
 800499a:	4013      	ands	r3, r2
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d328      	bcc.n	80049f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b28      	cmp	r3, #40	; 0x28
 80049a8:	d903      	bls.n	80049b2 <HAL_DMA_Init+0x27a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b2e      	cmp	r3, #46	; 0x2e
 80049b0:	d917      	bls.n	80049e2 <HAL_DMA_Init+0x2aa>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b3e      	cmp	r3, #62	; 0x3e
 80049b8:	d903      	bls.n	80049c2 <HAL_DMA_Init+0x28a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b42      	cmp	r3, #66	; 0x42
 80049c0:	d90f      	bls.n	80049e2 <HAL_DMA_Init+0x2aa>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b46      	cmp	r3, #70	; 0x46
 80049c8:	d903      	bls.n	80049d2 <HAL_DMA_Init+0x29a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b48      	cmp	r3, #72	; 0x48
 80049d0:	d907      	bls.n	80049e2 <HAL_DMA_Init+0x2aa>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b4e      	cmp	r3, #78	; 0x4e
 80049d8:	d905      	bls.n	80049e6 <HAL_DMA_Init+0x2ae>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b52      	cmp	r3, #82	; 0x52
 80049e0:	d801      	bhi.n	80049e6 <HAL_DMA_Init+0x2ae>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <HAL_DMA_Init+0x2b0>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d117      	bne.n	8004a4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f002 fb33 	bl	800709c <DMA_CheckFifoParam>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e197      	b.n	8004d7e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f002 fa6e 	bl	8006f38 <DMA_CalcBaseAndBitshift>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	223f      	movs	r2, #63	; 0x3f
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e0cd      	b.n	8004c0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3b      	ldr	r2, [pc, #236]	; (8004b64 <HAL_DMA_Init+0x42c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a39      	ldr	r2, [pc, #228]	; (8004b68 <HAL_DMA_Init+0x430>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <HAL_DMA_Init+0x434>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d018      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a36      	ldr	r2, [pc, #216]	; (8004b70 <HAL_DMA_Init+0x438>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a35      	ldr	r2, [pc, #212]	; (8004b74 <HAL_DMA_Init+0x43c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	; (8004b78 <HAL_DMA_Init+0x440>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a32      	ldr	r2, [pc, #200]	; (8004b7c <HAL_DMA_Init+0x444>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_DMA_Init+0x38a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	; (8004b80 <HAL_DMA_Init+0x448>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_DMA_Init+0x38e>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_DMA_Init+0x390>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8097 	beq.w	8004bfc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <HAL_DMA_Init+0x42c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d021      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <HAL_DMA_Init+0x430>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01c      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a21      	ldr	r2, [pc, #132]	; (8004b6c <HAL_DMA_Init+0x434>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d017      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1f      	ldr	r2, [pc, #124]	; (8004b70 <HAL_DMA_Init+0x438>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d012      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_DMA_Init+0x43c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00d      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_DMA_Init+0x440>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d008      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_DMA_Init+0x444>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <HAL_DMA_Init+0x3e4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <HAL_DMA_Init+0x448>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_DMA_Init+0x44c>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d020      	beq.n	8004b88 <HAL_DMA_Init+0x450>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d102      	bne.n	8004b54 <HAL_DMA_Init+0x41c>
 8004b4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b52:	e01a      	b.n	8004b8a <HAL_DMA_Init+0x452>
 8004b54:	2300      	movs	r3, #0
 8004b56:	e018      	b.n	8004b8a <HAL_DMA_Init+0x452>
 8004b58:	fe10803f 	.word	0xfe10803f
 8004b5c:	5c001000 	.word	0x5c001000
 8004b60:	ffff0000 	.word	0xffff0000
 8004b64:	58025408 	.word	0x58025408
 8004b68:	5802541c 	.word	0x5802541c
 8004b6c:	58025430 	.word	0x58025430
 8004b70:	58025444 	.word	0x58025444
 8004b74:	58025458 	.word	0x58025458
 8004b78:	5802546c 	.word	0x5802546c
 8004b7c:	58025480 	.word	0x58025480
 8004b80:	58025494 	.word	0x58025494
 8004b84:	fffe000f 	.word	0xfffe000f
 8004b88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b6e      	ldr	r3, [pc, #440]	; (8004d88 <HAL_DMA_Init+0x650>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	4a6e      	ldr	r2, [pc, #440]	; (8004d8c <HAL_DMA_Init+0x654>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	009a      	lsls	r2, r3, #2
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f002 f9a9 	bl	8006f38 <DMA_CalcBaseAndBitshift>
 8004be6:	4603      	mov	r3, r0
 8004be8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e008      	b.n	8004c0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0b7      	b.n	8004d7e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a5f      	ldr	r2, [pc, #380]	; (8004d90 <HAL_DMA_Init+0x658>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d072      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5d      	ldr	r2, [pc, #372]	; (8004d94 <HAL_DMA_Init+0x65c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d06d      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5c      	ldr	r2, [pc, #368]	; (8004d98 <HAL_DMA_Init+0x660>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d068      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5a      	ldr	r2, [pc, #360]	; (8004d9c <HAL_DMA_Init+0x664>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d063      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a59      	ldr	r2, [pc, #356]	; (8004da0 <HAL_DMA_Init+0x668>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d05e      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <HAL_DMA_Init+0x66c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d059      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a56      	ldr	r2, [pc, #344]	; (8004da8 <HAL_DMA_Init+0x670>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d054      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a54      	ldr	r2, [pc, #336]	; (8004dac <HAL_DMA_Init+0x674>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d04f      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a53      	ldr	r2, [pc, #332]	; (8004db0 <HAL_DMA_Init+0x678>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d04a      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a51      	ldr	r2, [pc, #324]	; (8004db4 <HAL_DMA_Init+0x67c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d045      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a50      	ldr	r2, [pc, #320]	; (8004db8 <HAL_DMA_Init+0x680>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a4e      	ldr	r2, [pc, #312]	; (8004dbc <HAL_DMA_Init+0x684>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d03b      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a4d      	ldr	r2, [pc, #308]	; (8004dc0 <HAL_DMA_Init+0x688>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d036      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a4b      	ldr	r2, [pc, #300]	; (8004dc4 <HAL_DMA_Init+0x68c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d031      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a4a      	ldr	r2, [pc, #296]	; (8004dc8 <HAL_DMA_Init+0x690>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d02c      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a48      	ldr	r2, [pc, #288]	; (8004dcc <HAL_DMA_Init+0x694>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d027      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a47      	ldr	r2, [pc, #284]	; (8004dd0 <HAL_DMA_Init+0x698>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d022      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a45      	ldr	r2, [pc, #276]	; (8004dd4 <HAL_DMA_Init+0x69c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01d      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a44      	ldr	r2, [pc, #272]	; (8004dd8 <HAL_DMA_Init+0x6a0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d018      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a42      	ldr	r2, [pc, #264]	; (8004ddc <HAL_DMA_Init+0x6a4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <HAL_DMA_Init+0x6a8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a3f      	ldr	r2, [pc, #252]	; (8004de4 <HAL_DMA_Init+0x6ac>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a3e      	ldr	r2, [pc, #248]	; (8004de8 <HAL_DMA_Init+0x6b0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_DMA_Init+0x5c6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <HAL_DMA_Init+0x6b4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_DMA_Init+0x5ca>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <HAL_DMA_Init+0x5cc>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d032      	beq.n	8004d6e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f002 fa43 	bl	8007194 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d102      	bne.n	8004d1c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <HAL_DMA_Init+0x624>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d80c      	bhi.n	8004d5c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f002 fac0 	bl	80072c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	e008      	b.n	8004d6e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	a7fdabf8 	.word	0xa7fdabf8
 8004d8c:	cccccccd 	.word	0xcccccccd
 8004d90:	40020010 	.word	0x40020010
 8004d94:	40020028 	.word	0x40020028
 8004d98:	40020040 	.word	0x40020040
 8004d9c:	40020058 	.word	0x40020058
 8004da0:	40020070 	.word	0x40020070
 8004da4:	40020088 	.word	0x40020088
 8004da8:	400200a0 	.word	0x400200a0
 8004dac:	400200b8 	.word	0x400200b8
 8004db0:	40020410 	.word	0x40020410
 8004db4:	40020428 	.word	0x40020428
 8004db8:	40020440 	.word	0x40020440
 8004dbc:	40020458 	.word	0x40020458
 8004dc0:	40020470 	.word	0x40020470
 8004dc4:	40020488 	.word	0x40020488
 8004dc8:	400204a0 	.word	0x400204a0
 8004dcc:	400204b8 	.word	0x400204b8
 8004dd0:	58025408 	.word	0x58025408
 8004dd4:	5802541c 	.word	0x5802541c
 8004dd8:	58025430 	.word	0x58025430
 8004ddc:	58025444 	.word	0x58025444
 8004de0:	58025458 	.word	0x58025458
 8004de4:	5802546c 	.word	0x5802546c
 8004de8:	58025480 	.word	0x58025480
 8004dec:	58025494 	.word	0x58025494

08004df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e226      	b.n	800525a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_DMA_Start_IT+0x2a>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e21f      	b.n	800525a <HAL_DMA_Start_IT+0x46a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	f040 820a 	bne.w	8005244 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a68      	ldr	r2, [pc, #416]	; (8004fe4 <HAL_DMA_Start_IT+0x1f4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a66      	ldr	r2, [pc, #408]	; (8004fe8 <HAL_DMA_Start_IT+0x1f8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a65      	ldr	r2, [pc, #404]	; (8004fec <HAL_DMA_Start_IT+0x1fc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a63      	ldr	r2, [pc, #396]	; (8004ff0 <HAL_DMA_Start_IT+0x200>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a62      	ldr	r2, [pc, #392]	; (8004ff4 <HAL_DMA_Start_IT+0x204>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a60      	ldr	r2, [pc, #384]	; (8004ff8 <HAL_DMA_Start_IT+0x208>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5f      	ldr	r2, [pc, #380]	; (8004ffc <HAL_DMA_Start_IT+0x20c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_DMA_Start_IT+0x210>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a5c      	ldr	r2, [pc, #368]	; (8005004 <HAL_DMA_Start_IT+0x214>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a5a      	ldr	r2, [pc, #360]	; (8005008 <HAL_DMA_Start_IT+0x218>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a59      	ldr	r2, [pc, #356]	; (800500c <HAL_DMA_Start_IT+0x21c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a57      	ldr	r2, [pc, #348]	; (8005010 <HAL_DMA_Start_IT+0x220>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a56      	ldr	r2, [pc, #344]	; (8005014 <HAL_DMA_Start_IT+0x224>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a54      	ldr	r2, [pc, #336]	; (8005018 <HAL_DMA_Start_IT+0x228>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a53      	ldr	r2, [pc, #332]	; (800501c <HAL_DMA_Start_IT+0x22c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_Start_IT+0xee>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a51      	ldr	r2, [pc, #324]	; (8005020 <HAL_DMA_Start_IT+0x230>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <HAL_DMA_Start_IT+0x100>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <HAL_DMA_Start_IT+0x110>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f001 fe6a 	bl	8006be0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a34      	ldr	r2, [pc, #208]	; (8004fe4 <HAL_DMA_Start_IT+0x1f4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d04a      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a33      	ldr	r2, [pc, #204]	; (8004fe8 <HAL_DMA_Start_IT+0x1f8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d045      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a31      	ldr	r2, [pc, #196]	; (8004fec <HAL_DMA_Start_IT+0x1fc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d040      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a30      	ldr	r2, [pc, #192]	; (8004ff0 <HAL_DMA_Start_IT+0x200>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d03b      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <HAL_DMA_Start_IT+0x204>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d036      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <HAL_DMA_Start_IT+0x208>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d031      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <HAL_DMA_Start_IT+0x20c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02c      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <HAL_DMA_Start_IT+0x210>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d027      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a28      	ldr	r2, [pc, #160]	; (8005004 <HAL_DMA_Start_IT+0x214>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a27      	ldr	r2, [pc, #156]	; (8005008 <HAL_DMA_Start_IT+0x218>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01d      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <HAL_DMA_Start_IT+0x21c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a24      	ldr	r2, [pc, #144]	; (8005010 <HAL_DMA_Start_IT+0x220>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_DMA_Start_IT+0x224>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_DMA_Start_IT+0x228>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_DMA_Start_IT+0x22c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_DMA_Start_IT+0x1bc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <HAL_DMA_Start_IT+0x230>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_DMA_Start_IT+0x1c0>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_DMA_Start_IT+0x1c2>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d036      	beq.n	8005024 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 021e 	bic.w	r2, r3, #30
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0216 	orr.w	r2, r2, #22
 8004fc8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d03e      	beq.n	8005050 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0208 	orr.w	r2, r2, #8
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e035      	b.n	8005050 <HAL_DMA_Start_IT+0x260>
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 020e 	bic.w	r2, r3, #14
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 020a 	orr.w	r2, r2, #10
 8005036:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0204 	orr.w	r2, r2, #4
 800504e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a83      	ldr	r2, [pc, #524]	; (8005264 <HAL_DMA_Start_IT+0x474>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d072      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a82      	ldr	r2, [pc, #520]	; (8005268 <HAL_DMA_Start_IT+0x478>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d06d      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a80      	ldr	r2, [pc, #512]	; (800526c <HAL_DMA_Start_IT+0x47c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d068      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a7f      	ldr	r2, [pc, #508]	; (8005270 <HAL_DMA_Start_IT+0x480>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d063      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a7d      	ldr	r2, [pc, #500]	; (8005274 <HAL_DMA_Start_IT+0x484>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d05e      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7c      	ldr	r2, [pc, #496]	; (8005278 <HAL_DMA_Start_IT+0x488>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d059      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a7a      	ldr	r2, [pc, #488]	; (800527c <HAL_DMA_Start_IT+0x48c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d054      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a79      	ldr	r2, [pc, #484]	; (8005280 <HAL_DMA_Start_IT+0x490>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04f      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a77      	ldr	r2, [pc, #476]	; (8005284 <HAL_DMA_Start_IT+0x494>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d04a      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a76      	ldr	r2, [pc, #472]	; (8005288 <HAL_DMA_Start_IT+0x498>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d045      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a74      	ldr	r2, [pc, #464]	; (800528c <HAL_DMA_Start_IT+0x49c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d040      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a73      	ldr	r2, [pc, #460]	; (8005290 <HAL_DMA_Start_IT+0x4a0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d03b      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a71      	ldr	r2, [pc, #452]	; (8005294 <HAL_DMA_Start_IT+0x4a4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d036      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a70      	ldr	r2, [pc, #448]	; (8005298 <HAL_DMA_Start_IT+0x4a8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d031      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a6e      	ldr	r2, [pc, #440]	; (800529c <HAL_DMA_Start_IT+0x4ac>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02c      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6d      	ldr	r2, [pc, #436]	; (80052a0 <HAL_DMA_Start_IT+0x4b0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d027      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6b      	ldr	r2, [pc, #428]	; (80052a4 <HAL_DMA_Start_IT+0x4b4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d022      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6a      	ldr	r2, [pc, #424]	; (80052a8 <HAL_DMA_Start_IT+0x4b8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d01d      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a68      	ldr	r2, [pc, #416]	; (80052ac <HAL_DMA_Start_IT+0x4bc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d018      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a67      	ldr	r2, [pc, #412]	; (80052b0 <HAL_DMA_Start_IT+0x4c0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a65      	ldr	r2, [pc, #404]	; (80052b4 <HAL_DMA_Start_IT+0x4c4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a64      	ldr	r2, [pc, #400]	; (80052b8 <HAL_DMA_Start_IT+0x4c8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a62      	ldr	r2, [pc, #392]	; (80052bc <HAL_DMA_Start_IT+0x4cc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_DMA_Start_IT+0x350>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a61      	ldr	r2, [pc, #388]	; (80052c0 <HAL_DMA_Start_IT+0x4d0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d101      	bne.n	8005144 <HAL_DMA_Start_IT+0x354>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_DMA_Start_IT+0x356>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01a      	beq.n	8005180 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005166:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a37      	ldr	r2, [pc, #220]	; (8005264 <HAL_DMA_Start_IT+0x474>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d04a      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a36      	ldr	r2, [pc, #216]	; (8005268 <HAL_DMA_Start_IT+0x478>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d045      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a34      	ldr	r2, [pc, #208]	; (800526c <HAL_DMA_Start_IT+0x47c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d040      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a33      	ldr	r2, [pc, #204]	; (8005270 <HAL_DMA_Start_IT+0x480>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d03b      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a31      	ldr	r2, [pc, #196]	; (8005274 <HAL_DMA_Start_IT+0x484>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d036      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a30      	ldr	r2, [pc, #192]	; (8005278 <HAL_DMA_Start_IT+0x488>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d031      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2e      	ldr	r2, [pc, #184]	; (800527c <HAL_DMA_Start_IT+0x48c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02c      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <HAL_DMA_Start_IT+0x490>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d027      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <HAL_DMA_Start_IT+0x494>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <HAL_DMA_Start_IT+0x498>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01d      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a28      	ldr	r2, [pc, #160]	; (800528c <HAL_DMA_Start_IT+0x49c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <HAL_DMA_Start_IT+0x4a0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_DMA_Start_IT+0x4a4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a24      	ldr	r2, [pc, #144]	; (8005298 <HAL_DMA_Start_IT+0x4a8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <HAL_DMA_Start_IT+0x4ac>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_DMA_Start_IT+0x430>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_DMA_Start_IT+0x4b0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <HAL_DMA_Start_IT+0x442>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e012      	b.n	8005258 <HAL_DMA_Start_IT+0x468>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e009      	b.n	8005258 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800524a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40020010 	.word	0x40020010
 8005268:	40020028 	.word	0x40020028
 800526c:	40020040 	.word	0x40020040
 8005270:	40020058 	.word	0x40020058
 8005274:	40020070 	.word	0x40020070
 8005278:	40020088 	.word	0x40020088
 800527c:	400200a0 	.word	0x400200a0
 8005280:	400200b8 	.word	0x400200b8
 8005284:	40020410 	.word	0x40020410
 8005288:	40020428 	.word	0x40020428
 800528c:	40020440 	.word	0x40020440
 8005290:	40020458 	.word	0x40020458
 8005294:	40020470 	.word	0x40020470
 8005298:	40020488 	.word	0x40020488
 800529c:	400204a0 	.word	0x400204a0
 80052a0:	400204b8 	.word	0x400204b8
 80052a4:	58025408 	.word	0x58025408
 80052a8:	5802541c 	.word	0x5802541c
 80052ac:	58025430 	.word	0x58025430
 80052b0:	58025444 	.word	0x58025444
 80052b4:	58025458 	.word	0x58025458
 80052b8:	5802546c 	.word	0x5802546c
 80052bc:	58025480 	.word	0x58025480
 80052c0:	58025494 	.word	0x58025494

080052c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052cc:	f7fd fafe 	bl	80028cc <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e2dc      	b.n	8005896 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d008      	beq.n	80052fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e2cd      	b.n	8005896 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a76      	ldr	r2, [pc, #472]	; (80054d8 <HAL_DMA_Abort+0x214>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d04a      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a74      	ldr	r2, [pc, #464]	; (80054dc <HAL_DMA_Abort+0x218>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d045      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a73      	ldr	r2, [pc, #460]	; (80054e0 <HAL_DMA_Abort+0x21c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d040      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a71      	ldr	r2, [pc, #452]	; (80054e4 <HAL_DMA_Abort+0x220>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d03b      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a70      	ldr	r2, [pc, #448]	; (80054e8 <HAL_DMA_Abort+0x224>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d036      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6e      	ldr	r2, [pc, #440]	; (80054ec <HAL_DMA_Abort+0x228>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d031      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6d      	ldr	r2, [pc, #436]	; (80054f0 <HAL_DMA_Abort+0x22c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d02c      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6b      	ldr	r2, [pc, #428]	; (80054f4 <HAL_DMA_Abort+0x230>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d027      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6a      	ldr	r2, [pc, #424]	; (80054f8 <HAL_DMA_Abort+0x234>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d022      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <HAL_DMA_Abort+0x238>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01d      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a67      	ldr	r2, [pc, #412]	; (8005500 <HAL_DMA_Abort+0x23c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d018      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a65      	ldr	r2, [pc, #404]	; (8005504 <HAL_DMA_Abort+0x240>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a64      	ldr	r2, [pc, #400]	; (8005508 <HAL_DMA_Abort+0x244>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a62      	ldr	r2, [pc, #392]	; (800550c <HAL_DMA_Abort+0x248>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a61      	ldr	r2, [pc, #388]	; (8005510 <HAL_DMA_Abort+0x24c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_DMA_Abort+0xd6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5f      	ldr	r2, [pc, #380]	; (8005514 <HAL_DMA_Abort+0x250>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <HAL_DMA_Abort+0xda>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <HAL_DMA_Abort+0xdc>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 021e 	bic.w	r2, r2, #30
 80053b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e00a      	b.n	80053e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 020e 	bic.w	r2, r2, #14
 80053da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <HAL_DMA_Abort+0x214>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d072      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3a      	ldr	r2, [pc, #232]	; (80054dc <HAL_DMA_Abort+0x218>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d06d      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a39      	ldr	r2, [pc, #228]	; (80054e0 <HAL_DMA_Abort+0x21c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d068      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a37      	ldr	r2, [pc, #220]	; (80054e4 <HAL_DMA_Abort+0x220>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d063      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a36      	ldr	r2, [pc, #216]	; (80054e8 <HAL_DMA_Abort+0x224>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d05e      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a34      	ldr	r2, [pc, #208]	; (80054ec <HAL_DMA_Abort+0x228>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d059      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <HAL_DMA_Abort+0x22c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d054      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a31      	ldr	r2, [pc, #196]	; (80054f4 <HAL_DMA_Abort+0x230>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d04f      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <HAL_DMA_Abort+0x234>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d04a      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2e      	ldr	r2, [pc, #184]	; (80054fc <HAL_DMA_Abort+0x238>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d045      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2d      	ldr	r2, [pc, #180]	; (8005500 <HAL_DMA_Abort+0x23c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d040      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2b      	ldr	r2, [pc, #172]	; (8005504 <HAL_DMA_Abort+0x240>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d03b      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2a      	ldr	r2, [pc, #168]	; (8005508 <HAL_DMA_Abort+0x244>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d036      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a28      	ldr	r2, [pc, #160]	; (800550c <HAL_DMA_Abort+0x248>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d031      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a27      	ldr	r2, [pc, #156]	; (8005510 <HAL_DMA_Abort+0x24c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d02c      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a25      	ldr	r2, [pc, #148]	; (8005514 <HAL_DMA_Abort+0x250>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d027      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a24      	ldr	r2, [pc, #144]	; (8005518 <HAL_DMA_Abort+0x254>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d022      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a22      	ldr	r2, [pc, #136]	; (800551c <HAL_DMA_Abort+0x258>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01d      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a21      	ldr	r2, [pc, #132]	; (8005520 <HAL_DMA_Abort+0x25c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d018      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <HAL_DMA_Abort+0x260>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_DMA_Abort+0x264>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	; (800552c <HAL_DMA_Abort+0x268>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <HAL_DMA_Abort+0x26c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_DMA_Abort+0x20e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_DMA_Abort+0x270>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d132      	bne.n	8005538 <HAL_DMA_Abort+0x274>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e031      	b.n	800553a <HAL_DMA_Abort+0x276>
 80054d6:	bf00      	nop
 80054d8:	40020010 	.word	0x40020010
 80054dc:	40020028 	.word	0x40020028
 80054e0:	40020040 	.word	0x40020040
 80054e4:	40020058 	.word	0x40020058
 80054e8:	40020070 	.word	0x40020070
 80054ec:	40020088 	.word	0x40020088
 80054f0:	400200a0 	.word	0x400200a0
 80054f4:	400200b8 	.word	0x400200b8
 80054f8:	40020410 	.word	0x40020410
 80054fc:	40020428 	.word	0x40020428
 8005500:	40020440 	.word	0x40020440
 8005504:	40020458 	.word	0x40020458
 8005508:	40020470 	.word	0x40020470
 800550c:	40020488 	.word	0x40020488
 8005510:	400204a0 	.word	0x400204a0
 8005514:	400204b8 	.word	0x400204b8
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800554c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6d      	ldr	r2, [pc, #436]	; (8005708 <HAL_DMA_Abort+0x444>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d04a      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a6b      	ldr	r2, [pc, #428]	; (800570c <HAL_DMA_Abort+0x448>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d045      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6a      	ldr	r2, [pc, #424]	; (8005710 <HAL_DMA_Abort+0x44c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d040      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a68      	ldr	r2, [pc, #416]	; (8005714 <HAL_DMA_Abort+0x450>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d03b      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a67      	ldr	r2, [pc, #412]	; (8005718 <HAL_DMA_Abort+0x454>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d036      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a65      	ldr	r2, [pc, #404]	; (800571c <HAL_DMA_Abort+0x458>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d031      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a64      	ldr	r2, [pc, #400]	; (8005720 <HAL_DMA_Abort+0x45c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d02c      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a62      	ldr	r2, [pc, #392]	; (8005724 <HAL_DMA_Abort+0x460>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d027      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a61      	ldr	r2, [pc, #388]	; (8005728 <HAL_DMA_Abort+0x464>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5f      	ldr	r2, [pc, #380]	; (800572c <HAL_DMA_Abort+0x468>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01d      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5e      	ldr	r2, [pc, #376]	; (8005730 <HAL_DMA_Abort+0x46c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5c      	ldr	r2, [pc, #368]	; (8005734 <HAL_DMA_Abort+0x470>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5b      	ldr	r2, [pc, #364]	; (8005738 <HAL_DMA_Abort+0x474>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a59      	ldr	r2, [pc, #356]	; (800573c <HAL_DMA_Abort+0x478>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a58      	ldr	r2, [pc, #352]	; (8005740 <HAL_DMA_Abort+0x47c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_DMA_Abort+0x32a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a56      	ldr	r2, [pc, #344]	; (8005744 <HAL_DMA_Abort+0x480>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d108      	bne.n	8005600 <HAL_DMA_Abort+0x33c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e007      	b.n	8005610 <HAL_DMA_Abort+0x34c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005610:	e013      	b.n	800563a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005612:	f7fd f95b 	bl	80028cc <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b05      	cmp	r3, #5
 800561e:	d90c      	bls.n	800563a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2203      	movs	r2, #3
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e12d      	b.n	8005896 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <HAL_DMA_Abort+0x444>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d04a      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2d      	ldr	r2, [pc, #180]	; (800570c <HAL_DMA_Abort+0x448>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d045      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <HAL_DMA_Abort+0x44c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d040      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2a      	ldr	r2, [pc, #168]	; (8005714 <HAL_DMA_Abort+0x450>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d03b      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a29      	ldr	r2, [pc, #164]	; (8005718 <HAL_DMA_Abort+0x454>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d036      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a27      	ldr	r2, [pc, #156]	; (800571c <HAL_DMA_Abort+0x458>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d031      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <HAL_DMA_Abort+0x45c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d02c      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a24      	ldr	r2, [pc, #144]	; (8005724 <HAL_DMA_Abort+0x460>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d027      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a23      	ldr	r2, [pc, #140]	; (8005728 <HAL_DMA_Abort+0x464>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a21      	ldr	r2, [pc, #132]	; (800572c <HAL_DMA_Abort+0x468>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a20      	ldr	r2, [pc, #128]	; (8005730 <HAL_DMA_Abort+0x46c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <HAL_DMA_Abort+0x470>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <HAL_DMA_Abort+0x474>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_DMA_Abort+0x478>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <HAL_DMA_Abort+0x47c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_DMA_Abort+0x422>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_DMA_Abort+0x480>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_DMA_Abort+0x426>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_DMA_Abort+0x428>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02b      	beq.n	8005748 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	223f      	movs	r2, #63	; 0x3f
 8005700:	409a      	lsls	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	609a      	str	r2, [r3, #8]
 8005706:	e02a      	b.n	800575e <HAL_DMA_Abort+0x49a>
 8005708:	40020010 	.word	0x40020010
 800570c:	40020028 	.word	0x40020028
 8005710:	40020040 	.word	0x40020040
 8005714:	40020058 	.word	0x40020058
 8005718:	40020070 	.word	0x40020070
 800571c:	40020088 	.word	0x40020088
 8005720:	400200a0 	.word	0x400200a0
 8005724:	400200b8 	.word	0x400200b8
 8005728:	40020410 	.word	0x40020410
 800572c:	40020428 	.word	0x40020428
 8005730:	40020440 	.word	0x40020440
 8005734:	40020458 	.word	0x40020458
 8005738:	40020470 	.word	0x40020470
 800573c:	40020488 	.word	0x40020488
 8005740:	400204a0 	.word	0x400204a0
 8005744:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2201      	movs	r2, #1
 8005758:	409a      	lsls	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a4f      	ldr	r2, [pc, #316]	; (80058a0 <HAL_DMA_Abort+0x5dc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d072      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a4d      	ldr	r2, [pc, #308]	; (80058a4 <HAL_DMA_Abort+0x5e0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d06d      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a4c      	ldr	r2, [pc, #304]	; (80058a8 <HAL_DMA_Abort+0x5e4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d068      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a4a      	ldr	r2, [pc, #296]	; (80058ac <HAL_DMA_Abort+0x5e8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d063      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a49      	ldr	r2, [pc, #292]	; (80058b0 <HAL_DMA_Abort+0x5ec>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d05e      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a47      	ldr	r2, [pc, #284]	; (80058b4 <HAL_DMA_Abort+0x5f0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d059      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a46      	ldr	r2, [pc, #280]	; (80058b8 <HAL_DMA_Abort+0x5f4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d054      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a44      	ldr	r2, [pc, #272]	; (80058bc <HAL_DMA_Abort+0x5f8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d04f      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a43      	ldr	r2, [pc, #268]	; (80058c0 <HAL_DMA_Abort+0x5fc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d04a      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a41      	ldr	r2, [pc, #260]	; (80058c4 <HAL_DMA_Abort+0x600>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d045      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a40      	ldr	r2, [pc, #256]	; (80058c8 <HAL_DMA_Abort+0x604>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d040      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a3e      	ldr	r2, [pc, #248]	; (80058cc <HAL_DMA_Abort+0x608>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d03b      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3d      	ldr	r2, [pc, #244]	; (80058d0 <HAL_DMA_Abort+0x60c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d036      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3b      	ldr	r2, [pc, #236]	; (80058d4 <HAL_DMA_Abort+0x610>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d031      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a3a      	ldr	r2, [pc, #232]	; (80058d8 <HAL_DMA_Abort+0x614>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d02c      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a38      	ldr	r2, [pc, #224]	; (80058dc <HAL_DMA_Abort+0x618>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d027      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a37      	ldr	r2, [pc, #220]	; (80058e0 <HAL_DMA_Abort+0x61c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d022      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a35      	ldr	r2, [pc, #212]	; (80058e4 <HAL_DMA_Abort+0x620>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <HAL_DMA_Abort+0x624>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d018      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a32      	ldr	r2, [pc, #200]	; (80058ec <HAL_DMA_Abort+0x628>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a31      	ldr	r2, [pc, #196]	; (80058f0 <HAL_DMA_Abort+0x62c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2f      	ldr	r2, [pc, #188]	; (80058f4 <HAL_DMA_Abort+0x630>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2e      	ldr	r2, [pc, #184]	; (80058f8 <HAL_DMA_Abort+0x634>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_DMA_Abort+0x58a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <HAL_DMA_Abort+0x638>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <HAL_DMA_Abort+0x58e>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <HAL_DMA_Abort+0x590>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d015      	beq.n	8005884 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005860:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005882:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40020010 	.word	0x40020010
 80058a4:	40020028 	.word	0x40020028
 80058a8:	40020040 	.word	0x40020040
 80058ac:	40020058 	.word	0x40020058
 80058b0:	40020070 	.word	0x40020070
 80058b4:	40020088 	.word	0x40020088
 80058b8:	400200a0 	.word	0x400200a0
 80058bc:	400200b8 	.word	0x400200b8
 80058c0:	40020410 	.word	0x40020410
 80058c4:	40020428 	.word	0x40020428
 80058c8:	40020440 	.word	0x40020440
 80058cc:	40020458 	.word	0x40020458
 80058d0:	40020470 	.word	0x40020470
 80058d4:	40020488 	.word	0x40020488
 80058d8:	400204a0 	.word	0x400204a0
 80058dc:	400204b8 	.word	0x400204b8
 80058e0:	58025408 	.word	0x58025408
 80058e4:	5802541c 	.word	0x5802541c
 80058e8:	58025430 	.word	0x58025430
 80058ec:	58025444 	.word	0x58025444
 80058f0:	58025458 	.word	0x58025458
 80058f4:	5802546c 	.word	0x5802546c
 80058f8:	58025480 	.word	0x58025480
 80058fc:	58025494 	.word	0x58025494

08005900 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e237      	b.n	8005d82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d004      	beq.n	8005928 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e22c      	b.n	8005d82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5c      	ldr	r2, [pc, #368]	; (8005aa0 <HAL_DMA_Abort_IT+0x1a0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d04a      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5b      	ldr	r2, [pc, #364]	; (8005aa4 <HAL_DMA_Abort_IT+0x1a4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d045      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a59      	ldr	r2, [pc, #356]	; (8005aa8 <HAL_DMA_Abort_IT+0x1a8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d040      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a58      	ldr	r2, [pc, #352]	; (8005aac <HAL_DMA_Abort_IT+0x1ac>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d03b      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a56      	ldr	r2, [pc, #344]	; (8005ab0 <HAL_DMA_Abort_IT+0x1b0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d036      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a55      	ldr	r2, [pc, #340]	; (8005ab4 <HAL_DMA_Abort_IT+0x1b4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d031      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a53      	ldr	r2, [pc, #332]	; (8005ab8 <HAL_DMA_Abort_IT+0x1b8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02c      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a52      	ldr	r2, [pc, #328]	; (8005abc <HAL_DMA_Abort_IT+0x1bc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d027      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a50      	ldr	r2, [pc, #320]	; (8005ac0 <HAL_DMA_Abort_IT+0x1c0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a4f      	ldr	r2, [pc, #316]	; (8005ac4 <HAL_DMA_Abort_IT+0x1c4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01d      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a4d      	ldr	r2, [pc, #308]	; (8005ac8 <HAL_DMA_Abort_IT+0x1c8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a4c      	ldr	r2, [pc, #304]	; (8005acc <HAL_DMA_Abort_IT+0x1cc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a4a      	ldr	r2, [pc, #296]	; (8005ad0 <HAL_DMA_Abort_IT+0x1d0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a49      	ldr	r2, [pc, #292]	; (8005ad4 <HAL_DMA_Abort_IT+0x1d4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a47      	ldr	r2, [pc, #284]	; (8005ad8 <HAL_DMA_Abort_IT+0x1d8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xc8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a46      	ldr	r2, [pc, #280]	; (8005adc <HAL_DMA_Abort_IT+0x1dc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_DMA_Abort_IT+0xcc>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_DMA_Abort_IT+0xce>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8086 	beq.w	8005ae0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2204      	movs	r2, #4
 80059d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <HAL_DMA_Abort_IT+0x1a0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d04a      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2e      	ldr	r2, [pc, #184]	; (8005aa4 <HAL_DMA_Abort_IT+0x1a4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d045      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <HAL_DMA_Abort_IT+0x1a8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d040      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <HAL_DMA_Abort_IT+0x1ac>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d03b      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <HAL_DMA_Abort_IT+0x1b0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d036      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a28      	ldr	r2, [pc, #160]	; (8005ab4 <HAL_DMA_Abort_IT+0x1b4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d031      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a26      	ldr	r2, [pc, #152]	; (8005ab8 <HAL_DMA_Abort_IT+0x1b8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d02c      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a25      	ldr	r2, [pc, #148]	; (8005abc <HAL_DMA_Abort_IT+0x1bc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d027      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <HAL_DMA_Abort_IT+0x1c0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d022      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <HAL_DMA_Abort_IT+0x1c4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d01d      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <HAL_DMA_Abort_IT+0x1c8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_DMA_Abort_IT+0x1cc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_DMA_Abort_IT+0x1d0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <HAL_DMA_Abort_IT+0x1d4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <HAL_DMA_Abort_IT+0x1d8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x17c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a19      	ldr	r2, [pc, #100]	; (8005adc <HAL_DMA_Abort_IT+0x1dc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <HAL_DMA_Abort_IT+0x18e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e178      	b.n	8005d80 <HAL_DMA_Abort_IT+0x480>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e16f      	b.n	8005d80 <HAL_DMA_Abort_IT+0x480>
 8005aa0:	40020010 	.word	0x40020010
 8005aa4:	40020028 	.word	0x40020028
 8005aa8:	40020040 	.word	0x40020040
 8005aac:	40020058 	.word	0x40020058
 8005ab0:	40020070 	.word	0x40020070
 8005ab4:	40020088 	.word	0x40020088
 8005ab8:	400200a0 	.word	0x400200a0
 8005abc:	400200b8 	.word	0x400200b8
 8005ac0:	40020410 	.word	0x40020410
 8005ac4:	40020428 	.word	0x40020428
 8005ac8:	40020440 	.word	0x40020440
 8005acc:	40020458 	.word	0x40020458
 8005ad0:	40020470 	.word	0x40020470
 8005ad4:	40020488 	.word	0x40020488
 8005ad8:	400204a0 	.word	0x400204a0
 8005adc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 020e 	bic.w	r2, r2, #14
 8005aee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6c      	ldr	r2, [pc, #432]	; (8005ca8 <HAL_DMA_Abort_IT+0x3a8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04a      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6b      	ldr	r2, [pc, #428]	; (8005cac <HAL_DMA_Abort_IT+0x3ac>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d045      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a69      	ldr	r2, [pc, #420]	; (8005cb0 <HAL_DMA_Abort_IT+0x3b0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d040      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a68      	ldr	r2, [pc, #416]	; (8005cb4 <HAL_DMA_Abort_IT+0x3b4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d03b      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a66      	ldr	r2, [pc, #408]	; (8005cb8 <HAL_DMA_Abort_IT+0x3b8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d036      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a65      	ldr	r2, [pc, #404]	; (8005cbc <HAL_DMA_Abort_IT+0x3bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d031      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a63      	ldr	r2, [pc, #396]	; (8005cc0 <HAL_DMA_Abort_IT+0x3c0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02c      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a62      	ldr	r2, [pc, #392]	; (8005cc4 <HAL_DMA_Abort_IT+0x3c4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d027      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a60      	ldr	r2, [pc, #384]	; (8005cc8 <HAL_DMA_Abort_IT+0x3c8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d022      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5f      	ldr	r2, [pc, #380]	; (8005ccc <HAL_DMA_Abort_IT+0x3cc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d01d      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5d      	ldr	r2, [pc, #372]	; (8005cd0 <HAL_DMA_Abort_IT+0x3d0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d018      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a5c      	ldr	r2, [pc, #368]	; (8005cd4 <HAL_DMA_Abort_IT+0x3d4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5a      	ldr	r2, [pc, #360]	; (8005cd8 <HAL_DMA_Abort_IT+0x3d8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00e      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a59      	ldr	r2, [pc, #356]	; (8005cdc <HAL_DMA_Abort_IT+0x3dc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a57      	ldr	r2, [pc, #348]	; (8005ce0 <HAL_DMA_Abort_IT+0x3e0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x290>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a56      	ldr	r2, [pc, #344]	; (8005ce4 <HAL_DMA_Abort_IT+0x3e4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <HAL_DMA_Abort_IT+0x2a2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e007      	b.n	8005bb2 <HAL_DMA_Abort_IT+0x2b2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a3c      	ldr	r2, [pc, #240]	; (8005ca8 <HAL_DMA_Abort_IT+0x3a8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d072      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <HAL_DMA_Abort_IT+0x3ac>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d06d      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a39      	ldr	r2, [pc, #228]	; (8005cb0 <HAL_DMA_Abort_IT+0x3b0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d068      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a37      	ldr	r2, [pc, #220]	; (8005cb4 <HAL_DMA_Abort_IT+0x3b4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d063      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a36      	ldr	r2, [pc, #216]	; (8005cb8 <HAL_DMA_Abort_IT+0x3b8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d05e      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a34      	ldr	r2, [pc, #208]	; (8005cbc <HAL_DMA_Abort_IT+0x3bc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d059      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <HAL_DMA_Abort_IT+0x3c0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d054      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a31      	ldr	r2, [pc, #196]	; (8005cc4 <HAL_DMA_Abort_IT+0x3c4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d04f      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a30      	ldr	r2, [pc, #192]	; (8005cc8 <HAL_DMA_Abort_IT+0x3c8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d04a      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <HAL_DMA_Abort_IT+0x3cc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d045      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2d      	ldr	r2, [pc, #180]	; (8005cd0 <HAL_DMA_Abort_IT+0x3d0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d040      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DMA_Abort_IT+0x3d4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d03b      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <HAL_DMA_Abort_IT+0x3d8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d036      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <HAL_DMA_Abort_IT+0x3dc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d031      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <HAL_DMA_Abort_IT+0x3e0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d02c      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <HAL_DMA_Abort_IT+0x3e4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d027      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <HAL_DMA_Abort_IT+0x3e8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_DMA_Abort_IT+0x3ec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <HAL_DMA_Abort_IT+0x3f0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1f      	ldr	r2, [pc, #124]	; (8005cf4 <HAL_DMA_Abort_IT+0x3f4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <HAL_DMA_Abort_IT+0x3f8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <HAL_DMA_Abort_IT+0x3fc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <HAL_DMA_Abort_IT+0x400>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_DMA_Abort_IT+0x3a2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_DMA_Abort_IT+0x404>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d132      	bne.n	8005d08 <HAL_DMA_Abort_IT+0x408>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e031      	b.n	8005d0a <HAL_DMA_Abort_IT+0x40a>
 8005ca6:	bf00      	nop
 8005ca8:	40020010 	.word	0x40020010
 8005cac:	40020028 	.word	0x40020028
 8005cb0:	40020040 	.word	0x40020040
 8005cb4:	40020058 	.word	0x40020058
 8005cb8:	40020070 	.word	0x40020070
 8005cbc:	40020088 	.word	0x40020088
 8005cc0:	400200a0 	.word	0x400200a0
 8005cc4:	400200b8 	.word	0x400200b8
 8005cc8:	40020410 	.word	0x40020410
 8005ccc:	40020428 	.word	0x40020428
 8005cd0:	40020440 	.word	0x40020440
 8005cd4:	40020458 	.word	0x40020458
 8005cd8:	40020470 	.word	0x40020470
 8005cdc:	40020488 	.word	0x40020488
 8005ce0:	400204a0 	.word	0x400204a0
 8005ce4:	400204b8 	.word	0x400204b8
 8005ce8:	58025408 	.word	0x58025408
 8005cec:	5802541c 	.word	0x5802541c
 8005cf0:	58025430 	.word	0x58025430
 8005cf4:	58025444 	.word	0x58025444
 8005cf8:	58025458 	.word	0x58025458
 8005cfc:	5802546c 	.word	0x5802546c
 8005d00:	58025480 	.word	0x58025480
 8005d04:	58025494 	.word	0x58025494
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d028      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d28:	f003 031f 	and.w	r3, r3, #31
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00c      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop

08005d8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d98:	4b67      	ldr	r3, [pc, #412]	; (8005f38 <HAL_DMA_IRQHandler+0x1ac>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a67      	ldr	r2, [pc, #412]	; (8005f3c <HAL_DMA_IRQHandler+0x1b0>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	0a9b      	lsrs	r3, r3, #10
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005daa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a5f      	ldr	r2, [pc, #380]	; (8005f40 <HAL_DMA_IRQHandler+0x1b4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d04a      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a5d      	ldr	r2, [pc, #372]	; (8005f44 <HAL_DMA_IRQHandler+0x1b8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d045      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a5c      	ldr	r2, [pc, #368]	; (8005f48 <HAL_DMA_IRQHandler+0x1bc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d040      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a5a      	ldr	r2, [pc, #360]	; (8005f4c <HAL_DMA_IRQHandler+0x1c0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d03b      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a59      	ldr	r2, [pc, #356]	; (8005f50 <HAL_DMA_IRQHandler+0x1c4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d036      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a57      	ldr	r2, [pc, #348]	; (8005f54 <HAL_DMA_IRQHandler+0x1c8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d031      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a56      	ldr	r2, [pc, #344]	; (8005f58 <HAL_DMA_IRQHandler+0x1cc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d02c      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a54      	ldr	r2, [pc, #336]	; (8005f5c <HAL_DMA_IRQHandler+0x1d0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d027      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a53      	ldr	r2, [pc, #332]	; (8005f60 <HAL_DMA_IRQHandler+0x1d4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d022      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a51      	ldr	r2, [pc, #324]	; (8005f64 <HAL_DMA_IRQHandler+0x1d8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01d      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a50      	ldr	r2, [pc, #320]	; (8005f68 <HAL_DMA_IRQHandler+0x1dc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d018      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a4e      	ldr	r2, [pc, #312]	; (8005f6c <HAL_DMA_IRQHandler+0x1e0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a4d      	ldr	r2, [pc, #308]	; (8005f70 <HAL_DMA_IRQHandler+0x1e4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00e      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a4b      	ldr	r2, [pc, #300]	; (8005f74 <HAL_DMA_IRQHandler+0x1e8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d009      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a4a      	ldr	r2, [pc, #296]	; (8005f78 <HAL_DMA_IRQHandler+0x1ec>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d004      	beq.n	8005e5e <HAL_DMA_IRQHandler+0xd2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a48      	ldr	r2, [pc, #288]	; (8005f7c <HAL_DMA_IRQHandler+0x1f0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_DMA_IRQHandler+0xd6>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <HAL_DMA_IRQHandler+0xd8>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 842b 	beq.w	80066c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2208      	movs	r2, #8
 8005e74:	409a      	lsls	r2, r3
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80a2 	beq.w	8005fc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2e      	ldr	r2, [pc, #184]	; (8005f40 <HAL_DMA_IRQHandler+0x1b4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d04a      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2d      	ldr	r2, [pc, #180]	; (8005f44 <HAL_DMA_IRQHandler+0x1b8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d045      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2b      	ldr	r2, [pc, #172]	; (8005f48 <HAL_DMA_IRQHandler+0x1bc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d040      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <HAL_DMA_IRQHandler+0x1c0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d03b      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <HAL_DMA_IRQHandler+0x1c4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d036      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <HAL_DMA_IRQHandler+0x1c8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d031      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <HAL_DMA_IRQHandler+0x1cc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02c      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <HAL_DMA_IRQHandler+0x1d0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d027      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <HAL_DMA_IRQHandler+0x1d4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <HAL_DMA_IRQHandler+0x1d8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d01d      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <HAL_DMA_IRQHandler+0x1dc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <HAL_DMA_IRQHandler+0x1e0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_DMA_IRQHandler+0x1e4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_DMA_IRQHandler+0x1e8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <HAL_DMA_IRQHandler+0x1ec>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x194>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <HAL_DMA_IRQHandler+0x1f0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d12f      	bne.n	8005f80 <HAL_DMA_IRQHandler+0x1f4>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf14      	ite	ne
 8005f2e:	2301      	movne	r3, #1
 8005f30:	2300      	moveq	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	e02e      	b.n	8005f94 <HAL_DMA_IRQHandler+0x208>
 8005f36:	bf00      	nop
 8005f38:	24000030 	.word	0x24000030
 8005f3c:	1b4e81b5 	.word	0x1b4e81b5
 8005f40:	40020010 	.word	0x40020010
 8005f44:	40020028 	.word	0x40020028
 8005f48:	40020040 	.word	0x40020040
 8005f4c:	40020058 	.word	0x40020058
 8005f50:	40020070 	.word	0x40020070
 8005f54:	40020088 	.word	0x40020088
 8005f58:	400200a0 	.word	0x400200a0
 8005f5c:	400200b8 	.word	0x400200b8
 8005f60:	40020410 	.word	0x40020410
 8005f64:	40020428 	.word	0x40020428
 8005f68:	40020440 	.word	0x40020440
 8005f6c:	40020458 	.word	0x40020458
 8005f70:	40020470 	.word	0x40020470
 8005f74:	40020488 	.word	0x40020488
 8005f78:	400204a0 	.word	0x400204a0
 8005f7c:	400204b8 	.word	0x400204b8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d015      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0204 	bic.w	r2, r2, #4
 8005fa6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f043 0201 	orr.w	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d06e      	beq.n	80060b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a69      	ldr	r2, [pc, #420]	; (8006184 <HAL_DMA_IRQHandler+0x3f8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d04a      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a67      	ldr	r2, [pc, #412]	; (8006188 <HAL_DMA_IRQHandler+0x3fc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d045      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a66      	ldr	r2, [pc, #408]	; (800618c <HAL_DMA_IRQHandler+0x400>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d040      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a64      	ldr	r2, [pc, #400]	; (8006190 <HAL_DMA_IRQHandler+0x404>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d03b      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a63      	ldr	r2, [pc, #396]	; (8006194 <HAL_DMA_IRQHandler+0x408>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d036      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a61      	ldr	r2, [pc, #388]	; (8006198 <HAL_DMA_IRQHandler+0x40c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d031      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a60      	ldr	r2, [pc, #384]	; (800619c <HAL_DMA_IRQHandler+0x410>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d02c      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a5e      	ldr	r2, [pc, #376]	; (80061a0 <HAL_DMA_IRQHandler+0x414>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d027      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a5d      	ldr	r2, [pc, #372]	; (80061a4 <HAL_DMA_IRQHandler+0x418>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d022      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a5b      	ldr	r2, [pc, #364]	; (80061a8 <HAL_DMA_IRQHandler+0x41c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01d      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5a      	ldr	r2, [pc, #360]	; (80061ac <HAL_DMA_IRQHandler+0x420>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d018      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a58      	ldr	r2, [pc, #352]	; (80061b0 <HAL_DMA_IRQHandler+0x424>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a57      	ldr	r2, [pc, #348]	; (80061b4 <HAL_DMA_IRQHandler+0x428>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00e      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a55      	ldr	r2, [pc, #340]	; (80061b8 <HAL_DMA_IRQHandler+0x42c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a54      	ldr	r2, [pc, #336]	; (80061bc <HAL_DMA_IRQHandler+0x430>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_DMA_IRQHandler+0x2ee>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a52      	ldr	r2, [pc, #328]	; (80061c0 <HAL_DMA_IRQHandler+0x434>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d10a      	bne.n	8006090 <HAL_DMA_IRQHandler+0x304>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	e003      	b.n	8006098 <HAL_DMA_IRQHandler+0x30c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00d      	beq.n	80060b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	2201      	movs	r2, #1
 80060a6:	409a      	lsls	r2, r3
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b0:	f043 0202 	orr.w	r2, r3, #2
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2204      	movs	r2, #4
 80060c2:	409a      	lsls	r2, r3
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 808f 	beq.w	80061ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2c      	ldr	r2, [pc, #176]	; (8006184 <HAL_DMA_IRQHandler+0x3f8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d04a      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	; (8006188 <HAL_DMA_IRQHandler+0x3fc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d045      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a29      	ldr	r2, [pc, #164]	; (800618c <HAL_DMA_IRQHandler+0x400>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d040      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a27      	ldr	r2, [pc, #156]	; (8006190 <HAL_DMA_IRQHandler+0x404>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d03b      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a26      	ldr	r2, [pc, #152]	; (8006194 <HAL_DMA_IRQHandler+0x408>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d036      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a24      	ldr	r2, [pc, #144]	; (8006198 <HAL_DMA_IRQHandler+0x40c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d031      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a23      	ldr	r2, [pc, #140]	; (800619c <HAL_DMA_IRQHandler+0x410>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d02c      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a21      	ldr	r2, [pc, #132]	; (80061a0 <HAL_DMA_IRQHandler+0x414>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d027      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <HAL_DMA_IRQHandler+0x418>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d022      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_DMA_IRQHandler+0x41c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01d      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <HAL_DMA_IRQHandler+0x420>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d018      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <HAL_DMA_IRQHandler+0x424>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <HAL_DMA_IRQHandler+0x428>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <HAL_DMA_IRQHandler+0x42c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a17      	ldr	r2, [pc, #92]	; (80061bc <HAL_DMA_IRQHandler+0x430>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_DMA_IRQHandler+0x3e2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <HAL_DMA_IRQHandler+0x434>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d12a      	bne.n	80061c4 <HAL_DMA_IRQHandler+0x438>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e023      	b.n	80061cc <HAL_DMA_IRQHandler+0x440>
 8006184:	40020010 	.word	0x40020010
 8006188:	40020028 	.word	0x40020028
 800618c:	40020040 	.word	0x40020040
 8006190:	40020058 	.word	0x40020058
 8006194:	40020070 	.word	0x40020070
 8006198:	40020088 	.word	0x40020088
 800619c:	400200a0 	.word	0x400200a0
 80061a0:	400200b8 	.word	0x400200b8
 80061a4:	40020410 	.word	0x40020410
 80061a8:	40020428 	.word	0x40020428
 80061ac:	40020440 	.word	0x40020440
 80061b0:	40020458 	.word	0x40020458
 80061b4:	40020470 	.word	0x40020470
 80061b8:	40020488 	.word	0x40020488
 80061bc:	400204a0 	.word	0x400204a0
 80061c0:	400204b8 	.word	0x400204b8
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	2204      	movs	r2, #4
 80061da:	409a      	lsls	r2, r3
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e4:	f043 0204 	orr.w	r2, r3, #4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2210      	movs	r2, #16
 80061f6:	409a      	lsls	r2, r3
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80a6 	beq.w	800634e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a85      	ldr	r2, [pc, #532]	; (800641c <HAL_DMA_IRQHandler+0x690>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a83      	ldr	r2, [pc, #524]	; (8006420 <HAL_DMA_IRQHandler+0x694>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a82      	ldr	r2, [pc, #520]	; (8006424 <HAL_DMA_IRQHandler+0x698>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a80      	ldr	r2, [pc, #512]	; (8006428 <HAL_DMA_IRQHandler+0x69c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a7f      	ldr	r2, [pc, #508]	; (800642c <HAL_DMA_IRQHandler+0x6a0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a7d      	ldr	r2, [pc, #500]	; (8006430 <HAL_DMA_IRQHandler+0x6a4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7c      	ldr	r2, [pc, #496]	; (8006434 <HAL_DMA_IRQHandler+0x6a8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <HAL_DMA_IRQHandler+0x6ac>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a79      	ldr	r2, [pc, #484]	; (800643c <HAL_DMA_IRQHandler+0x6b0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a77      	ldr	r2, [pc, #476]	; (8006440 <HAL_DMA_IRQHandler+0x6b4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a76      	ldr	r2, [pc, #472]	; (8006444 <HAL_DMA_IRQHandler+0x6b8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a74      	ldr	r2, [pc, #464]	; (8006448 <HAL_DMA_IRQHandler+0x6bc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a73      	ldr	r2, [pc, #460]	; (800644c <HAL_DMA_IRQHandler+0x6c0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a71      	ldr	r2, [pc, #452]	; (8006450 <HAL_DMA_IRQHandler+0x6c4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a70      	ldr	r2, [pc, #448]	; (8006454 <HAL_DMA_IRQHandler+0x6c8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x516>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6e      	ldr	r2, [pc, #440]	; (8006458 <HAL_DMA_IRQHandler+0x6cc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10a      	bne.n	80062b8 <HAL_DMA_IRQHandler+0x52c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e009      	b.n	80062cc <HAL_DMA_IRQHandler+0x540>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bf14      	ite	ne
 80062c6:	2301      	movne	r3, #1
 80062c8:	2300      	moveq	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d03e      	beq.n	800634e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	2210      	movs	r2, #16
 80062da:	409a      	lsls	r2, r3
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d018      	beq.n	8006320 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d108      	bne.n	800630e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d024      	beq.n	800634e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
 800630c:	e01f      	b.n	800634e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01b      	beq.n	800634e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
 800631e:	e016      	b.n	800634e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d107      	bne.n	800633e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0208 	bic.w	r2, r2, #8
 800633c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	2220      	movs	r2, #32
 8006358:	409a      	lsls	r2, r3
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	4013      	ands	r3, r2
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8110 	beq.w	8006584 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a2c      	ldr	r2, [pc, #176]	; (800641c <HAL_DMA_IRQHandler+0x690>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d04a      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2b      	ldr	r2, [pc, #172]	; (8006420 <HAL_DMA_IRQHandler+0x694>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d045      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a29      	ldr	r2, [pc, #164]	; (8006424 <HAL_DMA_IRQHandler+0x698>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d040      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a28      	ldr	r2, [pc, #160]	; (8006428 <HAL_DMA_IRQHandler+0x69c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d03b      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <HAL_DMA_IRQHandler+0x6a0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d036      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a25      	ldr	r2, [pc, #148]	; (8006430 <HAL_DMA_IRQHandler+0x6a4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d031      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a23      	ldr	r2, [pc, #140]	; (8006434 <HAL_DMA_IRQHandler+0x6a8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d02c      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a22      	ldr	r2, [pc, #136]	; (8006438 <HAL_DMA_IRQHandler+0x6ac>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d027      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <HAL_DMA_IRQHandler+0x6b0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d022      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <HAL_DMA_IRQHandler+0x6b4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d01d      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <HAL_DMA_IRQHandler+0x6b8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d018      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_DMA_IRQHandler+0x6bc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_DMA_IRQHandler+0x6c0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a19      	ldr	r2, [pc, #100]	; (8006450 <HAL_DMA_IRQHandler+0x6c4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a17      	ldr	r2, [pc, #92]	; (8006454 <HAL_DMA_IRQHandler+0x6c8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_DMA_IRQHandler+0x678>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a16      	ldr	r2, [pc, #88]	; (8006458 <HAL_DMA_IRQHandler+0x6cc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d12b      	bne.n	800645c <HAL_DMA_IRQHandler+0x6d0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	bf14      	ite	ne
 8006412:	2301      	movne	r3, #1
 8006414:	2300      	moveq	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	e02a      	b.n	8006470 <HAL_DMA_IRQHandler+0x6e4>
 800641a:	bf00      	nop
 800641c:	40020010 	.word	0x40020010
 8006420:	40020028 	.word	0x40020028
 8006424:	40020040 	.word	0x40020040
 8006428:	40020058 	.word	0x40020058
 800642c:	40020070 	.word	0x40020070
 8006430:	40020088 	.word	0x40020088
 8006434:	400200a0 	.word	0x400200a0
 8006438:	400200b8 	.word	0x400200b8
 800643c:	40020410 	.word	0x40020410
 8006440:	40020428 	.word	0x40020428
 8006444:	40020440 	.word	0x40020440
 8006448:	40020458 	.word	0x40020458
 800644c:	40020470 	.word	0x40020470
 8006450:	40020488 	.word	0x40020488
 8006454:	400204a0 	.word	0x400204a0
 8006458:	400204b8 	.word	0x400204b8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8087 	beq.w	8006584 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	2220      	movs	r2, #32
 8006480:	409a      	lsls	r2, r3
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b04      	cmp	r3, #4
 8006490:	d139      	bne.n	8006506 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0216 	bic.w	r2, r2, #22
 80064a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <HAL_DMA_IRQHandler+0x736>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0208 	bic.w	r2, r2, #8
 80064d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	223f      	movs	r2, #63	; 0x3f
 80064dc:	409a      	lsls	r2, r3
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 834a 	beq.w	8006b90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
          }
          return;
 8006504:	e344      	b.n	8006b90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d018      	beq.n	8006546 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	2b00      	cmp	r3, #0
 8006528:	d02c      	beq.n	8006584 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	4798      	blx	r3
 8006532:	e027      	b.n	8006584 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d023      	beq.n	8006584 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	e01e      	b.n	8006584 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10f      	bne.n	8006574 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0210 	bic.w	r2, r2, #16
 8006562:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8306 	beq.w	8006b9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8088 	beq.w	80066ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2204      	movs	r2, #4
 80065a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a7a      	ldr	r2, [pc, #488]	; (8006794 <HAL_DMA_IRQHandler+0xa08>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d04a      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a79      	ldr	r2, [pc, #484]	; (8006798 <HAL_DMA_IRQHandler+0xa0c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d045      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a77      	ldr	r2, [pc, #476]	; (800679c <HAL_DMA_IRQHandler+0xa10>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d040      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a76      	ldr	r2, [pc, #472]	; (80067a0 <HAL_DMA_IRQHandler+0xa14>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d03b      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a74      	ldr	r2, [pc, #464]	; (80067a4 <HAL_DMA_IRQHandler+0xa18>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d036      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a73      	ldr	r2, [pc, #460]	; (80067a8 <HAL_DMA_IRQHandler+0xa1c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d031      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a71      	ldr	r2, [pc, #452]	; (80067ac <HAL_DMA_IRQHandler+0xa20>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d02c      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a70      	ldr	r2, [pc, #448]	; (80067b0 <HAL_DMA_IRQHandler+0xa24>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d027      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a6e      	ldr	r2, [pc, #440]	; (80067b4 <HAL_DMA_IRQHandler+0xa28>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d022      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a6d      	ldr	r2, [pc, #436]	; (80067b8 <HAL_DMA_IRQHandler+0xa2c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d01d      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6b      	ldr	r2, [pc, #428]	; (80067bc <HAL_DMA_IRQHandler+0xa30>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d018      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6a      	ldr	r2, [pc, #424]	; (80067c0 <HAL_DMA_IRQHandler+0xa34>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a68      	ldr	r2, [pc, #416]	; (80067c4 <HAL_DMA_IRQHandler+0xa38>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00e      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a67      	ldr	r2, [pc, #412]	; (80067c8 <HAL_DMA_IRQHandler+0xa3c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a65      	ldr	r2, [pc, #404]	; (80067cc <HAL_DMA_IRQHandler+0xa40>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_DMA_IRQHandler+0x8b8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a64      	ldr	r2, [pc, #400]	; (80067d0 <HAL_DMA_IRQHandler+0xa44>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d108      	bne.n	8006656 <HAL_DMA_IRQHandler+0x8ca>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e007      	b.n	8006666 <HAL_DMA_IRQHandler+0x8da>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0201 	bic.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	429a      	cmp	r2, r3
 8006670:	d307      	bcc.n	8006682 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f2      	bne.n	8006666 <HAL_DMA_IRQHandler+0x8da>
 8006680:	e000      	b.n	8006684 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006682:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2203      	movs	r2, #3
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800669a:	e003      	b.n	80066a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8272 	beq.w	8006b9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	e26c      	b.n	8006b9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a43      	ldr	r2, [pc, #268]	; (80067d4 <HAL_DMA_IRQHandler+0xa48>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d022      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a42      	ldr	r2, [pc, #264]	; (80067d8 <HAL_DMA_IRQHandler+0xa4c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01d      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a40      	ldr	r2, [pc, #256]	; (80067dc <HAL_DMA_IRQHandler+0xa50>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d018      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3f      	ldr	r2, [pc, #252]	; (80067e0 <HAL_DMA_IRQHandler+0xa54>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3d      	ldr	r2, [pc, #244]	; (80067e4 <HAL_DMA_IRQHandler+0xa58>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00e      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a3c      	ldr	r2, [pc, #240]	; (80067e8 <HAL_DMA_IRQHandler+0xa5c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a3a      	ldr	r2, [pc, #232]	; (80067ec <HAL_DMA_IRQHandler+0xa60>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <HAL_DMA_IRQHandler+0x984>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a39      	ldr	r2, [pc, #228]	; (80067f0 <HAL_DMA_IRQHandler+0xa64>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d101      	bne.n	8006714 <HAL_DMA_IRQHandler+0x988>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <HAL_DMA_IRQHandler+0x98a>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 823f 	beq.w	8006b9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	2204      	movs	r2, #4
 800672e:	409a      	lsls	r2, r3
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4013      	ands	r3, r2
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80cd 	beq.w	80068d4 <HAL_DMA_IRQHandler+0xb48>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80c7 	beq.w	80068d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	2204      	movs	r2, #4
 8006750:	409a      	lsls	r2, r3
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d049      	beq.n	80067f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 8210 	beq.w	8006b94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800677c:	e20a      	b.n	8006b94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8206 	beq.w	8006b94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006790:	e200      	b.n	8006b94 <HAL_DMA_IRQHandler+0xe08>
 8006792:	bf00      	nop
 8006794:	40020010 	.word	0x40020010
 8006798:	40020028 	.word	0x40020028
 800679c:	40020040 	.word	0x40020040
 80067a0:	40020058 	.word	0x40020058
 80067a4:	40020070 	.word	0x40020070
 80067a8:	40020088 	.word	0x40020088
 80067ac:	400200a0 	.word	0x400200a0
 80067b0:	400200b8 	.word	0x400200b8
 80067b4:	40020410 	.word	0x40020410
 80067b8:	40020428 	.word	0x40020428
 80067bc:	40020440 	.word	0x40020440
 80067c0:	40020458 	.word	0x40020458
 80067c4:	40020470 	.word	0x40020470
 80067c8:	40020488 	.word	0x40020488
 80067cc:	400204a0 	.word	0x400204a0
 80067d0:	400204b8 	.word	0x400204b8
 80067d4:	58025408 	.word	0x58025408
 80067d8:	5802541c 	.word	0x5802541c
 80067dc:	58025430 	.word	0x58025430
 80067e0:	58025444 	.word	0x58025444
 80067e4:	58025458 	.word	0x58025458
 80067e8:	5802546c 	.word	0x5802546c
 80067ec:	58025480 	.word	0x58025480
 80067f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d160      	bne.n	80068c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a7f      	ldr	r2, [pc, #508]	; (8006a00 <HAL_DMA_IRQHandler+0xc74>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d04a      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a7d      	ldr	r2, [pc, #500]	; (8006a04 <HAL_DMA_IRQHandler+0xc78>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d045      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a7c      	ldr	r2, [pc, #496]	; (8006a08 <HAL_DMA_IRQHandler+0xc7c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d040      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a7a      	ldr	r2, [pc, #488]	; (8006a0c <HAL_DMA_IRQHandler+0xc80>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d03b      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a79      	ldr	r2, [pc, #484]	; (8006a10 <HAL_DMA_IRQHandler+0xc84>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d036      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a77      	ldr	r2, [pc, #476]	; (8006a14 <HAL_DMA_IRQHandler+0xc88>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d031      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a76      	ldr	r2, [pc, #472]	; (8006a18 <HAL_DMA_IRQHandler+0xc8c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d02c      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a74      	ldr	r2, [pc, #464]	; (8006a1c <HAL_DMA_IRQHandler+0xc90>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d027      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a73      	ldr	r2, [pc, #460]	; (8006a20 <HAL_DMA_IRQHandler+0xc94>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d022      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a71      	ldr	r2, [pc, #452]	; (8006a24 <HAL_DMA_IRQHandler+0xc98>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01d      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a70      	ldr	r2, [pc, #448]	; (8006a28 <HAL_DMA_IRQHandler+0xc9c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d018      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a6e      	ldr	r2, [pc, #440]	; (8006a2c <HAL_DMA_IRQHandler+0xca0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a6d      	ldr	r2, [pc, #436]	; (8006a30 <HAL_DMA_IRQHandler+0xca4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a6b      	ldr	r2, [pc, #428]	; (8006a34 <HAL_DMA_IRQHandler+0xca8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a6a      	ldr	r2, [pc, #424]	; (8006a38 <HAL_DMA_IRQHandler+0xcac>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_DMA_IRQHandler+0xb12>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a68      	ldr	r2, [pc, #416]	; (8006a3c <HAL_DMA_IRQHandler+0xcb0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d108      	bne.n	80068b0 <HAL_DMA_IRQHandler+0xb24>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0208 	bic.w	r2, r2, #8
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e007      	b.n	80068c0 <HAL_DMA_IRQHandler+0xb34>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0204 	bic.w	r2, r2, #4
 80068be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8165 	beq.w	8006b94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d2:	e15f      	b.n	8006b94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2202      	movs	r2, #2
 80068de:	409a      	lsls	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80c5 	beq.w	8006a74 <HAL_DMA_IRQHandler+0xce8>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80bf 	beq.w	8006a74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2202      	movs	r2, #2
 8006900:	409a      	lsls	r2, r3
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d018      	beq.n	8006942 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 813a 	beq.w	8006b98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800692c:	e134      	b.n	8006b98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8130 	beq.w	8006b98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006940:	e12a      	b.n	8006b98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 8089 	bne.w	8006a60 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <HAL_DMA_IRQHandler+0xc74>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d04a      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <HAL_DMA_IRQHandler+0xc78>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d045      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <HAL_DMA_IRQHandler+0xc7c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d040      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a26      	ldr	r2, [pc, #152]	; (8006a0c <HAL_DMA_IRQHandler+0xc80>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d03b      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <HAL_DMA_IRQHandler+0xc84>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d036      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a23      	ldr	r2, [pc, #140]	; (8006a14 <HAL_DMA_IRQHandler+0xc88>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d031      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_DMA_IRQHandler+0xc8c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d02c      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <HAL_DMA_IRQHandler+0xc90>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d027      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <HAL_DMA_IRQHandler+0xc94>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d022      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <HAL_DMA_IRQHandler+0xc98>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d01d      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_DMA_IRQHandler+0xc9c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d018      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1a      	ldr	r2, [pc, #104]	; (8006a2c <HAL_DMA_IRQHandler+0xca0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d013      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <HAL_DMA_IRQHandler+0xca4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00e      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a17      	ldr	r2, [pc, #92]	; (8006a34 <HAL_DMA_IRQHandler+0xca8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_DMA_IRQHandler+0xcac>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_DMA_IRQHandler+0xc62>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <HAL_DMA_IRQHandler+0xcb0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d128      	bne.n	8006a40 <HAL_DMA_IRQHandler+0xcb4>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0214 	bic.w	r2, r2, #20
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e027      	b.n	8006a50 <HAL_DMA_IRQHandler+0xcc4>
 8006a00:	40020010 	.word	0x40020010
 8006a04:	40020028 	.word	0x40020028
 8006a08:	40020040 	.word	0x40020040
 8006a0c:	40020058 	.word	0x40020058
 8006a10:	40020070 	.word	0x40020070
 8006a14:	40020088 	.word	0x40020088
 8006a18:	400200a0 	.word	0x400200a0
 8006a1c:	400200b8 	.word	0x400200b8
 8006a20:	40020410 	.word	0x40020410
 8006a24:	40020428 	.word	0x40020428
 8006a28:	40020440 	.word	0x40020440
 8006a2c:	40020458 	.word	0x40020458
 8006a30:	40020470 	.word	0x40020470
 8006a34:	40020488 	.word	0x40020488
 8006a38:	400204a0 	.word	0x400204a0
 8006a3c:	400204b8 	.word	0x400204b8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 020a 	bic.w	r2, r2, #10
 8006a4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8097 	beq.w	8006b98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a72:	e091      	b.n	8006b98 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8088 	beq.w	8006b9a <HAL_DMA_IRQHandler+0xe0e>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8082 	beq.w	8006b9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a41      	ldr	r2, [pc, #260]	; (8006ba0 <HAL_DMA_IRQHandler+0xe14>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d04a      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a3f      	ldr	r2, [pc, #252]	; (8006ba4 <HAL_DMA_IRQHandler+0xe18>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d045      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a3e      	ldr	r2, [pc, #248]	; (8006ba8 <HAL_DMA_IRQHandler+0xe1c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d040      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3c      	ldr	r2, [pc, #240]	; (8006bac <HAL_DMA_IRQHandler+0xe20>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d03b      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a3b      	ldr	r2, [pc, #236]	; (8006bb0 <HAL_DMA_IRQHandler+0xe24>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d036      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a39      	ldr	r2, [pc, #228]	; (8006bb4 <HAL_DMA_IRQHandler+0xe28>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d031      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a38      	ldr	r2, [pc, #224]	; (8006bb8 <HAL_DMA_IRQHandler+0xe2c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d02c      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a36      	ldr	r2, [pc, #216]	; (8006bbc <HAL_DMA_IRQHandler+0xe30>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d027      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a35      	ldr	r2, [pc, #212]	; (8006bc0 <HAL_DMA_IRQHandler+0xe34>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d022      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <HAL_DMA_IRQHandler+0xe38>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01d      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a32      	ldr	r2, [pc, #200]	; (8006bc8 <HAL_DMA_IRQHandler+0xe3c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a30      	ldr	r2, [pc, #192]	; (8006bcc <HAL_DMA_IRQHandler+0xe40>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a2f      	ldr	r2, [pc, #188]	; (8006bd0 <HAL_DMA_IRQHandler+0xe44>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <HAL_DMA_IRQHandler+0xe48>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2c      	ldr	r2, [pc, #176]	; (8006bd8 <HAL_DMA_IRQHandler+0xe4c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xdaa>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <HAL_DMA_IRQHandler+0xe50>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d108      	bne.n	8006b48 <HAL_DMA_IRQHandler+0xdbc>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 021c 	bic.w	r2, r2, #28
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e007      	b.n	8006b58 <HAL_DMA_IRQHandler+0xdcc>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 020e 	bic.w	r2, r2, #14
 8006b56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	2201      	movs	r2, #1
 8006b62:	409a      	lsls	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	e004      	b.n	8006b9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b90:	bf00      	nop
 8006b92:	e002      	b.n	8006b9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b9a:	3728      	adds	r7, #40	; 0x28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8

08006be0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a7f      	ldr	r2, [pc, #508]	; (8006dfc <DMA_SetConfig+0x21c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d072      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a7d      	ldr	r2, [pc, #500]	; (8006e00 <DMA_SetConfig+0x220>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d06d      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <DMA_SetConfig+0x224>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d068      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7a      	ldr	r2, [pc, #488]	; (8006e08 <DMA_SetConfig+0x228>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d063      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a79      	ldr	r2, [pc, #484]	; (8006e0c <DMA_SetConfig+0x22c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d05e      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a77      	ldr	r2, [pc, #476]	; (8006e10 <DMA_SetConfig+0x230>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d059      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a76      	ldr	r2, [pc, #472]	; (8006e14 <DMA_SetConfig+0x234>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d054      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a74      	ldr	r2, [pc, #464]	; (8006e18 <DMA_SetConfig+0x238>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d04f      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a73      	ldr	r2, [pc, #460]	; (8006e1c <DMA_SetConfig+0x23c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d04a      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a71      	ldr	r2, [pc, #452]	; (8006e20 <DMA_SetConfig+0x240>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d045      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a70      	ldr	r2, [pc, #448]	; (8006e24 <DMA_SetConfig+0x244>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d040      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6e      	ldr	r2, [pc, #440]	; (8006e28 <DMA_SetConfig+0x248>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d03b      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6d      	ldr	r2, [pc, #436]	; (8006e2c <DMA_SetConfig+0x24c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d036      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a6b      	ldr	r2, [pc, #428]	; (8006e30 <DMA_SetConfig+0x250>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d031      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a6a      	ldr	r2, [pc, #424]	; (8006e34 <DMA_SetConfig+0x254>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d02c      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a68      	ldr	r2, [pc, #416]	; (8006e38 <DMA_SetConfig+0x258>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d027      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a67      	ldr	r2, [pc, #412]	; (8006e3c <DMA_SetConfig+0x25c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d022      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a65      	ldr	r2, [pc, #404]	; (8006e40 <DMA_SetConfig+0x260>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a64      	ldr	r2, [pc, #400]	; (8006e44 <DMA_SetConfig+0x264>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a62      	ldr	r2, [pc, #392]	; (8006e48 <DMA_SetConfig+0x268>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a61      	ldr	r2, [pc, #388]	; (8006e4c <DMA_SetConfig+0x26c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5f      	ldr	r2, [pc, #380]	; (8006e50 <DMA_SetConfig+0x270>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a5e      	ldr	r2, [pc, #376]	; (8006e54 <DMA_SetConfig+0x274>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <DMA_SetConfig+0x10a>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5c      	ldr	r2, [pc, #368]	; (8006e58 <DMA_SetConfig+0x278>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <DMA_SetConfig+0x10e>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <DMA_SetConfig+0x110>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00d      	beq.n	8006d10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cfc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a39      	ldr	r2, [pc, #228]	; (8006dfc <DMA_SetConfig+0x21c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d04a      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a38      	ldr	r2, [pc, #224]	; (8006e00 <DMA_SetConfig+0x220>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d045      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a36      	ldr	r2, [pc, #216]	; (8006e04 <DMA_SetConfig+0x224>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d040      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a35      	ldr	r2, [pc, #212]	; (8006e08 <DMA_SetConfig+0x228>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d03b      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a33      	ldr	r2, [pc, #204]	; (8006e0c <DMA_SetConfig+0x22c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d036      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a32      	ldr	r2, [pc, #200]	; (8006e10 <DMA_SetConfig+0x230>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d031      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a30      	ldr	r2, [pc, #192]	; (8006e14 <DMA_SetConfig+0x234>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d02c      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <DMA_SetConfig+0x238>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d027      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2d      	ldr	r2, [pc, #180]	; (8006e1c <DMA_SetConfig+0x23c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d022      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <DMA_SetConfig+0x240>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d01d      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <DMA_SetConfig+0x244>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <DMA_SetConfig+0x248>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <DMA_SetConfig+0x24c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a26      	ldr	r2, [pc, #152]	; (8006e30 <DMA_SetConfig+0x250>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <DMA_SetConfig+0x254>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <DMA_SetConfig+0x1d0>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <DMA_SetConfig+0x258>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d101      	bne.n	8006db4 <DMA_SetConfig+0x1d4>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <DMA_SetConfig+0x1d6>
 8006db4:	2300      	movs	r3, #0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d059      	beq.n	8006e6e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	223f      	movs	r2, #63	; 0x3f
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d138      	bne.n	8006e5c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006dfa:	e086      	b.n	8006f0a <DMA_SetConfig+0x32a>
 8006dfc:	40020010 	.word	0x40020010
 8006e00:	40020028 	.word	0x40020028
 8006e04:	40020040 	.word	0x40020040
 8006e08:	40020058 	.word	0x40020058
 8006e0c:	40020070 	.word	0x40020070
 8006e10:	40020088 	.word	0x40020088
 8006e14:	400200a0 	.word	0x400200a0
 8006e18:	400200b8 	.word	0x400200b8
 8006e1c:	40020410 	.word	0x40020410
 8006e20:	40020428 	.word	0x40020428
 8006e24:	40020440 	.word	0x40020440
 8006e28:	40020458 	.word	0x40020458
 8006e2c:	40020470 	.word	0x40020470
 8006e30:	40020488 	.word	0x40020488
 8006e34:	400204a0 	.word	0x400204a0
 8006e38:	400204b8 	.word	0x400204b8
 8006e3c:	58025408 	.word	0x58025408
 8006e40:	5802541c 	.word	0x5802541c
 8006e44:	58025430 	.word	0x58025430
 8006e48:	58025444 	.word	0x58025444
 8006e4c:	58025458 	.word	0x58025458
 8006e50:	5802546c 	.word	0x5802546c
 8006e54:	58025480 	.word	0x58025480
 8006e58:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
}
 8006e6c:	e04d      	b.n	8006f0a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a29      	ldr	r2, [pc, #164]	; (8006f18 <DMA_SetConfig+0x338>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d022      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <DMA_SetConfig+0x33c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01d      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a26      	ldr	r2, [pc, #152]	; (8006f20 <DMA_SetConfig+0x340>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d018      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a24      	ldr	r2, [pc, #144]	; (8006f24 <DMA_SetConfig+0x344>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a23      	ldr	r2, [pc, #140]	; (8006f28 <DMA_SetConfig+0x348>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <DMA_SetConfig+0x34c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d009      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <DMA_SetConfig+0x350>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <DMA_SetConfig+0x2de>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <DMA_SetConfig+0x354>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <DMA_SetConfig+0x2e2>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <DMA_SetConfig+0x2e4>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d020      	beq.n	8006f0a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	409a      	lsls	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b40      	cmp	r3, #64	; 0x40
 8006ee6:	d108      	bne.n	8006efa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	60da      	str	r2, [r3, #12]
}
 8006ef8:	e007      	b.n	8006f0a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	58025408 	.word	0x58025408
 8006f1c:	5802541c 	.word	0x5802541c
 8006f20:	58025430 	.word	0x58025430
 8006f24:	58025444 	.word	0x58025444
 8006f28:	58025458 	.word	0x58025458
 8006f2c:	5802546c 	.word	0x5802546c
 8006f30:	58025480 	.word	0x58025480
 8006f34:	58025494 	.word	0x58025494

08006f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a42      	ldr	r2, [pc, #264]	; (8007050 <DMA_CalcBaseAndBitshift+0x118>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d04a      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a41      	ldr	r2, [pc, #260]	; (8007054 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d045      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a3f      	ldr	r2, [pc, #252]	; (8007058 <DMA_CalcBaseAndBitshift+0x120>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d040      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a3e      	ldr	r2, [pc, #248]	; (800705c <DMA_CalcBaseAndBitshift+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d03b      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3c      	ldr	r2, [pc, #240]	; (8007060 <DMA_CalcBaseAndBitshift+0x128>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d036      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a3b      	ldr	r2, [pc, #236]	; (8007064 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d031      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a39      	ldr	r2, [pc, #228]	; (8007068 <DMA_CalcBaseAndBitshift+0x130>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d02c      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a38      	ldr	r2, [pc, #224]	; (800706c <DMA_CalcBaseAndBitshift+0x134>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d027      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a36      	ldr	r2, [pc, #216]	; (8007070 <DMA_CalcBaseAndBitshift+0x138>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a35      	ldr	r2, [pc, #212]	; (8007074 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d01d      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a33      	ldr	r2, [pc, #204]	; (8007078 <DMA_CalcBaseAndBitshift+0x140>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a32      	ldr	r2, [pc, #200]	; (800707c <DMA_CalcBaseAndBitshift+0x144>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a30      	ldr	r2, [pc, #192]	; (8007080 <DMA_CalcBaseAndBitshift+0x148>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <DMA_CalcBaseAndBitshift+0x150>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2c      	ldr	r2, [pc, #176]	; (800708c <DMA_CalcBaseAndBitshift+0x154>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d101      	bne.n	8006fe4 <DMA_CalcBaseAndBitshift+0xac>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <DMA_CalcBaseAndBitshift+0xae>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d024      	beq.n	8007034 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	3b10      	subs	r3, #16
 8006ff2:	4a27      	ldr	r2, [pc, #156]	; (8007090 <DMA_CalcBaseAndBitshift+0x158>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <DMA_CalcBaseAndBitshift+0x15c>)
 8007004:	5cd3      	ldrb	r3, [r2, r3]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d908      	bls.n	8007024 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	4b1f      	ldr	r3, [pc, #124]	; (8007098 <DMA_CalcBaseAndBitshift+0x160>)
 800701a:	4013      	ands	r3, r2
 800701c:	1d1a      	adds	r2, r3, #4
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	659a      	str	r2, [r3, #88]	; 0x58
 8007022:	e00d      	b.n	8007040 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	4b1b      	ldr	r3, [pc, #108]	; (8007098 <DMA_CalcBaseAndBitshift+0x160>)
 800702c:	4013      	ands	r3, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6593      	str	r3, [r2, #88]	; 0x58
 8007032:	e005      	b.n	8007040 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	40020010 	.word	0x40020010
 8007054:	40020028 	.word	0x40020028
 8007058:	40020040 	.word	0x40020040
 800705c:	40020058 	.word	0x40020058
 8007060:	40020070 	.word	0x40020070
 8007064:	40020088 	.word	0x40020088
 8007068:	400200a0 	.word	0x400200a0
 800706c:	400200b8 	.word	0x400200b8
 8007070:	40020410 	.word	0x40020410
 8007074:	40020428 	.word	0x40020428
 8007078:	40020440 	.word	0x40020440
 800707c:	40020458 	.word	0x40020458
 8007080:	40020470 	.word	0x40020470
 8007084:	40020488 	.word	0x40020488
 8007088:	400204a0 	.word	0x400204a0
 800708c:	400204b8 	.word	0x400204b8
 8007090:	aaaaaaab 	.word	0xaaaaaaab
 8007094:	0800fe74 	.word	0x0800fe74
 8007098:	fffffc00 	.word	0xfffffc00

0800709c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d120      	bne.n	80070f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d858      	bhi.n	800716a <DMA_CheckFifoParam+0xce>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <DMA_CheckFifoParam+0x24>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070d1 	.word	0x080070d1
 80070c4:	080070e3 	.word	0x080070e3
 80070c8:	080070d1 	.word	0x080070d1
 80070cc:	0800716b 	.word	0x0800716b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d048      	beq.n	800716e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070e0:	e045      	b.n	800716e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070ea:	d142      	bne.n	8007172 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070f0:	e03f      	b.n	8007172 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fa:	d123      	bne.n	8007144 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	2b03      	cmp	r3, #3
 8007102:	d838      	bhi.n	8007176 <DMA_CheckFifoParam+0xda>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <DMA_CheckFifoParam+0x70>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	0800711d 	.word	0x0800711d
 8007110:	08007123 	.word	0x08007123
 8007114:	0800711d 	.word	0x0800711d
 8007118:	08007135 	.word	0x08007135
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
        break;
 8007120:	e030      	b.n	8007184 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d025      	beq.n	800717a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007132:	e022      	b.n	800717a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800713c:	d11f      	bne.n	800717e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007142:	e01c      	b.n	800717e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	2b02      	cmp	r3, #2
 800714a:	d902      	bls.n	8007152 <DMA_CheckFifoParam+0xb6>
 800714c:	2b03      	cmp	r3, #3
 800714e:	d003      	beq.n	8007158 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007150:	e018      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
        break;
 8007156:	e015      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
    break;
 8007168:	e00b      	b.n	8007182 <DMA_CheckFifoParam+0xe6>
        break;
 800716a:	bf00      	nop
 800716c:	e00a      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        break;
 800716e:	bf00      	nop
 8007170:	e008      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        break;
 8007172:	bf00      	nop
 8007174:	e006      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        break;
 8007176:	bf00      	nop
 8007178:	e004      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        break;
 800717a:	bf00      	nop
 800717c:	e002      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
        break;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
    break;
 8007182:	bf00      	nop
    }
  }

  return status;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop

08007194 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a38      	ldr	r2, [pc, #224]	; (8007288 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d022      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a36      	ldr	r2, [pc, #216]	; (800728c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d01d      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a35      	ldr	r2, [pc, #212]	; (8007290 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d018      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a33      	ldr	r2, [pc, #204]	; (8007294 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a32      	ldr	r2, [pc, #200]	; (8007298 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00e      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a30      	ldr	r2, [pc, #192]	; (800729c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d009      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2f      	ldr	r2, [pc, #188]	; (80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d004      	beq.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d101      	bne.n	80071f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01a      	beq.n	8007232 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	3b08      	subs	r3, #8
 8007204:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	091b      	lsrs	r3, r3, #4
 800720c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4b26      	ldr	r3, [pc, #152]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a24      	ldr	r2, [pc, #144]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007220:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2201      	movs	r2, #1
 800722a:	409a      	lsls	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007230:	e024      	b.n	800727c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	3b10      	subs	r3, #16
 800723a:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	091b      	lsrs	r3, r3, #4
 8007242:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d806      	bhi.n	800725a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a1b      	ldr	r2, [pc, #108]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d902      	bls.n	800725a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3308      	adds	r3, #8
 8007258:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800726c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2201      	movs	r2, #1
 8007276:	409a      	lsls	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	58025408 	.word	0x58025408
 800728c:	5802541c 	.word	0x5802541c
 8007290:	58025430 	.word	0x58025430
 8007294:	58025444 	.word	0x58025444
 8007298:	58025458 	.word	0x58025458
 800729c:	5802546c 	.word	0x5802546c
 80072a0:	58025480 	.word	0x58025480
 80072a4:	58025494 	.word	0x58025494
 80072a8:	cccccccd 	.word	0xcccccccd
 80072ac:	16009600 	.word	0x16009600
 80072b0:	58025880 	.word	0x58025880
 80072b4:	aaaaaaab 	.word	0xaaaaaaab
 80072b8:	400204b8 	.word	0x400204b8
 80072bc:	4002040f 	.word	0x4002040f
 80072c0:	10008200 	.word	0x10008200
 80072c4:	40020880 	.word	0x40020880

080072c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d04a      	beq.n	8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d847      	bhi.n	8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a25      	ldr	r2, [pc, #148]	; (8007380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d022      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a24      	ldr	r2, [pc, #144]	; (8007384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01d      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a22      	ldr	r2, [pc, #136]	; (8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d018      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a21      	ldr	r2, [pc, #132]	; (800738c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1f      	ldr	r2, [pc, #124]	; (8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00e      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d009      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1b      	ldr	r2, [pc, #108]	; (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d101      	bne.n	8007338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007338:	2300      	movs	r3, #0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007350:	671a      	str	r2, [r3, #112]	; 0x70
 8007352:	e009      	b.n	8007368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a11      	ldr	r2, [pc, #68]	; (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007366:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3b01      	subs	r3, #1
 800736c:	2201      	movs	r2, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	58025408 	.word	0x58025408
 8007384:	5802541c 	.word	0x5802541c
 8007388:	58025430 	.word	0x58025430
 800738c:	58025444 	.word	0x58025444
 8007390:	58025458 	.word	0x58025458
 8007394:	5802546c 	.word	0x5802546c
 8007398:	58025480 	.word	0x58025480
 800739c:	58025494 	.word	0x58025494
 80073a0:	1600963f 	.word	0x1600963f
 80073a4:	58025940 	.word	0x58025940
 80073a8:	1000823f 	.word	0x1000823f
 80073ac:	40020940 	.word	0x40020940

080073b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073be:	4b89      	ldr	r3, [pc, #548]	; (80075e4 <HAL_GPIO_Init+0x234>)
 80073c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073c2:	e194      	b.n	80076ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	2101      	movs	r1, #1
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	fa01 f303 	lsl.w	r3, r1, r3
 80073d0:	4013      	ands	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8186 	beq.w	80076e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d005      	beq.n	80073f4 <HAL_GPIO_Init+0x44>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d130      	bne.n	8007456 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	2203      	movs	r2, #3
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	43db      	mvns	r3, r3
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	4013      	ands	r3, r2
 800740a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	4313      	orrs	r3, r2
 800741c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800742a:	2201      	movs	r2, #1
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	43db      	mvns	r3, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	091b      	lsrs	r3, r3, #4
 8007440:	f003 0201 	and.w	r2, r3, #1
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4313      	orrs	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b03      	cmp	r3, #3
 8007460:	d017      	beq.n	8007492 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	2203      	movs	r2, #3
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	43db      	mvns	r3, r3
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	4013      	ands	r3, r2
 8007478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4313      	orrs	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d123      	bne.n	80074e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	08da      	lsrs	r2, r3, #3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3208      	adds	r2, #8
 80074a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	220f      	movs	r2, #15
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	08da      	lsrs	r2, r3, #3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3208      	adds	r2, #8
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	2203      	movs	r2, #3
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f003 0203 	and.w	r2, r3, #3
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80e0 	beq.w	80076e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007528:	4b2f      	ldr	r3, [pc, #188]	; (80075e8 <HAL_GPIO_Init+0x238>)
 800752a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800752e:	4a2e      	ldr	r2, [pc, #184]	; (80075e8 <HAL_GPIO_Init+0x238>)
 8007530:	f043 0302 	orr.w	r3, r3, #2
 8007534:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007538:	4b2b      	ldr	r3, [pc, #172]	; (80075e8 <HAL_GPIO_Init+0x238>)
 800753a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007546:	4a29      	ldr	r2, [pc, #164]	; (80075ec <HAL_GPIO_Init+0x23c>)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	3302      	adds	r3, #2
 800754e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	220f      	movs	r2, #15
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	43db      	mvns	r3, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4013      	ands	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a20      	ldr	r2, [pc, #128]	; (80075f0 <HAL_GPIO_Init+0x240>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d052      	beq.n	8007618 <HAL_GPIO_Init+0x268>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a1f      	ldr	r2, [pc, #124]	; (80075f4 <HAL_GPIO_Init+0x244>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <HAL_GPIO_Init+0x22e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1e      	ldr	r2, [pc, #120]	; (80075f8 <HAL_GPIO_Init+0x248>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d02b      	beq.n	80075da <HAL_GPIO_Init+0x22a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1d      	ldr	r2, [pc, #116]	; (80075fc <HAL_GPIO_Init+0x24c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d025      	beq.n	80075d6 <HAL_GPIO_Init+0x226>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a1c      	ldr	r2, [pc, #112]	; (8007600 <HAL_GPIO_Init+0x250>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <HAL_GPIO_Init+0x222>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <HAL_GPIO_Init+0x254>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d019      	beq.n	80075ce <HAL_GPIO_Init+0x21e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a1a      	ldr	r2, [pc, #104]	; (8007608 <HAL_GPIO_Init+0x258>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_GPIO_Init+0x21a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a19      	ldr	r2, [pc, #100]	; (800760c <HAL_GPIO_Init+0x25c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00d      	beq.n	80075c6 <HAL_GPIO_Init+0x216>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a18      	ldr	r2, [pc, #96]	; (8007610 <HAL_GPIO_Init+0x260>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d007      	beq.n	80075c2 <HAL_GPIO_Init+0x212>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a17      	ldr	r2, [pc, #92]	; (8007614 <HAL_GPIO_Init+0x264>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d101      	bne.n	80075be <HAL_GPIO_Init+0x20e>
 80075ba:	2309      	movs	r3, #9
 80075bc:	e02d      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075be:	230a      	movs	r3, #10
 80075c0:	e02b      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075c2:	2308      	movs	r3, #8
 80075c4:	e029      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075c6:	2307      	movs	r3, #7
 80075c8:	e027      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075ca:	2306      	movs	r3, #6
 80075cc:	e025      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075ce:	2305      	movs	r3, #5
 80075d0:	e023      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075d2:	2304      	movs	r3, #4
 80075d4:	e021      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075d6:	2303      	movs	r3, #3
 80075d8:	e01f      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075da:	2302      	movs	r3, #2
 80075dc:	e01d      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075de:	2301      	movs	r3, #1
 80075e0:	e01b      	b.n	800761a <HAL_GPIO_Init+0x26a>
 80075e2:	bf00      	nop
 80075e4:	58000080 	.word	0x58000080
 80075e8:	58024400 	.word	0x58024400
 80075ec:	58000400 	.word	0x58000400
 80075f0:	58020000 	.word	0x58020000
 80075f4:	58020400 	.word	0x58020400
 80075f8:	58020800 	.word	0x58020800
 80075fc:	58020c00 	.word	0x58020c00
 8007600:	58021000 	.word	0x58021000
 8007604:	58021400 	.word	0x58021400
 8007608:	58021800 	.word	0x58021800
 800760c:	58021c00 	.word	0x58021c00
 8007610:	58022000 	.word	0x58022000
 8007614:	58022400 	.word	0x58022400
 8007618:	2300      	movs	r3, #0
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	f002 0203 	and.w	r2, r2, #3
 8007620:	0092      	lsls	r2, r2, #2
 8007622:	4093      	lsls	r3, r2
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	4313      	orrs	r3, r2
 8007628:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800762a:	4938      	ldr	r1, [pc, #224]	; (800770c <HAL_GPIO_Init+0x35c>)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	089b      	lsrs	r3, r3, #2
 8007630:	3302      	adds	r3, #2
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	43db      	mvns	r3, r3
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	4013      	ands	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800765e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	43db      	mvns	r3, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4013      	ands	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800768c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	43db      	mvns	r3, r3
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	4013      	ands	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	43db      	mvns	r3, r3
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	4013      	ands	r3, r2
 80076cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	3301      	adds	r3, #1
 80076ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f47f ae63 	bne.w	80073c4 <HAL_GPIO_Init+0x14>
  }
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	3724      	adds	r7, #36	; 0x24
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	58000400 	.word	0x58000400

08007710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e001      	b.n	8007732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	807b      	strh	r3, [r7, #2]
 800774c:	4613      	mov	r3, r2
 800774e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007750:	787b      	ldrb	r3, [r7, #1]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007756:	887a      	ldrh	r2, [r7, #2]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800775c:	e003      	b.n	8007766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800775e:	887b      	ldrh	r3, [r7, #2]
 8007760:	041a      	lsls	r2, r3, #16
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	619a      	str	r2, [r3, #24]
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e07f      	b.n	8007886 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa fc68 	bl	8002070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2224      	movs	r2, #36	; 0x24
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d107      	bne.n	80077ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ea:	609a      	str	r2, [r3, #8]
 80077ec:	e006      	b.n	80077fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d104      	bne.n	800780e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800780c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6859      	ldr	r1, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b1d      	ldr	r3, [pc, #116]	; (8007890 <HAL_I2C_Init+0x11c>)
 800781a:	430b      	orrs	r3, r1
 800781c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800782c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691a      	ldr	r2, [r3, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69d9      	ldr	r1, [r3, #28]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	02008000 	.word	0x02008000

08007894 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	461a      	mov	r2, r3
 80078a0:	460b      	mov	r3, r1
 80078a2:	817b      	strh	r3, [r7, #10]
 80078a4:	4613      	mov	r3, r2
 80078a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	f040 80da 	bne.w	8007a6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_I2C_Master_Transmit+0x30>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e0d3      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x1d8>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078cc:	f7fa fffe 	bl	80028cc <HAL_GetTick>
 80078d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2319      	movs	r3, #25
 80078d8:	2201      	movs	r2, #1
 80078da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f9e6 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e0be      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2221      	movs	r2, #33	; 0x21
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2210      	movs	r2, #16
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	893a      	ldrh	r2, [r7, #8]
 800790e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29b      	uxth	r3, r3
 800791c:	2bff      	cmp	r3, #255	; 0xff
 800791e:	d90e      	bls.n	800793e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	22ff      	movs	r2, #255	; 0xff
 8007924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792a:	b2da      	uxtb	r2, r3
 800792c:	8979      	ldrh	r1, [r7, #10]
 800792e:	4b51      	ldr	r3, [pc, #324]	; (8007a74 <HAL_I2C_Master_Transmit+0x1e0>)
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fbdc 	bl	80080f4 <I2C_TransferConfig>
 800793c:	e06c      	b.n	8007a18 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	b2da      	uxtb	r2, r3
 800794e:	8979      	ldrh	r1, [r7, #10]
 8007950:	4b48      	ldr	r3, [pc, #288]	; (8007a74 <HAL_I2C_Master_Transmit+0x1e0>)
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fbcb 	bl	80080f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800795e:	e05b      	b.n	8007a18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	6a39      	ldr	r1, [r7, #32]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f9e3 	bl	8007d30 <I2C_WaitOnTXISFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e07b      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d034      	beq.n	8007a18 <HAL_I2C_Master_Transmit+0x184>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d130      	bne.n	8007a18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	2200      	movs	r2, #0
 80079be:	2180      	movs	r1, #128	; 0x80
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f975 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e04d      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2bff      	cmp	r3, #255	; 0xff
 80079d8:	d90e      	bls.n	80079f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	22ff      	movs	r2, #255	; 0xff
 80079de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	8979      	ldrh	r1, [r7, #10]
 80079e8:	2300      	movs	r3, #0
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fb7f 	bl	80080f4 <I2C_TransferConfig>
 80079f6:	e00f      	b.n	8007a18 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	8979      	ldrh	r1, [r7, #10]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fb6e 	bl	80080f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d19e      	bne.n	8007960 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	6a39      	ldr	r1, [r7, #32]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f9c2 	bl	8007db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e01a      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6859      	ldr	r1, [r3, #4]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_I2C_Master_Transmit+0x1e4>)
 8007a4a:	400b      	ands	r3, r1
 8007a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	80002000 	.word	0x80002000
 8007a78:	fe00e800 	.word	0xfe00e800

08007a7c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	461a      	mov	r2, r3
 8007a88:	460b      	mov	r3, r1
 8007a8a:	817b      	strh	r3, [r7, #10]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	f040 80db 	bne.w	8007c54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_I2C_Master_Receive+0x30>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e0d4      	b.n	8007c56 <HAL_I2C_Master_Receive+0x1da>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ab4:	f7fa ff0a 	bl	80028cc <HAL_GetTick>
 8007ab8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	2319      	movs	r3, #25
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 f8f2 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e0bf      	b.n	8007c56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2222      	movs	r2, #34	; 0x22
 8007ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2210      	movs	r2, #16
 8007ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	893a      	ldrh	r2, [r7, #8]
 8007af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2bff      	cmp	r3, #255	; 0xff
 8007b06:	d90e      	bls.n	8007b26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	22ff      	movs	r2, #255	; 0xff
 8007b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	8979      	ldrh	r1, [r7, #10]
 8007b16:	4b52      	ldr	r3, [pc, #328]	; (8007c60 <HAL_I2C_Master_Receive+0x1e4>)
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 fae8 	bl	80080f4 <I2C_TransferConfig>
 8007b24:	e06d      	b.n	8007c02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	8979      	ldrh	r1, [r7, #10]
 8007b38:	4b49      	ldr	r3, [pc, #292]	; (8007c60 <HAL_I2C_Master_Receive+0x1e4>)
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fad7 	bl	80080f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b46:	e05c      	b.n	8007c02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	6a39      	ldr	r1, [r7, #32]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f96b 	bl	8007e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e07c      	b.n	8007c56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d034      	beq.n	8007c02 <HAL_I2C_Master_Receive+0x186>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d130      	bne.n	8007c02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2180      	movs	r1, #128	; 0x80
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f880 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e04d      	b.n	8007c56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2bff      	cmp	r3, #255	; 0xff
 8007bc2:	d90e      	bls.n	8007be2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	8979      	ldrh	r1, [r7, #10]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fa8a 	bl	80080f4 <I2C_TransferConfig>
 8007be0:	e00f      	b.n	8007c02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	8979      	ldrh	r1, [r7, #10]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fa79 	bl	80080f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d19d      	bne.n	8007b48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	6a39      	ldr	r1, [r7, #32]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f8cd 	bl	8007db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e01a      	b.n	8007c56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2220      	movs	r2, #32
 8007c26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6859      	ldr	r1, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <HAL_I2C_Master_Receive+0x1e8>)
 8007c34:	400b      	ands	r3, r1
 8007c36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	80002400 	.word	0x80002400
 8007c64:	fe00e800 	.word	0xfe00e800

08007c68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d007      	beq.n	8007ca4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	619a      	str	r2, [r3, #24]
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cc0:	e022      	b.n	8007d08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc8:	d01e      	beq.n	8007d08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cca:	f7fa fdff 	bl	80028cc <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d113      	bne.n	8007d08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e00f      	b.n	8007d28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4013      	ands	r3, r2
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d0cd      	beq.n	8007cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d3c:	e02c      	b.n	8007d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f8ea 	bl	8007f1c <I2C_IsErrorOccurred>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e02a      	b.n	8007da8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d58:	d01e      	beq.n	8007d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5a:	f7fa fdb7 	bl	80028cc <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d113      	bne.n	8007d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e007      	b.n	8007da8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d1cb      	bne.n	8007d3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dbc:	e028      	b.n	8007e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f8aa 	bl	8007f1c <I2C_IsErrorOccurred>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e026      	b.n	8007e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd2:	f7fa fd7b 	bl	80028cc <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d302      	bcc.n	8007de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d113      	bne.n	8007e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dec:	f043 0220 	orr.w	r2, r3, #32
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e007      	b.n	8007e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d1cf      	bne.n	8007dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e34:	e064      	b.n	8007f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f86e 	bl	8007f1c <I2C_IsErrorOccurred>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e062      	b.n	8007f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d138      	bne.n	8007eca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d105      	bne.n	8007e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e04e      	b.n	8007f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	d107      	bne.n	8007e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2210      	movs	r2, #16
 8007e86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	645a      	str	r2, [r3, #68]	; 0x44
 8007e8e:	e002      	b.n	8007e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6859      	ldr	r1, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007eaa:	400b      	ands	r3, r1
 8007eac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e022      	b.n	8007f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7fa fcff 	bl	80028cc <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10f      	bne.n	8007f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e007      	b.n	8007f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d193      	bne.n	8007e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	fe00e800 	.word	0xfe00e800

08007f1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08a      	sub	sp, #40	; 0x28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d075      	beq.n	8008034 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2210      	movs	r2, #16
 8007f4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f50:	e056      	b.n	8008000 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f58:	d052      	beq.n	8008000 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f5a:	f7fa fcb7 	bl	80028cc <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d302      	bcc.n	8007f70 <I2C_IsErrorOccurred+0x54>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d147      	bne.n	8008000 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f92:	d12e      	bne.n	8007ff2 <I2C_IsErrorOccurred+0xd6>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f9a:	d02a      	beq.n	8007ff2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007f9c:	7cfb      	ldrb	r3, [r7, #19]
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d027      	beq.n	8007ff2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fb2:	f7fa fc8b 	bl	80028cc <HAL_GetTick>
 8007fb6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fb8:	e01b      	b.n	8007ff2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fba:	f7fa fc87 	bl	80028cc <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b19      	cmp	r3, #25
 8007fc6:	d914      	bls.n	8007ff2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	f043 0220 	orr.w	r2, r3, #32
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d1dc      	bne.n	8007fba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b20      	cmp	r3, #32
 800800c:	d003      	beq.n	8008016 <I2C_IsErrorOccurred+0xfa>
 800800e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008012:	2b00      	cmp	r3, #0
 8008014:	d09d      	beq.n	8007f52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2220      	movs	r2, #32
 8008024:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f043 0304 	orr.w	r3, r3, #4
 800802c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f043 0301 	orr.w	r3, r3, #1
 800804c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008056:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	f043 0308 	orr.w	r3, r3, #8
 800806e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008078:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800809a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80080a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01c      	beq.n	80080e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff fddc 	bl	8007c68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6859      	ldr	r1, [r3, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <I2C_IsErrorOccurred+0x1d4>)
 80080bc:	400b      	ands	r3, r1
 80080be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80080e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3728      	adds	r7, #40	; 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	fe00e800 	.word	0xfe00e800

080080f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	817b      	strh	r3, [r7, #10]
 8008102:	4613      	mov	r3, r2
 8008104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008106:	897b      	ldrh	r3, [r7, #10]
 8008108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800810c:	7a7b      	ldrb	r3, [r7, #9]
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008114:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	4313      	orrs	r3, r2
 800811e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008122:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	0d5b      	lsrs	r3, r3, #21
 800812e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008132:	4b08      	ldr	r3, [pc, #32]	; (8008154 <I2C_TransferConfig+0x60>)
 8008134:	430b      	orrs	r3, r1
 8008136:	43db      	mvns	r3, r3
 8008138:	ea02 0103 	and.w	r1, r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	03ff63ff 	.word	0x03ff63ff

08008158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b20      	cmp	r3, #32
 800816c:	d138      	bne.n	80081e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008178:	2302      	movs	r3, #2
 800817a:	e032      	b.n	80081e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6819      	ldr	r1, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	e000      	b.n	80081e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081e0:	2302      	movs	r3, #2
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b20      	cmp	r3, #32
 8008202:	d139      	bne.n	8008278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800820a:	2b01      	cmp	r3, #1
 800820c:	d101      	bne.n	8008212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800820e:	2302      	movs	r3, #2
 8008210:	e033      	b.n	800827a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2224      	movs	r2, #36	; 0x24
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008278:	2302      	movs	r3, #2
  }
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
	...

08008288 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008294:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f023 0201 	bic.w	r2, r3, #1
 800829c:	4916      	ldr	r1, [pc, #88]	; (80082f8 <HAL_PWR_EnterSTOPMode+0x70>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80082a4:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	4a13      	ldr	r2, [pc, #76]	; (80082f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80082aa:	f023 0305 	bic.w	r3, r3, #5
 80082ae:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80082b6:	f023 0302 	bic.w	r3, r3, #2
 80082ba:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082bc:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <HAL_PWR_EnterSTOPMode+0x74>)
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	4a0e      	ldr	r2, [pc, #56]	; (80082fc <HAL_PWR_EnterSTOPMode+0x74>)
 80082c2:	f043 0304 	orr.w	r3, r3, #4
 80082c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80082c8:	f3bf 8f4f 	dsb	sy
}
 80082cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80082ce:	f3bf 8f6f 	isb	sy
}
 80082d2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80082da:	bf30      	wfi
 80082dc:	e000      	b.n	80082e0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80082de:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082e0:	4b06      	ldr	r3, [pc, #24]	; (80082fc <HAL_PWR_EnterSTOPMode+0x74>)
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	4a05      	ldr	r2, [pc, #20]	; (80082fc <HAL_PWR_EnterSTOPMode+0x74>)
 80082e6:	f023 0304 	bic.w	r3, r3, #4
 80082ea:	6113      	str	r3, [r2, #16]
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	58024800 	.word	0x58024800
 80082fc:	e000ed00 	.word	0xe000ed00

08008300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008308:	4b19      	ldr	r3, [pc, #100]	; (8008370 <HAL_PWREx_ConfigSupply+0x70>)
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b04      	cmp	r3, #4
 8008312:	d00a      	beq.n	800832a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <HAL_PWREx_ConfigSupply+0x70>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	429a      	cmp	r2, r3
 8008320:	d001      	beq.n	8008326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e01f      	b.n	8008366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	e01d      	b.n	8008366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800832a:	4b11      	ldr	r3, [pc, #68]	; (8008370 <HAL_PWREx_ConfigSupply+0x70>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f023 0207 	bic.w	r2, r3, #7
 8008332:	490f      	ldr	r1, [pc, #60]	; (8008370 <HAL_PWREx_ConfigSupply+0x70>)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4313      	orrs	r3, r2
 8008338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800833a:	f7fa fac7 	bl	80028cc <HAL_GetTick>
 800833e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008340:	e009      	b.n	8008356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008342:	f7fa fac3 	bl	80028cc <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008350:	d901      	bls.n	8008356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e007      	b.n	8008366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <HAL_PWREx_ConfigSupply+0x70>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800835e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008362:	d1ee      	bne.n	8008342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	58024800 	.word	0x58024800

08008374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08c      	sub	sp, #48	; 0x30
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	f000 bc1d 	b.w	8008bc2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8087 	beq.w	80084a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008396:	4b99      	ldr	r3, [pc, #612]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083a0:	4b96      	ldr	r3, [pc, #600]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d007      	beq.n	80083bc <HAL_RCC_OscConfig+0x48>
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	2b18      	cmp	r3, #24
 80083b0:	d110      	bne.n	80083d4 <HAL_RCC_OscConfig+0x60>
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	f003 0303 	and.w	r3, r3, #3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d10b      	bne.n	80083d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083bc:	4b8f      	ldr	r3, [pc, #572]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d06c      	beq.n	80084a2 <HAL_RCC_OscConfig+0x12e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d168      	bne.n	80084a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e3f6      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083dc:	d106      	bne.n	80083ec <HAL_RCC_OscConfig+0x78>
 80083de:	4b87      	ldr	r3, [pc, #540]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a86      	ldr	r2, [pc, #536]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80083e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e02e      	b.n	800844a <HAL_RCC_OscConfig+0xd6>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10c      	bne.n	800840e <HAL_RCC_OscConfig+0x9a>
 80083f4:	4b81      	ldr	r3, [pc, #516]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a80      	ldr	r2, [pc, #512]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80083fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	4b7e      	ldr	r3, [pc, #504]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a7d      	ldr	r2, [pc, #500]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	e01d      	b.n	800844a <HAL_RCC_OscConfig+0xd6>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008416:	d10c      	bne.n	8008432 <HAL_RCC_OscConfig+0xbe>
 8008418:	4b78      	ldr	r3, [pc, #480]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a77      	ldr	r2, [pc, #476]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 800841e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	4b75      	ldr	r3, [pc, #468]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a74      	ldr	r2, [pc, #464]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 800842a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e00b      	b.n	800844a <HAL_RCC_OscConfig+0xd6>
 8008432:	4b72      	ldr	r3, [pc, #456]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a71      	ldr	r2, [pc, #452]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	4b6f      	ldr	r3, [pc, #444]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a6e      	ldr	r2, [pc, #440]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008448:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d013      	beq.n	800847a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008452:	f7fa fa3b 	bl	80028cc <HAL_GetTick>
 8008456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800845a:	f7fa fa37 	bl	80028cc <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b64      	cmp	r3, #100	; 0x64
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e3aa      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800846c:	4b63      	ldr	r3, [pc, #396]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0xe6>
 8008478:	e014      	b.n	80084a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847a:	f7fa fa27 	bl	80028cc <HAL_GetTick>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008480:	e008      	b.n	8008494 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008482:	f7fa fa23 	bl	80028cc <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b64      	cmp	r3, #100	; 0x64
 800848e:	d901      	bls.n	8008494 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e396      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008494:	4b59      	ldr	r3, [pc, #356]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f0      	bne.n	8008482 <HAL_RCC_OscConfig+0x10e>
 80084a0:	e000      	b.n	80084a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80cb 	beq.w	8008648 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084b2:	4b52      	ldr	r3, [pc, #328]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084bc:	4b4f      	ldr	r3, [pc, #316]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <HAL_RCC_OscConfig+0x164>
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	2b18      	cmp	r3, #24
 80084cc:	d156      	bne.n	800857c <HAL_RCC_OscConfig+0x208>
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d151      	bne.n	800857c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084d8:	4b48      	ldr	r3, [pc, #288]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_RCC_OscConfig+0x17c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e368      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084f0:	4b42      	ldr	r3, [pc, #264]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f023 0219 	bic.w	r2, r3, #25
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	493f      	ldr	r1, [pc, #252]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008502:	f7fa f9e3 	bl	80028cc <HAL_GetTick>
 8008506:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800850a:	f7fa f9df 	bl	80028cc <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e352      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800851c:	4b37      	ldr	r3, [pc, #220]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f0      	beq.n	800850a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008528:	f7fa fa10 	bl	800294c <HAL_GetREVID>
 800852c:	4603      	mov	r3, r0
 800852e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008532:	4293      	cmp	r3, r2
 8008534:	d817      	bhi.n	8008566 <HAL_RCC_OscConfig+0x1f2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d108      	bne.n	8008550 <HAL_RCC_OscConfig+0x1dc>
 800853e:	4b2f      	ldr	r3, [pc, #188]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008546:	4a2d      	ldr	r2, [pc, #180]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800854e:	e07b      	b.n	8008648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008550:	4b2a      	ldr	r3, [pc, #168]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	031b      	lsls	r3, r3, #12
 800855e:	4927      	ldr	r1, [pc, #156]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008560:	4313      	orrs	r3, r2
 8008562:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008564:	e070      	b.n	8008648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008566:	4b25      	ldr	r3, [pc, #148]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	061b      	lsls	r3, r3, #24
 8008574:	4921      	ldr	r1, [pc, #132]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008576:	4313      	orrs	r3, r2
 8008578:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800857a:	e065      	b.n	8008648 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d048      	beq.n	8008616 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008584:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f023 0219 	bic.w	r2, r3, #25
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	491a      	ldr	r1, [pc, #104]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 8008592:	4313      	orrs	r3, r2
 8008594:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008596:	f7fa f999 	bl	80028cc <HAL_GetTick>
 800859a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800859c:	e008      	b.n	80085b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800859e:	f7fa f995 	bl	80028cc <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e308      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085b0:	4b12      	ldr	r3, [pc, #72]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085bc:	f7fa f9c6 	bl	800294c <HAL_GetREVID>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d81a      	bhi.n	8008600 <HAL_RCC_OscConfig+0x28c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d108      	bne.n	80085e4 <HAL_RCC_OscConfig+0x270>
 80085d2:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085da:	4a08      	ldr	r2, [pc, #32]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80085dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e0:	6053      	str	r3, [r2, #4]
 80085e2:	e031      	b.n	8008648 <HAL_RCC_OscConfig+0x2d4>
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	031b      	lsls	r3, r3, #12
 80085f2:	4902      	ldr	r1, [pc, #8]	; (80085fc <HAL_RCC_OscConfig+0x288>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	e026      	b.n	8008648 <HAL_RCC_OscConfig+0x2d4>
 80085fa:	bf00      	nop
 80085fc:	58024400 	.word	0x58024400
 8008600:	4b9a      	ldr	r3, [pc, #616]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	061b      	lsls	r3, r3, #24
 800860e:	4997      	ldr	r1, [pc, #604]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008610:	4313      	orrs	r3, r2
 8008612:	604b      	str	r3, [r1, #4]
 8008614:	e018      	b.n	8008648 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008616:	4b95      	ldr	r3, [pc, #596]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a94      	ldr	r2, [pc, #592]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008622:	f7fa f953 	bl	80028cc <HAL_GetTick>
 8008626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800862a:	f7fa f94f 	bl	80028cc <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e2c2      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800863c:	4b8b      	ldr	r3, [pc, #556]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f0      	bne.n	800862a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a9 	beq.w	80087a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008656:	4b85      	ldr	r3, [pc, #532]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800865e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008660:	4b82      	ldr	r3, [pc, #520]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b08      	cmp	r3, #8
 800866a:	d007      	beq.n	800867c <HAL_RCC_OscConfig+0x308>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b18      	cmp	r3, #24
 8008670:	d13a      	bne.n	80086e8 <HAL_RCC_OscConfig+0x374>
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	2b01      	cmp	r3, #1
 800867a:	d135      	bne.n	80086e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800867c:	4b7b      	ldr	r3, [pc, #492]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_RCC_OscConfig+0x320>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	2b80      	cmp	r3, #128	; 0x80
 800868e:	d001      	beq.n	8008694 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e296      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008694:	f7fa f95a 	bl	800294c <HAL_GetREVID>
 8008698:	4603      	mov	r3, r0
 800869a:	f241 0203 	movw	r2, #4099	; 0x1003
 800869e:	4293      	cmp	r3, r2
 80086a0:	d817      	bhi.n	80086d2 <HAL_RCC_OscConfig+0x35e>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d108      	bne.n	80086bc <HAL_RCC_OscConfig+0x348>
 80086aa:	4b70      	ldr	r3, [pc, #448]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086b2:	4a6e      	ldr	r2, [pc, #440]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086ba:	e075      	b.n	80087a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086bc:	4b6b      	ldr	r3, [pc, #428]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	069b      	lsls	r3, r3, #26
 80086ca:	4968      	ldr	r1, [pc, #416]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086d0:	e06a      	b.n	80087a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086d2:	4b66      	ldr	r3, [pc, #408]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	061b      	lsls	r3, r3, #24
 80086e0:	4962      	ldr	r1, [pc, #392]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086e6:	e05f      	b.n	80087a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d042      	beq.n	8008776 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086f0:	4b5e      	ldr	r3, [pc, #376]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a5d      	ldr	r2, [pc, #372]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80086f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fc:	f7fa f8e6 	bl	80028cc <HAL_GetTick>
 8008700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008702:	e008      	b.n	8008716 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008704:	f7fa f8e2 	bl	80028cc <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e255      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008716:	4b55      	ldr	r3, [pc, #340]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f0      	beq.n	8008704 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008722:	f7fa f913 	bl	800294c <HAL_GetREVID>
 8008726:	4603      	mov	r3, r0
 8008728:	f241 0203 	movw	r2, #4099	; 0x1003
 800872c:	4293      	cmp	r3, r2
 800872e:	d817      	bhi.n	8008760 <HAL_RCC_OscConfig+0x3ec>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	2b20      	cmp	r3, #32
 8008736:	d108      	bne.n	800874a <HAL_RCC_OscConfig+0x3d6>
 8008738:	4b4c      	ldr	r3, [pc, #304]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008740:	4a4a      	ldr	r2, [pc, #296]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008746:	6053      	str	r3, [r2, #4]
 8008748:	e02e      	b.n	80087a8 <HAL_RCC_OscConfig+0x434>
 800874a:	4b48      	ldr	r3, [pc, #288]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	069b      	lsls	r3, r3, #26
 8008758:	4944      	ldr	r1, [pc, #272]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800875a:	4313      	orrs	r3, r2
 800875c:	604b      	str	r3, [r1, #4]
 800875e:	e023      	b.n	80087a8 <HAL_RCC_OscConfig+0x434>
 8008760:	4b42      	ldr	r3, [pc, #264]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	493f      	ldr	r1, [pc, #252]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008770:	4313      	orrs	r3, r2
 8008772:	60cb      	str	r3, [r1, #12]
 8008774:	e018      	b.n	80087a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008776:	4b3d      	ldr	r3, [pc, #244]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3c      	ldr	r2, [pc, #240]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800877c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fa f8a3 	bl	80028cc <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800878a:	f7fa f89f 	bl	80028cc <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e212      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800879c:	4b33      	ldr	r3, [pc, #204]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0308 	and.w	r3, r3, #8
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d036      	beq.n	8008822 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d019      	beq.n	80087f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80087be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c0:	4a2a      	ldr	r2, [pc, #168]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c8:	f7fa f880 	bl	80028cc <HAL_GetTick>
 80087cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087d0:	f7fa f87c 	bl	80028cc <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e1ef      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087e2:	4b22      	ldr	r3, [pc, #136]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80087e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0f0      	beq.n	80087d0 <HAL_RCC_OscConfig+0x45c>
 80087ee:	e018      	b.n	8008822 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80087f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f4:	4a1d      	ldr	r2, [pc, #116]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 80087f6:	f023 0301 	bic.w	r3, r3, #1
 80087fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087fc:	f7fa f866 	bl	80028cc <HAL_GetTick>
 8008800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008804:	f7fa f862 	bl	80028cc <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e1d5      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008816:	4b15      	ldr	r3, [pc, #84]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f0      	bne.n	8008804 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d039      	beq.n	80088a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01c      	beq.n	8008870 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a0c      	ldr	r2, [pc, #48]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800883c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008840:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008842:	f7fa f843 	bl	80028cc <HAL_GetTick>
 8008846:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800884a:	f7fa f83f 	bl	80028cc <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e1b2      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800885c:	4b03      	ldr	r3, [pc, #12]	; (800886c <HAL_RCC_OscConfig+0x4f8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <HAL_RCC_OscConfig+0x4d6>
 8008868:	e01b      	b.n	80088a2 <HAL_RCC_OscConfig+0x52e>
 800886a:	bf00      	nop
 800886c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008870:	4b9b      	ldr	r3, [pc, #620]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a9a      	ldr	r2, [pc, #616]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800887a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800887c:	f7fa f826 	bl	80028cc <HAL_GetTick>
 8008880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008884:	f7fa f822 	bl	80028cc <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e195      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008896:	4b92      	ldr	r3, [pc, #584]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f0      	bne.n	8008884 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8081 	beq.w	80089b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088b0:	4b8c      	ldr	r3, [pc, #560]	; (8008ae4 <HAL_RCC_OscConfig+0x770>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a8b      	ldr	r2, [pc, #556]	; (8008ae4 <HAL_RCC_OscConfig+0x770>)
 80088b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088bc:	f7fa f806 	bl	80028cc <HAL_GetTick>
 80088c0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088c2:	e008      	b.n	80088d6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088c4:	f7fa f802 	bl	80028cc <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b64      	cmp	r3, #100	; 0x64
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e175      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088d6:	4b83      	ldr	r3, [pc, #524]	; (8008ae4 <HAL_RCC_OscConfig+0x770>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0f0      	beq.n	80088c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d106      	bne.n	80088f8 <HAL_RCC_OscConfig+0x584>
 80088ea:	4b7d      	ldr	r3, [pc, #500]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	4a7c      	ldr	r2, [pc, #496]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	6713      	str	r3, [r2, #112]	; 0x70
 80088f6:	e02d      	b.n	8008954 <HAL_RCC_OscConfig+0x5e0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10c      	bne.n	800891a <HAL_RCC_OscConfig+0x5a6>
 8008900:	4b77      	ldr	r3, [pc, #476]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008904:	4a76      	ldr	r2, [pc, #472]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	6713      	str	r3, [r2, #112]	; 0x70
 800890c:	4b74      	ldr	r3, [pc, #464]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 800890e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008910:	4a73      	ldr	r2, [pc, #460]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008912:	f023 0304 	bic.w	r3, r3, #4
 8008916:	6713      	str	r3, [r2, #112]	; 0x70
 8008918:	e01c      	b.n	8008954 <HAL_RCC_OscConfig+0x5e0>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d10c      	bne.n	800893c <HAL_RCC_OscConfig+0x5c8>
 8008922:	4b6f      	ldr	r3, [pc, #444]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	4a6e      	ldr	r2, [pc, #440]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008928:	f043 0304 	orr.w	r3, r3, #4
 800892c:	6713      	str	r3, [r2, #112]	; 0x70
 800892e:	4b6c      	ldr	r3, [pc, #432]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	4a6b      	ldr	r2, [pc, #428]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	6713      	str	r3, [r2, #112]	; 0x70
 800893a:	e00b      	b.n	8008954 <HAL_RCC_OscConfig+0x5e0>
 800893c:	4b68      	ldr	r3, [pc, #416]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 800893e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008940:	4a67      	ldr	r2, [pc, #412]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008942:	f023 0301 	bic.w	r3, r3, #1
 8008946:	6713      	str	r3, [r2, #112]	; 0x70
 8008948:	4b65      	ldr	r3, [pc, #404]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	4a64      	ldr	r2, [pc, #400]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 800894e:	f023 0304 	bic.w	r3, r3, #4
 8008952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d015      	beq.n	8008988 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800895c:	f7f9 ffb6 	bl	80028cc <HAL_GetTick>
 8008960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008962:	e00a      	b.n	800897a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008964:	f7f9 ffb2 	bl	80028cc <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008972:	4293      	cmp	r3, r2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e123      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800897a:	4b59      	ldr	r3, [pc, #356]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0ee      	beq.n	8008964 <HAL_RCC_OscConfig+0x5f0>
 8008986:	e014      	b.n	80089b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008988:	f7f9 ffa0 	bl	80028cc <HAL_GetTick>
 800898c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800898e:	e00a      	b.n	80089a6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008990:	f7f9 ff9c 	bl	80028cc <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	f241 3288 	movw	r2, #5000	; 0x1388
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e10d      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089a6:	4b4e      	ldr	r3, [pc, #312]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1ee      	bne.n	8008990 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8102 	beq.w	8008bc0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089bc:	4b48      	ldr	r3, [pc, #288]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c4:	2b18      	cmp	r3, #24
 80089c6:	f000 80bd 	beq.w	8008b44 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	f040 809e 	bne.w	8008b10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a41      	ldr	r2, [pc, #260]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80089da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7f9 ff74 	bl	80028cc <HAL_GetTick>
 80089e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089e8:	f7f9 ff70 	bl	80028cc <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e0e3      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089fa:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f0      	bne.n	80089e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a06:	4b36      	ldr	r3, [pc, #216]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a0a:	4b37      	ldr	r3, [pc, #220]	; (8008ae8 <HAL_RCC_OscConfig+0x774>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a16:	0112      	lsls	r2, r2, #4
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	4931      	ldr	r1, [pc, #196]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	3b01      	subs	r3, #1
 8008a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	025b      	lsls	r3, r3, #9
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	041b      	lsls	r3, r3, #16
 8008a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	061b      	lsls	r3, r3, #24
 8008a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a50:	4923      	ldr	r1, [pc, #140]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a56:	4b22      	ldr	r3, [pc, #136]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	4a21      	ldr	r2, [pc, #132]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a62:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a66:	4b21      	ldr	r3, [pc, #132]	; (8008aec <HAL_RCC_OscConfig+0x778>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a6e:	00d2      	lsls	r2, r2, #3
 8008a70:	491b      	ldr	r1, [pc, #108]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a76:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	f023 020c 	bic.w	r2, r3, #12
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	4917      	ldr	r1, [pc, #92]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a88:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	f023 0202 	bic.w	r2, r3, #2
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a94:	4912      	ldr	r1, [pc, #72]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	4a0d      	ldr	r2, [pc, #52]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ab2:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008abe:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008ac4:	f043 0301 	orr.w	r3, r3, #1
 8008ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a04      	ldr	r2, [pc, #16]	; (8008ae0 <HAL_RCC_OscConfig+0x76c>)
 8008ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad6:	f7f9 fef9 	bl	80028cc <HAL_GetTick>
 8008ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008adc:	e011      	b.n	8008b02 <HAL_RCC_OscConfig+0x78e>
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	58024800 	.word	0x58024800
 8008ae8:	fffffc0c 	.word	0xfffffc0c
 8008aec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af0:	f7f9 feec 	bl	80028cc <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e05f      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b02:	4b32      	ldr	r3, [pc, #200]	; (8008bcc <HAL_RCC_OscConfig+0x858>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f0      	beq.n	8008af0 <HAL_RCC_OscConfig+0x77c>
 8008b0e:	e057      	b.n	8008bc0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b10:	4b2e      	ldr	r3, [pc, #184]	; (8008bcc <HAL_RCC_OscConfig+0x858>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a2d      	ldr	r2, [pc, #180]	; (8008bcc <HAL_RCC_OscConfig+0x858>)
 8008b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b1c:	f7f9 fed6 	bl	80028cc <HAL_GetTick>
 8008b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b24:	f7f9 fed2 	bl	80028cc <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e045      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b36:	4b25      	ldr	r3, [pc, #148]	; (8008bcc <HAL_RCC_OscConfig+0x858>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x7b0>
 8008b42:	e03d      	b.n	8008bc0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b44:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <HAL_RCC_OscConfig+0x858>)
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b4a:	4b20      	ldr	r3, [pc, #128]	; (8008bcc <HAL_RCC_OscConfig+0x858>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d031      	beq.n	8008bbc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f003 0203 	and.w	r2, r3, #3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d12a      	bne.n	8008bbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	091b      	lsrs	r3, r3, #4
 8008b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d122      	bne.n	8008bbc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d11a      	bne.n	8008bbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	0a5b      	lsrs	r3, r3, #9
 8008b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d111      	bne.n	8008bbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	0c1b      	lsrs	r3, r3, #16
 8008b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d108      	bne.n	8008bbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	0e1b      	lsrs	r3, r3, #24
 8008bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d001      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3730      	adds	r7, #48	; 0x30
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400

08008bd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e19c      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008be4:	4b8a      	ldr	r3, [pc, #552]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d910      	bls.n	8008c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	4b87      	ldr	r3, [pc, #540]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f023 020f 	bic.w	r2, r3, #15
 8008bfa:	4985      	ldr	r1, [pc, #532]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c02:	4b83      	ldr	r3, [pc, #524]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e184      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d010      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	4b7b      	ldr	r3, [pc, #492]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d908      	bls.n	8008c42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c30:	4b78      	ldr	r3, [pc, #480]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	4975      	ldr	r1, [pc, #468]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d010      	beq.n	8008c70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	695a      	ldr	r2, [r3, #20]
 8008c52:	4b70      	ldr	r3, [pc, #448]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d908      	bls.n	8008c70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c5e:	4b6d      	ldr	r3, [pc, #436]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	496a      	ldr	r1, [pc, #424]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d010      	beq.n	8008c9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699a      	ldr	r2, [r3, #24]
 8008c80:	4b64      	ldr	r3, [pc, #400]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d908      	bls.n	8008c9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c8c:	4b61      	ldr	r3, [pc, #388]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	495e      	ldr	r1, [pc, #376]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0320 	and.w	r3, r3, #32
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d010      	beq.n	8008ccc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69da      	ldr	r2, [r3, #28]
 8008cae:	4b59      	ldr	r3, [pc, #356]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d908      	bls.n	8008ccc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008cba:	4b56      	ldr	r3, [pc, #344]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	4953      	ldr	r1, [pc, #332]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d010      	beq.n	8008cfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	4b4d      	ldr	r3, [pc, #308]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d908      	bls.n	8008cfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ce8:	4b4a      	ldr	r3, [pc, #296]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f023 020f 	bic.w	r2, r3, #15
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	4947      	ldr	r1, [pc, #284]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d055      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d06:	4b43      	ldr	r3, [pc, #268]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	4940      	ldr	r1, [pc, #256]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d107      	bne.n	8008d30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d20:	4b3c      	ldr	r3, [pc, #240]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d121      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e0f6      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d107      	bne.n	8008d48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d38:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d115      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e0ea      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d50:	4b30      	ldr	r3, [pc, #192]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0de      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d60:	4b2c      	ldr	r3, [pc, #176]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0d6      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d70:	4b28      	ldr	r3, [pc, #160]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f023 0207 	bic.w	r2, r3, #7
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	4925      	ldr	r1, [pc, #148]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d82:	f7f9 fda3 	bl	80028cc <HAL_GetTick>
 8008d86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d88:	e00a      	b.n	8008da0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d8a:	f7f9 fd9f 	bl	80028cc <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e0be      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da0:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d1eb      	bne.n	8008d8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d208      	bcs.n	8008de0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dce:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f023 020f 	bic.w	r2, r3, #15
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	490e      	ldr	r1, [pc, #56]	; (8008e14 <HAL_RCC_ClockConfig+0x244>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d214      	bcs.n	8008e18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dee:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f023 020f 	bic.w	r2, r3, #15
 8008df6:	4906      	ldr	r1, [pc, #24]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <HAL_RCC_ClockConfig+0x240>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d005      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e086      	b.n	8008f1e <HAL_RCC_ClockConfig+0x34e>
 8008e10:	52002000 	.word	0x52002000
 8008e14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d010      	beq.n	8008e46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	4b3f      	ldr	r3, [pc, #252]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d208      	bcs.n	8008e46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e34:	4b3c      	ldr	r3, [pc, #240]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	4939      	ldr	r1, [pc, #228]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0308 	and.w	r3, r3, #8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d010      	beq.n	8008e74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695a      	ldr	r2, [r3, #20]
 8008e56:	4b34      	ldr	r3, [pc, #208]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d208      	bcs.n	8008e74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e62:	4b31      	ldr	r3, [pc, #196]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	492e      	ldr	r1, [pc, #184]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d010      	beq.n	8008ea2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	699a      	ldr	r2, [r3, #24]
 8008e84:	4b28      	ldr	r3, [pc, #160]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d208      	bcs.n	8008ea2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e90:	4b25      	ldr	r3, [pc, #148]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	4922      	ldr	r1, [pc, #136]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d010      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69da      	ldr	r2, [r3, #28]
 8008eb2:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d208      	bcs.n	8008ed0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ebe:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	4917      	ldr	r1, [pc, #92]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ed0:	f000 f834 	bl	8008f3c <HAL_RCC_GetSysClockFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	4912      	ldr	r1, [pc, #72]	; (8008f2c <HAL_RCC_ClockConfig+0x35c>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <HAL_RCC_ClockConfig+0x358>)
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	4a0d      	ldr	r2, [pc, #52]	; (8008f2c <HAL_RCC_ClockConfig+0x35c>)
 8008ef8:	5cd3      	ldrb	r3, [r2, r3]
 8008efa:	f003 031f 	and.w	r3, r3, #31
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	fa22 f303 	lsr.w	r3, r2, r3
 8008f04:	4a0a      	ldr	r2, [pc, #40]	; (8008f30 <HAL_RCC_ClockConfig+0x360>)
 8008f06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f08:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <HAL_RCC_ClockConfig+0x364>)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <HAL_RCC_ClockConfig+0x368>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f9 fc90 	bl	8002838 <HAL_InitTick>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	58024400 	.word	0x58024400
 8008f2c:	0800fe64 	.word	0x0800fe64
 8008f30:	24000034 	.word	0x24000034
 8008f34:	24000030 	.word	0x24000030
 8008f38:	24000038 	.word	0x24000038

08008f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f42:	4bb3      	ldr	r3, [pc, #716]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f4a:	2b18      	cmp	r3, #24
 8008f4c:	f200 8155 	bhi.w	80091fa <HAL_RCC_GetSysClockFreq+0x2be>
 8008f50:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008fbd 	.word	0x08008fbd
 8008f5c:	080091fb 	.word	0x080091fb
 8008f60:	080091fb 	.word	0x080091fb
 8008f64:	080091fb 	.word	0x080091fb
 8008f68:	080091fb 	.word	0x080091fb
 8008f6c:	080091fb 	.word	0x080091fb
 8008f70:	080091fb 	.word	0x080091fb
 8008f74:	080091fb 	.word	0x080091fb
 8008f78:	08008fe3 	.word	0x08008fe3
 8008f7c:	080091fb 	.word	0x080091fb
 8008f80:	080091fb 	.word	0x080091fb
 8008f84:	080091fb 	.word	0x080091fb
 8008f88:	080091fb 	.word	0x080091fb
 8008f8c:	080091fb 	.word	0x080091fb
 8008f90:	080091fb 	.word	0x080091fb
 8008f94:	080091fb 	.word	0x080091fb
 8008f98:	08008fe9 	.word	0x08008fe9
 8008f9c:	080091fb 	.word	0x080091fb
 8008fa0:	080091fb 	.word	0x080091fb
 8008fa4:	080091fb 	.word	0x080091fb
 8008fa8:	080091fb 	.word	0x080091fb
 8008fac:	080091fb 	.word	0x080091fb
 8008fb0:	080091fb 	.word	0x080091fb
 8008fb4:	080091fb 	.word	0x080091fb
 8008fb8:	08008fef 	.word	0x08008fef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fbc:	4b94      	ldr	r3, [pc, #592]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fc8:	4b91      	ldr	r3, [pc, #580]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	08db      	lsrs	r3, r3, #3
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	4a90      	ldr	r2, [pc, #576]	; (8009214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008fda:	e111      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fdc:	4b8d      	ldr	r3, [pc, #564]	; (8009214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fde:	61bb      	str	r3, [r7, #24]
    break;
 8008fe0:	e10e      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008fe2:	4b8d      	ldr	r3, [pc, #564]	; (8009218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fe4:	61bb      	str	r3, [r7, #24]
    break;
 8008fe6:	e10b      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008fe8:	4b8c      	ldr	r3, [pc, #560]	; (800921c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fea:	61bb      	str	r3, [r7, #24]
    break;
 8008fec:	e108      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fee:	4b88      	ldr	r3, [pc, #544]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ff8:	4b85      	ldr	r3, [pc, #532]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	091b      	lsrs	r3, r3, #4
 8008ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009002:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009004:	4b82      	ldr	r3, [pc, #520]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800900e:	4b80      	ldr	r3, [pc, #512]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	fb02 f303 	mul.w	r3, r2, r3
 800901e:	ee07 3a90 	vmov	s15, r3
 8009022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009026:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80e1 	beq.w	80091f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b02      	cmp	r3, #2
 8009036:	f000 8083 	beq.w	8009140 <HAL_RCC_GetSysClockFreq+0x204>
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b02      	cmp	r3, #2
 800903e:	f200 80a1 	bhi.w	8009184 <HAL_RCC_GetSysClockFreq+0x248>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <HAL_RCC_GetSysClockFreq+0x114>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d056      	beq.n	80090fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800904e:	e099      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009050:	4b6f      	ldr	r3, [pc, #444]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	d02d      	beq.n	80090b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800905c:	4b6c      	ldr	r3, [pc, #432]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	08db      	lsrs	r3, r3, #3
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	4a6b      	ldr	r2, [pc, #428]	; (8009214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
 800906c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009086:	4b62      	ldr	r3, [pc, #392]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009096:	ed97 6a02 	vldr	s12, [r7, #8]
 800909a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800909e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090b6:	e087      	b.n	80091c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009224 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ca:	4b51      	ldr	r3, [pc, #324]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090da:	ed97 6a02 	vldr	s12, [r7, #8]
 80090de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090fa:	e065      	b.n	80091c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009228 <HAL_RCC_GetSysClockFreq+0x2ec>
 800910a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910e:	4b40      	ldr	r3, [pc, #256]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009122:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009220 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800913e:	e043      	b.n	80091c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800922c <HAL_RCC_GetSysClockFreq+0x2f0>
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b2f      	ldr	r3, [pc, #188]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a02 	vldr	s12, [r7, #8]
 8009166:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009182:	e021      	b.n	80091c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009228 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009196:	4b1e      	ldr	r3, [pc, #120]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091cc:	0a5b      	lsrs	r3, r3, #9
 80091ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d2:	3301      	adds	r3, #1
 80091d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ec:	ee17 3a90 	vmov	r3, s15
 80091f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80091f2:	e005      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61bb      	str	r3, [r7, #24]
    break;
 80091f8:	e002      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091fc:	61bb      	str	r3, [r7, #24]
    break;
 80091fe:	bf00      	nop
  }

  return sysclockfreq;
 8009200:	69bb      	ldr	r3, [r7, #24]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3724      	adds	r7, #36	; 0x24
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	58024400 	.word	0x58024400
 8009214:	03d09000 	.word	0x03d09000
 8009218:	003d0900 	.word	0x003d0900
 800921c:	017d7840 	.word	0x017d7840
 8009220:	46000000 	.word	0x46000000
 8009224:	4c742400 	.word	0x4c742400
 8009228:	4a742400 	.word	0x4a742400
 800922c:	4bbebc20 	.word	0x4bbebc20

08009230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009236:	f7ff fe81 	bl	8008f3c <HAL_RCC_GetSysClockFreq>
 800923a:	4602      	mov	r2, r0
 800923c:	4b10      	ldr	r3, [pc, #64]	; (8009280 <HAL_RCC_GetHCLKFreq+0x50>)
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	0a1b      	lsrs	r3, r3, #8
 8009242:	f003 030f 	and.w	r3, r3, #15
 8009246:	490f      	ldr	r1, [pc, #60]	; (8009284 <HAL_RCC_GetHCLKFreq+0x54>)
 8009248:	5ccb      	ldrb	r3, [r1, r3]
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <HAL_RCC_GetHCLKFreq+0x50>)
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	4a09      	ldr	r2, [pc, #36]	; (8009284 <HAL_RCC_GetHCLKFreq+0x54>)
 800925e:	5cd3      	ldrb	r3, [r2, r3]
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	fa22 f303 	lsr.w	r3, r2, r3
 800926a:	4a07      	ldr	r2, [pc, #28]	; (8009288 <HAL_RCC_GetHCLKFreq+0x58>)
 800926c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800926e:	4a07      	ldr	r2, [pc, #28]	; (800928c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009274:	4b04      	ldr	r3, [pc, #16]	; (8009288 <HAL_RCC_GetHCLKFreq+0x58>)
 8009276:	681b      	ldr	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58024400 	.word	0x58024400
 8009284:	0800fe64 	.word	0x0800fe64
 8009288:	24000034 	.word	0x24000034
 800928c:	24000030 	.word	0x24000030

08009290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009294:	f7ff ffcc 	bl	8009230 <HAL_RCC_GetHCLKFreq>
 8009298:	4602      	mov	r2, r0
 800929a:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	091b      	lsrs	r3, r3, #4
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	4904      	ldr	r1, [pc, #16]	; (80092b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092a6:	5ccb      	ldrb	r3, [r1, r3]
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	58024400 	.word	0x58024400
 80092b8:	0800fe64 	.word	0x0800fe64

080092bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092c0:	f7ff ffb6 	bl	8009230 <HAL_RCC_GetHCLKFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	58024400 	.word	0x58024400
 80092e4:	0800fe64 	.word	0x0800fe64

080092e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092f4:	2300      	movs	r3, #0
 80092f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d03f      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800930c:	d02a      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800930e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009312:	d824      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009318:	d018      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800931a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800931e:	d81e      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009328:	d007      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800932a:	e018      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800932c:	4ba3      	ldr	r3, [pc, #652]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	4aa2      	ldr	r2, [pc, #648]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009338:	e015      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3304      	adds	r3, #4
 800933e:	2102      	movs	r1, #2
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fff9 	bl	800b338 <RCCEx_PLL2_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800934a:	e00c      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	2102      	movs	r1, #2
 8009352:	4618      	mov	r0, r3
 8009354:	f002 f8a2 	bl	800b49c <RCCEx_PLL3_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800935c:	e003      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	75fb      	strb	r3, [r7, #23]
      break;
 8009362:	e000      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d109      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800936c:	4b93      	ldr	r3, [pc, #588]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800936e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009378:	4990      	ldr	r1, [pc, #576]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800937a:	4313      	orrs	r3, r2
 800937c:	650b      	str	r3, [r1, #80]	; 0x50
 800937e:	e001      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d03d      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009394:	2b04      	cmp	r3, #4
 8009396:	d826      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093b5 	.word	0x080093b5
 80093a4:	080093c3 	.word	0x080093c3
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093ed 	.word	0x080093ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b4:	4b81      	ldr	r3, [pc, #516]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a80      	ldr	r2, [pc, #512]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093c0:	e015      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 ffb5 	bl	800b338 <RCCEx_PLL2_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d2:	e00c      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3324      	adds	r3, #36	; 0x24
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 f85e 	bl	800b49c <RCCEx_PLL3_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ea:	e000      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093f4:	4b71      	ldr	r3, [pc, #452]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f8:	f023 0207 	bic.w	r2, r3, #7
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	496e      	ldr	r1, [pc, #440]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009402:	4313      	orrs	r3, r2
 8009404:	650b      	str	r3, [r1, #80]	; 0x50
 8009406:	e001      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009414:	2b00      	cmp	r3, #0
 8009416:	d042      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009420:	d02b      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009426:	d825      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009428:	2bc0      	cmp	r3, #192	; 0xc0
 800942a:	d028      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800942c:	2bc0      	cmp	r3, #192	; 0xc0
 800942e:	d821      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009430:	2b80      	cmp	r3, #128	; 0x80
 8009432:	d016      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009434:	2b80      	cmp	r3, #128	; 0x80
 8009436:	d81d      	bhi.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d007      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009440:	e018      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009442:	4b5e      	ldr	r3, [pc, #376]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	4a5d      	ldr	r2, [pc, #372]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800944c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800944e:	e017      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3304      	adds	r3, #4
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f001 ff6e 	bl	800b338 <RCCEx_PLL2_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009460:	e00e      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3324      	adds	r3, #36	; 0x24
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f002 f817 	bl	800b49c <RCCEx_PLL3_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009472:	e005      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
      break;
 8009478:	e002      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800947e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009486:	4b4d      	ldr	r3, [pc, #308]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800948a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009492:	494a      	ldr	r1, [pc, #296]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009494:	4313      	orrs	r3, r2
 8009496:	650b      	str	r3, [r1, #80]	; 0x50
 8009498:	e001      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d049      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094b4:	d030      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094ba:	d82a      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094c0:	d02c      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80094c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094c6:	d824      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094cc:	d018      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80094ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094d2:	d81e      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094dc:	d007      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094de:	e018      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e0:	4b36      	ldr	r3, [pc, #216]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	4a35      	ldr	r2, [pc, #212]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094ec:	e017      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 ff1f 	bl	800b338 <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094fe:	e00e      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	2100      	movs	r1, #0
 8009506:	4618      	mov	r0, r3
 8009508:	f001 ffc8 	bl	800b49c <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009510:	e005      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	75fb      	strb	r3, [r7, #23]
      break;
 8009516:	e002      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800951c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009524:	4b25      	ldr	r3, [pc, #148]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009528:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009532:	4922      	ldr	r1, [pc, #136]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009534:	4313      	orrs	r3, r2
 8009536:	658b      	str	r3, [r1, #88]	; 0x58
 8009538:	e001      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009546:	2b00      	cmp	r3, #0
 8009548:	d04b      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009554:	d030      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800955a:	d82a      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800955c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009560:	d02e      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009566:	d824      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956c:	d018      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800956e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009572:	d81e      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800957c:	d007      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800957e:	e018      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a0d      	ldr	r2, [pc, #52]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800958a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800958c:	e019      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3304      	adds	r3, #4
 8009592:	2100      	movs	r1, #0
 8009594:	4618      	mov	r0, r3
 8009596:	f001 fecf 	bl	800b338 <RCCEx_PLL2_Config>
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800959e:	e010      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3324      	adds	r3, #36	; 0x24
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f001 ff78 	bl	800b49c <RCCEx_PLL3_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095b0:	e007      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	75fb      	strb	r3, [r7, #23]
      break;
 80095b6:	e004      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80095b8:	bf00      	nop
 80095ba:	e002      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80095bc:	58024400 	.word	0x58024400
      break;
 80095c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095c8:	4b99      	ldr	r3, [pc, #612]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095d6:	4996      	ldr	r1, [pc, #600]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	658b      	str	r3, [r1, #88]	; 0x58
 80095dc:	e001      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d032      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f2:	2b30      	cmp	r3, #48	; 0x30
 80095f4:	d01c      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80095f6:	2b30      	cmp	r3, #48	; 0x30
 80095f8:	d817      	bhi.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d00c      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d813      	bhi.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d016      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009606:	2b10      	cmp	r3, #16
 8009608:	d10f      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800960a:	4b89      	ldr	r3, [pc, #548]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	4a88      	ldr	r2, [pc, #544]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009616:	e00e      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3304      	adds	r3, #4
 800961c:	2102      	movs	r1, #2
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fe8a 	bl	800b338 <RCCEx_PLL2_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009628:	e005      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	75fb      	strb	r3, [r7, #23]
      break;
 800962e:	e002      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009630:	bf00      	nop
 8009632:	e000      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d109      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800963c:	4b7c      	ldr	r3, [pc, #496]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800963e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009640:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009648:	4979      	ldr	r1, [pc, #484]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800964a:	4313      	orrs	r3, r2
 800964c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800964e:	e001      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d047      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009668:	d030      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800966a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800966e:	d82a      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009670:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009674:	d02c      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800967a:	d824      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800967c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009680:	d018      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009686:	d81e      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800968c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009690:	d007      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009692:	e018      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009694:	4b66      	ldr	r3, [pc, #408]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a65      	ldr	r2, [pc, #404]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800969a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a0:	e017      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 fe45 	bl	800b338 <RCCEx_PLL2_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096b2:	e00e      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3324      	adds	r3, #36	; 0x24
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 feee 	bl	800b49c <RCCEx_PLL3_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096c4:	e005      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ca:	e002      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096cc:	bf00      	nop
 80096ce:	e000      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d109      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096d8:	4b55      	ldr	r3, [pc, #340]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e4:	4952      	ldr	r1, [pc, #328]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	650b      	str	r3, [r1, #80]	; 0x50
 80096ea:	e001      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d049      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009704:	d02e      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800970a:	d828      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800970c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009710:	d02a      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009716:	d822      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009718:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800971c:	d026      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800971e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009722:	d81c      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009728:	d010      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800972a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800972e:	d816      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01d      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009738:	d111      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3304      	adds	r3, #4
 800973e:	2101      	movs	r1, #1
 8009740:	4618      	mov	r0, r3
 8009742:	f001 fdf9 	bl	800b338 <RCCEx_PLL2_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800974a:	e012      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3324      	adds	r3, #36	; 0x24
 8009750:	2101      	movs	r1, #1
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fea2 	bl	800b49c <RCCEx_PLL3_Config>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800975c:	e009      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
      break;
 8009762:	e006      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009764:	bf00      	nop
 8009766:	e004      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009768:	bf00      	nop
 800976a:	e002      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800976c:	bf00      	nop
 800976e:	e000      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d109      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009778:	4b2d      	ldr	r3, [pc, #180]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800977a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009784:	492a      	ldr	r1, [pc, #168]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009786:	4313      	orrs	r3, r2
 8009788:	650b      	str	r3, [r1, #80]	; 0x50
 800978a:	e001      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d04d      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097a6:	d02e      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80097a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ac:	d828      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b2:	d02a      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b8:	d822      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097be:	d026      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80097c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097c4:	d81c      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ca:	d010      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80097cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d0:	d816      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01d      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097da:	d111      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3304      	adds	r3, #4
 80097e0:	2101      	movs	r1, #1
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 fda8 	bl	800b338 <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ec:	e012      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3324      	adds	r3, #36	; 0x24
 80097f2:	2101      	movs	r1, #1
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fe51 	bl	800b49c <RCCEx_PLL3_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097fe:	e009      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]
      break;
 8009804:	e006      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009806:	bf00      	nop
 8009808:	e004      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800980a:	bf00      	nop
 800980c:	e002      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800980e:	bf00      	nop
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10c      	bne.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800981a:	4b05      	ldr	r3, [pc, #20]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800981c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009828:	4901      	ldr	r1, [pc, #4]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800982a:	4313      	orrs	r3, r2
 800982c:	658b      	str	r3, [r1, #88]	; 0x58
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d02f      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984c:	d00e      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800984e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009852:	d814      	bhi.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d015      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800985c:	d10f      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800985e:	4baf      	ldr	r3, [pc, #700]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	4aae      	ldr	r2, [pc, #696]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800986a:	e00c      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3304      	adds	r3, #4
 8009870:	2101      	movs	r1, #1
 8009872:	4618      	mov	r0, r3
 8009874:	f001 fd60 	bl	800b338 <RCCEx_PLL2_Config>
 8009878:	4603      	mov	r3, r0
 800987a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800987c:	e003      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	75fb      	strb	r3, [r7, #23]
      break;
 8009882:	e000      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800988c:	4ba3      	ldr	r3, [pc, #652]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800988e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009890:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	49a0      	ldr	r1, [pc, #640]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800989a:	4313      	orrs	r3, r2
 800989c:	650b      	str	r3, [r1, #80]	; 0x50
 800989e:	e001      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d032      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d81b      	bhi.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80098b8:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	080098f7 	.word	0x080098f7
 80098c4:	080098d1 	.word	0x080098d1
 80098c8:	080098df 	.word	0x080098df
 80098cc:	080098f7 	.word	0x080098f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d0:	4b92      	ldr	r3, [pc, #584]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	4a91      	ldr	r2, [pc, #580]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098dc:	e00c      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3304      	adds	r3, #4
 80098e2:	2102      	movs	r1, #2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f001 fd27 	bl	800b338 <RCCEx_PLL2_Config>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098ee:	e003      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]
      break;
 80098f4:	e000      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80098f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098fe:	4b87      	ldr	r3, [pc, #540]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009902:	f023 0203 	bic.w	r2, r3, #3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	4984      	ldr	r1, [pc, #528]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800990c:	4313      	orrs	r3, r2
 800990e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009910:	e001      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 8086 	beq.w	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009924:	4b7e      	ldr	r3, [pc, #504]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a7d      	ldr	r2, [pc, #500]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800992a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800992e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009930:	f7f8 ffcc 	bl	80028cc <HAL_GetTick>
 8009934:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009936:	e009      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009938:	f7f8 ffc8 	bl	80028cc <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b64      	cmp	r3, #100	; 0x64
 8009944:	d902      	bls.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	75fb      	strb	r3, [r7, #23]
        break;
 800994a:	e005      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800994c:	4b74      	ldr	r3, [pc, #464]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0ef      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d166      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800995e:	4b6f      	ldr	r3, [pc, #444]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009968:	4053      	eors	r3, r2
 800996a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800996e:	2b00      	cmp	r3, #0
 8009970:	d013      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009972:	4b6a      	ldr	r3, [pc, #424]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800997c:	4b67      	ldr	r3, [pc, #412]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a66      	ldr	r2, [pc, #408]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009986:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009988:	4b64      	ldr	r3, [pc, #400]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	4a63      	ldr	r2, [pc, #396]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800998e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009992:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009994:	4a61      	ldr	r2, [pc, #388]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a4:	d115      	bne.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7f8 ff91 	bl	80028cc <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099ac:	e00b      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ae:	f7f8 ff8d 	bl	80028cc <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099bc:	4293      	cmp	r3, r2
 80099be:	d902      	bls.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	75fb      	strb	r3, [r7, #23]
            break;
 80099c4:	e005      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099c6:	4b55      	ldr	r3, [pc, #340]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0ed      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d126      	bne.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099e6:	d10d      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80099e8:	4b4c      	ldr	r3, [pc, #304]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099f6:	0919      	lsrs	r1, r3, #4
 80099f8:	4b4a      	ldr	r3, [pc, #296]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80099fa:	400b      	ands	r3, r1
 80099fc:	4947      	ldr	r1, [pc, #284]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	610b      	str	r3, [r1, #16]
 8009a02:	e005      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009a04:	4b45      	ldr	r3, [pc, #276]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	4a44      	ldr	r2, [pc, #272]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a0e:	6113      	str	r3, [r2, #16]
 8009a10:	4b42      	ldr	r3, [pc, #264]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a1e:	493f      	ldr	r1, [pc, #252]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	670b      	str	r3, [r1, #112]	; 0x70
 8009a24:	e004      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	75bb      	strb	r3, [r7, #22]
 8009a2a:	e001      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 8085 	beq.w	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a42:	2b28      	cmp	r3, #40	; 0x28
 8009a44:	d866      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a46:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009b29 	.word	0x08009b29
 8009a50:	08009b15 	.word	0x08009b15
 8009a54:	08009b15 	.word	0x08009b15
 8009a58:	08009b15 	.word	0x08009b15
 8009a5c:	08009b15 	.word	0x08009b15
 8009a60:	08009b15 	.word	0x08009b15
 8009a64:	08009b15 	.word	0x08009b15
 8009a68:	08009b15 	.word	0x08009b15
 8009a6c:	08009af1 	.word	0x08009af1
 8009a70:	08009b15 	.word	0x08009b15
 8009a74:	08009b15 	.word	0x08009b15
 8009a78:	08009b15 	.word	0x08009b15
 8009a7c:	08009b15 	.word	0x08009b15
 8009a80:	08009b15 	.word	0x08009b15
 8009a84:	08009b15 	.word	0x08009b15
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b03 	.word	0x08009b03
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009b15 	.word	0x08009b15
 8009a98:	08009b15 	.word	0x08009b15
 8009a9c:	08009b15 	.word	0x08009b15
 8009aa0:	08009b15 	.word	0x08009b15
 8009aa4:	08009b15 	.word	0x08009b15
 8009aa8:	08009b15 	.word	0x08009b15
 8009aac:	08009b29 	.word	0x08009b29
 8009ab0:	08009b15 	.word	0x08009b15
 8009ab4:	08009b15 	.word	0x08009b15
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b15 	.word	0x08009b15
 8009ac0:	08009b15 	.word	0x08009b15
 8009ac4:	08009b15 	.word	0x08009b15
 8009ac8:	08009b15 	.word	0x08009b15
 8009acc:	08009b29 	.word	0x08009b29
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	08009b15 	.word	0x08009b15
 8009ad8:	08009b15 	.word	0x08009b15
 8009adc:	08009b15 	.word	0x08009b15
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b15 	.word	0x08009b15
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	08009b29 	.word	0x08009b29
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	2101      	movs	r1, #1
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fc1e 	bl	800b338 <RCCEx_PLL2_Config>
 8009afc:	4603      	mov	r3, r0
 8009afe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b00:	e013      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3324      	adds	r3, #36	; 0x24
 8009b06:	2101      	movs	r1, #1
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 fcc7 	bl	800b49c <RCCEx_PLL3_Config>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b12:	e00a      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	75fb      	strb	r3, [r7, #23]
      break;
 8009b18:	e007      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	58024800 	.word	0x58024800
 8009b24:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d109      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b30:	4b96      	ldr	r3, [pc, #600]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b34:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b3c:	4993      	ldr	r1, [pc, #588]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	654b      	str	r3, [r1, #84]	; 0x54
 8009b42:	e001      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d038      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d821      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b5c:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009ba7 	.word	0x08009ba7
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b8f 	.word	0x08009b8f
 8009b70:	08009ba7 	.word	0x08009ba7
 8009b74:	08009ba7 	.word	0x08009ba7
 8009b78:	08009ba7 	.word	0x08009ba7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	2101      	movs	r1, #1
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 fbd8 	bl	800b338 <RCCEx_PLL2_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b8c:	e00c      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3324      	adds	r3, #36	; 0x24
 8009b92:	2101      	movs	r1, #1
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fc81 	bl	800b49c <RCCEx_PLL3_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b9e:	e003      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d109      	bne.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bae:	4b77      	ldr	r3, [pc, #476]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb2:	f023 0207 	bic.w	r2, r3, #7
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bba:	4974      	ldr	r1, [pc, #464]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	654b      	str	r3, [r1, #84]	; 0x54
 8009bc0:	e001      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d03a      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd8:	2b05      	cmp	r3, #5
 8009bda:	d821      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009bdc:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009c27 	.word	0x08009c27
 8009be8:	08009bfd 	.word	0x08009bfd
 8009bec:	08009c0f 	.word	0x08009c0f
 8009bf0:	08009c27 	.word	0x08009c27
 8009bf4:	08009c27 	.word	0x08009c27
 8009bf8:	08009c27 	.word	0x08009c27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 fb98 	bl	800b338 <RCCEx_PLL2_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c0c:	e00c      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3324      	adds	r3, #36	; 0x24
 8009c12:	2101      	movs	r1, #1
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 fc41 	bl	800b49c <RCCEx_PLL3_Config>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c1e:	e003      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	e000      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c2e:	4b57      	ldr	r3, [pc, #348]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c32:	f023 0207 	bic.w	r2, r3, #7
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3c:	4953      	ldr	r1, [pc, #332]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	658b      	str	r3, [r1, #88]	; 0x58
 8009c42:	e001      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d04b      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c5e:	d02e      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c64:	d828      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6a:	d02a      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c70:	d822      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c76:	d026      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c7c:	d81c      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c82:	d010      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c88:	d816      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01d      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c92:	d111      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3304      	adds	r3, #4
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 fb4c 	bl	800b338 <RCCEx_PLL2_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ca4:	e012      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3324      	adds	r3, #36	; 0x24
 8009caa:	2102      	movs	r1, #2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fbf5 	bl	800b49c <RCCEx_PLL3_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cb6:	e009      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbc:	e006      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cbe:	bf00      	nop
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10a      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cd2:	4b2e      	ldr	r3, [pc, #184]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce0:	492a      	ldr	r1, [pc, #168]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	654b      	str	r3, [r1, #84]	; 0x54
 8009ce6:	e001      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d04d      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d02:	d02e      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009d04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d08:	d828      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0e:	d02a      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d14:	d822      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d1a:	d026      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d20:	d81c      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d26:	d010      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d2c:	d816      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d01d      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d36:	d111      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 fafa 	bl	800b338 <RCCEx_PLL2_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d48:	e012      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3324      	adds	r3, #36	; 0x24
 8009d4e:	2102      	movs	r1, #2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fba3 	bl	800b49c <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d5a:	e009      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d60:	e006      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d62:	bf00      	nop
 8009d64:	e004      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d66:	bf00      	nop
 8009d68:	e002      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d6a:	bf00      	nop
 8009d6c:	e000      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10c      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d76:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d84:	4901      	ldr	r1, [pc, #4]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	658b      	str	r3, [r1, #88]	; 0x58
 8009d8a:	e003      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d04b      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009da6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009daa:	d02e      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009dac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009db0:	d828      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db6:	d02a      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dbc:	d822      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dc2:	d026      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009dc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dc8:	d81c      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dce:	d010      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd4:	d816      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d01d      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dde:	d111      	bne.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3304      	adds	r3, #4
 8009de4:	2100      	movs	r1, #0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 faa6 	bl	800b338 <RCCEx_PLL2_Config>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009df0:	e012      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3324      	adds	r3, #36	; 0x24
 8009df6:	2102      	movs	r1, #2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 fb4f 	bl	800b49c <RCCEx_PLL3_Config>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e02:	e009      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	75fb      	strb	r3, [r7, #23]
      break;
 8009e08:	e006      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e0a:	bf00      	nop
 8009e0c:	e004      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e12:	bf00      	nop
 8009e14:	e000      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e1e:	4b9d      	ldr	r3, [pc, #628]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e2c:	4999      	ldr	r1, [pc, #612]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	658b      	str	r3, [r1, #88]	; 0x58
 8009e32:	e001      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01a      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4e:	d10a      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	2102      	movs	r1, #2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 fb20 	bl	800b49c <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e66:	4b8b      	ldr	r3, [pc, #556]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e74:	4987      	ldr	r1, [pc, #540]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01a      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e90:	d10a      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3324      	adds	r3, #36	; 0x24
 8009e96:	2102      	movs	r1, #2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 faff 	bl	800b49c <RCCEx_PLL3_Config>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ea8:	4b7a      	ldr	r3, [pc, #488]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eb6:	4977      	ldr	r1, [pc, #476]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d034      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed2:	d01d      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed8:	d817      	bhi.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee2:	d009      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009ee4:	e011      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fa23 	bl	800b338 <RCCEx_PLL2_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ef6:	e00c      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3324      	adds	r3, #36	; 0x24
 8009efc:	2102      	movs	r1, #2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 facc 	bl	800b49c <RCCEx_PLL3_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f08:	e003      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0e:	e000      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f18:	4b5e      	ldr	r3, [pc, #376]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f26:	495b      	ldr	r1, [pc, #364]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	658b      	str	r3, [r1, #88]	; 0x58
 8009f2c:	e001      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d033      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f48:	d01c      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f4e:	d816      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f54:	d003      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f5a:	d007      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f5c:	e00f      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f5e:	4b4d      	ldr	r3, [pc, #308]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	4a4c      	ldr	r2, [pc, #304]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f6a:	e00c      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3324      	adds	r3, #36	; 0x24
 8009f70:	2101      	movs	r1, #1
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fa92 	bl	800b49c <RCCEx_PLL3_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f7c:	e003      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	75fb      	strb	r3, [r7, #23]
      break;
 8009f82:	e000      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f8c:	4b41      	ldr	r3, [pc, #260]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f9a:	493e      	ldr	r1, [pc, #248]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8009fa0:	e001      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d029      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbe:	d007      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009fc0:	e00f      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc2:	4b34      	ldr	r3, [pc, #208]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	4a33      	ldr	r2, [pc, #204]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fce:	e00b      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	2102      	movs	r1, #2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 f9ae 	bl	800b338 <RCCEx_PLL2_Config>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fe0:	e002      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d109      	bne.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fee:	4b29      	ldr	r3, [pc, #164]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffa:	4926      	ldr	r1, [pc, #152]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a000:	e001      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3324      	adds	r3, #36	; 0x24
 800a016:	2102      	movs	r1, #2
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 fa3f 	bl	800b49c <RCCEx_PLL3_Config>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d033      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a03c:	d017      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a03e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a042:	d811      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a048:	d013      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a04a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04e:	d80b      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a050:	2b00      	cmp	r3, #0
 800a052:	d010      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a058:	d106      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a066:	e007      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	75fb      	strb	r3, [r7, #23]
      break;
 800a06c:	e004      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a06e:	bf00      	nop
 800a070:	e002      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a072:	bf00      	nop
 800a074:	e000      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a076:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10c      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a07e:	4b05      	ldr	r3, [pc, #20]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08a:	4902      	ldr	r1, [pc, #8]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	654b      	str	r3, [r1, #84]	; 0x54
 800a090:	e004      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a092:	bf00      	nop
 800a094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0a8:	4b31      	ldr	r3, [pc, #196]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b4:	492e      	ldr	r1, [pc, #184]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0c6:	4b2a      	ldr	r3, [pc, #168]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0d4:	4926      	ldr	r1, [pc, #152]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d008      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0e6:	4b22      	ldr	r3, [pc, #136]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0f2:	491f      	ldr	r1, [pc, #124]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00d      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a104:	4b1a      	ldr	r3, [pc, #104]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	4a19      	ldr	r2, [pc, #100]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a10a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a10e:	6113      	str	r3, [r2, #16]
 800a110:	4b17      	ldr	r3, [pc, #92]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a11a:	4915      	ldr	r1, [pc, #84]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	da08      	bge.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a12a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a134:	490e      	ldr	r1, [pc, #56]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a136:	4313      	orrs	r3, r2
 800a138:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a146:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a154:	4906      	ldr	r1, [pc, #24]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a156:	4313      	orrs	r3, r2
 800a158:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a15a:	7dbb      	ldrb	r3, [r7, #22]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	e000      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
}
 800a166:	4618      	mov	r0, r3
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	58024400 	.word	0x58024400

0800a174 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b090      	sub	sp, #64	; 0x40
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	f040 8095 	bne.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a186:	4b97      	ldr	r3, [pc, #604]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	2b04      	cmp	r3, #4
 800a194:	f200 8088 	bhi.w	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1b5 	.word	0x0800a1b5
 800a1a4:	0800a1dd 	.word	0x0800a1dd
 800a1a8:	0800a205 	.word	0x0800a205
 800a1ac:	0800a2a1 	.word	0x0800a2a1
 800a1b0:	0800a22d 	.word	0x0800a22d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1b4:	4b8b      	ldr	r3, [pc, #556]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1c0:	d108      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 ff64 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1d0:	f000 bc94 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1d8:	f000 bc90 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1dc:	4b81      	ldr	r3, [pc, #516]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1e8:	d108      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ea:	f107 0318 	add.w	r3, r7, #24
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fca8 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1f8:	f000 bc80 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a200:	f000 bc7c 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a204:	4b77      	ldr	r3, [pc, #476]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a20c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a210:	d108      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a212:	f107 030c 	add.w	r3, r7, #12
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fde8 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a220:	f000 bc6c 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a228:	f000 bc68 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a22c:	4b6d      	ldr	r3, [pc, #436]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a22e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a234:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a236:	4b6b      	ldr	r3, [pc, #428]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0304 	and.w	r3, r3, #4
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d10c      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a244:	2b00      	cmp	r3, #0
 800a246:	d109      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a248:	4b66      	ldr	r3, [pc, #408]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	08db      	lsrs	r3, r3, #3
 800a24e:	f003 0303 	and.w	r3, r3, #3
 800a252:	4a65      	ldr	r2, [pc, #404]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a254:	fa22 f303 	lsr.w	r3, r2, r3
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a25a:	e01f      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a25c:	4b61      	ldr	r3, [pc, #388]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a268:	d106      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a270:	d102      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a272:	4b5e      	ldr	r3, [pc, #376]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a276:	e011      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a278:	4b5a      	ldr	r3, [pc, #360]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a284:	d106      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28c:	d102      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a28e:	4b58      	ldr	r3, [pc, #352]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a292:	e003      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a298:	f000 bc30 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a29c:	f000 bc2e 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2a0:	4b54      	ldr	r3, [pc, #336]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a4:	f000 bc2a 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ac:	f000 bc26 	b.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b6:	f040 809f 	bne.w	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a2ba:	4b4a      	ldr	r3, [pc, #296]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a2c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ca:	d04d      	beq.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d2:	f200 8084 	bhi.w	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	2bc0      	cmp	r3, #192	; 0xc0
 800a2da:	d07d      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	2bc0      	cmp	r3, #192	; 0xc0
 800a2e0:	d87d      	bhi.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	2b80      	cmp	r3, #128	; 0x80
 800a2e6:	d02d      	beq.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	2b80      	cmp	r3, #128	; 0x80
 800a2ec:	d877      	bhi.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	2b40      	cmp	r3, #64	; 0x40
 800a2f8:	d012      	beq.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a2fa:	e070      	b.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2fc:	4b39      	ldr	r3, [pc, #228]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a308:	d107      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a30a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 fec0 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a318:	e3f0      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a31e:	e3ed      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a320:	4b30      	ldr	r3, [pc, #192]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a32c:	d107      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32e:	f107 0318 	add.w	r3, r7, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fc06 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a33c:	e3de      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a342:	e3db      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a344:	4b27      	ldr	r3, [pc, #156]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a34c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a350:	d107      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a352:	f107 030c 	add.w	r3, r7, #12
 800a356:	4618      	mov	r0, r3
 800a358:	f000 fd48 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a360:	e3cc      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a366:	e3c9      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a368:	4b1e      	ldr	r3, [pc, #120]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a370:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d10c      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a380:	2b00      	cmp	r3, #0
 800a382:	d109      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a384:	4b17      	ldr	r3, [pc, #92]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	08db      	lsrs	r3, r3, #3
 800a38a:	f003 0303 	and.w	r3, r3, #3
 800a38e:	4a16      	ldr	r2, [pc, #88]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a390:	fa22 f303 	lsr.w	r3, r2, r3
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a396:	e01e      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a398:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a4:	d106      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3ac:	d102      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b2:	e010      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3b4:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3c0:	d106      	bne.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3c8:	d102      	bne.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3ca:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ce:	e002      	b.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3d4:	e392      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3d6:	e391      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3d8:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3dc:	e38e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e2:	e38b      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3e4:	58024400 	.word	0x58024400
 800a3e8:	03d09000 	.word	0x03d09000
 800a3ec:	003d0900 	.word	0x003d0900
 800a3f0:	017d7840 	.word	0x017d7840
 800a3f4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3fe:	f040 809c 	bne.w	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a402:	4b9d      	ldr	r3, [pc, #628]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a406:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a40a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a412:	d054      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a41a:	f200 808b 	bhi.w	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a424:	f000 8083 	beq.w	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a42e:	f200 8081 	bhi.w	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a438:	d02f      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a440:	d878      	bhi.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a44e:	d012      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a450:	e070      	b.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a452:	4b89      	ldr	r3, [pc, #548]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a45e:	d107      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fe15 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a46e:	e345      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a474:	e342      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a476:	4b80      	ldr	r3, [pc, #512]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a47e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a482:	d107      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a484:	f107 0318 	add.w	r3, r7, #24
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fb5b 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a492:	e333      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a498:	e330      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a49a:	4b77      	ldr	r3, [pc, #476]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4a6:	d107      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4a8:	f107 030c 	add.w	r3, r7, #12
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 fc9d 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4b6:	e321      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4bc:	e31e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4be:	4b6e      	ldr	r3, [pc, #440]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4c6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4c8:	4b6b      	ldr	r3, [pc, #428]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d10c      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d109      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4da:	4b67      	ldr	r3, [pc, #412]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	08db      	lsrs	r3, r3, #3
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	4a65      	ldr	r2, [pc, #404]	; (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ec:	e01e      	b.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4ee:	4b62      	ldr	r3, [pc, #392]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4fa:	d106      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a502:	d102      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a504:	4b5e      	ldr	r3, [pc, #376]	; (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a508:	e010      	b.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a50a:	4b5b      	ldr	r3, [pc, #364]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a516:	d106      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a51e:	d102      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a520:	4b58      	ldr	r3, [pc, #352]	; (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a524:	e002      	b.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a52a:	e2e7      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a52c:	e2e6      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a52e:	4b56      	ldr	r3, [pc, #344]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a532:	e2e3      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a538:	e2e0      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a540:	f040 80a7 	bne.w	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a544:	4b4c      	ldr	r3, [pc, #304]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a548:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a54c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a554:	d055      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a55c:	f200 8096 	bhi.w	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a566:	f000 8084 	beq.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a570:	f200 808c 	bhi.w	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a57a:	d030      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a582:	f200 8083 	bhi.w	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a592:	d012      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a594:	e07a      	b.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a596:	4b38      	ldr	r3, [pc, #224]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a59e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fd73 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5b2:	e2a3      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b8:	e2a0      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5ba:	4b2f      	ldr	r3, [pc, #188]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c8:	f107 0318 	add.w	r3, r7, #24
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fab9 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5d6:	e291      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5dc:	e28e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5de:	4b26      	ldr	r3, [pc, #152]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ea:	d107      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ec:	f107 030c 	add.w	r3, r7, #12
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fbfb 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5fa:	e27f      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a600:	e27c      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a602:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a60c:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b04      	cmp	r3, #4
 800a616:	d10c      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d109      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a61e:	4b16      	ldr	r3, [pc, #88]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	08db      	lsrs	r3, r3, #3
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	4a14      	ldr	r2, [pc, #80]	; (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a62a:	fa22 f303 	lsr.w	r3, r2, r3
 800a62e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a630:	e01e      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a632:	4b11      	ldr	r3, [pc, #68]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63e:	d106      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a646:	d102      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a648:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a64c:	e010      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a65a:	d106      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a662:	d102      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a664:	4b07      	ldr	r3, [pc, #28]	; (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a666:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a668:	e002      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a66e:	e245      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a670:	e244      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a676:	e241      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a678:	58024400 	.word	0x58024400
 800a67c:	03d09000 	.word	0x03d09000
 800a680:	003d0900 	.word	0x003d0900
 800a684:	017d7840 	.word	0x017d7840
 800a688:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a690:	e234      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a698:	f040 809c 	bne.w	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a69c:	4b9b      	ldr	r3, [pc, #620]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a6a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6ac:	d054      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b4:	f200 808b 	bhi.w	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6be:	f000 8083 	beq.w	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6c8:	f200 8081 	bhi.w	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d2:	d02f      	beq.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6da:	d878      	bhi.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d004      	beq.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e8:	d012      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a6ea:	e070      	b.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ec:	4b87      	ldr	r3, [pc, #540]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6f8:	d107      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fcc8 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a708:	e1f8      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a70e:	e1f5      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a710:	4b7e      	ldr	r3, [pc, #504]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a71c:	d107      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a71e:	f107 0318 	add.w	r3, r7, #24
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fa0e 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a72c:	e1e6      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a732:	e1e3      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a734:	4b75      	ldr	r3, [pc, #468]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a73c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a740:	d107      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a742:	f107 030c 	add.w	r3, r7, #12
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fb50 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a750:	e1d4      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a756:	e1d1      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a758:	4b6c      	ldr	r3, [pc, #432]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a760:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a762:	4b6a      	ldr	r3, [pc, #424]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d10c      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a770:	2b00      	cmp	r3, #0
 800a772:	d109      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a774:	4b65      	ldr	r3, [pc, #404]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	08db      	lsrs	r3, r3, #3
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	4a64      	ldr	r2, [pc, #400]	; (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a780:	fa22 f303 	lsr.w	r3, r2, r3
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a786:	e01e      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a788:	4b60      	ldr	r3, [pc, #384]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a794:	d106      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a79c:	d102      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a79e:	4b5d      	ldr	r3, [pc, #372]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a2:	e010      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7a4:	4b59      	ldr	r3, [pc, #356]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b0:	d106      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b8:	d102      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7ba:	4b57      	ldr	r3, [pc, #348]	; (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7be:	e002      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7c4:	e19a      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7c6:	e199      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7c8:	4b54      	ldr	r3, [pc, #336]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7cc:	e196      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d2:	e193      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7da:	d173      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7dc:	4b4b      	ldr	r3, [pc, #300]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7ec:	d02f      	beq.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f4:	d863      	bhi.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a802:	d012      	beq.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a804:	e05b      	b.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a806:	4b41      	ldr	r3, [pc, #260]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a812:	d107      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a814:	f107 0318 	add.w	r3, r7, #24
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 f993 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a822:	e16b      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a828:	e168      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a82a:	4b38      	ldr	r3, [pc, #224]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a836:	d107      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a838:	f107 030c 	add.w	r3, r7, #12
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fad5 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a846:	e159      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a84c:	e156      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a84e:	4b2f      	ldr	r3, [pc, #188]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a856:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a858:	4b2c      	ldr	r3, [pc, #176]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b04      	cmp	r3, #4
 800a862:	d10c      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a866:	2b00      	cmp	r3, #0
 800a868:	d109      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a86a:	4b28      	ldr	r3, [pc, #160]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	08db      	lsrs	r3, r3, #3
 800a870:	f003 0303 	and.w	r3, r3, #3
 800a874:	4a26      	ldr	r2, [pc, #152]	; (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a876:	fa22 f303 	lsr.w	r3, r2, r3
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a87c:	e01e      	b.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a87e:	4b23      	ldr	r3, [pc, #140]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a88a:	d106      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a892:	d102      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a894:	4b1f      	ldr	r3, [pc, #124]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a898:	e010      	b.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a89a:	4b1c      	ldr	r3, [pc, #112]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8a6:	d106      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ae:	d102      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8b0:	4b19      	ldr	r3, [pc, #100]	; (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b4:	e002      	b.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8ba:	e11f      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8bc:	e11e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8c2:	e11b      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ca:	d13e      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a8cc:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e2:	d01d      	beq.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a8e4:	e02e      	b.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8e6:	4b09      	ldr	r3, [pc, #36]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8f2:	d107      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fbcb 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a902:	e0fb      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a908:	e0f8      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a90a:	bf00      	nop
 800a90c:	58024400 	.word	0x58024400
 800a910:	03d09000 	.word	0x03d09000
 800a914:	003d0900 	.word	0x003d0900
 800a918:	017d7840 	.word	0x017d7840
 800a91c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a920:	4b79      	ldr	r3, [pc, #484]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a92c:	d107      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92e:	f107 0318 	add.w	r3, r7, #24
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f906 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a93c:	e0de      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a942:	e0db      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a948:	e0d8      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a950:	f040 8085 	bne.w	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a954:	4b6c      	ldr	r3, [pc, #432]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a958:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a95c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a964:	d06b      	beq.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a96c:	d874      	bhi.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a974:	d056      	beq.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97c:	d86c      	bhi.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a984:	d03b      	beq.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a98c:	d864      	bhi.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a994:	d021      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a99c:	d85c      	bhi.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9aa:	d004      	beq.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a9ac:	e054      	b.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a9ae:	f000 f8b3 	bl	800ab18 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a9b4:	e0a2      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b6:	4b54      	ldr	r3, [pc, #336]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9c2:	d107      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c4:	f107 0318 	add.w	r3, r7, #24
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f8bb 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9d2:	e093      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d8:	e090      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9da:	4b4b      	ldr	r3, [pc, #300]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9e6:	d107      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9e8:	f107 030c 	add.w	r3, r7, #12
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 f9fd 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9f6:	e081      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9fc:	e07e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9fe:	4b42      	ldr	r3, [pc, #264]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0304 	and.w	r3, r3, #4
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d109      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa0a:	4b3f      	ldr	r3, [pc, #252]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	08db      	lsrs	r3, r3, #3
 800aa10:	f003 0303 	and.w	r3, r3, #3
 800aa14:	4a3d      	ldr	r2, [pc, #244]	; (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa16:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa1c:	e06e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa22:	e06b      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa24:	4b38      	ldr	r3, [pc, #224]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa30:	d102      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aa32:	4b37      	ldr	r3, [pc, #220]	; (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa36:	e061      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa3c:	e05e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa4a:	d102      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa4c:	4b31      	ldr	r3, [pc, #196]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa50:	e054      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa56:	e051      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa5c:	e04e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa64:	d148      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa66:	4b28      	ldr	r3, [pc, #160]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa76:	d02a      	beq.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa7e:	d838      	bhi.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa8c:	d00d      	beq.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aa8e:	e030      	b.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa90:	4b1d      	ldr	r3, [pc, #116]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa9c:	d102      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaa2:	e02b      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa8:	e028      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaaa:	4b17      	ldr	r3, [pc, #92]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab6:	d107      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fae9 	bl	800b094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aac6:	e019      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aacc:	e016      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aace:	4b0e      	ldr	r3, [pc, #56]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aada:	d107      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aadc:	f107 0318 	add.w	r3, r7, #24
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f82f 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaea:	e007      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf0:	e004      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf6:	e001      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3740      	adds	r7, #64	; 0x40
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	03d09000 	.word	0x03d09000
 800ab10:	003d0900 	.word	0x003d0900
 800ab14:	017d7840 	.word	0x017d7840

0800ab18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab1c:	f7fe fb88 	bl	8009230 <HAL_RCC_GetHCLKFreq>
 800ab20:	4602      	mov	r2, r0
 800ab22:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	091b      	lsrs	r3, r3, #4
 800ab28:	f003 0307 	and.w	r3, r3, #7
 800ab2c:	4904      	ldr	r1, [pc, #16]	; (800ab40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab2e:	5ccb      	ldrb	r3, [r1, r3]
 800ab30:	f003 031f 	and.w	r3, r3, #31
 800ab34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	58024400 	.word	0x58024400
 800ab40:	0800fe64 	.word	0x0800fe64

0800ab44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b089      	sub	sp, #36	; 0x24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab4c:	4ba1      	ldr	r3, [pc, #644]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab56:	4b9f      	ldr	r3, [pc, #636]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	0b1b      	lsrs	r3, r3, #12
 800ab5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab62:	4b9c      	ldr	r3, [pc, #624]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	091b      	lsrs	r3, r3, #4
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab6e:	4b99      	ldr	r3, [pc, #612]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	08db      	lsrs	r3, r3, #3
 800ab74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	fb02 f303 	mul.w	r3, r2, r3
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8111 	beq.w	800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	f000 8083 	beq.w	800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	f200 80a1 	bhi.w	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d056      	beq.n	800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800abae:	e099      	b.n	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb0:	4b88      	ldr	r3, [pc, #544]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d02d      	beq.n	800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abbc:	4b85      	ldr	r3, [pc, #532]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	08db      	lsrs	r3, r3, #3
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	4a84      	ldr	r2, [pc, #528]	; (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abc8:	fa22 f303 	lsr.w	r3, r2, r3
 800abcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe6:	4b7b      	ldr	r3, [pc, #492]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac16:	e087      	b.n	800ad28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2a:	4b6a      	ldr	r3, [pc, #424]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac5a:	e065      	b.n	800ad28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ade4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac6e:	4b59      	ldr	r3, [pc, #356]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac9e:	e043      	b.n	800ad28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ade8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800acae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb2:	4b48      	ldr	r3, [pc, #288]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ace2:	e021      	b.n	800ad28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ade4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf6:	4b37      	ldr	r3, [pc, #220]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad28:	4b2a      	ldr	r3, [pc, #168]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	0a5b      	lsrs	r3, r3, #9
 800ad2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad42:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4e:	ee17 2a90 	vmov	r2, s15
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad56:	4b1f      	ldr	r3, [pc, #124]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	0c1b      	lsrs	r3, r3, #16
 800ad5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad60:	ee07 3a90 	vmov	s15, r3
 800ad64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad7c:	ee17 2a90 	vmov	r2, s15
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad84:	4b13      	ldr	r3, [pc, #76]	; (800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad88:	0e1b      	lsrs	r3, r3, #24
 800ad8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adaa:	ee17 2a90 	vmov	r2, s15
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800adb2:	e008      	b.n	800adc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	609a      	str	r2, [r3, #8]
}
 800adc6:	bf00      	nop
 800adc8:	3724      	adds	r7, #36	; 0x24
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	58024400 	.word	0x58024400
 800add8:	03d09000 	.word	0x03d09000
 800addc:	46000000 	.word	0x46000000
 800ade0:	4c742400 	.word	0x4c742400
 800ade4:	4a742400 	.word	0x4a742400
 800ade8:	4bbebc20 	.word	0x4bbebc20

0800adec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800adec:	b480      	push	{r7}
 800adee:	b089      	sub	sp, #36	; 0x24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf4:	4ba1      	ldr	r3, [pc, #644]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adfe:	4b9f      	ldr	r3, [pc, #636]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	0d1b      	lsrs	r3, r3, #20
 800ae04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae0a:	4b9c      	ldr	r3, [pc, #624]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	0a1b      	lsrs	r3, r3, #8
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae16:	4b99      	ldr	r3, [pc, #612]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1a:	08db      	lsrs	r3, r3, #3
 800ae1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	fb02 f303 	mul.w	r3, r2, r3
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8111 	beq.w	800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f000 8083 	beq.w	800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	f200 80a1 	bhi.w	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d056      	beq.n	800af04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae56:	e099      	b.n	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae58:	4b88      	ldr	r3, [pc, #544]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0320 	and.w	r3, r3, #32
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02d      	beq.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae64:	4b85      	ldr	r3, [pc, #532]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	08db      	lsrs	r3, r3, #3
 800ae6a:	f003 0303 	and.w	r3, r3, #3
 800ae6e:	4a84      	ldr	r2, [pc, #528]	; (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae70:	fa22 f303 	lsr.w	r3, r2, r3
 800ae74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8e:	4b7b      	ldr	r3, [pc, #492]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aebe:	e087      	b.n	800afd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed2:	4b6a      	ldr	r3, [pc, #424]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af02:	e065      	b.n	800afd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af16:	4b59      	ldr	r3, [pc, #356]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af26:	ed97 6a03 	vldr	s12, [r7, #12]
 800af2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af46:	e043      	b.n	800afd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5a:	4b48      	ldr	r3, [pc, #288]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af8a:	e021      	b.n	800afd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9e:	4b37      	ldr	r3, [pc, #220]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afae:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800afd0:	4b2a      	ldr	r3, [pc, #168]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	0a5b      	lsrs	r3, r3, #9
 800afd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afea:	edd7 6a07 	vldr	s13, [r7, #28]
 800afee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff6:	ee17 2a90 	vmov	r2, s15
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800affe:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b002:	0c1b      	lsrs	r3, r3, #16
 800b004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b018:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b024:	ee17 2a90 	vmov	r2, s15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b02c:	4b13      	ldr	r3, [pc, #76]	; (800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b030:	0e1b      	lsrs	r3, r3, #24
 800b032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b042:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b046:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b052:	ee17 2a90 	vmov	r2, s15
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b05a:	e008      	b.n	800b06e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	609a      	str	r2, [r3, #8]
}
 800b06e:	bf00      	nop
 800b070:	3724      	adds	r7, #36	; 0x24
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	58024400 	.word	0x58024400
 800b080:	03d09000 	.word	0x03d09000
 800b084:	46000000 	.word	0x46000000
 800b088:	4c742400 	.word	0x4c742400
 800b08c:	4a742400 	.word	0x4a742400
 800b090:	4bbebc20 	.word	0x4bbebc20

0800b094 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b094:	b480      	push	{r7}
 800b096:	b089      	sub	sp, #36	; 0x24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b09c:	4ba0      	ldr	r3, [pc, #640]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b0a6:	4b9e      	ldr	r3, [pc, #632]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0aa:	091b      	lsrs	r3, r3, #4
 800b0ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0b2:	4b9b      	ldr	r3, [pc, #620]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b0bc:	4b98      	ldr	r3, [pc, #608]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c0:	08db      	lsrs	r3, r3, #3
 800b0c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	fb02 f303 	mul.w	r3, r2, r3
 800b0cc:	ee07 3a90 	vmov	s15, r3
 800b0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 8111 	beq.w	800b302 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	f000 8083 	beq.w	800b1ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	f200 80a1 	bhi.w	800b232 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d056      	beq.n	800b1aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0fc:	e099      	b.n	800b232 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0fe:	4b88      	ldr	r3, [pc, #544]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b00      	cmp	r3, #0
 800b108:	d02d      	beq.n	800b166 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b10a:	4b85      	ldr	r3, [pc, #532]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	08db      	lsrs	r3, r3, #3
 800b110:	f003 0303 	and.w	r3, r3, #3
 800b114:	4a83      	ldr	r2, [pc, #524]	; (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b116:	fa22 f303 	lsr.w	r3, r2, r3
 800b11a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	ee07 3a90 	vmov	s15, r3
 800b12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b134:	4b7a      	ldr	r3, [pc, #488]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b144:	ed97 6a03 	vldr	s12, [r7, #12]
 800b148:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b160:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b164:	e087      	b.n	800b276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	ee07 3a90 	vmov	s15, r3
 800b16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b170:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b178:	4b69      	ldr	r3, [pc, #420]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b180:	ee07 3a90 	vmov	s15, r3
 800b184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b188:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1a8:	e065      	b.n	800b276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	ee07 3a90 	vmov	s15, r3
 800b1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b330 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1bc:	4b58      	ldr	r3, [pc, #352]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c4:	ee07 3a90 	vmov	s15, r3
 800b1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1ec:	e043      	b.n	800b276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b334 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b200:	4b47      	ldr	r3, [pc, #284]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b208:	ee07 3a90 	vmov	s15, r3
 800b20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b210:	ed97 6a03 	vldr	s12, [r7, #12]
 800b214:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b230:	e021      	b.n	800b276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b244:	4b36      	ldr	r3, [pc, #216]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b254:	ed97 6a03 	vldr	s12, [r7, #12]
 800b258:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b25c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b270:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b274:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b276:	4b2a      	ldr	r3, [pc, #168]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27a:	0a5b      	lsrs	r3, r3, #9
 800b27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b280:	ee07 3a90 	vmov	s15, r3
 800b284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b290:	edd7 6a07 	vldr	s13, [r7, #28]
 800b294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29c:	ee17 2a90 	vmov	r2, s15
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b2a4:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a8:	0c1b      	lsrs	r3, r3, #16
 800b2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ca:	ee17 2a90 	vmov	r2, s15
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b2d2:	4b13      	ldr	r3, [pc, #76]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	0e1b      	lsrs	r3, r3, #24
 800b2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2dc:	ee07 3a90 	vmov	s15, r3
 800b2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f8:	ee17 2a90 	vmov	r2, s15
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b300:	e008      	b.n	800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	609a      	str	r2, [r3, #8]
}
 800b314:	bf00      	nop
 800b316:	3724      	adds	r7, #36	; 0x24
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	58024400 	.word	0x58024400
 800b324:	03d09000 	.word	0x03d09000
 800b328:	46000000 	.word	0x46000000
 800b32c:	4c742400 	.word	0x4c742400
 800b330:	4a742400 	.word	0x4a742400
 800b334:	4bbebc20 	.word	0x4bbebc20

0800b338 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b346:	4b53      	ldr	r3, [pc, #332]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	f003 0303 	and.w	r3, r3, #3
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d101      	bne.n	800b356 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e099      	b.n	800b48a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b356:	4b4f      	ldr	r3, [pc, #316]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a4e      	ldr	r2, [pc, #312]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b35c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b362:	f7f7 fab3 	bl	80028cc <HAL_GetTick>
 800b366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b368:	e008      	b.n	800b37c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b36a:	f7f7 faaf 	bl	80028cc <HAL_GetTick>
 800b36e:	4602      	mov	r2, r0
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	2b02      	cmp	r3, #2
 800b376:	d901      	bls.n	800b37c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b378:	2303      	movs	r3, #3
 800b37a:	e086      	b.n	800b48a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b37c:	4b45      	ldr	r3, [pc, #276]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1f0      	bne.n	800b36a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b388:	4b42      	ldr	r3, [pc, #264]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	031b      	lsls	r3, r3, #12
 800b396:	493f      	ldr	r1, [pc, #252]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b398:	4313      	orrs	r3, r2
 800b39a:	628b      	str	r3, [r1, #40]	; 0x28
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	025b      	lsls	r3, r3, #9
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	041b      	lsls	r3, r3, #16
 800b3ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	061b      	lsls	r3, r3, #24
 800b3c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3cc:	4931      	ldr	r1, [pc, #196]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3d2:	4b30      	ldr	r3, [pc, #192]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	492d      	ldr	r1, [pc, #180]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3e4:	4b2b      	ldr	r3, [pc, #172]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	f023 0220 	bic.w	r2, r3, #32
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	4928      	ldr	r1, [pc, #160]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3f6:	4b27      	ldr	r3, [pc, #156]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fa:	4a26      	ldr	r2, [pc, #152]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	f023 0310 	bic.w	r3, r3, #16
 800b400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b402:	4b24      	ldr	r3, [pc, #144]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <RCCEx_PLL2_Config+0x160>)
 800b408:	4013      	ands	r3, r2
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	69d2      	ldr	r2, [r2, #28]
 800b40e:	00d2      	lsls	r2, r2, #3
 800b410:	4920      	ldr	r1, [pc, #128]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b412:	4313      	orrs	r3, r2
 800b414:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b416:	4b1f      	ldr	r3, [pc, #124]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a1e      	ldr	r2, [pc, #120]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	f043 0310 	orr.w	r3, r3, #16
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b428:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42c:	4a19      	ldr	r2, [pc, #100]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b42e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b432:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b434:	e00f      	b.n	800b456 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d106      	bne.n	800b44a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b43c:	4b15      	ldr	r3, [pc, #84]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a14      	ldr	r2, [pc, #80]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b446:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b448:	e005      	b.n	800b456 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b44a:	4b12      	ldr	r3, [pc, #72]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44e:	4a11      	ldr	r2, [pc, #68]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b454:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b456:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a0e      	ldr	r2, [pc, #56]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b462:	f7f7 fa33 	bl	80028cc <HAL_GetTick>
 800b466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b468:	e008      	b.n	800b47c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b46a:	f7f7 fa2f 	bl	80028cc <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	2b02      	cmp	r3, #2
 800b476:	d901      	bls.n	800b47c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e006      	b.n	800b48a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <RCCEx_PLL2_Config+0x15c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d0f0      	beq.n	800b46a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	58024400 	.word	0x58024400
 800b498:	ffff0007 	.word	0xffff0007

0800b49c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4aa:	4b53      	ldr	r3, [pc, #332]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ae:	f003 0303 	and.w	r3, r3, #3
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d101      	bne.n	800b4ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e099      	b.n	800b5ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4ba:	4b4f      	ldr	r3, [pc, #316]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a4e      	ldr	r2, [pc, #312]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b4c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4c6:	f7f7 fa01 	bl	80028cc <HAL_GetTick>
 800b4ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4cc:	e008      	b.n	800b4e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4ce:	f7f7 f9fd 	bl	80028cc <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d901      	bls.n	800b4e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e086      	b.n	800b5ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4e0:	4b45      	ldr	r3, [pc, #276]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1f0      	bne.n	800b4ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4ec:	4b42      	ldr	r3, [pc, #264]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	051b      	lsls	r3, r3, #20
 800b4fa:	493f      	ldr	r1, [pc, #252]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	628b      	str	r3, [r1, #40]	; 0x28
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	3b01      	subs	r3, #1
 800b506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	3b01      	subs	r3, #1
 800b510:	025b      	lsls	r3, r3, #9
 800b512:	b29b      	uxth	r3, r3
 800b514:	431a      	orrs	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	041b      	lsls	r3, r3, #16
 800b51e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b522:	431a      	orrs	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	3b01      	subs	r3, #1
 800b52a:	061b      	lsls	r3, r3, #24
 800b52c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b530:	4931      	ldr	r1, [pc, #196]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b532:	4313      	orrs	r3, r2
 800b534:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b536:	4b30      	ldr	r3, [pc, #192]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	492d      	ldr	r1, [pc, #180]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b544:	4313      	orrs	r3, r2
 800b546:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b548:	4b2b      	ldr	r3, [pc, #172]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	4928      	ldr	r1, [pc, #160]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b556:	4313      	orrs	r3, r2
 800b558:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b55a:	4b27      	ldr	r3, [pc, #156]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55e:	4a26      	ldr	r2, [pc, #152]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b566:	4b24      	ldr	r3, [pc, #144]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b56a:	4b24      	ldr	r3, [pc, #144]	; (800b5fc <RCCEx_PLL3_Config+0x160>)
 800b56c:	4013      	ands	r3, r2
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	69d2      	ldr	r2, [r2, #28]
 800b572:	00d2      	lsls	r2, r2, #3
 800b574:	4920      	ldr	r1, [pc, #128]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b576:	4313      	orrs	r3, r2
 800b578:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b57a:	4b1f      	ldr	r3, [pc, #124]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	4a1e      	ldr	r2, [pc, #120]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d106      	bne.n	800b59a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b58c:	4b1a      	ldr	r3, [pc, #104]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	4a19      	ldr	r2, [pc, #100]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b596:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b598:	e00f      	b.n	800b5ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d106      	bne.n	800b5ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5a0:	4b15      	ldr	r3, [pc, #84]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	4a14      	ldr	r2, [pc, #80]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5ac:	e005      	b.n	800b5ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5ae:	4b12      	ldr	r3, [pc, #72]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b2:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5ba:	4b0f      	ldr	r3, [pc, #60]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a0e      	ldr	r2, [pc, #56]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5c6:	f7f7 f981 	bl	80028cc <HAL_GetTick>
 800b5ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5cc:	e008      	b.n	800b5e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5ce:	f7f7 f97d 	bl	80028cc <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d901      	bls.n	800b5e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e006      	b.n	800b5ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5e0:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <RCCEx_PLL3_Config+0x15c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0f0      	beq.n	800b5ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	58024400 	.word	0x58024400
 800b5fc:	ffff0007 	.word	0xffff0007

0800b600 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e0f1      	b.n	800b7f6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a78      	ldr	r2, [pc, #480]	; (800b800 <HAL_SPI_Init+0x200>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d00f      	beq.n	800b642 <HAL_SPI_Init+0x42>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a77      	ldr	r2, [pc, #476]	; (800b804 <HAL_SPI_Init+0x204>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d00a      	beq.n	800b642 <HAL_SPI_Init+0x42>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a75      	ldr	r2, [pc, #468]	; (800b808 <HAL_SPI_Init+0x208>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d005      	beq.n	800b642 <HAL_SPI_Init+0x42>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	2b0f      	cmp	r3, #15
 800b63c:	d901      	bls.n	800b642 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e0d9      	b.n	800b7f6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fd74 	bl	800c130 <SPI_GetPacketSize>
 800b648:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a6c      	ldr	r2, [pc, #432]	; (800b800 <HAL_SPI_Init+0x200>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d00c      	beq.n	800b66e <HAL_SPI_Init+0x6e>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a6a      	ldr	r2, [pc, #424]	; (800b804 <HAL_SPI_Init+0x204>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d007      	beq.n	800b66e <HAL_SPI_Init+0x6e>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a69      	ldr	r2, [pc, #420]	; (800b808 <HAL_SPI_Init+0x208>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d002      	beq.n	800b66e <HAL_SPI_Init+0x6e>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b08      	cmp	r3, #8
 800b66c:	d811      	bhi.n	800b692 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b672:	4a63      	ldr	r2, [pc, #396]	; (800b800 <HAL_SPI_Init+0x200>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d009      	beq.n	800b68c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a61      	ldr	r2, [pc, #388]	; (800b804 <HAL_SPI_Init+0x204>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d004      	beq.n	800b68c <HAL_SPI_Init+0x8c>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a60      	ldr	r2, [pc, #384]	; (800b808 <HAL_SPI_Init+0x208>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d104      	bne.n	800b696 <HAL_SPI_Init+0x96>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b10      	cmp	r3, #16
 800b690:	d901      	bls.n	800b696 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e0af      	b.n	800b7f6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d106      	bne.n	800b6b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7f6 fd46 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f022 0201 	bic.w	r2, r2, #1
 800b6c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b6d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6dc:	d119      	bne.n	800b712 <HAL_SPI_Init+0x112>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6e6:	d103      	bne.n	800b6f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d008      	beq.n	800b702 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10c      	bne.n	800b712 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b700:	d107      	bne.n	800b712 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b710:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	69da      	ldr	r2, [r3, #28]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71a:	431a      	orrs	r2, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	431a      	orrs	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b724:	ea42 0103 	orr.w	r1, r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	431a      	orrs	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	431a      	orrs	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	431a      	orrs	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	431a      	orrs	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	431a      	orrs	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	431a      	orrs	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b772:	ea42 0103 	orr.w	r1, r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	430a      	orrs	r2, r1
 800b780:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d113      	bne.n	800b7b2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b79c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f022 0201 	bic.w	r2, r2, #1
 800b7c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00a      	beq.n	800b7e4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	40013000 	.word	0x40013000
 800b804:	40003800 	.word	0x40003800
 800b808:	40003c00 	.word	0x40003c00

0800b80c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	; 0x28
 800b810:	af02      	add	r7, sp, #8
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	603b      	str	r3, [r7, #0]
 800b818:	4613      	mov	r3, r2
 800b81a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3330      	adds	r3, #48	; 0x30
 800b826:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b830:	d112      	bne.n	800b858 <HAL_SPI_Receive+0x4c>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10e      	bne.n	800b858 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2204      	movs	r2, #4
 800b83e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b842:	88fa      	ldrh	r2, [r7, #6]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	4613      	mov	r3, r2
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	68b9      	ldr	r1, [r7, #8]
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 f978 	bl	800bb44 <HAL_SPI_TransmitReceive>
 800b854:	4603      	mov	r3, r0
 800b856:	e16f      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <HAL_SPI_Receive+0x5a>
 800b862:	2302      	movs	r3, #2
 800b864:	e168      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b86e:	f7f7 f82d 	bl	80028cc <HAL_GetTick>
 800b872:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d007      	beq.n	800b890 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b880:	2302      	movs	r3, #2
 800b882:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b88c:	7ffb      	ldrb	r3, [r7, #31]
 800b88e:	e153      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <HAL_SPI_Receive+0x90>
 800b896:	88fb      	ldrh	r3, [r7, #6]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d107      	bne.n	800b8ac <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8a8:	7ffb      	ldrb	r3, [r7, #31]
 800b8aa:	e145      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2204      	movs	r2, #4
 800b8b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	88fa      	ldrh	r2, [r7, #6]
 800b8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	88fa      	ldrh	r2, [r7, #6]
 800b8ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b8fc:	d107      	bne.n	800b90e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b90c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	4b8a      	ldr	r3, [pc, #552]	; (800bb40 <HAL_SPI_Receive+0x334>)
 800b916:	4013      	ands	r3, r2
 800b918:	88f9      	ldrh	r1, [r7, #6]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	430b      	orrs	r3, r1
 800b920:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f042 0201 	orr.w	r2, r2, #1
 800b930:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b93a:	d107      	bne.n	800b94c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b94a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b0f      	cmp	r3, #15
 800b952:	d948      	bls.n	800b9e6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b954:	e040      	b.n	800b9d8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	695a      	ldr	r2, [r3, #20]
 800b95c:	f248 0308 	movw	r3, #32776	; 0x8008
 800b960:	4013      	ands	r3, r2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d014      	beq.n	800b990 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b96e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b970:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b976:	1d1a      	adds	r2, r3, #4
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b982:	b29b      	uxth	r3, r3
 800b984:	3b01      	subs	r3, #1
 800b986:	b29a      	uxth	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b98e:	e023      	b.n	800b9d8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b990:	f7f6 ff9c 	bl	80028cc <HAL_GetTick>
 800b994:	4602      	mov	r2, r0
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d803      	bhi.n	800b9a8 <HAL_SPI_Receive+0x19c>
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9a6:	d102      	bne.n	800b9ae <HAL_SPI_Receive+0x1a2>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d114      	bne.n	800b9d8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 faf0 	bl	800bf94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e0af      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1b8      	bne.n	800b956 <HAL_SPI_Receive+0x14a>
 800b9e4:	e095      	b.n	800bb12 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	2b07      	cmp	r3, #7
 800b9ec:	f240 808b 	bls.w	800bb06 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9f0:	e03f      	b.n	800ba72 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d114      	bne.n	800ba2a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	8812      	ldrh	r2, [r2, #0]
 800ba08:	b292      	uxth	r2, r2
 800ba0a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba10:	1c9a      	adds	r2, r3, #2
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba28:	e023      	b.n	800ba72 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba2a:	f7f6 ff4f 	bl	80028cc <HAL_GetTick>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d803      	bhi.n	800ba42 <HAL_SPI_Receive+0x236>
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba40:	d102      	bne.n	800ba48 <HAL_SPI_Receive+0x23c>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d114      	bne.n	800ba72 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 faa3 	bl	800bf94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba6e:	2303      	movs	r3, #3
 800ba70:	e062      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1b9      	bne.n	800b9f2 <HAL_SPI_Receive+0x1e6>
 800ba7e:	e048      	b.n	800bb12 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d117      	bne.n	800babe <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba9a:	7812      	ldrb	r2, [r2, #0]
 800ba9c:	b2d2      	uxtb	r2, r2
 800ba9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	3b01      	subs	r3, #1
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800babc:	e023      	b.n	800bb06 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800babe:	f7f6 ff05 	bl	80028cc <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d803      	bhi.n	800bad6 <HAL_SPI_Receive+0x2ca>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bad4:	d102      	bne.n	800badc <HAL_SPI_Receive+0x2d0>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d114      	bne.n	800bb06 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 fa59 	bl	800bf94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e018      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1b6      	bne.n	800ba80 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 fa3e 	bl	800bf94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e000      	b.n	800bb38 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bb36:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3720      	adds	r7, #32
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	ffff0000 	.word	0xffff0000

0800bb44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08e      	sub	sp, #56	; 0x38
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3320      	adds	r3, #32
 800bb5e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3330      	adds	r3, #48	; 0x30
 800bb66:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d101      	bne.n	800bb76 <HAL_SPI_TransmitReceive+0x32>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e209      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb7e:	f7f6 fea5 	bl	80028cc <HAL_GetTick>
 800bb82:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bb84:	887b      	ldrh	r3, [r7, #2]
 800bb86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb9a:	7efb      	ldrb	r3, [r7, #27]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d014      	beq.n	800bbca <HAL_SPI_TransmitReceive+0x86>
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bba6:	d106      	bne.n	800bbb6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d102      	bne.n	800bbb6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bbb0:	7efb      	ldrb	r3, [r7, #27]
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d009      	beq.n	800bbca <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbc8:	e1df      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d005      	beq.n	800bbdc <HAL_SPI_TransmitReceive+0x98>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <HAL_SPI_TransmitReceive+0x98>
 800bbd6:	887b      	ldrh	r3, [r7, #2]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d109      	bne.n	800bbf0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbee:	e1cc      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b04      	cmp	r3, #4
 800bbfa:	d003      	beq.n	800bc04 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2205      	movs	r2, #5
 800bc00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	887a      	ldrh	r2, [r7, #2]
 800bc16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	887a      	ldrh	r2, [r7, #2]
 800bc1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	887a      	ldrh	r2, [r7, #2]
 800bc2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	887a      	ldrh	r2, [r7, #2]
 800bc34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	4b82      	ldr	r3, [pc, #520]	; (800be54 <HAL_SPI_TransmitReceive+0x310>)
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	8879      	ldrh	r1, [r7, #2]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f042 0201 	orr.w	r2, r2, #1
 800bc66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc70:	d107      	bne.n	800bc82 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	2b0f      	cmp	r3, #15
 800bc88:	d970      	bls.n	800bd6c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc8a:	e068      	b.n	800bd5e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	f003 0302 	and.w	r3, r3, #2
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d11a      	bne.n	800bcd0 <HAL_SPI_TransmitReceive+0x18c>
 800bc9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d017      	beq.n	800bcd0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6812      	ldr	r2, [r2, #0]
 800bcaa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcb0:	1d1a      	adds	r2, r3, #4
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcce:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	695a      	ldr	r2, [r3, #20]
 800bcd6:	f248 0308 	movw	r3, #32776	; 0x8008
 800bcda:	4013      	ands	r3, r2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d01a      	beq.n	800bd16 <HAL_SPI_TransmitReceive+0x1d2>
 800bce0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d017      	beq.n	800bd16 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bcf0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	3b01      	subs	r3, #1
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd14:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd16:	f7f6 fdd9 	bl	80028cc <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d803      	bhi.n	800bd2e <HAL_SPI_TransmitReceive+0x1ea>
 800bd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd2c:	d102      	bne.n	800bd34 <HAL_SPI_TransmitReceive+0x1f0>
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d114      	bne.n	800bd5e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 f92d 	bl	800bf94 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e115      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d193      	bne.n	800bc8c <HAL_SPI_TransmitReceive+0x148>
 800bd64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d190      	bne.n	800bc8c <HAL_SPI_TransmitReceive+0x148>
 800bd6a:	e0e7      	b.n	800bf3c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	2b07      	cmp	r3, #7
 800bd72:	f240 80dd 	bls.w	800bf30 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd76:	e066      	b.n	800be46 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d119      	bne.n	800bdba <HAL_SPI_TransmitReceive+0x276>
 800bd86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d016      	beq.n	800bdba <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd90:	881a      	ldrh	r2, [r3, #0]
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd9a:	1c9a      	adds	r2, r3, #2
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d11a      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x2ba>
 800bdc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d017      	beq.n	800bdfe <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdd2:	6a3a      	ldr	r2, [r7, #32]
 800bdd4:	8812      	ldrh	r2, [r2, #0]
 800bdd6:	b292      	uxth	r2, r2
 800bdd8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdde:	1c9a      	adds	r2, r3, #2
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdfc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdfe:	f7f6 fd65 	bl	80028cc <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d803      	bhi.n	800be16 <HAL_SPI_TransmitReceive+0x2d2>
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be14:	d102      	bne.n	800be1c <HAL_SPI_TransmitReceive+0x2d8>
 800be16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d114      	bne.n	800be46 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f8b9 	bl	800bf94 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e0a1      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d195      	bne.n	800bd78 <HAL_SPI_TransmitReceive+0x234>
 800be4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d192      	bne.n	800bd78 <HAL_SPI_TransmitReceive+0x234>
 800be52:	e073      	b.n	800bf3c <HAL_SPI_TransmitReceive+0x3f8>
 800be54:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b02      	cmp	r3, #2
 800be64:	d11b      	bne.n	800be9e <HAL_SPI_TransmitReceive+0x35a>
 800be66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d018      	beq.n	800be9e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3320      	adds	r3, #32
 800be76:	7812      	ldrb	r2, [r2, #0]
 800be78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29a      	uxth	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d11d      	bne.n	800bee8 <HAL_SPI_TransmitReceive+0x3a4>
 800beac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d01a      	beq.n	800bee8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bebe:	7812      	ldrb	r2, [r2, #0]
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	3b01      	subs	r3, #1
 800bed8:	b29a      	uxth	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bee8:	f7f6 fcf0 	bl	80028cc <HAL_GetTick>
 800beec:	4602      	mov	r2, r0
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d803      	bhi.n	800bf00 <HAL_SPI_TransmitReceive+0x3bc>
 800bef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800befe:	d102      	bne.n	800bf06 <HAL_SPI_TransmitReceive+0x3c2>
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d114      	bne.n	800bf30 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 f844 	bl	800bf94 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e02c      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d190      	bne.n	800be58 <HAL_SPI_TransmitReceive+0x314>
 800bf36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d18d      	bne.n	800be58 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	2200      	movs	r2, #0
 800bf44:	2108      	movs	r1, #8
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 f8c4 	bl	800c0d4 <SPI_WaitOnFlagUntilTimeout>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d007      	beq.n	800bf62 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf58:	f043 0220 	orr.w	r2, r3, #32
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 f816 	bl	800bf94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e001      	b.n	800bf8a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bf86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3730      	adds	r7, #48	; 0x30
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop

0800bf94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0208 	orr.w	r2, r2, #8
 800bfb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	699a      	ldr	r2, [r3, #24]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f042 0210 	orr.w	r2, r2, #16
 800bfc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f022 0201 	bic.w	r2, r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6919      	ldr	r1, [r3, #16]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4b3c      	ldr	r3, [pc, #240]	; (800c0d0 <SPI_CloseTransfer+0x13c>)
 800bfe0:	400b      	ands	r3, r1
 800bfe2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689a      	ldr	r2, [r3, #8]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bff2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d014      	beq.n	800c02a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f003 0320 	and.w	r3, r3, #32
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00f      	beq.n	800c02a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c010:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	699a      	ldr	r2, [r3, #24]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f042 0220 	orr.w	r2, r2, #32
 800c028:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b03      	cmp	r3, #3
 800c034:	d014      	beq.n	800c060 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00f      	beq.n	800c060 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c046:	f043 0204 	orr.w	r2, r3, #4
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	699a      	ldr	r2, [r3, #24]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c05e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00f      	beq.n	800c08a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c070:	f043 0201 	orr.w	r2, r3, #1
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	699a      	ldr	r2, [r3, #24]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c088:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00f      	beq.n	800c0b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c09a:	f043 0208 	orr.w	r2, r3, #8
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	699a      	ldr	r2, [r3, #24]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c0c4:	bf00      	nop
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	fffffc90 	.word	0xfffffc90

0800c0d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0e4:	e010      	b.n	800c108 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0e6:	f7f6 fbf1 	bl	80028cc <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d803      	bhi.n	800c0fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0fc:	d102      	bne.n	800c104 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e00f      	b.n	800c128 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	695a      	ldr	r2, [r3, #20]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	4013      	ands	r3, r2
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	429a      	cmp	r2, r3
 800c116:	bf0c      	ite	eq
 800c118:	2301      	moveq	r3, #1
 800c11a:	2300      	movne	r3, #0
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	461a      	mov	r2, r3
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	429a      	cmp	r2, r3
 800c124:	d0df      	beq.n	800c0e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c13c:	095b      	lsrs	r3, r3, #5
 800c13e:	3301      	adds	r3, #1
 800c140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	3301      	adds	r3, #1
 800c148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	3307      	adds	r3, #7
 800c14e:	08db      	lsrs	r3, r3, #3
 800c150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	fb02 f303 	mul.w	r3, r2, r3
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d109      	bne.n	800c190 <HAL_TIM_OC_Start_IT+0x28>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b01      	cmp	r3, #1
 800c186:	bf14      	ite	ne
 800c188:	2301      	movne	r3, #1
 800c18a:	2300      	moveq	r3, #0
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	e03c      	b.n	800c20a <HAL_TIM_OC_Start_IT+0xa2>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b04      	cmp	r3, #4
 800c194:	d109      	bne.n	800c1aa <HAL_TIM_OC_Start_IT+0x42>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	bf14      	ite	ne
 800c1a2:	2301      	movne	r3, #1
 800c1a4:	2300      	moveq	r3, #0
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	e02f      	b.n	800c20a <HAL_TIM_OC_Start_IT+0xa2>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b08      	cmp	r3, #8
 800c1ae:	d109      	bne.n	800c1c4 <HAL_TIM_OC_Start_IT+0x5c>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	bf14      	ite	ne
 800c1bc:	2301      	movne	r3, #1
 800c1be:	2300      	moveq	r3, #0
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	e022      	b.n	800c20a <HAL_TIM_OC_Start_IT+0xa2>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b0c      	cmp	r3, #12
 800c1c8:	d109      	bne.n	800c1de <HAL_TIM_OC_Start_IT+0x76>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	bf14      	ite	ne
 800c1d6:	2301      	movne	r3, #1
 800c1d8:	2300      	moveq	r3, #0
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	e015      	b.n	800c20a <HAL_TIM_OC_Start_IT+0xa2>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b10      	cmp	r3, #16
 800c1e2:	d109      	bne.n	800c1f8 <HAL_TIM_OC_Start_IT+0x90>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	bf14      	ite	ne
 800c1f0:	2301      	movne	r3, #1
 800c1f2:	2300      	moveq	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	e008      	b.n	800c20a <HAL_TIM_OC_Start_IT+0xa2>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b01      	cmp	r3, #1
 800c202:	bf14      	ite	ne
 800c204:	2301      	movne	r3, #1
 800c206:	2300      	moveq	r3, #0
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e0ec      	b.n	800c3ec <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d104      	bne.n	800c222 <HAL_TIM_OC_Start_IT+0xba>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2202      	movs	r2, #2
 800c21c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c220:	e023      	b.n	800c26a <HAL_TIM_OC_Start_IT+0x102>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b04      	cmp	r3, #4
 800c226:	d104      	bne.n	800c232 <HAL_TIM_OC_Start_IT+0xca>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c230:	e01b      	b.n	800c26a <HAL_TIM_OC_Start_IT+0x102>
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b08      	cmp	r3, #8
 800c236:	d104      	bne.n	800c242 <HAL_TIM_OC_Start_IT+0xda>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c240:	e013      	b.n	800c26a <HAL_TIM_OC_Start_IT+0x102>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b0c      	cmp	r3, #12
 800c246:	d104      	bne.n	800c252 <HAL_TIM_OC_Start_IT+0xea>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2202      	movs	r2, #2
 800c24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c250:	e00b      	b.n	800c26a <HAL_TIM_OC_Start_IT+0x102>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b10      	cmp	r3, #16
 800c256:	d104      	bne.n	800c262 <HAL_TIM_OC_Start_IT+0xfa>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c260:	e003      	b.n	800c26a <HAL_TIM_OC_Start_IT+0x102>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2202      	movs	r2, #2
 800c266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b0c      	cmp	r3, #12
 800c26e:	d841      	bhi.n	800c2f4 <HAL_TIM_OC_Start_IT+0x18c>
 800c270:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <HAL_TIM_OC_Start_IT+0x110>)
 800c272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c276:	bf00      	nop
 800c278:	0800c2ad 	.word	0x0800c2ad
 800c27c:	0800c2f5 	.word	0x0800c2f5
 800c280:	0800c2f5 	.word	0x0800c2f5
 800c284:	0800c2f5 	.word	0x0800c2f5
 800c288:	0800c2bf 	.word	0x0800c2bf
 800c28c:	0800c2f5 	.word	0x0800c2f5
 800c290:	0800c2f5 	.word	0x0800c2f5
 800c294:	0800c2f5 	.word	0x0800c2f5
 800c298:	0800c2d1 	.word	0x0800c2d1
 800c29c:	0800c2f5 	.word	0x0800c2f5
 800c2a0:	0800c2f5 	.word	0x0800c2f5
 800c2a4:	0800c2f5 	.word	0x0800c2f5
 800c2a8:	0800c2e3 	.word	0x0800c2e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68da      	ldr	r2, [r3, #12]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f042 0202 	orr.w	r2, r2, #2
 800c2ba:	60da      	str	r2, [r3, #12]
      break;
 800c2bc:	e01d      	b.n	800c2fa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	68da      	ldr	r2, [r3, #12]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f042 0204 	orr.w	r2, r2, #4
 800c2cc:	60da      	str	r2, [r3, #12]
      break;
 800c2ce:	e014      	b.n	800c2fa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68da      	ldr	r2, [r3, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f042 0208 	orr.w	r2, r2, #8
 800c2de:	60da      	str	r2, [r3, #12]
      break;
 800c2e0:	e00b      	b.n	800c2fa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68da      	ldr	r2, [r3, #12]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f042 0210 	orr.w	r2, r2, #16
 800c2f0:	60da      	str	r2, [r3, #12]
      break;
 800c2f2:	e002      	b.n	800c2fa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2f8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d174      	bne.n	800c3ea <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2201      	movs	r2, #1
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 ff8d 	bl	800d228 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a38      	ldr	r2, [pc, #224]	; (800c3f4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d013      	beq.n	800c340 <HAL_TIM_OC_Start_IT+0x1d8>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a36      	ldr	r2, [pc, #216]	; (800c3f8 <HAL_TIM_OC_Start_IT+0x290>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d00e      	beq.n	800c340 <HAL_TIM_OC_Start_IT+0x1d8>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a35      	ldr	r2, [pc, #212]	; (800c3fc <HAL_TIM_OC_Start_IT+0x294>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d009      	beq.n	800c340 <HAL_TIM_OC_Start_IT+0x1d8>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a33      	ldr	r2, [pc, #204]	; (800c400 <HAL_TIM_OC_Start_IT+0x298>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d004      	beq.n	800c340 <HAL_TIM_OC_Start_IT+0x1d8>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a32      	ldr	r2, [pc, #200]	; (800c404 <HAL_TIM_OC_Start_IT+0x29c>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d101      	bne.n	800c344 <HAL_TIM_OC_Start_IT+0x1dc>
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <HAL_TIM_OC_Start_IT+0x1de>
 800c344:	2300      	movs	r3, #0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d007      	beq.n	800c35a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c358:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a25      	ldr	r2, [pc, #148]	; (800c3f4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d022      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c36c:	d01d      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a25      	ldr	r2, [pc, #148]	; (800c408 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d018      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a23      	ldr	r2, [pc, #140]	; (800c40c <HAL_TIM_OC_Start_IT+0x2a4>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d013      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a22      	ldr	r2, [pc, #136]	; (800c410 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d00e      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a19      	ldr	r2, [pc, #100]	; (800c3f8 <HAL_TIM_OC_Start_IT+0x290>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d009      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a1e      	ldr	r2, [pc, #120]	; (800c414 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d004      	beq.n	800c3aa <HAL_TIM_OC_Start_IT+0x242>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a15      	ldr	r2, [pc, #84]	; (800c3fc <HAL_TIM_OC_Start_IT+0x294>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d115      	bne.n	800c3d6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689a      	ldr	r2, [r3, #8]
 800c3b0:	4b19      	ldr	r3, [pc, #100]	; (800c418 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b06      	cmp	r3, #6
 800c3ba:	d015      	beq.n	800c3e8 <HAL_TIM_OC_Start_IT+0x280>
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c2:	d011      	beq.n	800c3e8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f042 0201 	orr.w	r2, r2, #1
 800c3d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3d4:	e008      	b.n	800c3e8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f042 0201 	orr.w	r2, r2, #1
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	e000      	b.n	800c3ea <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3e8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	40010000 	.word	0x40010000
 800c3f8:	40010400 	.word	0x40010400
 800c3fc:	40014000 	.word	0x40014000
 800c400:	40014400 	.word	0x40014400
 800c404:	40014800 	.word	0x40014800
 800c408:	40000400 	.word	0x40000400
 800c40c:	40000800 	.word	0x40000800
 800c410:	40000c00 	.word	0x40000c00
 800c414:	40001800 	.word	0x40001800
 800c418:	00010007 	.word	0x00010007

0800c41c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b0c      	cmp	r3, #12
 800c42e:	d841      	bhi.n	800c4b4 <HAL_TIM_OC_Stop_IT+0x98>
 800c430:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c436:	bf00      	nop
 800c438:	0800c46d 	.word	0x0800c46d
 800c43c:	0800c4b5 	.word	0x0800c4b5
 800c440:	0800c4b5 	.word	0x0800c4b5
 800c444:	0800c4b5 	.word	0x0800c4b5
 800c448:	0800c47f 	.word	0x0800c47f
 800c44c:	0800c4b5 	.word	0x0800c4b5
 800c450:	0800c4b5 	.word	0x0800c4b5
 800c454:	0800c4b5 	.word	0x0800c4b5
 800c458:	0800c491 	.word	0x0800c491
 800c45c:	0800c4b5 	.word	0x0800c4b5
 800c460:	0800c4b5 	.word	0x0800c4b5
 800c464:	0800c4b5 	.word	0x0800c4b5
 800c468:	0800c4a3 	.word	0x0800c4a3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 0202 	bic.w	r2, r2, #2
 800c47a:	60da      	str	r2, [r3, #12]
      break;
 800c47c:	e01d      	b.n	800c4ba <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68da      	ldr	r2, [r3, #12]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f022 0204 	bic.w	r2, r2, #4
 800c48c:	60da      	str	r2, [r3, #12]
      break;
 800c48e:	e014      	b.n	800c4ba <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0208 	bic.w	r2, r2, #8
 800c49e:	60da      	str	r2, [r3, #12]
      break;
 800c4a0:	e00b      	b.n	800c4ba <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f022 0210 	bic.w	r2, r2, #16
 800c4b0:	60da      	str	r2, [r3, #12]
      break;
 800c4b2:	e002      	b.n	800c4ba <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 8081 	bne.w	800c5c4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 feac 	bl	800d228 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a3e      	ldr	r2, [pc, #248]	; (800c5d0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d013      	beq.n	800c502 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a3d      	ldr	r2, [pc, #244]	; (800c5d4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d00e      	beq.n	800c502 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a3b      	ldr	r2, [pc, #236]	; (800c5d8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d009      	beq.n	800c502 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a3a      	ldr	r2, [pc, #232]	; (800c5dc <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d004      	beq.n	800c502 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a38      	ldr	r2, [pc, #224]	; (800c5e0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d101      	bne.n	800c506 <HAL_TIM_OC_Stop_IT+0xea>
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <HAL_TIM_OC_Stop_IT+0xec>
 800c506:	2300      	movs	r3, #0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d017      	beq.n	800c53c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6a1a      	ldr	r2, [r3, #32]
 800c512:	f241 1311 	movw	r3, #4369	; 0x1111
 800c516:	4013      	ands	r3, r2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10f      	bne.n	800c53c <HAL_TIM_OC_Stop_IT+0x120>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6a1a      	ldr	r2, [r3, #32]
 800c522:	f240 4344 	movw	r3, #1092	; 0x444
 800c526:	4013      	ands	r3, r2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d107      	bne.n	800c53c <HAL_TIM_OC_Stop_IT+0x120>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c53a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6a1a      	ldr	r2, [r3, #32]
 800c542:	f241 1311 	movw	r3, #4369	; 0x1111
 800c546:	4013      	ands	r3, r2
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10f      	bne.n	800c56c <HAL_TIM_OC_Stop_IT+0x150>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a1a      	ldr	r2, [r3, #32]
 800c552:	f240 4344 	movw	r3, #1092	; 0x444
 800c556:	4013      	ands	r3, r2
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d107      	bne.n	800c56c <HAL_TIM_OC_Stop_IT+0x150>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f022 0201 	bic.w	r2, r2, #1
 800c56a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <HAL_TIM_OC_Stop_IT+0x160>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c57a:	e023      	b.n	800c5c4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d104      	bne.n	800c58c <HAL_TIM_OC_Stop_IT+0x170>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2201      	movs	r2, #1
 800c586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c58a:	e01b      	b.n	800c5c4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b08      	cmp	r3, #8
 800c590:	d104      	bne.n	800c59c <HAL_TIM_OC_Stop_IT+0x180>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c59a:	e013      	b.n	800c5c4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b0c      	cmp	r3, #12
 800c5a0:	d104      	bne.n	800c5ac <HAL_TIM_OC_Stop_IT+0x190>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5aa:	e00b      	b.n	800c5c4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b10      	cmp	r3, #16
 800c5b0:	d104      	bne.n	800c5bc <HAL_TIM_OC_Stop_IT+0x1a0>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5ba:	e003      	b.n	800c5c4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	40010000 	.word	0x40010000
 800c5d4:	40010400 	.word	0x40010400
 800c5d8:	40014000 	.word	0x40014000
 800c5dc:	40014400 	.word	0x40014400
 800c5e0:	40014800 	.word	0x40014800

0800c5e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e049      	b.n	800c68a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7f5 fe46 	bl	800229c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	4619      	mov	r1, r3
 800c622:	4610      	mov	r0, r2
 800c624:	f000 fa90 	bl	800cb48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b082      	sub	sp, #8
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d122      	bne.n	800c6ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	f003 0302 	and.w	r3, r3, #2
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d11b      	bne.n	800c6ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f06f 0202 	mvn.w	r2, #2
 800c6be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	f003 0303 	and.w	r3, r3, #3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d003      	beq.n	800c6dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fa19 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c6da:	e005      	b.n	800c6e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7f4 fabf 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fa1c 	bl	800cb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	f003 0304 	and.w	r3, r3, #4
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d122      	bne.n	800c742 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	f003 0304 	and.w	r3, r3, #4
 800c706:	2b04      	cmp	r3, #4
 800c708:	d11b      	bne.n	800c742 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f06f 0204 	mvn.w	r2, #4
 800c712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2202      	movs	r2, #2
 800c718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f9ef 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c72e:	e005      	b.n	800c73c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7f4 fa95 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f9f2 	bl	800cb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	f003 0308 	and.w	r3, r3, #8
 800c74c:	2b08      	cmp	r3, #8
 800c74e:	d122      	bne.n	800c796 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b08      	cmp	r3, #8
 800c75c:	d11b      	bne.n	800c796 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f06f 0208 	mvn.w	r2, #8
 800c766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2204      	movs	r2, #4
 800c76c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	f003 0303 	and.w	r3, r3, #3
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f9c5 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c782:	e005      	b.n	800c790 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7f4 fa6b 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f9c8 	bl	800cb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	f003 0310 	and.w	r3, r3, #16
 800c7a0:	2b10      	cmp	r3, #16
 800c7a2:	d122      	bne.n	800c7ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f003 0310 	and.w	r3, r3, #16
 800c7ae:	2b10      	cmp	r3, #16
 800c7b0:	d11b      	bne.n	800c7ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f06f 0210 	mvn.w	r2, #16
 800c7ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2208      	movs	r2, #8
 800c7c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d003      	beq.n	800c7d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f99b 	bl	800cb0c <HAL_TIM_IC_CaptureCallback>
 800c7d6:	e005      	b.n	800c7e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7f4 fa41 	bl	8000c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f99e 	bl	800cb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	f003 0301 	and.w	r3, r3, #1
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d10e      	bne.n	800c816 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b01      	cmp	r3, #1
 800c804:	d107      	bne.n	800c816 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f06f 0201 	mvn.w	r2, #1
 800c80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f971 	bl	800caf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c820:	2b80      	cmp	r3, #128	; 0x80
 800c822:	d10e      	bne.n	800c842 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c82e:	2b80      	cmp	r3, #128	; 0x80
 800c830:	d107      	bne.n	800c842 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fe2f 	bl	800d4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c850:	d10e      	bne.n	800c870 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85c:	2b80      	cmp	r3, #128	; 0x80
 800c85e:	d107      	bne.n	800c870 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fe22 	bl	800d4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c87a:	2b40      	cmp	r3, #64	; 0x40
 800c87c:	d10e      	bne.n	800c89c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c888:	2b40      	cmp	r3, #64	; 0x40
 800c88a:	d107      	bne.n	800c89c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f94c 	bl	800cb34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b20      	cmp	r3, #32
 800c8a8:	d10e      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f003 0320 	and.w	r3, r3, #32
 800c8b4:	2b20      	cmp	r3, #32
 800c8b6:	d107      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f06f 0220 	mvn.w	r2, #32
 800c8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fde2 	bl	800d48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	e0ff      	b.n	800caee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b14      	cmp	r3, #20
 800c8fa:	f200 80f0 	bhi.w	800cade <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8fe:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c959 	.word	0x0800c959
 800c908:	0800cadf 	.word	0x0800cadf
 800c90c:	0800cadf 	.word	0x0800cadf
 800c910:	0800cadf 	.word	0x0800cadf
 800c914:	0800c999 	.word	0x0800c999
 800c918:	0800cadf 	.word	0x0800cadf
 800c91c:	0800cadf 	.word	0x0800cadf
 800c920:	0800cadf 	.word	0x0800cadf
 800c924:	0800c9db 	.word	0x0800c9db
 800c928:	0800cadf 	.word	0x0800cadf
 800c92c:	0800cadf 	.word	0x0800cadf
 800c930:	0800cadf 	.word	0x0800cadf
 800c934:	0800ca1b 	.word	0x0800ca1b
 800c938:	0800cadf 	.word	0x0800cadf
 800c93c:	0800cadf 	.word	0x0800cadf
 800c940:	0800cadf 	.word	0x0800cadf
 800c944:	0800ca5d 	.word	0x0800ca5d
 800c948:	0800cadf 	.word	0x0800cadf
 800c94c:	0800cadf 	.word	0x0800cadf
 800c950:	0800cadf 	.word	0x0800cadf
 800c954:	0800ca9d 	.word	0x0800ca9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68b9      	ldr	r1, [r7, #8]
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 f98c 	bl	800cc7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	699a      	ldr	r2, [r3, #24]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f042 0208 	orr.w	r2, r2, #8
 800c972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	699a      	ldr	r2, [r3, #24]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f022 0204 	bic.w	r2, r2, #4
 800c982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6999      	ldr	r1, [r3, #24]
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	691a      	ldr	r2, [r3, #16]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	430a      	orrs	r2, r1
 800c994:	619a      	str	r2, [r3, #24]
      break;
 800c996:	e0a5      	b.n	800cae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68b9      	ldr	r1, [r7, #8]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f9fc 	bl	800cd9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	699a      	ldr	r2, [r3, #24]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6999      	ldr	r1, [r3, #24]
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	021a      	lsls	r2, r3, #8
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	619a      	str	r2, [r3, #24]
      break;
 800c9d8:	e084      	b.n	800cae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fa65 	bl	800ceb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	69da      	ldr	r2, [r3, #28]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f042 0208 	orr.w	r2, r2, #8
 800c9f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	69da      	ldr	r2, [r3, #28]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f022 0204 	bic.w	r2, r2, #4
 800ca04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	69d9      	ldr	r1, [r3, #28]
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	691a      	ldr	r2, [r3, #16]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	430a      	orrs	r2, r1
 800ca16:	61da      	str	r2, [r3, #28]
      break;
 800ca18:	e064      	b.n	800cae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68b9      	ldr	r1, [r7, #8]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 facd 	bl	800cfc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69da      	ldr	r2, [r3, #28]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	69da      	ldr	r2, [r3, #28]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	69d9      	ldr	r1, [r3, #28]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	021a      	lsls	r2, r3, #8
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	61da      	str	r2, [r3, #28]
      break;
 800ca5a:	e043      	b.n	800cae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 fb16 	bl	800d094 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f042 0208 	orr.w	r2, r2, #8
 800ca76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f022 0204 	bic.w	r2, r2, #4
 800ca86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	691a      	ldr	r2, [r3, #16]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca9a:	e023      	b.n	800cae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68b9      	ldr	r1, [r7, #8]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fb5a 	bl	800d15c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	021a      	lsls	r2, r3, #8
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cadc:	e002      	b.n	800cae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	75fb      	strb	r3, [r7, #23]
      break;
 800cae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800caec:	7dfb      	ldrb	r3, [r7, #23]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a40      	ldr	r2, [pc, #256]	; (800cc5c <TIM_Base_SetConfig+0x114>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d013      	beq.n	800cb88 <TIM_Base_SetConfig+0x40>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb66:	d00f      	beq.n	800cb88 <TIM_Base_SetConfig+0x40>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a3d      	ldr	r2, [pc, #244]	; (800cc60 <TIM_Base_SetConfig+0x118>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d00b      	beq.n	800cb88 <TIM_Base_SetConfig+0x40>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a3c      	ldr	r2, [pc, #240]	; (800cc64 <TIM_Base_SetConfig+0x11c>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d007      	beq.n	800cb88 <TIM_Base_SetConfig+0x40>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a3b      	ldr	r2, [pc, #236]	; (800cc68 <TIM_Base_SetConfig+0x120>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d003      	beq.n	800cb88 <TIM_Base_SetConfig+0x40>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a3a      	ldr	r2, [pc, #232]	; (800cc6c <TIM_Base_SetConfig+0x124>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d108      	bne.n	800cb9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a2f      	ldr	r2, [pc, #188]	; (800cc5c <TIM_Base_SetConfig+0x114>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d01f      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cba8:	d01b      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a2c      	ldr	r2, [pc, #176]	; (800cc60 <TIM_Base_SetConfig+0x118>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d017      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a2b      	ldr	r2, [pc, #172]	; (800cc64 <TIM_Base_SetConfig+0x11c>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d013      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a2a      	ldr	r2, [pc, #168]	; (800cc68 <TIM_Base_SetConfig+0x120>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d00f      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a29      	ldr	r2, [pc, #164]	; (800cc6c <TIM_Base_SetConfig+0x124>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d00b      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a28      	ldr	r2, [pc, #160]	; (800cc70 <TIM_Base_SetConfig+0x128>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d007      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a27      	ldr	r2, [pc, #156]	; (800cc74 <TIM_Base_SetConfig+0x12c>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d003      	beq.n	800cbe2 <TIM_Base_SetConfig+0x9a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a26      	ldr	r2, [pc, #152]	; (800cc78 <TIM_Base_SetConfig+0x130>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d108      	bne.n	800cbf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a10      	ldr	r2, [pc, #64]	; (800cc5c <TIM_Base_SetConfig+0x114>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d00f      	beq.n	800cc40 <TIM_Base_SetConfig+0xf8>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a12      	ldr	r2, [pc, #72]	; (800cc6c <TIM_Base_SetConfig+0x124>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d00b      	beq.n	800cc40 <TIM_Base_SetConfig+0xf8>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a11      	ldr	r2, [pc, #68]	; (800cc70 <TIM_Base_SetConfig+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d007      	beq.n	800cc40 <TIM_Base_SetConfig+0xf8>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a10      	ldr	r2, [pc, #64]	; (800cc74 <TIM_Base_SetConfig+0x12c>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d003      	beq.n	800cc40 <TIM_Base_SetConfig+0xf8>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a0f      	ldr	r2, [pc, #60]	; (800cc78 <TIM_Base_SetConfig+0x130>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d103      	bne.n	800cc48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	691a      	ldr	r2, [r3, #16]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	615a      	str	r2, [r3, #20]
}
 800cc4e:	bf00      	nop
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	40010000 	.word	0x40010000
 800cc60:	40000400 	.word	0x40000400
 800cc64:	40000800 	.word	0x40000800
 800cc68:	40000c00 	.word	0x40000c00
 800cc6c:	40010400 	.word	0x40010400
 800cc70:	40014000 	.word	0x40014000
 800cc74:	40014400 	.word	0x40014400
 800cc78:	40014800 	.word	0x40014800

0800cc7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	f023 0201 	bic.w	r2, r3, #1
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a1b      	ldr	r3, [r3, #32]
 800cc96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	4b37      	ldr	r3, [pc, #220]	; (800cd84 <TIM_OC1_SetConfig+0x108>)
 800cca8:	4013      	ands	r3, r2
 800ccaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f023 0303 	bic.w	r3, r3, #3
 800ccb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f023 0302 	bic.w	r3, r3, #2
 800ccc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a2d      	ldr	r2, [pc, #180]	; (800cd88 <TIM_OC1_SetConfig+0x10c>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d00f      	beq.n	800ccf8 <TIM_OC1_SetConfig+0x7c>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a2c      	ldr	r2, [pc, #176]	; (800cd8c <TIM_OC1_SetConfig+0x110>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d00b      	beq.n	800ccf8 <TIM_OC1_SetConfig+0x7c>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a2b      	ldr	r2, [pc, #172]	; (800cd90 <TIM_OC1_SetConfig+0x114>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d007      	beq.n	800ccf8 <TIM_OC1_SetConfig+0x7c>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a2a      	ldr	r2, [pc, #168]	; (800cd94 <TIM_OC1_SetConfig+0x118>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d003      	beq.n	800ccf8 <TIM_OC1_SetConfig+0x7c>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a29      	ldr	r2, [pc, #164]	; (800cd98 <TIM_OC1_SetConfig+0x11c>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d10c      	bne.n	800cd12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f023 0308 	bic.w	r3, r3, #8
 800ccfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f023 0304 	bic.w	r3, r3, #4
 800cd10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a1c      	ldr	r2, [pc, #112]	; (800cd88 <TIM_OC1_SetConfig+0x10c>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00f      	beq.n	800cd3a <TIM_OC1_SetConfig+0xbe>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a1b      	ldr	r2, [pc, #108]	; (800cd8c <TIM_OC1_SetConfig+0x110>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00b      	beq.n	800cd3a <TIM_OC1_SetConfig+0xbe>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a1a      	ldr	r2, [pc, #104]	; (800cd90 <TIM_OC1_SetConfig+0x114>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d007      	beq.n	800cd3a <TIM_OC1_SetConfig+0xbe>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a19      	ldr	r2, [pc, #100]	; (800cd94 <TIM_OC1_SetConfig+0x118>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_OC1_SetConfig+0xbe>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a18      	ldr	r2, [pc, #96]	; (800cd98 <TIM_OC1_SetConfig+0x11c>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d111      	bne.n	800cd5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	685a      	ldr	r2, [r3, #4]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	697a      	ldr	r2, [r7, #20]
 800cd76:	621a      	str	r2, [r3, #32]
}
 800cd78:	bf00      	nop
 800cd7a:	371c      	adds	r7, #28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	fffeff8f 	.word	0xfffeff8f
 800cd88:	40010000 	.word	0x40010000
 800cd8c:	40010400 	.word	0x40010400
 800cd90:	40014000 	.word	0x40014000
 800cd94:	40014400 	.word	0x40014400
 800cd98:	40014800 	.word	0x40014800

0800cd9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	f023 0210 	bic.w	r2, r3, #16
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	4b34      	ldr	r3, [pc, #208]	; (800ce98 <TIM_OC2_SetConfig+0xfc>)
 800cdc8:	4013      	ands	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	021b      	lsls	r3, r3, #8
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	4313      	orrs	r3, r2
 800cdde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f023 0320 	bic.w	r3, r3, #32
 800cde6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a29      	ldr	r2, [pc, #164]	; (800ce9c <TIM_OC2_SetConfig+0x100>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d003      	beq.n	800ce04 <TIM_OC2_SetConfig+0x68>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a28      	ldr	r2, [pc, #160]	; (800cea0 <TIM_OC2_SetConfig+0x104>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d10d      	bne.n	800ce20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	011b      	lsls	r3, r3, #4
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a1e      	ldr	r2, [pc, #120]	; (800ce9c <TIM_OC2_SetConfig+0x100>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d00f      	beq.n	800ce48 <TIM_OC2_SetConfig+0xac>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a1d      	ldr	r2, [pc, #116]	; (800cea0 <TIM_OC2_SetConfig+0x104>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d00b      	beq.n	800ce48 <TIM_OC2_SetConfig+0xac>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a1c      	ldr	r2, [pc, #112]	; (800cea4 <TIM_OC2_SetConfig+0x108>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d007      	beq.n	800ce48 <TIM_OC2_SetConfig+0xac>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a1b      	ldr	r2, [pc, #108]	; (800cea8 <TIM_OC2_SetConfig+0x10c>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d003      	beq.n	800ce48 <TIM_OC2_SetConfig+0xac>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a1a      	ldr	r2, [pc, #104]	; (800ceac <TIM_OC2_SetConfig+0x110>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d113      	bne.n	800ce70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	693a      	ldr	r2, [r7, #16]
 800ce74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	697a      	ldr	r2, [r7, #20]
 800ce88:	621a      	str	r2, [r3, #32]
}
 800ce8a:	bf00      	nop
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	feff8fff 	.word	0xfeff8fff
 800ce9c:	40010000 	.word	0x40010000
 800cea0:	40010400 	.word	0x40010400
 800cea4:	40014000 	.word	0x40014000
 800cea8:	40014400 	.word	0x40014400
 800ceac:	40014800 	.word	0x40014800

0800ceb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	69db      	ldr	r3, [r3, #28]
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4b33      	ldr	r3, [pc, #204]	; (800cfa8 <TIM_OC3_SetConfig+0xf8>)
 800cedc:	4013      	ands	r3, r2
 800cede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f023 0303 	bic.w	r3, r3, #3
 800cee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	021b      	lsls	r3, r3, #8
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a28      	ldr	r2, [pc, #160]	; (800cfac <TIM_OC3_SetConfig+0xfc>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d003      	beq.n	800cf16 <TIM_OC3_SetConfig+0x66>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a27      	ldr	r2, [pc, #156]	; (800cfb0 <TIM_OC3_SetConfig+0x100>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d10d      	bne.n	800cf32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	021b      	lsls	r3, r3, #8
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a1d      	ldr	r2, [pc, #116]	; (800cfac <TIM_OC3_SetConfig+0xfc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d00f      	beq.n	800cf5a <TIM_OC3_SetConfig+0xaa>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a1c      	ldr	r2, [pc, #112]	; (800cfb0 <TIM_OC3_SetConfig+0x100>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d00b      	beq.n	800cf5a <TIM_OC3_SetConfig+0xaa>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a1b      	ldr	r2, [pc, #108]	; (800cfb4 <TIM_OC3_SetConfig+0x104>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d007      	beq.n	800cf5a <TIM_OC3_SetConfig+0xaa>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a1a      	ldr	r2, [pc, #104]	; (800cfb8 <TIM_OC3_SetConfig+0x108>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d003      	beq.n	800cf5a <TIM_OC3_SetConfig+0xaa>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a19      	ldr	r2, [pc, #100]	; (800cfbc <TIM_OC3_SetConfig+0x10c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d113      	bne.n	800cf82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	011b      	lsls	r3, r3, #4
 800cf7c:	693a      	ldr	r2, [r7, #16]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	621a      	str	r2, [r3, #32]
}
 800cf9c:	bf00      	nop
 800cf9e:	371c      	adds	r7, #28
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr
 800cfa8:	fffeff8f 	.word	0xfffeff8f
 800cfac:	40010000 	.word	0x40010000
 800cfb0:	40010400 	.word	0x40010400
 800cfb4:	40014000 	.word	0x40014000
 800cfb8:	40014400 	.word	0x40014400
 800cfbc:	40014800 	.word	0x40014800

0800cfc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b087      	sub	sp, #28
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	4b24      	ldr	r3, [pc, #144]	; (800d07c <TIM_OC4_SetConfig+0xbc>)
 800cfec:	4013      	ands	r3, r2
 800cfee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	021b      	lsls	r3, r3, #8
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	4313      	orrs	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d00a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	031b      	lsls	r3, r3, #12
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	4313      	orrs	r3, r2
 800d016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a19      	ldr	r2, [pc, #100]	; (800d080 <TIM_OC4_SetConfig+0xc0>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d00f      	beq.n	800d040 <TIM_OC4_SetConfig+0x80>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a18      	ldr	r2, [pc, #96]	; (800d084 <TIM_OC4_SetConfig+0xc4>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d00b      	beq.n	800d040 <TIM_OC4_SetConfig+0x80>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a17      	ldr	r2, [pc, #92]	; (800d088 <TIM_OC4_SetConfig+0xc8>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d007      	beq.n	800d040 <TIM_OC4_SetConfig+0x80>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a16      	ldr	r2, [pc, #88]	; (800d08c <TIM_OC4_SetConfig+0xcc>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d003      	beq.n	800d040 <TIM_OC4_SetConfig+0x80>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a15      	ldr	r2, [pc, #84]	; (800d090 <TIM_OC4_SetConfig+0xd0>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d109      	bne.n	800d054 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	019b      	lsls	r3, r3, #6
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	4313      	orrs	r3, r2
 800d052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	621a      	str	r2, [r3, #32]
}
 800d06e:	bf00      	nop
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	feff8fff 	.word	0xfeff8fff
 800d080:	40010000 	.word	0x40010000
 800d084:	40010400 	.word	0x40010400
 800d088:	40014000 	.word	0x40014000
 800d08c:	40014400 	.word	0x40014400
 800d090:	40014800 	.word	0x40014800

0800d094 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d094:	b480      	push	{r7}
 800d096:	b087      	sub	sp, #28
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4b21      	ldr	r3, [pc, #132]	; (800d144 <TIM_OC5_SetConfig+0xb0>)
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d0d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	041b      	lsls	r3, r3, #16
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a18      	ldr	r2, [pc, #96]	; (800d148 <TIM_OC5_SetConfig+0xb4>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d00f      	beq.n	800d10a <TIM_OC5_SetConfig+0x76>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a17      	ldr	r2, [pc, #92]	; (800d14c <TIM_OC5_SetConfig+0xb8>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d00b      	beq.n	800d10a <TIM_OC5_SetConfig+0x76>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a16      	ldr	r2, [pc, #88]	; (800d150 <TIM_OC5_SetConfig+0xbc>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d007      	beq.n	800d10a <TIM_OC5_SetConfig+0x76>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a15      	ldr	r2, [pc, #84]	; (800d154 <TIM_OC5_SetConfig+0xc0>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d003      	beq.n	800d10a <TIM_OC5_SetConfig+0x76>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a14      	ldr	r2, [pc, #80]	; (800d158 <TIM_OC5_SetConfig+0xc4>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d109      	bne.n	800d11e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	021b      	lsls	r3, r3, #8
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	621a      	str	r2, [r3, #32]
}
 800d138:	bf00      	nop
 800d13a:	371c      	adds	r7, #28
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	fffeff8f 	.word	0xfffeff8f
 800d148:	40010000 	.word	0x40010000
 800d14c:	40010400 	.word	0x40010400
 800d150:	40014000 	.word	0x40014000
 800d154:	40014400 	.word	0x40014400
 800d158:	40014800 	.word	0x40014800

0800d15c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a1b      	ldr	r3, [r3, #32]
 800d176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	4b22      	ldr	r3, [pc, #136]	; (800d210 <TIM_OC6_SetConfig+0xb4>)
 800d188:	4013      	ands	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	021b      	lsls	r3, r3, #8
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	4313      	orrs	r3, r2
 800d196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d19e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	051b      	lsls	r3, r3, #20
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a19      	ldr	r2, [pc, #100]	; (800d214 <TIM_OC6_SetConfig+0xb8>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d00f      	beq.n	800d1d4 <TIM_OC6_SetConfig+0x78>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a18      	ldr	r2, [pc, #96]	; (800d218 <TIM_OC6_SetConfig+0xbc>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d00b      	beq.n	800d1d4 <TIM_OC6_SetConfig+0x78>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a17      	ldr	r2, [pc, #92]	; (800d21c <TIM_OC6_SetConfig+0xc0>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d007      	beq.n	800d1d4 <TIM_OC6_SetConfig+0x78>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a16      	ldr	r2, [pc, #88]	; (800d220 <TIM_OC6_SetConfig+0xc4>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d003      	beq.n	800d1d4 <TIM_OC6_SetConfig+0x78>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a15      	ldr	r2, [pc, #84]	; (800d224 <TIM_OC6_SetConfig+0xc8>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d109      	bne.n	800d1e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	029b      	lsls	r3, r3, #10
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	621a      	str	r2, [r3, #32]
}
 800d202:	bf00      	nop
 800d204:	371c      	adds	r7, #28
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	feff8fff 	.word	0xfeff8fff
 800d214:	40010000 	.word	0x40010000
 800d218:	40010400 	.word	0x40010400
 800d21c:	40014000 	.word	0x40014000
 800d220:	40014400 	.word	0x40014400
 800d224:	40014800 	.word	0x40014800

0800d228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	f003 031f 	and.w	r3, r3, #31
 800d23a:	2201      	movs	r2, #1
 800d23c:	fa02 f303 	lsl.w	r3, r2, r3
 800d240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a1a      	ldr	r2, [r3, #32]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	43db      	mvns	r3, r3
 800d24a:	401a      	ands	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f003 031f 	and.w	r3, r3, #31
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	fa01 f303 	lsl.w	r3, r1, r3
 800d260:	431a      	orrs	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	621a      	str	r2, [r3, #32]
}
 800d266:	bf00      	nop
 800d268:	371c      	adds	r7, #28
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
	...

0800d274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d284:	2b01      	cmp	r3, #1
 800d286:	d101      	bne.n	800d28c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d288:	2302      	movs	r3, #2
 800d28a:	e06d      	b.n	800d368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2202      	movs	r2, #2
 800d298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a30      	ldr	r2, [pc, #192]	; (800d374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d004      	beq.n	800d2c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a2f      	ldr	r2, [pc, #188]	; (800d378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d108      	bne.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a20      	ldr	r2, [pc, #128]	; (800d374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d022      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2fe:	d01d      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a1d      	ldr	r2, [pc, #116]	; (800d37c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d018      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a1c      	ldr	r2, [pc, #112]	; (800d380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d013      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a1a      	ldr	r2, [pc, #104]	; (800d384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d00e      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a15      	ldr	r2, [pc, #84]	; (800d378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d009      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a16      	ldr	r2, [pc, #88]	; (800d388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d004      	beq.n	800d33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a15      	ldr	r2, [pc, #84]	; (800d38c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d10c      	bne.n	800d356 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	68ba      	ldr	r2, [r7, #8]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3714      	adds	r7, #20
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	40010000 	.word	0x40010000
 800d378:	40010400 	.word	0x40010400
 800d37c:	40000400 	.word	0x40000400
 800d380:	40000800 	.word	0x40000800
 800d384:	40000c00 	.word	0x40000c00
 800d388:	40001800 	.word	0x40001800
 800d38c:	40014000 	.word	0x40014000

0800d390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d39a:	2300      	movs	r3, #0
 800d39c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d101      	bne.n	800d3ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	e065      	b.n	800d478 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	4313      	orrs	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	041b      	lsls	r3, r3, #16
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a16      	ldr	r2, [pc, #88]	; (800d484 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d004      	beq.n	800d43a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a14      	ldr	r2, [pc, #80]	; (800d488 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d115      	bne.n	800d466 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d444:	051b      	lsls	r3, r3, #20
 800d446:	4313      	orrs	r3, r2
 800d448:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	4313      	orrs	r3, r2
 800d456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	4313      	orrs	r3, r2
 800d464:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3714      	adds	r7, #20
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	40010000 	.word	0x40010000
 800d488:	40010400 	.word	0x40010400

0800d48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e042      	b.n	800d560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7f4 ff97 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2224      	movs	r2, #36	; 0x24
 800d4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f022 0201 	bic.w	r2, r2, #1
 800d508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fcd6 	bl	800debc <UART_SetConfig>
 800d510:	4603      	mov	r3, r0
 800d512:	2b01      	cmp	r3, #1
 800d514:	d101      	bne.n	800d51a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e022      	b.n	800d560 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f001 fa32 	bl	800e98c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	689a      	ldr	r2, [r3, #8]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f042 0201 	orr.w	r2, r2, #1
 800d556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f001 fab9 	bl	800ead0 <UART_CheckIdleState>
 800d55e:	4603      	mov	r3, r0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	603b      	str	r3, [r7, #0]
 800d574:	4613      	mov	r3, r2
 800d576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d57e:	2b20      	cmp	r3, #32
 800d580:	f040 8083 	bne.w	800d68a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <HAL_UART_Transmit+0x28>
 800d58a:	88fb      	ldrh	r3, [r7, #6]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	e07b      	b.n	800d68c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d101      	bne.n	800d5a2 <HAL_UART_Transmit+0x3a>
 800d59e:	2302      	movs	r3, #2
 800d5a0:	e074      	b.n	800d68c <HAL_UART_Transmit+0x124>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2221      	movs	r2, #33	; 0x21
 800d5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5ba:	f7f5 f987 	bl	80028cc <HAL_GetTick>
 800d5be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	88fa      	ldrh	r2, [r7, #6]
 800d5c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	88fa      	ldrh	r2, [r7, #6]
 800d5cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5d8:	d108      	bne.n	800d5ec <HAL_UART_Transmit+0x84>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d104      	bne.n	800d5ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	61bb      	str	r3, [r7, #24]
 800d5ea:	e003      	b.n	800d5f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d5fc:	e02c      	b.n	800d658 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	2200      	movs	r2, #0
 800d606:	2180      	movs	r1, #128	; 0x80
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f001 faac 	bl	800eb66 <UART_WaitOnFlagUntilTimeout>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d614:	2303      	movs	r3, #3
 800d616:	e039      	b.n	800d68c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10b      	bne.n	800d636 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d62c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	3302      	adds	r3, #2
 800d632:	61bb      	str	r3, [r7, #24]
 800d634:	e007      	b.n	800d646 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	781a      	ldrb	r2, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	3301      	adds	r3, #1
 800d644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	3b01      	subs	r3, #1
 800d650:	b29a      	uxth	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d65e:	b29b      	uxth	r3, r3
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1cc      	bne.n	800d5fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	2200      	movs	r2, #0
 800d66c:	2140      	movs	r1, #64	; 0x40
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f001 fa79 	bl	800eb66 <UART_WaitOnFlagUntilTimeout>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e006      	b.n	800d68c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2220      	movs	r2, #32
 800d682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	e000      	b.n	800d68c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d68a:	2302      	movs	r3, #2
  }
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3720      	adds	r7, #32
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b08a      	sub	sp, #40	; 0x28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	d142      	bne.n	800d732 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <HAL_UART_Receive_IT+0x24>
 800d6b2:	88fb      	ldrh	r3, [r7, #6]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e03b      	b.n	800d734 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d101      	bne.n	800d6ca <HAL_UART_Receive_IT+0x36>
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	e034      	b.n	800d734 <HAL_UART_Receive_IT+0xa0>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a17      	ldr	r2, [pc, #92]	; (800d73c <HAL_UART_Receive_IT+0xa8>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d01f      	beq.n	800d722 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d018      	beq.n	800d722 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	e853 3f00 	ldrex	r3, [r3]
 800d6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	623b      	str	r3, [r7, #32]
 800d710:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d712:	69f9      	ldr	r1, [r7, #28]
 800d714:	6a3a      	ldr	r2, [r7, #32]
 800d716:	e841 2300 	strex	r3, r2, [r1]
 800d71a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1e6      	bne.n	800d6f0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d722:	88fb      	ldrh	r3, [r7, #6]
 800d724:	461a      	mov	r2, r3
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f001 fae5 	bl	800ecf8 <UART_Start_Receive_IT>
 800d72e:	4603      	mov	r3, r0
 800d730:	e000      	b.n	800d734 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d732:	2302      	movs	r3, #2
  }
}
 800d734:	4618      	mov	r0, r3
 800d736:	3728      	adds	r7, #40	; 0x28
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	58000c00 	.word	0x58000c00

0800d740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b0ba      	sub	sp, #232	; 0xe8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d766:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d76a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d76e:	4013      	ands	r3, r2
 800d770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d11b      	bne.n	800d7b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d780:	f003 0320 	and.w	r3, r3, #32
 800d784:	2b00      	cmp	r3, #0
 800d786:	d015      	beq.n	800d7b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d78c:	f003 0320 	and.w	r3, r3, #32
 800d790:	2b00      	cmp	r3, #0
 800d792:	d105      	bne.n	800d7a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 835a 	beq.w	800de5e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	4798      	blx	r3
      }
      return;
 800d7b2:	e354      	b.n	800de5e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f000 811f 	beq.w	800d9fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7c2:	4b8b      	ldr	r3, [pc, #556]	; (800d9f0 <HAL_UART_IRQHandler+0x2b0>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7ce:	4b89      	ldr	r3, [pc, #548]	; (800d9f4 <HAL_UART_IRQHandler+0x2b4>)
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 8112 	beq.w	800d9fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d011      	beq.n	800d808 <HAL_UART_IRQHandler+0xc8>
 800d7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7fe:	f043 0201 	orr.w	r2, r3, #1
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b00      	cmp	r3, #0
 800d812:	d011      	beq.n	800d838 <HAL_UART_IRQHandler+0xf8>
 800d814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2202      	movs	r2, #2
 800d826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d82e:	f043 0204 	orr.w	r2, r3, #4
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d83c:	f003 0304 	and.w	r3, r3, #4
 800d840:	2b00      	cmp	r3, #0
 800d842:	d011      	beq.n	800d868 <HAL_UART_IRQHandler+0x128>
 800d844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00b      	beq.n	800d868 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2204      	movs	r2, #4
 800d856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d85e:	f043 0202 	orr.w	r2, r3, #2
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d86c:	f003 0308 	and.w	r3, r3, #8
 800d870:	2b00      	cmp	r3, #0
 800d872:	d017      	beq.n	800d8a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d105      	bne.n	800d88c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d880:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d884:	4b5a      	ldr	r3, [pc, #360]	; (800d9f0 <HAL_UART_IRQHandler+0x2b0>)
 800d886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00b      	beq.n	800d8a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2208      	movs	r2, #8
 800d892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d89a:	f043 0208 	orr.w	r2, r3, #8
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d012      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x196>
 800d8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00c      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8cc:	f043 0220 	orr.w	r2, r3, #32
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 82c0 	beq.w	800de62 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d013      	beq.n	800d916 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d105      	bne.n	800d906 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d91c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d92a:	2b40      	cmp	r3, #64	; 0x40
 800d92c:	d005      	beq.n	800d93a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d92e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d932:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d936:	2b00      	cmp	r3, #0
 800d938:	d04f      	beq.n	800d9da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f001 fb06 	bl	800ef4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b40      	cmp	r3, #64	; 0x40
 800d94c:	d141      	bne.n	800d9d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3308      	adds	r3, #8
 800d954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d95c:	e853 3f00 	ldrex	r3, [r3]
 800d960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d96c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3308      	adds	r3, #8
 800d976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d97a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d97e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d98a:	e841 2300 	strex	r3, r2, [r1]
 800d98e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1d9      	bne.n	800d94e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d013      	beq.n	800d9ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9a6:	4a14      	ldr	r2, [pc, #80]	; (800d9f8 <HAL_UART_IRQHandler+0x2b8>)
 800d9a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f7 ffa6 	bl	8005900 <HAL_DMA_Abort_IT>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d017      	beq.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c8:	e00f      	b.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fa60 	bl	800de90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d0:	e00b      	b.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fa5c 	bl	800de90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d8:	e007      	b.n	800d9ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 fa58 	bl	800de90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d9e8:	e23b      	b.n	800de62 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ea:	bf00      	nop
    return;
 800d9ec:	e239      	b.n	800de62 <HAL_UART_IRQHandler+0x722>
 800d9ee:	bf00      	nop
 800d9f0:	10000001 	.word	0x10000001
 800d9f4:	04000120 	.word	0x04000120
 800d9f8:	0800f019 	.word	0x0800f019

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da00:	2b01      	cmp	r3, #1
 800da02:	f040 81ce 	bne.w	800dda2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da0a:	f003 0310 	and.w	r3, r3, #16
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 81c7 	beq.w	800dda2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da18:	f003 0310 	and.w	r3, r3, #16
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f000 81c0 	beq.w	800dda2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2210      	movs	r2, #16
 800da28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da34:	2b40      	cmp	r3, #64	; 0x40
 800da36:	f040 813b 	bne.w	800dcb0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a8b      	ldr	r2, [pc, #556]	; (800dc70 <HAL_UART_IRQHandler+0x530>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d059      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a89      	ldr	r2, [pc, #548]	; (800dc74 <HAL_UART_IRQHandler+0x534>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d053      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a87      	ldr	r2, [pc, #540]	; (800dc78 <HAL_UART_IRQHandler+0x538>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d04d      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a85      	ldr	r2, [pc, #532]	; (800dc7c <HAL_UART_IRQHandler+0x53c>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d047      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a83      	ldr	r2, [pc, #524]	; (800dc80 <HAL_UART_IRQHandler+0x540>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d041      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a81      	ldr	r2, [pc, #516]	; (800dc84 <HAL_UART_IRQHandler+0x544>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d03b      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a7f      	ldr	r2, [pc, #508]	; (800dc88 <HAL_UART_IRQHandler+0x548>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d035      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a7d      	ldr	r2, [pc, #500]	; (800dc8c <HAL_UART_IRQHandler+0x54c>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d02f      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a7b      	ldr	r2, [pc, #492]	; (800dc90 <HAL_UART_IRQHandler+0x550>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d029      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a79      	ldr	r2, [pc, #484]	; (800dc94 <HAL_UART_IRQHandler+0x554>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d023      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a77      	ldr	r2, [pc, #476]	; (800dc98 <HAL_UART_IRQHandler+0x558>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d01d      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a75      	ldr	r2, [pc, #468]	; (800dc9c <HAL_UART_IRQHandler+0x55c>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d017      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a73      	ldr	r2, [pc, #460]	; (800dca0 <HAL_UART_IRQHandler+0x560>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d011      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a71      	ldr	r2, [pc, #452]	; (800dca4 <HAL_UART_IRQHandler+0x564>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d00b      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a6f      	ldr	r2, [pc, #444]	; (800dca8 <HAL_UART_IRQHandler+0x568>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d005      	beq.n	800dafa <HAL_UART_IRQHandler+0x3ba>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a6d      	ldr	r2, [pc, #436]	; (800dcac <HAL_UART_IRQHandler+0x56c>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d105      	bne.n	800db06 <HAL_UART_IRQHandler+0x3c6>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	b29b      	uxth	r3, r3
 800db04:	e004      	b.n	800db10 <HAL_UART_IRQHandler+0x3d0>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 81a4 	beq.w	800de66 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db28:	429a      	cmp	r2, r3
 800db2a:	f080 819c 	bcs.w	800de66 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db3c:	69db      	ldr	r3, [r3, #28]
 800db3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db42:	f000 8086 	beq.w	800dc52 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db52:	e853 3f00 	ldrex	r3, [r3]
 800db56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db74:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db80:	e841 2300 	strex	r3, r2, [r1]
 800db84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800db88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1da      	bne.n	800db46 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db9a:	e853 3f00 	ldrex	r3, [r3]
 800db9e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dba2:	f023 0301 	bic.w	r3, r3, #1
 800dba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbb4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dbb8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dbbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dbc0:	e841 2300 	strex	r3, r2, [r1]
 800dbc4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dbc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1e1      	bne.n	800db90 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbd6:	e853 3f00 	ldrex	r3, [r3]
 800dbda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dbdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3308      	adds	r3, #8
 800dbec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dbf0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbf2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbf8:	e841 2300 	strex	r3, r2, [r1]
 800dbfc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dbfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1e3      	bne.n	800dbcc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2220      	movs	r2, #32
 800dc08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc1a:	e853 3f00 	ldrex	r3, [r3]
 800dc1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc22:	f023 0310 	bic.w	r3, r3, #16
 800dc26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc34:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc3c:	e841 2300 	strex	r3, r2, [r1]
 800dc40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1e4      	bne.n	800dc12 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7f7 fb39 	bl	80052c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f91c 	bl	800dea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc6c:	e0fb      	b.n	800de66 <HAL_UART_IRQHandler+0x726>
 800dc6e:	bf00      	nop
 800dc70:	40020010 	.word	0x40020010
 800dc74:	40020028 	.word	0x40020028
 800dc78:	40020040 	.word	0x40020040
 800dc7c:	40020058 	.word	0x40020058
 800dc80:	40020070 	.word	0x40020070
 800dc84:	40020088 	.word	0x40020088
 800dc88:	400200a0 	.word	0x400200a0
 800dc8c:	400200b8 	.word	0x400200b8
 800dc90:	40020410 	.word	0x40020410
 800dc94:	40020428 	.word	0x40020428
 800dc98:	40020440 	.word	0x40020440
 800dc9c:	40020458 	.word	0x40020458
 800dca0:	40020470 	.word	0x40020470
 800dca4:	40020488 	.word	0x40020488
 800dca8:	400204a0 	.word	0x400204a0
 800dcac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f000 80cc 	beq.w	800de6a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dcd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 80c7 	beq.w	800de6a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce4:	e853 3f00 	ldrex	r3, [r3]
 800dce8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcfe:	647b      	str	r3, [r7, #68]	; 0x44
 800dd00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd06:	e841 2300 	strex	r3, r2, [r1]
 800dd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1e4      	bne.n	800dcdc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	3308      	adds	r3, #8
 800dd18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	e853 3f00 	ldrex	r3, [r3]
 800dd20:	623b      	str	r3, [r7, #32]
   return(result);
 800dd22:	6a3a      	ldr	r2, [r7, #32]
 800dd24:	4b54      	ldr	r3, [pc, #336]	; (800de78 <HAL_UART_IRQHandler+0x738>)
 800dd26:	4013      	ands	r3, r2
 800dd28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3308      	adds	r3, #8
 800dd32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd36:	633a      	str	r2, [r7, #48]	; 0x30
 800dd38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd3e:	e841 2300 	strex	r3, r2, [r1]
 800dd42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1e3      	bne.n	800dd12 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2220      	movs	r2, #32
 800dd4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	e853 3f00 	ldrex	r3, [r3]
 800dd6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f023 0310 	bic.w	r3, r3, #16
 800dd72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd80:	61fb      	str	r3, [r7, #28]
 800dd82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd84:	69b9      	ldr	r1, [r7, #24]
 800dd86:	69fa      	ldr	r2, [r7, #28]
 800dd88:	e841 2300 	strex	r3, r2, [r1]
 800dd8c:	617b      	str	r3, [r7, #20]
   return(result);
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1e4      	bne.n	800dd5e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f882 	bl	800dea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dda0:	e063      	b.n	800de6a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dda6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00e      	beq.n	800ddcc <HAL_UART_IRQHandler+0x68c>
 800ddae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d008      	beq.n	800ddcc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ddc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f001 fdc5 	bl	800f954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddca:	e051      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ddcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d014      	beq.n	800de02 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ddd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d105      	bne.n	800ddf0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dde4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dde8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d008      	beq.n	800de02 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d03a      	beq.n	800de6e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	4798      	blx	r3
    }
    return;
 800de00:	e035      	b.n	800de6e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d009      	beq.n	800de22 <HAL_UART_IRQHandler+0x6e2>
 800de0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de16:	2b00      	cmp	r3, #0
 800de18:	d003      	beq.n	800de22 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f001 f912 	bl	800f044 <UART_EndTransmit_IT>
    return;
 800de20:	e026      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <HAL_UART_IRQHandler+0x702>
 800de2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f001 fd9e 	bl	800f97c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de40:	e016      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d010      	beq.n	800de70 <HAL_UART_IRQHandler+0x730>
 800de4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de52:	2b00      	cmp	r3, #0
 800de54:	da0c      	bge.n	800de70 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f001 fd86 	bl	800f968 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de5c:	e008      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
      return;
 800de5e:	bf00      	nop
 800de60:	e006      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
    return;
 800de62:	bf00      	nop
 800de64:	e004      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
      return;
 800de66:	bf00      	nop
 800de68:	e002      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
      return;
 800de6a:	bf00      	nop
 800de6c:	e000      	b.n	800de70 <HAL_UART_IRQHandler+0x730>
    return;
 800de6e:	bf00      	nop
  }
}
 800de70:	37e8      	adds	r7, #232	; 0xe8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	effffffe 	.word	0xeffffffe

0800de7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800debc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dec0:	b092      	sub	sp, #72	; 0x48
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	689a      	ldr	r2, [r3, #8]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	691b      	ldr	r3, [r3, #16]
 800ded4:	431a      	orrs	r2, r3
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	431a      	orrs	r2, r3
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	4bbe      	ldr	r3, [pc, #760]	; (800e1e4 <UART_SetConfig+0x328>)
 800deec:	4013      	ands	r3, r2
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	6812      	ldr	r2, [r2, #0]
 800def2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800def4:	430b      	orrs	r3, r1
 800def6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	68da      	ldr	r2, [r3, #12]
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4ab3      	ldr	r2, [pc, #716]	; (800e1e8 <UART_SetConfig+0x32c>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d004      	beq.n	800df28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	6a1b      	ldr	r3, [r3, #32]
 800df22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df24:	4313      	orrs	r3, r2
 800df26:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	689a      	ldr	r2, [r3, #8]
 800df2e:	4baf      	ldr	r3, [pc, #700]	; (800e1ec <UART_SetConfig+0x330>)
 800df30:	4013      	ands	r3, r2
 800df32:	697a      	ldr	r2, [r7, #20]
 800df34:	6812      	ldr	r2, [r2, #0]
 800df36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df38:	430b      	orrs	r3, r1
 800df3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df42:	f023 010f 	bic.w	r1, r3, #15
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	430a      	orrs	r2, r1
 800df50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4aa6      	ldr	r2, [pc, #664]	; (800e1f0 <UART_SetConfig+0x334>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d177      	bne.n	800e04c <UART_SetConfig+0x190>
 800df5c:	4ba5      	ldr	r3, [pc, #660]	; (800e1f4 <UART_SetConfig+0x338>)
 800df5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df64:	2b28      	cmp	r3, #40	; 0x28
 800df66:	d86d      	bhi.n	800e044 <UART_SetConfig+0x188>
 800df68:	a201      	add	r2, pc, #4	; (adr r2, 800df70 <UART_SetConfig+0xb4>)
 800df6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6e:	bf00      	nop
 800df70:	0800e015 	.word	0x0800e015
 800df74:	0800e045 	.word	0x0800e045
 800df78:	0800e045 	.word	0x0800e045
 800df7c:	0800e045 	.word	0x0800e045
 800df80:	0800e045 	.word	0x0800e045
 800df84:	0800e045 	.word	0x0800e045
 800df88:	0800e045 	.word	0x0800e045
 800df8c:	0800e045 	.word	0x0800e045
 800df90:	0800e01d 	.word	0x0800e01d
 800df94:	0800e045 	.word	0x0800e045
 800df98:	0800e045 	.word	0x0800e045
 800df9c:	0800e045 	.word	0x0800e045
 800dfa0:	0800e045 	.word	0x0800e045
 800dfa4:	0800e045 	.word	0x0800e045
 800dfa8:	0800e045 	.word	0x0800e045
 800dfac:	0800e045 	.word	0x0800e045
 800dfb0:	0800e025 	.word	0x0800e025
 800dfb4:	0800e045 	.word	0x0800e045
 800dfb8:	0800e045 	.word	0x0800e045
 800dfbc:	0800e045 	.word	0x0800e045
 800dfc0:	0800e045 	.word	0x0800e045
 800dfc4:	0800e045 	.word	0x0800e045
 800dfc8:	0800e045 	.word	0x0800e045
 800dfcc:	0800e045 	.word	0x0800e045
 800dfd0:	0800e02d 	.word	0x0800e02d
 800dfd4:	0800e045 	.word	0x0800e045
 800dfd8:	0800e045 	.word	0x0800e045
 800dfdc:	0800e045 	.word	0x0800e045
 800dfe0:	0800e045 	.word	0x0800e045
 800dfe4:	0800e045 	.word	0x0800e045
 800dfe8:	0800e045 	.word	0x0800e045
 800dfec:	0800e045 	.word	0x0800e045
 800dff0:	0800e035 	.word	0x0800e035
 800dff4:	0800e045 	.word	0x0800e045
 800dff8:	0800e045 	.word	0x0800e045
 800dffc:	0800e045 	.word	0x0800e045
 800e000:	0800e045 	.word	0x0800e045
 800e004:	0800e045 	.word	0x0800e045
 800e008:	0800e045 	.word	0x0800e045
 800e00c:	0800e045 	.word	0x0800e045
 800e010:	0800e03d 	.word	0x0800e03d
 800e014:	2301      	movs	r3, #1
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01a:	e222      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e01c:	2304      	movs	r3, #4
 800e01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e022:	e21e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e024:	2308      	movs	r3, #8
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02a:	e21a      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e02c:	2310      	movs	r3, #16
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e032:	e216      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e034:	2320      	movs	r3, #32
 800e036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03a:	e212      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e03c:	2340      	movs	r3, #64	; 0x40
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e20e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e044:	2380      	movs	r3, #128	; 0x80
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e20a      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a69      	ldr	r2, [pc, #420]	; (800e1f8 <UART_SetConfig+0x33c>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d130      	bne.n	800e0b8 <UART_SetConfig+0x1fc>
 800e056:	4b67      	ldr	r3, [pc, #412]	; (800e1f4 <UART_SetConfig+0x338>)
 800e058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e05a:	f003 0307 	and.w	r3, r3, #7
 800e05e:	2b05      	cmp	r3, #5
 800e060:	d826      	bhi.n	800e0b0 <UART_SetConfig+0x1f4>
 800e062:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <UART_SetConfig+0x1ac>)
 800e064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e068:	0800e081 	.word	0x0800e081
 800e06c:	0800e089 	.word	0x0800e089
 800e070:	0800e091 	.word	0x0800e091
 800e074:	0800e099 	.word	0x0800e099
 800e078:	0800e0a1 	.word	0x0800e0a1
 800e07c:	0800e0a9 	.word	0x0800e0a9
 800e080:	2300      	movs	r3, #0
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	e1ec      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e088:	2304      	movs	r3, #4
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e1e8      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e090:	2308      	movs	r3, #8
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e1e4      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e098:	2310      	movs	r3, #16
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e1e0      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e0a0:	2320      	movs	r3, #32
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e1dc      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e0a8:	2340      	movs	r3, #64	; 0x40
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e1d8      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e0b0:	2380      	movs	r3, #128	; 0x80
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e1d4      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a4f      	ldr	r2, [pc, #316]	; (800e1fc <UART_SetConfig+0x340>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d130      	bne.n	800e124 <UART_SetConfig+0x268>
 800e0c2:	4b4c      	ldr	r3, [pc, #304]	; (800e1f4 <UART_SetConfig+0x338>)
 800e0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	2b05      	cmp	r3, #5
 800e0cc:	d826      	bhi.n	800e11c <UART_SetConfig+0x260>
 800e0ce:	a201      	add	r2, pc, #4	; (adr r2, 800e0d4 <UART_SetConfig+0x218>)
 800e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d4:	0800e0ed 	.word	0x0800e0ed
 800e0d8:	0800e0f5 	.word	0x0800e0f5
 800e0dc:	0800e0fd 	.word	0x0800e0fd
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e10d 	.word	0x0800e10d
 800e0e8:	0800e115 	.word	0x0800e115
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f2:	e1b6      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e0f4:	2304      	movs	r3, #4
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e1b2      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e0fc:	2308      	movs	r3, #8
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e1ae      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e104:	2310      	movs	r3, #16
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e1aa      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e10c:	2320      	movs	r3, #32
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e1a6      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e114:	2340      	movs	r3, #64	; 0x40
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e1a2      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e11c:	2380      	movs	r3, #128	; 0x80
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e19e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a35      	ldr	r2, [pc, #212]	; (800e200 <UART_SetConfig+0x344>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d130      	bne.n	800e190 <UART_SetConfig+0x2d4>
 800e12e:	4b31      	ldr	r3, [pc, #196]	; (800e1f4 <UART_SetConfig+0x338>)
 800e130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e132:	f003 0307 	and.w	r3, r3, #7
 800e136:	2b05      	cmp	r3, #5
 800e138:	d826      	bhi.n	800e188 <UART_SetConfig+0x2cc>
 800e13a:	a201      	add	r2, pc, #4	; (adr r2, 800e140 <UART_SetConfig+0x284>)
 800e13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e140:	0800e159 	.word	0x0800e159
 800e144:	0800e161 	.word	0x0800e161
 800e148:	0800e169 	.word	0x0800e169
 800e14c:	0800e171 	.word	0x0800e171
 800e150:	0800e179 	.word	0x0800e179
 800e154:	0800e181 	.word	0x0800e181
 800e158:	2300      	movs	r3, #0
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15e:	e180      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e160:	2304      	movs	r3, #4
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e166:	e17c      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e168:	2308      	movs	r3, #8
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e178      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e170:	2310      	movs	r3, #16
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e174      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e178:	2320      	movs	r3, #32
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e170      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e180:	2340      	movs	r3, #64	; 0x40
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e16c      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e188:	2380      	movs	r3, #128	; 0x80
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e168      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a1b      	ldr	r2, [pc, #108]	; (800e204 <UART_SetConfig+0x348>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d142      	bne.n	800e220 <UART_SetConfig+0x364>
 800e19a:	4b16      	ldr	r3, [pc, #88]	; (800e1f4 <UART_SetConfig+0x338>)
 800e19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e19e:	f003 0307 	and.w	r3, r3, #7
 800e1a2:	2b05      	cmp	r3, #5
 800e1a4:	d838      	bhi.n	800e218 <UART_SetConfig+0x35c>
 800e1a6:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <UART_SetConfig+0x2f0>)
 800e1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ac:	0800e1c5 	.word	0x0800e1c5
 800e1b0:	0800e1cd 	.word	0x0800e1cd
 800e1b4:	0800e1d5 	.word	0x0800e1d5
 800e1b8:	0800e1dd 	.word	0x0800e1dd
 800e1bc:	0800e209 	.word	0x0800e209
 800e1c0:	0800e211 	.word	0x0800e211
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ca:	e14a      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e1cc:	2304      	movs	r3, #4
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d2:	e146      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e1d4:	2308      	movs	r3, #8
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e142      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e1dc:	2310      	movs	r3, #16
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e13e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e1e4:	cfff69f3 	.word	0xcfff69f3
 800e1e8:	58000c00 	.word	0x58000c00
 800e1ec:	11fff4ff 	.word	0x11fff4ff
 800e1f0:	40011000 	.word	0x40011000
 800e1f4:	58024400 	.word	0x58024400
 800e1f8:	40004400 	.word	0x40004400
 800e1fc:	40004800 	.word	0x40004800
 800e200:	40004c00 	.word	0x40004c00
 800e204:	40005000 	.word	0x40005000
 800e208:	2320      	movs	r3, #32
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e128      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e210:	2340      	movs	r3, #64	; 0x40
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e124      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e218:	2380      	movs	r3, #128	; 0x80
 800e21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21e:	e120      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4acb      	ldr	r2, [pc, #812]	; (800e554 <UART_SetConfig+0x698>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d176      	bne.n	800e318 <UART_SetConfig+0x45c>
 800e22a:	4bcb      	ldr	r3, [pc, #812]	; (800e558 <UART_SetConfig+0x69c>)
 800e22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e22e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e232:	2b28      	cmp	r3, #40	; 0x28
 800e234:	d86c      	bhi.n	800e310 <UART_SetConfig+0x454>
 800e236:	a201      	add	r2, pc, #4	; (adr r2, 800e23c <UART_SetConfig+0x380>)
 800e238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23c:	0800e2e1 	.word	0x0800e2e1
 800e240:	0800e311 	.word	0x0800e311
 800e244:	0800e311 	.word	0x0800e311
 800e248:	0800e311 	.word	0x0800e311
 800e24c:	0800e311 	.word	0x0800e311
 800e250:	0800e311 	.word	0x0800e311
 800e254:	0800e311 	.word	0x0800e311
 800e258:	0800e311 	.word	0x0800e311
 800e25c:	0800e2e9 	.word	0x0800e2e9
 800e260:	0800e311 	.word	0x0800e311
 800e264:	0800e311 	.word	0x0800e311
 800e268:	0800e311 	.word	0x0800e311
 800e26c:	0800e311 	.word	0x0800e311
 800e270:	0800e311 	.word	0x0800e311
 800e274:	0800e311 	.word	0x0800e311
 800e278:	0800e311 	.word	0x0800e311
 800e27c:	0800e2f1 	.word	0x0800e2f1
 800e280:	0800e311 	.word	0x0800e311
 800e284:	0800e311 	.word	0x0800e311
 800e288:	0800e311 	.word	0x0800e311
 800e28c:	0800e311 	.word	0x0800e311
 800e290:	0800e311 	.word	0x0800e311
 800e294:	0800e311 	.word	0x0800e311
 800e298:	0800e311 	.word	0x0800e311
 800e29c:	0800e2f9 	.word	0x0800e2f9
 800e2a0:	0800e311 	.word	0x0800e311
 800e2a4:	0800e311 	.word	0x0800e311
 800e2a8:	0800e311 	.word	0x0800e311
 800e2ac:	0800e311 	.word	0x0800e311
 800e2b0:	0800e311 	.word	0x0800e311
 800e2b4:	0800e311 	.word	0x0800e311
 800e2b8:	0800e311 	.word	0x0800e311
 800e2bc:	0800e301 	.word	0x0800e301
 800e2c0:	0800e311 	.word	0x0800e311
 800e2c4:	0800e311 	.word	0x0800e311
 800e2c8:	0800e311 	.word	0x0800e311
 800e2cc:	0800e311 	.word	0x0800e311
 800e2d0:	0800e311 	.word	0x0800e311
 800e2d4:	0800e311 	.word	0x0800e311
 800e2d8:	0800e311 	.word	0x0800e311
 800e2dc:	0800e309 	.word	0x0800e309
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e0bc      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e2e8:	2304      	movs	r3, #4
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e0b8      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e2f0:	2308      	movs	r3, #8
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e0b4      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e2f8:	2310      	movs	r3, #16
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e0b0      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e300:	2320      	movs	r3, #32
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e0ac      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e308:	2340      	movs	r3, #64	; 0x40
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30e:	e0a8      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e310:	2380      	movs	r3, #128	; 0x80
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e316:	e0a4      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a8f      	ldr	r2, [pc, #572]	; (800e55c <UART_SetConfig+0x6a0>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d130      	bne.n	800e384 <UART_SetConfig+0x4c8>
 800e322:	4b8d      	ldr	r3, [pc, #564]	; (800e558 <UART_SetConfig+0x69c>)
 800e324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e326:	f003 0307 	and.w	r3, r3, #7
 800e32a:	2b05      	cmp	r3, #5
 800e32c:	d826      	bhi.n	800e37c <UART_SetConfig+0x4c0>
 800e32e:	a201      	add	r2, pc, #4	; (adr r2, 800e334 <UART_SetConfig+0x478>)
 800e330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e334:	0800e34d 	.word	0x0800e34d
 800e338:	0800e355 	.word	0x0800e355
 800e33c:	0800e35d 	.word	0x0800e35d
 800e340:	0800e365 	.word	0x0800e365
 800e344:	0800e36d 	.word	0x0800e36d
 800e348:	0800e375 	.word	0x0800e375
 800e34c:	2300      	movs	r3, #0
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e086      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e354:	2304      	movs	r3, #4
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e082      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e35c:	2308      	movs	r3, #8
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e07e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e364:	2310      	movs	r3, #16
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e07a      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e36c:	2320      	movs	r3, #32
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e372:	e076      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e374:	2340      	movs	r3, #64	; 0x40
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37a:	e072      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e37c:	2380      	movs	r3, #128	; 0x80
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e382:	e06e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a75      	ldr	r2, [pc, #468]	; (800e560 <UART_SetConfig+0x6a4>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d130      	bne.n	800e3f0 <UART_SetConfig+0x534>
 800e38e:	4b72      	ldr	r3, [pc, #456]	; (800e558 <UART_SetConfig+0x69c>)
 800e390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e392:	f003 0307 	and.w	r3, r3, #7
 800e396:	2b05      	cmp	r3, #5
 800e398:	d826      	bhi.n	800e3e8 <UART_SetConfig+0x52c>
 800e39a:	a201      	add	r2, pc, #4	; (adr r2, 800e3a0 <UART_SetConfig+0x4e4>)
 800e39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a0:	0800e3b9 	.word	0x0800e3b9
 800e3a4:	0800e3c1 	.word	0x0800e3c1
 800e3a8:	0800e3c9 	.word	0x0800e3c9
 800e3ac:	0800e3d1 	.word	0x0800e3d1
 800e3b0:	0800e3d9 	.word	0x0800e3d9
 800e3b4:	0800e3e1 	.word	0x0800e3e1
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e050      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3c0:	2304      	movs	r3, #4
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e04c      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3c8:	2308      	movs	r3, #8
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e048      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3d0:	2310      	movs	r3, #16
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d6:	e044      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3d8:	2320      	movs	r3, #32
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3de:	e040      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3e0:	2340      	movs	r3, #64	; 0x40
 800e3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e6:	e03c      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3e8:	2380      	movs	r3, #128	; 0x80
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ee:	e038      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4a5b      	ldr	r2, [pc, #364]	; (800e564 <UART_SetConfig+0x6a8>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d130      	bne.n	800e45c <UART_SetConfig+0x5a0>
 800e3fa:	4b57      	ldr	r3, [pc, #348]	; (800e558 <UART_SetConfig+0x69c>)
 800e3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3fe:	f003 0307 	and.w	r3, r3, #7
 800e402:	2b05      	cmp	r3, #5
 800e404:	d826      	bhi.n	800e454 <UART_SetConfig+0x598>
 800e406:	a201      	add	r2, pc, #4	; (adr r2, 800e40c <UART_SetConfig+0x550>)
 800e408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e40c:	0800e425 	.word	0x0800e425
 800e410:	0800e42d 	.word	0x0800e42d
 800e414:	0800e435 	.word	0x0800e435
 800e418:	0800e43d 	.word	0x0800e43d
 800e41c:	0800e445 	.word	0x0800e445
 800e420:	0800e44d 	.word	0x0800e44d
 800e424:	2302      	movs	r3, #2
 800e426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42a:	e01a      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e42c:	2304      	movs	r3, #4
 800e42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e432:	e016      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e434:	2308      	movs	r3, #8
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e012      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e43c:	2310      	movs	r3, #16
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e442:	e00e      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e444:	2320      	movs	r3, #32
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e00a      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e44c:	2340      	movs	r3, #64	; 0x40
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e006      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e454:	2380      	movs	r3, #128	; 0x80
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e002      	b.n	800e462 <UART_SetConfig+0x5a6>
 800e45c:	2380      	movs	r3, #128	; 0x80
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a3f      	ldr	r2, [pc, #252]	; (800e564 <UART_SetConfig+0x6a8>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	f040 80f8 	bne.w	800e65e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e46e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e472:	2b20      	cmp	r3, #32
 800e474:	dc46      	bgt.n	800e504 <UART_SetConfig+0x648>
 800e476:	2b02      	cmp	r3, #2
 800e478:	f2c0 8082 	blt.w	800e580 <UART_SetConfig+0x6c4>
 800e47c:	3b02      	subs	r3, #2
 800e47e:	2b1e      	cmp	r3, #30
 800e480:	d87e      	bhi.n	800e580 <UART_SetConfig+0x6c4>
 800e482:	a201      	add	r2, pc, #4	; (adr r2, 800e488 <UART_SetConfig+0x5cc>)
 800e484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e488:	0800e50b 	.word	0x0800e50b
 800e48c:	0800e581 	.word	0x0800e581
 800e490:	0800e513 	.word	0x0800e513
 800e494:	0800e581 	.word	0x0800e581
 800e498:	0800e581 	.word	0x0800e581
 800e49c:	0800e581 	.word	0x0800e581
 800e4a0:	0800e523 	.word	0x0800e523
 800e4a4:	0800e581 	.word	0x0800e581
 800e4a8:	0800e581 	.word	0x0800e581
 800e4ac:	0800e581 	.word	0x0800e581
 800e4b0:	0800e581 	.word	0x0800e581
 800e4b4:	0800e581 	.word	0x0800e581
 800e4b8:	0800e581 	.word	0x0800e581
 800e4bc:	0800e581 	.word	0x0800e581
 800e4c0:	0800e533 	.word	0x0800e533
 800e4c4:	0800e581 	.word	0x0800e581
 800e4c8:	0800e581 	.word	0x0800e581
 800e4cc:	0800e581 	.word	0x0800e581
 800e4d0:	0800e581 	.word	0x0800e581
 800e4d4:	0800e581 	.word	0x0800e581
 800e4d8:	0800e581 	.word	0x0800e581
 800e4dc:	0800e581 	.word	0x0800e581
 800e4e0:	0800e581 	.word	0x0800e581
 800e4e4:	0800e581 	.word	0x0800e581
 800e4e8:	0800e581 	.word	0x0800e581
 800e4ec:	0800e581 	.word	0x0800e581
 800e4f0:	0800e581 	.word	0x0800e581
 800e4f4:	0800e581 	.word	0x0800e581
 800e4f8:	0800e581 	.word	0x0800e581
 800e4fc:	0800e581 	.word	0x0800e581
 800e500:	0800e573 	.word	0x0800e573
 800e504:	2b40      	cmp	r3, #64	; 0x40
 800e506:	d037      	beq.n	800e578 <UART_SetConfig+0x6bc>
 800e508:	e03a      	b.n	800e580 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e50a:	f7fc fb05 	bl	800ab18 <HAL_RCCEx_GetD3PCLK1Freq>
 800e50e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e510:	e03c      	b.n	800e58c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e516:	4618      	mov	r0, r3
 800e518:	f7fc fb14 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e520:	e034      	b.n	800e58c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e522:	f107 0318 	add.w	r3, r7, #24
 800e526:	4618      	mov	r0, r3
 800e528:	f7fc fc60 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e530:	e02c      	b.n	800e58c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e532:	4b09      	ldr	r3, [pc, #36]	; (800e558 <UART_SetConfig+0x69c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f003 0320 	and.w	r3, r3, #32
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d016      	beq.n	800e56c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e53e:	4b06      	ldr	r3, [pc, #24]	; (800e558 <UART_SetConfig+0x69c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	08db      	lsrs	r3, r3, #3
 800e544:	f003 0303 	and.w	r3, r3, #3
 800e548:	4a07      	ldr	r2, [pc, #28]	; (800e568 <UART_SetConfig+0x6ac>)
 800e54a:	fa22 f303 	lsr.w	r3, r2, r3
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e550:	e01c      	b.n	800e58c <UART_SetConfig+0x6d0>
 800e552:	bf00      	nop
 800e554:	40011400 	.word	0x40011400
 800e558:	58024400 	.word	0x58024400
 800e55c:	40007800 	.word	0x40007800
 800e560:	40007c00 	.word	0x40007c00
 800e564:	58000c00 	.word	0x58000c00
 800e568:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e56c:	4b9d      	ldr	r3, [pc, #628]	; (800e7e4 <UART_SetConfig+0x928>)
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e570:	e00c      	b.n	800e58c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e572:	4b9d      	ldr	r3, [pc, #628]	; (800e7e8 <UART_SetConfig+0x92c>)
 800e574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e576:	e009      	b.n	800e58c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e57e:	e005      	b.n	800e58c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e580:	2300      	movs	r3, #0
 800e582:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e58a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f000 81de 	beq.w	800e950 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e598:	4a94      	ldr	r2, [pc, #592]	; (800e7ec <UART_SetConfig+0x930>)
 800e59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	005b      	lsls	r3, r3, #1
 800e5b0:	4413      	add	r3, r2
 800e5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d305      	bcc.n	800e5c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d903      	bls.n	800e5cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e5ca:	e1c1      	b.n	800e950 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	60bb      	str	r3, [r7, #8]
 800e5d2:	60fa      	str	r2, [r7, #12]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d8:	4a84      	ldr	r2, [pc, #528]	; (800e7ec <UART_SetConfig+0x930>)
 800e5da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	603b      	str	r3, [r7, #0]
 800e5e4:	607a      	str	r2, [r7, #4]
 800e5e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5ee:	f7f1 fe73 	bl	80002d8 <__aeabi_uldivmod>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	f04f 0200 	mov.w	r2, #0
 800e5fe:	f04f 0300 	mov.w	r3, #0
 800e602:	020b      	lsls	r3, r1, #8
 800e604:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e608:	0202      	lsls	r2, r0, #8
 800e60a:	6979      	ldr	r1, [r7, #20]
 800e60c:	6849      	ldr	r1, [r1, #4]
 800e60e:	0849      	lsrs	r1, r1, #1
 800e610:	2000      	movs	r0, #0
 800e612:	460c      	mov	r4, r1
 800e614:	4605      	mov	r5, r0
 800e616:	eb12 0804 	adds.w	r8, r2, r4
 800e61a:	eb43 0905 	adc.w	r9, r3, r5
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	469a      	mov	sl, r3
 800e626:	4693      	mov	fp, r2
 800e628:	4652      	mov	r2, sl
 800e62a:	465b      	mov	r3, fp
 800e62c:	4640      	mov	r0, r8
 800e62e:	4649      	mov	r1, r9
 800e630:	f7f1 fe52 	bl	80002d8 <__aeabi_uldivmod>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	4613      	mov	r3, r2
 800e63a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e642:	d308      	bcc.n	800e656 <UART_SetConfig+0x79a>
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e64a:	d204      	bcs.n	800e656 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e652:	60da      	str	r2, [r3, #12]
 800e654:	e17c      	b.n	800e950 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e65c:	e178      	b.n	800e950 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e666:	f040 80c5 	bne.w	800e7f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e66a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e66e:	2b20      	cmp	r3, #32
 800e670:	dc48      	bgt.n	800e704 <UART_SetConfig+0x848>
 800e672:	2b00      	cmp	r3, #0
 800e674:	db7b      	blt.n	800e76e <UART_SetConfig+0x8b2>
 800e676:	2b20      	cmp	r3, #32
 800e678:	d879      	bhi.n	800e76e <UART_SetConfig+0x8b2>
 800e67a:	a201      	add	r2, pc, #4	; (adr r2, 800e680 <UART_SetConfig+0x7c4>)
 800e67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e680:	0800e70b 	.word	0x0800e70b
 800e684:	0800e713 	.word	0x0800e713
 800e688:	0800e76f 	.word	0x0800e76f
 800e68c:	0800e76f 	.word	0x0800e76f
 800e690:	0800e71b 	.word	0x0800e71b
 800e694:	0800e76f 	.word	0x0800e76f
 800e698:	0800e76f 	.word	0x0800e76f
 800e69c:	0800e76f 	.word	0x0800e76f
 800e6a0:	0800e72b 	.word	0x0800e72b
 800e6a4:	0800e76f 	.word	0x0800e76f
 800e6a8:	0800e76f 	.word	0x0800e76f
 800e6ac:	0800e76f 	.word	0x0800e76f
 800e6b0:	0800e76f 	.word	0x0800e76f
 800e6b4:	0800e76f 	.word	0x0800e76f
 800e6b8:	0800e76f 	.word	0x0800e76f
 800e6bc:	0800e76f 	.word	0x0800e76f
 800e6c0:	0800e73b 	.word	0x0800e73b
 800e6c4:	0800e76f 	.word	0x0800e76f
 800e6c8:	0800e76f 	.word	0x0800e76f
 800e6cc:	0800e76f 	.word	0x0800e76f
 800e6d0:	0800e76f 	.word	0x0800e76f
 800e6d4:	0800e76f 	.word	0x0800e76f
 800e6d8:	0800e76f 	.word	0x0800e76f
 800e6dc:	0800e76f 	.word	0x0800e76f
 800e6e0:	0800e76f 	.word	0x0800e76f
 800e6e4:	0800e76f 	.word	0x0800e76f
 800e6e8:	0800e76f 	.word	0x0800e76f
 800e6ec:	0800e76f 	.word	0x0800e76f
 800e6f0:	0800e76f 	.word	0x0800e76f
 800e6f4:	0800e76f 	.word	0x0800e76f
 800e6f8:	0800e76f 	.word	0x0800e76f
 800e6fc:	0800e76f 	.word	0x0800e76f
 800e700:	0800e761 	.word	0x0800e761
 800e704:	2b40      	cmp	r3, #64	; 0x40
 800e706:	d02e      	beq.n	800e766 <UART_SetConfig+0x8aa>
 800e708:	e031      	b.n	800e76e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e70a:	f7fa fdc1 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800e70e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e710:	e033      	b.n	800e77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e712:	f7fa fdd3 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800e716:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e718:	e02f      	b.n	800e77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fc fa10 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e728:	e027      	b.n	800e77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e72a:	f107 0318 	add.w	r3, r7, #24
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fc fb5c 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e738:	e01f      	b.n	800e77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e73a:	4b2d      	ldr	r3, [pc, #180]	; (800e7f0 <UART_SetConfig+0x934>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0320 	and.w	r3, r3, #32
 800e742:	2b00      	cmp	r3, #0
 800e744:	d009      	beq.n	800e75a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e746:	4b2a      	ldr	r3, [pc, #168]	; (800e7f0 <UART_SetConfig+0x934>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	08db      	lsrs	r3, r3, #3
 800e74c:	f003 0303 	and.w	r3, r3, #3
 800e750:	4a24      	ldr	r2, [pc, #144]	; (800e7e4 <UART_SetConfig+0x928>)
 800e752:	fa22 f303 	lsr.w	r3, r2, r3
 800e756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e758:	e00f      	b.n	800e77a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e75a:	4b22      	ldr	r3, [pc, #136]	; (800e7e4 <UART_SetConfig+0x928>)
 800e75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75e:	e00c      	b.n	800e77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e760:	4b21      	ldr	r3, [pc, #132]	; (800e7e8 <UART_SetConfig+0x92c>)
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e764:	e009      	b.n	800e77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e76c:	e005      	b.n	800e77a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e76e:	2300      	movs	r3, #0
 800e770:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f000 80e7 	beq.w	800e950 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	4a19      	ldr	r2, [pc, #100]	; (800e7ec <UART_SetConfig+0x930>)
 800e788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e78c:	461a      	mov	r2, r3
 800e78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e790:	fbb3 f3f2 	udiv	r3, r3, r2
 800e794:	005a      	lsls	r2, r3, #1
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	085b      	lsrs	r3, r3, #1
 800e79c:	441a      	add	r2, r3
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7aa:	2b0f      	cmp	r3, #15
 800e7ac:	d916      	bls.n	800e7dc <UART_SetConfig+0x920>
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7b4:	d212      	bcs.n	800e7dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	f023 030f 	bic.w	r3, r3, #15
 800e7be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c2:	085b      	lsrs	r3, r3, #1
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	f003 0307 	and.w	r3, r3, #7
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e7d8:	60da      	str	r2, [r3, #12]
 800e7da:	e0b9      	b.n	800e950 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7e2:	e0b5      	b.n	800e950 <UART_SetConfig+0xa94>
 800e7e4:	03d09000 	.word	0x03d09000
 800e7e8:	003d0900 	.word	0x003d0900
 800e7ec:	0800fe7c 	.word	0x0800fe7c
 800e7f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7f8:	2b20      	cmp	r3, #32
 800e7fa:	dc49      	bgt.n	800e890 <UART_SetConfig+0x9d4>
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db7c      	blt.n	800e8fa <UART_SetConfig+0xa3e>
 800e800:	2b20      	cmp	r3, #32
 800e802:	d87a      	bhi.n	800e8fa <UART_SetConfig+0xa3e>
 800e804:	a201      	add	r2, pc, #4	; (adr r2, 800e80c <UART_SetConfig+0x950>)
 800e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80a:	bf00      	nop
 800e80c:	0800e897 	.word	0x0800e897
 800e810:	0800e89f 	.word	0x0800e89f
 800e814:	0800e8fb 	.word	0x0800e8fb
 800e818:	0800e8fb 	.word	0x0800e8fb
 800e81c:	0800e8a7 	.word	0x0800e8a7
 800e820:	0800e8fb 	.word	0x0800e8fb
 800e824:	0800e8fb 	.word	0x0800e8fb
 800e828:	0800e8fb 	.word	0x0800e8fb
 800e82c:	0800e8b7 	.word	0x0800e8b7
 800e830:	0800e8fb 	.word	0x0800e8fb
 800e834:	0800e8fb 	.word	0x0800e8fb
 800e838:	0800e8fb 	.word	0x0800e8fb
 800e83c:	0800e8fb 	.word	0x0800e8fb
 800e840:	0800e8fb 	.word	0x0800e8fb
 800e844:	0800e8fb 	.word	0x0800e8fb
 800e848:	0800e8fb 	.word	0x0800e8fb
 800e84c:	0800e8c7 	.word	0x0800e8c7
 800e850:	0800e8fb 	.word	0x0800e8fb
 800e854:	0800e8fb 	.word	0x0800e8fb
 800e858:	0800e8fb 	.word	0x0800e8fb
 800e85c:	0800e8fb 	.word	0x0800e8fb
 800e860:	0800e8fb 	.word	0x0800e8fb
 800e864:	0800e8fb 	.word	0x0800e8fb
 800e868:	0800e8fb 	.word	0x0800e8fb
 800e86c:	0800e8fb 	.word	0x0800e8fb
 800e870:	0800e8fb 	.word	0x0800e8fb
 800e874:	0800e8fb 	.word	0x0800e8fb
 800e878:	0800e8fb 	.word	0x0800e8fb
 800e87c:	0800e8fb 	.word	0x0800e8fb
 800e880:	0800e8fb 	.word	0x0800e8fb
 800e884:	0800e8fb 	.word	0x0800e8fb
 800e888:	0800e8fb 	.word	0x0800e8fb
 800e88c:	0800e8ed 	.word	0x0800e8ed
 800e890:	2b40      	cmp	r3, #64	; 0x40
 800e892:	d02e      	beq.n	800e8f2 <UART_SetConfig+0xa36>
 800e894:	e031      	b.n	800e8fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e896:	f7fa fcfb 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800e89a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e89c:	e033      	b.n	800e906 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e89e:	f7fa fd0d 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800e8a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8a4:	e02f      	b.n	800e906 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fc f94a 	bl	800ab44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b4:	e027      	b.n	800e906 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8b6:	f107 0318 	add.w	r3, r7, #24
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fc fa96 	bl	800adec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8c4:	e01f      	b.n	800e906 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8c6:	4b2d      	ldr	r3, [pc, #180]	; (800e97c <UART_SetConfig+0xac0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f003 0320 	and.w	r3, r3, #32
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d009      	beq.n	800e8e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8d2:	4b2a      	ldr	r3, [pc, #168]	; (800e97c <UART_SetConfig+0xac0>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	08db      	lsrs	r3, r3, #3
 800e8d8:	f003 0303 	and.w	r3, r3, #3
 800e8dc:	4a28      	ldr	r2, [pc, #160]	; (800e980 <UART_SetConfig+0xac4>)
 800e8de:	fa22 f303 	lsr.w	r3, r2, r3
 800e8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8e4:	e00f      	b.n	800e906 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e8e6:	4b26      	ldr	r3, [pc, #152]	; (800e980 <UART_SetConfig+0xac4>)
 800e8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ea:	e00c      	b.n	800e906 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8ec:	4b25      	ldr	r3, [pc, #148]	; (800e984 <UART_SetConfig+0xac8>)
 800e8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f0:	e009      	b.n	800e906 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f8:	e005      	b.n	800e906 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e904:	bf00      	nop
    }

    if (pclk != 0U)
 800e906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d021      	beq.n	800e950 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e910:	4a1d      	ldr	r2, [pc, #116]	; (800e988 <UART_SetConfig+0xacc>)
 800e912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e916:	461a      	mov	r2, r3
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	085b      	lsrs	r3, r3, #1
 800e924:	441a      	add	r2, r3
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e92e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e932:	2b0f      	cmp	r3, #15
 800e934:	d909      	bls.n	800e94a <UART_SetConfig+0xa8e>
 800e936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e93c:	d205      	bcs.n	800e94a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e940:	b29a      	uxth	r2, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	60da      	str	r2, [r3, #12]
 800e948:	e002      	b.n	800e950 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	2201      	movs	r2, #1
 800e954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	2200      	movs	r2, #0
 800e964:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2200      	movs	r2, #0
 800e96a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e96c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e970:	4618      	mov	r0, r3
 800e972:	3748      	adds	r7, #72	; 0x48
 800e974:	46bd      	mov	sp, r7
 800e976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e97a:	bf00      	nop
 800e97c:	58024400 	.word	0x58024400
 800e980:	03d09000 	.word	0x03d09000
 800e984:	003d0900 	.word	0x003d0900
 800e988:	0800fe7c 	.word	0x0800fe7c

0800e98c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e998:	f003 0301 	and.w	r3, r3, #1
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00a      	beq.n	800e9b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	430a      	orrs	r2, r1
 800e9b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ba:	f003 0302 	and.w	r3, r3, #2
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00a      	beq.n	800e9d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	430a      	orrs	r2, r1
 800e9d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9dc:	f003 0304 	and.w	r3, r3, #4
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00a      	beq.n	800e9fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	430a      	orrs	r2, r1
 800e9f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fe:	f003 0308 	and.w	r3, r3, #8
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00a      	beq.n	800ea1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	430a      	orrs	r2, r1
 800ea1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea20:	f003 0310 	and.w	r3, r3, #16
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00a      	beq.n	800ea3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	430a      	orrs	r2, r1
 800ea3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea42:	f003 0320 	and.w	r3, r3, #32
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00a      	beq.n	800ea60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	430a      	orrs	r2, r1
 800ea5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d01a      	beq.n	800eaa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea8a:	d10a      	bne.n	800eaa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	430a      	orrs	r2, r1
 800eac2:	605a      	str	r2, [r3, #4]
  }
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eae0:	f7f3 fef4 	bl	80028cc <HAL_GetTick>
 800eae4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 0308 	and.w	r3, r3, #8
 800eaf0:	2b08      	cmp	r3, #8
 800eaf2:	d10e      	bne.n	800eb12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eaf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2200      	movs	r2, #0
 800eafe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f82f 	bl	800eb66 <UART_WaitOnFlagUntilTimeout>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	e025      	b.n	800eb5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	2b04      	cmp	r3, #4
 800eb1e:	d10e      	bne.n	800eb3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f819 	bl	800eb66 <UART_WaitOnFlagUntilTimeout>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e00f      	b.n	800eb5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2220      	movs	r2, #32
 800eb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2220      	movs	r2, #32
 800eb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b09c      	sub	sp, #112	; 0x70
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	60f8      	str	r0, [r7, #12]
 800eb6e:	60b9      	str	r1, [r7, #8]
 800eb70:	603b      	str	r3, [r7, #0]
 800eb72:	4613      	mov	r3, r2
 800eb74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb76:	e0a9      	b.n	800eccc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb7e:	f000 80a5 	beq.w	800eccc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb82:	f7f3 fea3 	bl	80028cc <HAL_GetTick>
 800eb86:	4602      	mov	r2, r0
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d302      	bcc.n	800eb98 <UART_WaitOnFlagUntilTimeout+0x32>
 800eb92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d140      	bne.n	800ec1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eba0:	e853 3f00 	ldrex	r3, [r3]
 800eba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ebac:	667b      	str	r3, [r7, #100]	; 0x64
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebbe:	e841 2300 	strex	r3, r2, [r1]
 800ebc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ebc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1e6      	bne.n	800eb98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3308      	adds	r3, #8
 800ebd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd4:	e853 3f00 	ldrex	r3, [r3]
 800ebd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	f023 0301 	bic.w	r3, r3, #1
 800ebe0:	663b      	str	r3, [r7, #96]	; 0x60
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebea:	64ba      	str	r2, [r7, #72]	; 0x48
 800ebec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebf2:	e841 2300 	strex	r3, r2, [r1]
 800ebf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ebf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1e5      	bne.n	800ebca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2220      	movs	r2, #32
 800ec02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec16:	2303      	movs	r3, #3
 800ec18:	e069      	b.n	800ecee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f003 0304 	and.w	r3, r3, #4
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d051      	beq.n	800eccc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec36:	d149      	bne.n	800eccc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4a:	e853 3f00 	ldrex	r3, [r3]
 800ec4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec60:	637b      	str	r3, [r7, #52]	; 0x34
 800ec62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec68:	e841 2300 	strex	r3, r2, [r1]
 800ec6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1e6      	bne.n	800ec42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3308      	adds	r3, #8
 800ec7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	e853 3f00 	ldrex	r3, [r3]
 800ec82:	613b      	str	r3, [r7, #16]
   return(result);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	f023 0301 	bic.w	r3, r3, #1
 800ec8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3308      	adds	r3, #8
 800ec92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec94:	623a      	str	r2, [r7, #32]
 800ec96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec98:	69f9      	ldr	r1, [r7, #28]
 800ec9a:	6a3a      	ldr	r2, [r7, #32]
 800ec9c:	e841 2300 	strex	r3, r2, [r1]
 800eca0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1e5      	bne.n	800ec74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2220      	movs	r2, #32
 800ecac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2220      	movs	r2, #32
 800ecb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2220      	movs	r2, #32
 800ecbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e010      	b.n	800ecee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	69da      	ldr	r2, [r3, #28]
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	bf0c      	ite	eq
 800ecdc:	2301      	moveq	r3, #1
 800ecde:	2300      	movne	r3, #0
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	461a      	mov	r2, r3
 800ece4:	79fb      	ldrb	r3, [r7, #7]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	f43f af46 	beq.w	800eb78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3770      	adds	r7, #112	; 0x70
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
	...

0800ecf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b0a3      	sub	sp, #140	; 0x8c
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	4613      	mov	r3, r2
 800ed04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	68ba      	ldr	r2, [r7, #8]
 800ed0a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	88fa      	ldrh	r2, [r7, #6]
 800ed10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	88fa      	ldrh	r2, [r7, #6]
 800ed18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed2a:	d10e      	bne.n	800ed4a <UART_Start_Receive_IT+0x52>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d105      	bne.n	800ed40 <UART_Start_Receive_IT+0x48>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed3e:	e02d      	b.n	800ed9c <UART_Start_Receive_IT+0xa4>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	22ff      	movs	r2, #255	; 0xff
 800ed44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed48:	e028      	b.n	800ed9c <UART_Start_Receive_IT+0xa4>
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d10d      	bne.n	800ed6e <UART_Start_Receive_IT+0x76>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d104      	bne.n	800ed64 <UART_Start_Receive_IT+0x6c>
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	22ff      	movs	r2, #255	; 0xff
 800ed5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed62:	e01b      	b.n	800ed9c <UART_Start_Receive_IT+0xa4>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	227f      	movs	r2, #127	; 0x7f
 800ed68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed6c:	e016      	b.n	800ed9c <UART_Start_Receive_IT+0xa4>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed76:	d10d      	bne.n	800ed94 <UART_Start_Receive_IT+0x9c>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	691b      	ldr	r3, [r3, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d104      	bne.n	800ed8a <UART_Start_Receive_IT+0x92>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	227f      	movs	r2, #127	; 0x7f
 800ed84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed88:	e008      	b.n	800ed9c <UART_Start_Receive_IT+0xa4>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	223f      	movs	r2, #63	; 0x3f
 800ed8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed92:	e003      	b.n	800ed9c <UART_Start_Receive_IT+0xa4>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2222      	movs	r2, #34	; 0x22
 800eda8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3308      	adds	r3, #8
 800edb2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edb6:	e853 3f00 	ldrex	r3, [r3]
 800edba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800edbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edbe:	f043 0301 	orr.w	r3, r3, #1
 800edc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3308      	adds	r3, #8
 800edcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800edd0:	673a      	str	r2, [r7, #112]	; 0x70
 800edd2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800edd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edd8:	e841 2300 	strex	r3, r2, [r1]
 800eddc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800edde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1e3      	bne.n	800edac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ede8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edec:	d153      	bne.n	800ee96 <UART_Start_Receive_IT+0x19e>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800edf4:	88fa      	ldrh	r2, [r7, #6]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d34d      	bcc.n	800ee96 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee02:	d107      	bne.n	800ee14 <UART_Start_Receive_IT+0x11c>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d103      	bne.n	800ee14 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4a4b      	ldr	r2, [pc, #300]	; (800ef3c <UART_Start_Receive_IT+0x244>)
 800ee10:	671a      	str	r2, [r3, #112]	; 0x70
 800ee12:	e002      	b.n	800ee1a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	4a4a      	ldr	r2, [pc, #296]	; (800ef40 <UART_Start_Receive_IT+0x248>)
 800ee18:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d01a      	beq.n	800ee60 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee4e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee54:	e841 2300 	strex	r3, r2, [r1]
 800ee58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1e4      	bne.n	800ee2a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3308      	adds	r3, #8
 800ee66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6a:	e853 3f00 	ldrex	r3, [r3]
 800ee6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee76:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3308      	adds	r3, #8
 800ee7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ee80:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee88:	e841 2300 	strex	r3, r2, [r1]
 800ee8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1e5      	bne.n	800ee60 <UART_Start_Receive_IT+0x168>
 800ee94:	e04a      	b.n	800ef2c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee9e:	d107      	bne.n	800eeb0 <UART_Start_Receive_IT+0x1b8>
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d103      	bne.n	800eeb0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4a26      	ldr	r2, [pc, #152]	; (800ef44 <UART_Start_Receive_IT+0x24c>)
 800eeac:	671a      	str	r2, [r3, #112]	; 0x70
 800eeae:	e002      	b.n	800eeb6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4a25      	ldr	r2, [pc, #148]	; (800ef48 <UART_Start_Receive_IT+0x250>)
 800eeb4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	691b      	ldr	r3, [r3, #16]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d019      	beq.n	800eefa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eece:	e853 3f00 	ldrex	r3, [r3]
 800eed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eeda:	677b      	str	r3, [r7, #116]	; 0x74
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	461a      	mov	r2, r3
 800eee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eee4:	637b      	str	r3, [r7, #52]	; 0x34
 800eee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eeea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeec:	e841 2300 	strex	r3, r2, [r1]
 800eef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1e6      	bne.n	800eec6 <UART_Start_Receive_IT+0x1ce>
 800eef8:	e018      	b.n	800ef2c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	e853 3f00 	ldrex	r3, [r3]
 800ef06:	613b      	str	r3, [r7, #16]
   return(result);
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	f043 0320 	orr.w	r3, r3, #32
 800ef0e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	461a      	mov	r2, r3
 800ef16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef18:	623b      	str	r3, [r7, #32]
 800ef1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1c:	69f9      	ldr	r1, [r7, #28]
 800ef1e:	6a3a      	ldr	r2, [r7, #32]
 800ef20:	e841 2300 	strex	r3, r2, [r1]
 800ef24:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1e6      	bne.n	800eefa <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	378c      	adds	r7, #140	; 0x8c
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	0800f655 	.word	0x0800f655
 800ef40:	0800f35d 	.word	0x0800f35d
 800ef44:	0800f1fb 	.word	0x0800f1fb
 800ef48:	0800f09b 	.word	0x0800f09b

0800ef4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b095      	sub	sp, #84	; 0x54
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef5c:	e853 3f00 	ldrex	r3, [r3]
 800ef60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef72:	643b      	str	r3, [r7, #64]	; 0x40
 800ef74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef7a:	e841 2300 	strex	r3, r2, [r1]
 800ef7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1e6      	bne.n	800ef54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	3308      	adds	r3, #8
 800ef8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef8e:	6a3b      	ldr	r3, [r7, #32]
 800ef90:	e853 3f00 	ldrex	r3, [r3]
 800ef94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef96:	69fa      	ldr	r2, [r7, #28]
 800ef98:	4b1e      	ldr	r3, [pc, #120]	; (800f014 <UART_EndRxTransfer+0xc8>)
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3308      	adds	r3, #8
 800efa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efae:	e841 2300 	strex	r3, r2, [r1]
 800efb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e5      	bne.n	800ef86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d118      	bne.n	800eff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	e853 3f00 	ldrex	r3, [r3]
 800efce:	60bb      	str	r3, [r7, #8]
   return(result);
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	f023 0310 	bic.w	r3, r3, #16
 800efd6:	647b      	str	r3, [r7, #68]	; 0x44
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	461a      	mov	r2, r3
 800efde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efe0:	61bb      	str	r3, [r7, #24]
 800efe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe4:	6979      	ldr	r1, [r7, #20]
 800efe6:	69ba      	ldr	r2, [r7, #24]
 800efe8:	e841 2300 	strex	r3, r2, [r1]
 800efec:	613b      	str	r3, [r7, #16]
   return(result);
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1e6      	bne.n	800efc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2220      	movs	r2, #32
 800eff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f008:	bf00      	nop
 800f00a:	3754      	adds	r7, #84	; 0x54
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr
 800f014:	effffffe 	.word	0xeffffffe

0800f018 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f036:	68f8      	ldr	r0, [r7, #12]
 800f038:	f7fe ff2a 	bl	800de90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	e853 3f00 	ldrex	r3, [r3]
 800f058:	60bb      	str	r3, [r7, #8]
   return(result);
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f060:	61fb      	str	r3, [r7, #28]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	61bb      	str	r3, [r7, #24]
 800f06c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06e:	6979      	ldr	r1, [r7, #20]
 800f070:	69ba      	ldr	r2, [r7, #24]
 800f072:	e841 2300 	strex	r3, r2, [r1]
 800f076:	613b      	str	r3, [r7, #16]
   return(result);
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1e6      	bne.n	800f04c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2220      	movs	r2, #32
 800f082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2200      	movs	r2, #0
 800f08a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7fe fef5 	bl	800de7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f092:	bf00      	nop
 800f094:	3720      	adds	r7, #32
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b096      	sub	sp, #88	; 0x58
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0b2:	2b22      	cmp	r3, #34	; 0x22
 800f0b4:	f040 8095 	bne.w	800f1e2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f0c6:	b2d9      	uxtb	r1, r3
 800f0c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0d2:	400a      	ands	r2, r1
 800f0d4:	b2d2      	uxtb	r2, r2
 800f0d6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0dc:	1c5a      	adds	r2, r3, #1
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d178      	bne.n	800f1f2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f108:	e853 3f00 	ldrex	r3, [r3]
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f114:	653b      	str	r3, [r7, #80]	; 0x50
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	461a      	mov	r2, r3
 800f11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11e:	647b      	str	r3, [r7, #68]	; 0x44
 800f120:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f126:	e841 2300 	strex	r3, r2, [r1]
 800f12a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1e6      	bne.n	800f100 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	3308      	adds	r3, #8
 800f138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	e853 3f00 	ldrex	r3, [r3]
 800f140:	623b      	str	r3, [r7, #32]
   return(result);
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	f023 0301 	bic.w	r3, r3, #1
 800f148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	3308      	adds	r3, #8
 800f150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f152:	633a      	str	r2, [r7, #48]	; 0x30
 800f154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f15a:	e841 2300 	strex	r3, r2, [r1]
 800f15e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e5      	bne.n	800f132 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2220      	movs	r2, #32
 800f16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d12e      	bne.n	800f1da <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	e853 3f00 	ldrex	r3, [r3]
 800f18e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f023 0310 	bic.w	r3, r3, #16
 800f196:	64bb      	str	r3, [r7, #72]	; 0x48
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
 800f19e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a4:	69b9      	ldr	r1, [r7, #24]
 800f1a6:	69fa      	ldr	r2, [r7, #28]
 800f1a8:	e841 2300 	strex	r3, r2, [r1]
 800f1ac:	617b      	str	r3, [r7, #20]
   return(result);
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1e6      	bne.n	800f182 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	69db      	ldr	r3, [r3, #28]
 800f1ba:	f003 0310 	and.w	r3, r3, #16
 800f1be:	2b10      	cmp	r3, #16
 800f1c0:	d103      	bne.n	800f1ca <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2210      	movs	r2, #16
 800f1c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7fe fe66 	bl	800dea4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1d8:	e00b      	b.n	800f1f2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7f1 fdfa 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 800f1e0:	e007      	b.n	800f1f2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	699a      	ldr	r2, [r3, #24]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f042 0208 	orr.w	r2, r2, #8
 800f1f0:	619a      	str	r2, [r3, #24]
}
 800f1f2:	bf00      	nop
 800f1f4:	3758      	adds	r7, #88	; 0x58
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b096      	sub	sp, #88	; 0x58
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f208:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f212:	2b22      	cmp	r3, #34	; 0x22
 800f214:	f040 8095 	bne.w	800f342 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f226:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f228:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f22c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f230:	4013      	ands	r3, r2
 800f232:	b29a      	uxth	r2, r3
 800f234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f236:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f23c:	1c9a      	adds	r2, r3, #2
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f248:	b29b      	uxth	r3, r3
 800f24a:	3b01      	subs	r3, #1
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d178      	bne.n	800f352 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f268:	e853 3f00 	ldrex	r3, [r3]
 800f26c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f274:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	461a      	mov	r2, r3
 800f27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f27e:	643b      	str	r3, [r7, #64]	; 0x40
 800f280:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f286:	e841 2300 	strex	r3, r2, [r1]
 800f28a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1e6      	bne.n	800f260 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	3308      	adds	r3, #8
 800f298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29a:	6a3b      	ldr	r3, [r7, #32]
 800f29c:	e853 3f00 	ldrex	r3, [r3]
 800f2a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	f023 0301 	bic.w	r3, r3, #1
 800f2a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3308      	adds	r3, #8
 800f2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2ba:	e841 2300 	strex	r3, r2, [r1]
 800f2be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1e5      	bne.n	800f292 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2220      	movs	r2, #32
 800f2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d12e      	bne.n	800f33a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	e853 3f00 	ldrex	r3, [r3]
 800f2ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	f023 0310 	bic.w	r3, r3, #16
 800f2f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f300:	61bb      	str	r3, [r7, #24]
 800f302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f304:	6979      	ldr	r1, [r7, #20]
 800f306:	69ba      	ldr	r2, [r7, #24]
 800f308:	e841 2300 	strex	r3, r2, [r1]
 800f30c:	613b      	str	r3, [r7, #16]
   return(result);
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d1e6      	bne.n	800f2e2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	f003 0310 	and.w	r3, r3, #16
 800f31e:	2b10      	cmp	r3, #16
 800f320:	d103      	bne.n	800f32a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2210      	movs	r2, #16
 800f328:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7fe fdb6 	bl	800dea4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f338:	e00b      	b.n	800f352 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7f1 fd4a 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 800f340:	e007      	b.n	800f352 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	699a      	ldr	r2, [r3, #24]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f042 0208 	orr.w	r2, r2, #8
 800f350:	619a      	str	r2, [r3, #24]
}
 800f352:	bf00      	nop
 800f354:	3758      	adds	r7, #88	; 0x58
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
	...

0800f35c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b0a6      	sub	sp, #152	; 0x98
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f36a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	69db      	ldr	r3, [r3, #28]
 800f374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f392:	2b22      	cmp	r3, #34	; 0x22
 800f394:	f040 814d 	bne.w	800f632 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f39e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3a2:	e0f4      	b.n	800f58e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f3ae:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f3b2:	b2d9      	uxtb	r1, r3
 800f3b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f3b8:	b2da      	uxtb	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3be:	400a      	ands	r2, r1
 800f3c0:	b2d2      	uxtb	r2, r2
 800f3c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	69db      	ldr	r3, [r3, #28]
 800f3e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ee:	f003 0307 	and.w	r3, r3, #7
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d053      	beq.n	800f49e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3fa:	f003 0301 	and.w	r3, r3, #1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d011      	beq.n	800f426 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00b      	beq.n	800f426 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2201      	movs	r2, #1
 800f414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f41c:	f043 0201 	orr.w	r2, r3, #1
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d011      	beq.n	800f456 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00b      	beq.n	800f456 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2202      	movs	r2, #2
 800f444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f44c:	f043 0204 	orr.w	r2, r3, #4
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f456:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f45a:	f003 0304 	and.w	r3, r3, #4
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d011      	beq.n	800f486 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f462:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00b      	beq.n	800f486 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2204      	movs	r2, #4
 800f474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f47c:	f043 0202 	orr.w	r2, r3, #2
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d006      	beq.n	800f49e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7fe fcfd 	bl	800de90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d171      	bne.n	800f58e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4b2:	e853 3f00 	ldrex	r3, [r3]
 800f4b6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4ce:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f4d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4d4:	e841 2300 	strex	r3, r2, [r1]
 800f4d8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f4da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1e4      	bne.n	800f4aa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4ea:	e853 3f00 	ldrex	r3, [r3]
 800f4ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f4f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4f2:	4b56      	ldr	r3, [pc, #344]	; (800f64c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f500:	657a      	str	r2, [r7, #84]	; 0x54
 800f502:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f504:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f508:	e841 2300 	strex	r3, r2, [r1]
 800f50c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1e5      	bne.n	800f4e0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2220      	movs	r2, #32
 800f518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f526:	2b01      	cmp	r3, #1
 800f528:	d12e      	bne.n	800f588 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f538:	e853 3f00 	ldrex	r3, [r3]
 800f53c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	f023 0310 	bic.w	r3, r3, #16
 800f544:	67bb      	str	r3, [r7, #120]	; 0x78
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f54e:	643b      	str	r3, [r7, #64]	; 0x40
 800f550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f556:	e841 2300 	strex	r3, r2, [r1]
 800f55a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1e6      	bne.n	800f530 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	69db      	ldr	r3, [r3, #28]
 800f568:	f003 0310 	and.w	r3, r3, #16
 800f56c:	2b10      	cmp	r3, #16
 800f56e:	d103      	bne.n	800f578 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2210      	movs	r2, #16
 800f576:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f57e:	4619      	mov	r1, r3
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7fe fc8f 	bl	800dea4 <HAL_UARTEx_RxEventCallback>
 800f586:	e002      	b.n	800f58e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7f1 fc23 	bl	8000dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f58e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f592:	2b00      	cmp	r3, #0
 800f594:	d006      	beq.n	800f5a4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f59a:	f003 0320 	and.w	r3, r3, #32
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f47f af00 	bne.w	800f3a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f5ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d045      	beq.n	800f642 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d23e      	bcs.n	800f642 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5cc:	6a3b      	ldr	r3, [r7, #32]
 800f5ce:	e853 3f00 	ldrex	r3, [r3]
 800f5d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5da:	673b      	str	r3, [r7, #112]	; 0x70
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f5e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ec:	e841 2300 	strex	r3, r2, [r1]
 800f5f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1e5      	bne.n	800f5c4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a15      	ldr	r2, [pc, #84]	; (800f650 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f5fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	e853 3f00 	ldrex	r3, [r3]
 800f60a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	f043 0320 	orr.w	r3, r3, #32
 800f612:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	461a      	mov	r2, r3
 800f61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f61c:	61bb      	str	r3, [r7, #24]
 800f61e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f620:	6979      	ldr	r1, [r7, #20]
 800f622:	69ba      	ldr	r2, [r7, #24]
 800f624:	e841 2300 	strex	r3, r2, [r1]
 800f628:	613b      	str	r3, [r7, #16]
   return(result);
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1e6      	bne.n	800f5fe <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f630:	e007      	b.n	800f642 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	699a      	ldr	r2, [r3, #24]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f042 0208 	orr.w	r2, r2, #8
 800f640:	619a      	str	r2, [r3, #24]
}
 800f642:	bf00      	nop
 800f644:	3798      	adds	r7, #152	; 0x98
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	effffffe 	.word	0xeffffffe
 800f650:	0800f09b 	.word	0x0800f09b

0800f654 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b0a8      	sub	sp, #160	; 0xa0
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f662:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f68a:	2b22      	cmp	r3, #34	; 0x22
 800f68c:	f040 8151 	bne.w	800f932 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f696:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f69a:	e0f8      	b.n	800f88e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f6ae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f6b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6c4:	1c9a      	adds	r2, r3, #2
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	3b01      	subs	r3, #1
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	69db      	ldr	r3, [r3, #28]
 800f6e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f6e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6ea:	f003 0307 	and.w	r3, r3, #7
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d053      	beq.n	800f79a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d011      	beq.n	800f722 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f6fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00b      	beq.n	800f722 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2201      	movs	r2, #1
 800f710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f718:	f043 0201 	orr.w	r2, r3, #1
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f722:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d011      	beq.n	800f752 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f72e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00b      	beq.n	800f752 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2202      	movs	r2, #2
 800f740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f748:	f043 0204 	orr.w	r2, r3, #4
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f756:	f003 0304 	and.w	r3, r3, #4
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d011      	beq.n	800f782 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f75e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00b      	beq.n	800f782 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2204      	movs	r2, #4
 800f770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f778:	f043 0202 	orr.w	r2, r3, #2
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d006      	beq.n	800f79a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f7fe fb7f 	bl	800de90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d173      	bne.n	800f88e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7ae:	e853 3f00 	ldrex	r3, [r3]
 800f7b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7ca:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7d0:	e841 2300 	strex	r3, r2, [r1]
 800f7d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1e4      	bne.n	800f7a6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e6:	e853 3f00 	ldrex	r3, [r3]
 800f7ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7ee:	4b57      	ldr	r3, [pc, #348]	; (800f94c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f7f0:	4013      	ands	r3, r2
 800f7f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3308      	adds	r3, #8
 800f7fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f800:	65ba      	str	r2, [r7, #88]	; 0x58
 800f802:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f808:	e841 2300 	strex	r3, r2, [r1]
 800f80c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f810:	2b00      	cmp	r3, #0
 800f812:	d1e3      	bne.n	800f7dc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2220      	movs	r2, #32
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f826:	2b01      	cmp	r3, #1
 800f828:	d12e      	bne.n	800f888 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2200      	movs	r2, #0
 800f82e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	e853 3f00 	ldrex	r3, [r3]
 800f83c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f840:	f023 0310 	bic.w	r3, r3, #16
 800f844:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	461a      	mov	r2, r3
 800f84c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f84e:	647b      	str	r3, [r7, #68]	; 0x44
 800f850:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f856:	e841 2300 	strex	r3, r2, [r1]
 800f85a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1e6      	bne.n	800f830 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	69db      	ldr	r3, [r3, #28]
 800f868:	f003 0310 	and.w	r3, r3, #16
 800f86c:	2b10      	cmp	r3, #16
 800f86e:	d103      	bne.n	800f878 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2210      	movs	r2, #16
 800f876:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7fe fb0f 	bl	800dea4 <HAL_UARTEx_RxEventCallback>
 800f886:	e002      	b.n	800f88e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f7f1 faa3 	bl	8000dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f88e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f892:	2b00      	cmp	r3, #0
 800f894:	d006      	beq.n	800f8a4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f89a:	f003 0320 	and.w	r3, r3, #32
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f47f aefc 	bne.w	800f69c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f8ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d045      	beq.n	800f942 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d23e      	bcs.n	800f942 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	3308      	adds	r3, #8
 800f8ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ce:	e853 3f00 	ldrex	r3, [r3]
 800f8d2:	623b      	str	r3, [r7, #32]
   return(result);
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f8da:	677b      	str	r3, [r7, #116]	; 0x74
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f8e4:	633a      	str	r2, [r7, #48]	; 0x30
 800f8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ec:	e841 2300 	strex	r3, r2, [r1]
 800f8f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1e5      	bne.n	800f8c4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a15      	ldr	r2, [pc, #84]	; (800f950 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f8fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	e853 3f00 	ldrex	r3, [r3]
 800f90a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f043 0320 	orr.w	r3, r3, #32
 800f912:	673b      	str	r3, [r7, #112]	; 0x70
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f91c:	61fb      	str	r3, [r7, #28]
 800f91e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f920:	69b9      	ldr	r1, [r7, #24]
 800f922:	69fa      	ldr	r2, [r7, #28]
 800f924:	e841 2300 	strex	r3, r2, [r1]
 800f928:	617b      	str	r3, [r7, #20]
   return(result);
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e6      	bne.n	800f8fe <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f930:	e007      	b.n	800f942 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	699a      	ldr	r2, [r3, #24]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f042 0208 	orr.w	r2, r2, #8
 800f940:	619a      	str	r2, [r3, #24]
}
 800f942:	bf00      	nop
 800f944:	37a0      	adds	r7, #160	; 0xa0
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	effffffe 	.word	0xeffffffe
 800f950:	0800f1fb 	.word	0x0800f1fb

0800f954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d101      	bne.n	800f9a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f9a2:	2302      	movs	r3, #2
 800f9a4:	e027      	b.n	800f9f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2224      	movs	r2, #36	; 0x24
 800f9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f022 0201 	bic.w	r2, r2, #1
 800f9cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f9d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2220      	movs	r2, #32
 800f9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3714      	adds	r7, #20
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr

0800fa02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa02:	b580      	push	{r7, lr}
 800fa04:	b084      	sub	sp, #16
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
 800fa0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d101      	bne.n	800fa1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa16:	2302      	movs	r3, #2
 800fa18:	e02d      	b.n	800fa76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2224      	movs	r2, #36	; 0x24
 800fa26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f022 0201 	bic.w	r2, r2, #1
 800fa40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	683a      	ldr	r2, [r7, #0]
 800fa52:	430a      	orrs	r2, r1
 800fa54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 f850 	bl	800fafc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2220      	movs	r2, #32
 800fa68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b084      	sub	sp, #16
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d101      	bne.n	800fa96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa92:	2302      	movs	r3, #2
 800fa94:	e02d      	b.n	800faf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2224      	movs	r2, #36	; 0x24
 800faa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f022 0201 	bic.w	r2, r2, #1
 800fabc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	683a      	ldr	r2, [r7, #0]
 800face:	430a      	orrs	r2, r1
 800fad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f812 	bl	800fafc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2220      	movs	r2, #32
 800fae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
	...

0800fafc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d108      	bne.n	800fb1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb1c:	e031      	b.n	800fb82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb1e:	2310      	movs	r3, #16
 800fb20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb22:	2310      	movs	r3, #16
 800fb24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	0e5b      	lsrs	r3, r3, #25
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	f003 0307 	and.w	r3, r3, #7
 800fb34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	0f5b      	lsrs	r3, r3, #29
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	f003 0307 	and.w	r3, r3, #7
 800fb44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb46:	7bbb      	ldrb	r3, [r7, #14]
 800fb48:	7b3a      	ldrb	r2, [r7, #12]
 800fb4a:	4911      	ldr	r1, [pc, #68]	; (800fb90 <UARTEx_SetNbDataToProcess+0x94>)
 800fb4c:	5c8a      	ldrb	r2, [r1, r2]
 800fb4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb52:	7b3a      	ldrb	r2, [r7, #12]
 800fb54:	490f      	ldr	r1, [pc, #60]	; (800fb94 <UARTEx_SetNbDataToProcess+0x98>)
 800fb56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb58:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	7b7a      	ldrb	r2, [r7, #13]
 800fb68:	4909      	ldr	r1, [pc, #36]	; (800fb90 <UARTEx_SetNbDataToProcess+0x94>)
 800fb6a:	5c8a      	ldrb	r2, [r1, r2]
 800fb6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb70:	7b7a      	ldrb	r2, [r7, #13]
 800fb72:	4908      	ldr	r1, [pc, #32]	; (800fb94 <UARTEx_SetNbDataToProcess+0x98>)
 800fb74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb76:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb7a:	b29a      	uxth	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fb82:	bf00      	nop
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	0800fe94 	.word	0x0800fe94
 800fb94:	0800fe9c 	.word	0x0800fe9c

0800fb98 <__errno>:
 800fb98:	4b01      	ldr	r3, [pc, #4]	; (800fba0 <__errno+0x8>)
 800fb9a:	6818      	ldr	r0, [r3, #0]
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	24000040 	.word	0x24000040

0800fba4 <__libc_init_array>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	4d0d      	ldr	r5, [pc, #52]	; (800fbdc <__libc_init_array+0x38>)
 800fba8:	4c0d      	ldr	r4, [pc, #52]	; (800fbe0 <__libc_init_array+0x3c>)
 800fbaa:	1b64      	subs	r4, r4, r5
 800fbac:	10a4      	asrs	r4, r4, #2
 800fbae:	2600      	movs	r6, #0
 800fbb0:	42a6      	cmp	r6, r4
 800fbb2:	d109      	bne.n	800fbc8 <__libc_init_array+0x24>
 800fbb4:	4d0b      	ldr	r5, [pc, #44]	; (800fbe4 <__libc_init_array+0x40>)
 800fbb6:	4c0c      	ldr	r4, [pc, #48]	; (800fbe8 <__libc_init_array+0x44>)
 800fbb8:	f000 f93c 	bl	800fe34 <_init>
 800fbbc:	1b64      	subs	r4, r4, r5
 800fbbe:	10a4      	asrs	r4, r4, #2
 800fbc0:	2600      	movs	r6, #0
 800fbc2:	42a6      	cmp	r6, r4
 800fbc4:	d105      	bne.n	800fbd2 <__libc_init_array+0x2e>
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
 800fbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbcc:	4798      	blx	r3
 800fbce:	3601      	adds	r6, #1
 800fbd0:	e7ee      	b.n	800fbb0 <__libc_init_array+0xc>
 800fbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbd6:	4798      	blx	r3
 800fbd8:	3601      	adds	r6, #1
 800fbda:	e7f2      	b.n	800fbc2 <__libc_init_array+0x1e>
 800fbdc:	0800feac 	.word	0x0800feac
 800fbe0:	0800feac 	.word	0x0800feac
 800fbe4:	0800feac 	.word	0x0800feac
 800fbe8:	0800feb0 	.word	0x0800feb0

0800fbec <malloc>:
 800fbec:	4b02      	ldr	r3, [pc, #8]	; (800fbf8 <malloc+0xc>)
 800fbee:	4601      	mov	r1, r0
 800fbf0:	6818      	ldr	r0, [r3, #0]
 800fbf2:	f000 b88d 	b.w	800fd10 <_malloc_r>
 800fbf6:	bf00      	nop
 800fbf8:	24000040 	.word	0x24000040

0800fbfc <free>:
 800fbfc:	4b02      	ldr	r3, [pc, #8]	; (800fc08 <free+0xc>)
 800fbfe:	4601      	mov	r1, r0
 800fc00:	6818      	ldr	r0, [r3, #0]
 800fc02:	f000 b819 	b.w	800fc38 <_free_r>
 800fc06:	bf00      	nop
 800fc08:	24000040 	.word	0x24000040

0800fc0c <memcpy>:
 800fc0c:	440a      	add	r2, r1
 800fc0e:	4291      	cmp	r1, r2
 800fc10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc14:	d100      	bne.n	800fc18 <memcpy+0xc>
 800fc16:	4770      	bx	lr
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc22:	4291      	cmp	r1, r2
 800fc24:	d1f9      	bne.n	800fc1a <memcpy+0xe>
 800fc26:	bd10      	pop	{r4, pc}

0800fc28 <memset>:
 800fc28:	4402      	add	r2, r0
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d100      	bne.n	800fc32 <memset+0xa>
 800fc30:	4770      	bx	lr
 800fc32:	f803 1b01 	strb.w	r1, [r3], #1
 800fc36:	e7f9      	b.n	800fc2c <memset+0x4>

0800fc38 <_free_r>:
 800fc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc3a:	2900      	cmp	r1, #0
 800fc3c:	d044      	beq.n	800fcc8 <_free_r+0x90>
 800fc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc42:	9001      	str	r0, [sp, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f1a1 0404 	sub.w	r4, r1, #4
 800fc4a:	bfb8      	it	lt
 800fc4c:	18e4      	addlt	r4, r4, r3
 800fc4e:	f000 f8e3 	bl	800fe18 <__malloc_lock>
 800fc52:	4a1e      	ldr	r2, [pc, #120]	; (800fccc <_free_r+0x94>)
 800fc54:	9801      	ldr	r0, [sp, #4]
 800fc56:	6813      	ldr	r3, [r2, #0]
 800fc58:	b933      	cbnz	r3, 800fc68 <_free_r+0x30>
 800fc5a:	6063      	str	r3, [r4, #4]
 800fc5c:	6014      	str	r4, [r2, #0]
 800fc5e:	b003      	add	sp, #12
 800fc60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc64:	f000 b8de 	b.w	800fe24 <__malloc_unlock>
 800fc68:	42a3      	cmp	r3, r4
 800fc6a:	d908      	bls.n	800fc7e <_free_r+0x46>
 800fc6c:	6825      	ldr	r5, [r4, #0]
 800fc6e:	1961      	adds	r1, r4, r5
 800fc70:	428b      	cmp	r3, r1
 800fc72:	bf01      	itttt	eq
 800fc74:	6819      	ldreq	r1, [r3, #0]
 800fc76:	685b      	ldreq	r3, [r3, #4]
 800fc78:	1949      	addeq	r1, r1, r5
 800fc7a:	6021      	streq	r1, [r4, #0]
 800fc7c:	e7ed      	b.n	800fc5a <_free_r+0x22>
 800fc7e:	461a      	mov	r2, r3
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	b10b      	cbz	r3, 800fc88 <_free_r+0x50>
 800fc84:	42a3      	cmp	r3, r4
 800fc86:	d9fa      	bls.n	800fc7e <_free_r+0x46>
 800fc88:	6811      	ldr	r1, [r2, #0]
 800fc8a:	1855      	adds	r5, r2, r1
 800fc8c:	42a5      	cmp	r5, r4
 800fc8e:	d10b      	bne.n	800fca8 <_free_r+0x70>
 800fc90:	6824      	ldr	r4, [r4, #0]
 800fc92:	4421      	add	r1, r4
 800fc94:	1854      	adds	r4, r2, r1
 800fc96:	42a3      	cmp	r3, r4
 800fc98:	6011      	str	r1, [r2, #0]
 800fc9a:	d1e0      	bne.n	800fc5e <_free_r+0x26>
 800fc9c:	681c      	ldr	r4, [r3, #0]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	6053      	str	r3, [r2, #4]
 800fca2:	4421      	add	r1, r4
 800fca4:	6011      	str	r1, [r2, #0]
 800fca6:	e7da      	b.n	800fc5e <_free_r+0x26>
 800fca8:	d902      	bls.n	800fcb0 <_free_r+0x78>
 800fcaa:	230c      	movs	r3, #12
 800fcac:	6003      	str	r3, [r0, #0]
 800fcae:	e7d6      	b.n	800fc5e <_free_r+0x26>
 800fcb0:	6825      	ldr	r5, [r4, #0]
 800fcb2:	1961      	adds	r1, r4, r5
 800fcb4:	428b      	cmp	r3, r1
 800fcb6:	bf04      	itt	eq
 800fcb8:	6819      	ldreq	r1, [r3, #0]
 800fcba:	685b      	ldreq	r3, [r3, #4]
 800fcbc:	6063      	str	r3, [r4, #4]
 800fcbe:	bf04      	itt	eq
 800fcc0:	1949      	addeq	r1, r1, r5
 800fcc2:	6021      	streq	r1, [r4, #0]
 800fcc4:	6054      	str	r4, [r2, #4]
 800fcc6:	e7ca      	b.n	800fc5e <_free_r+0x26>
 800fcc8:	b003      	add	sp, #12
 800fcca:	bd30      	pop	{r4, r5, pc}
 800fccc:	240005ec 	.word	0x240005ec

0800fcd0 <sbrk_aligned>:
 800fcd0:	b570      	push	{r4, r5, r6, lr}
 800fcd2:	4e0e      	ldr	r6, [pc, #56]	; (800fd0c <sbrk_aligned+0x3c>)
 800fcd4:	460c      	mov	r4, r1
 800fcd6:	6831      	ldr	r1, [r6, #0]
 800fcd8:	4605      	mov	r5, r0
 800fcda:	b911      	cbnz	r1, 800fce2 <sbrk_aligned+0x12>
 800fcdc:	f000 f88c 	bl	800fdf8 <_sbrk_r>
 800fce0:	6030      	str	r0, [r6, #0]
 800fce2:	4621      	mov	r1, r4
 800fce4:	4628      	mov	r0, r5
 800fce6:	f000 f887 	bl	800fdf8 <_sbrk_r>
 800fcea:	1c43      	adds	r3, r0, #1
 800fcec:	d00a      	beq.n	800fd04 <sbrk_aligned+0x34>
 800fcee:	1cc4      	adds	r4, r0, #3
 800fcf0:	f024 0403 	bic.w	r4, r4, #3
 800fcf4:	42a0      	cmp	r0, r4
 800fcf6:	d007      	beq.n	800fd08 <sbrk_aligned+0x38>
 800fcf8:	1a21      	subs	r1, r4, r0
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	f000 f87c 	bl	800fdf8 <_sbrk_r>
 800fd00:	3001      	adds	r0, #1
 800fd02:	d101      	bne.n	800fd08 <sbrk_aligned+0x38>
 800fd04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd08:	4620      	mov	r0, r4
 800fd0a:	bd70      	pop	{r4, r5, r6, pc}
 800fd0c:	240005f0 	.word	0x240005f0

0800fd10 <_malloc_r>:
 800fd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd14:	1ccd      	adds	r5, r1, #3
 800fd16:	f025 0503 	bic.w	r5, r5, #3
 800fd1a:	3508      	adds	r5, #8
 800fd1c:	2d0c      	cmp	r5, #12
 800fd1e:	bf38      	it	cc
 800fd20:	250c      	movcc	r5, #12
 800fd22:	2d00      	cmp	r5, #0
 800fd24:	4607      	mov	r7, r0
 800fd26:	db01      	blt.n	800fd2c <_malloc_r+0x1c>
 800fd28:	42a9      	cmp	r1, r5
 800fd2a:	d905      	bls.n	800fd38 <_malloc_r+0x28>
 800fd2c:	230c      	movs	r3, #12
 800fd2e:	603b      	str	r3, [r7, #0]
 800fd30:	2600      	movs	r6, #0
 800fd32:	4630      	mov	r0, r6
 800fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd38:	4e2e      	ldr	r6, [pc, #184]	; (800fdf4 <_malloc_r+0xe4>)
 800fd3a:	f000 f86d 	bl	800fe18 <__malloc_lock>
 800fd3e:	6833      	ldr	r3, [r6, #0]
 800fd40:	461c      	mov	r4, r3
 800fd42:	bb34      	cbnz	r4, 800fd92 <_malloc_r+0x82>
 800fd44:	4629      	mov	r1, r5
 800fd46:	4638      	mov	r0, r7
 800fd48:	f7ff ffc2 	bl	800fcd0 <sbrk_aligned>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	4604      	mov	r4, r0
 800fd50:	d14d      	bne.n	800fdee <_malloc_r+0xde>
 800fd52:	6834      	ldr	r4, [r6, #0]
 800fd54:	4626      	mov	r6, r4
 800fd56:	2e00      	cmp	r6, #0
 800fd58:	d140      	bne.n	800fddc <_malloc_r+0xcc>
 800fd5a:	6823      	ldr	r3, [r4, #0]
 800fd5c:	4631      	mov	r1, r6
 800fd5e:	4638      	mov	r0, r7
 800fd60:	eb04 0803 	add.w	r8, r4, r3
 800fd64:	f000 f848 	bl	800fdf8 <_sbrk_r>
 800fd68:	4580      	cmp	r8, r0
 800fd6a:	d13a      	bne.n	800fde2 <_malloc_r+0xd2>
 800fd6c:	6821      	ldr	r1, [r4, #0]
 800fd6e:	3503      	adds	r5, #3
 800fd70:	1a6d      	subs	r5, r5, r1
 800fd72:	f025 0503 	bic.w	r5, r5, #3
 800fd76:	3508      	adds	r5, #8
 800fd78:	2d0c      	cmp	r5, #12
 800fd7a:	bf38      	it	cc
 800fd7c:	250c      	movcc	r5, #12
 800fd7e:	4629      	mov	r1, r5
 800fd80:	4638      	mov	r0, r7
 800fd82:	f7ff ffa5 	bl	800fcd0 <sbrk_aligned>
 800fd86:	3001      	adds	r0, #1
 800fd88:	d02b      	beq.n	800fde2 <_malloc_r+0xd2>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	442b      	add	r3, r5
 800fd8e:	6023      	str	r3, [r4, #0]
 800fd90:	e00e      	b.n	800fdb0 <_malloc_r+0xa0>
 800fd92:	6822      	ldr	r2, [r4, #0]
 800fd94:	1b52      	subs	r2, r2, r5
 800fd96:	d41e      	bmi.n	800fdd6 <_malloc_r+0xc6>
 800fd98:	2a0b      	cmp	r2, #11
 800fd9a:	d916      	bls.n	800fdca <_malloc_r+0xba>
 800fd9c:	1961      	adds	r1, r4, r5
 800fd9e:	42a3      	cmp	r3, r4
 800fda0:	6025      	str	r5, [r4, #0]
 800fda2:	bf18      	it	ne
 800fda4:	6059      	strne	r1, [r3, #4]
 800fda6:	6863      	ldr	r3, [r4, #4]
 800fda8:	bf08      	it	eq
 800fdaa:	6031      	streq	r1, [r6, #0]
 800fdac:	5162      	str	r2, [r4, r5]
 800fdae:	604b      	str	r3, [r1, #4]
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f104 060b 	add.w	r6, r4, #11
 800fdb6:	f000 f835 	bl	800fe24 <__malloc_unlock>
 800fdba:	f026 0607 	bic.w	r6, r6, #7
 800fdbe:	1d23      	adds	r3, r4, #4
 800fdc0:	1af2      	subs	r2, r6, r3
 800fdc2:	d0b6      	beq.n	800fd32 <_malloc_r+0x22>
 800fdc4:	1b9b      	subs	r3, r3, r6
 800fdc6:	50a3      	str	r3, [r4, r2]
 800fdc8:	e7b3      	b.n	800fd32 <_malloc_r+0x22>
 800fdca:	6862      	ldr	r2, [r4, #4]
 800fdcc:	42a3      	cmp	r3, r4
 800fdce:	bf0c      	ite	eq
 800fdd0:	6032      	streq	r2, [r6, #0]
 800fdd2:	605a      	strne	r2, [r3, #4]
 800fdd4:	e7ec      	b.n	800fdb0 <_malloc_r+0xa0>
 800fdd6:	4623      	mov	r3, r4
 800fdd8:	6864      	ldr	r4, [r4, #4]
 800fdda:	e7b2      	b.n	800fd42 <_malloc_r+0x32>
 800fddc:	4634      	mov	r4, r6
 800fdde:	6876      	ldr	r6, [r6, #4]
 800fde0:	e7b9      	b.n	800fd56 <_malloc_r+0x46>
 800fde2:	230c      	movs	r3, #12
 800fde4:	603b      	str	r3, [r7, #0]
 800fde6:	4638      	mov	r0, r7
 800fde8:	f000 f81c 	bl	800fe24 <__malloc_unlock>
 800fdec:	e7a1      	b.n	800fd32 <_malloc_r+0x22>
 800fdee:	6025      	str	r5, [r4, #0]
 800fdf0:	e7de      	b.n	800fdb0 <_malloc_r+0xa0>
 800fdf2:	bf00      	nop
 800fdf4:	240005ec 	.word	0x240005ec

0800fdf8 <_sbrk_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d06      	ldr	r5, [pc, #24]	; (800fe14 <_sbrk_r+0x1c>)
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4608      	mov	r0, r1
 800fe02:	602b      	str	r3, [r5, #0]
 800fe04:	f7f2 fbf4 	bl	80025f0 <_sbrk>
 800fe08:	1c43      	adds	r3, r0, #1
 800fe0a:	d102      	bne.n	800fe12 <_sbrk_r+0x1a>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	b103      	cbz	r3, 800fe12 <_sbrk_r+0x1a>
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	bd38      	pop	{r3, r4, r5, pc}
 800fe14:	240005f4 	.word	0x240005f4

0800fe18 <__malloc_lock>:
 800fe18:	4801      	ldr	r0, [pc, #4]	; (800fe20 <__malloc_lock+0x8>)
 800fe1a:	f000 b809 	b.w	800fe30 <__retarget_lock_acquire_recursive>
 800fe1e:	bf00      	nop
 800fe20:	240005f8 	.word	0x240005f8

0800fe24 <__malloc_unlock>:
 800fe24:	4801      	ldr	r0, [pc, #4]	; (800fe2c <__malloc_unlock+0x8>)
 800fe26:	f000 b804 	b.w	800fe32 <__retarget_lock_release_recursive>
 800fe2a:	bf00      	nop
 800fe2c:	240005f8 	.word	0x240005f8

0800fe30 <__retarget_lock_acquire_recursive>:
 800fe30:	4770      	bx	lr

0800fe32 <__retarget_lock_release_recursive>:
 800fe32:	4770      	bx	lr

0800fe34 <_init>:
 800fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe36:	bf00      	nop
 800fe38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe3a:	bc08      	pop	{r3}
 800fe3c:	469e      	mov	lr, r3
 800fe3e:	4770      	bx	lr

0800fe40 <_fini>:
 800fe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe42:	bf00      	nop
 800fe44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe46:	bc08      	pop	{r3}
 800fe48:	469e      	mov	lr, r3
 800fe4a:	4770      	bx	lr
